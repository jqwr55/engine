
../bin/core:     file format elf64-x86-64


Disassembly of section .init:

0000000000004000 <_init>:
    4000:	f3 0f 1e fa          	endbr64 
    4004:	48 83 ec 08          	sub    rsp,0x8
    4008:	48 8b 05 d9 6f 04 00 	mov    rax,QWORD PTR [rip+0x46fd9]        # 4afe8 <__gmon_start__>
    400f:	48 85 c0             	test   rax,rax
    4012:	74 02                	je     4016 <_init+0x16>
    4014:	ff d0                	call   rax
    4016:	48 83 c4 08          	add    rsp,0x8
    401a:	c3                   	ret    

Disassembly of section .plt:

0000000000004020 <.plt>:
    4020:	ff 35 e2 6f 04 00    	push   QWORD PTR [rip+0x46fe2]        # 4b008 <_GLOBAL_OFFSET_TABLE_+0x8>
    4026:	ff 25 e4 6f 04 00    	jmp    QWORD PTR [rip+0x46fe4]        # 4b010 <_GLOBAL_OFFSET_TABLE_+0x10>
    402c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004030 <ftell@plt>:
    4030:	ff 25 e2 6f 04 00    	jmp    QWORD PTR [rip+0x46fe2]        # 4b018 <ftell@GLIBC_2.2.5>
    4036:	68 00 00 00 00       	push   0x0
    403b:	e9 e0 ff ff ff       	jmp    4020 <.plt>

0000000000004040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@plt>:
    4040:	ff 25 da 6f 04 00    	jmp    QWORD PTR [rip+0x46fda]        # 4b020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@GLIBCXX_3.4.21>
    4046:	68 01 00 00 00       	push   0x1
    404b:	e9 d0 ff ff ff       	jmp    4020 <.plt>

0000000000004050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    4050:	ff 25 d2 6f 04 00    	jmp    QWORD PTR [rip+0x46fd2]        # 4b028 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    4056:	68 02 00 00 00       	push   0x2
    405b:	e9 c0 ff ff ff       	jmp    4020 <.plt>

0000000000004060 <__errno_location@plt>:
    4060:	ff 25 ca 6f 04 00    	jmp    QWORD PTR [rip+0x46fca]        # 4b030 <__errno_location@GLIBC_2.2.5>
    4066:	68 03 00 00 00       	push   0x3
    406b:	e9 b0 ff ff ff       	jmp    4020 <.plt>

0000000000004070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)@plt>:
    4070:	ff 25 c2 6f 04 00    	jmp    QWORD PTR [rip+0x46fc2]        # 4b038 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)@GLIBCXX_3.4.21>
    4076:	68 04 00 00 00       	push   0x4
    407b:	e9 a0 ff ff ff       	jmp    4020 <.plt>

0000000000004080 <std::allocator<char>::~allocator()@plt>:
    4080:	ff 25 ba 6f 04 00    	jmp    QWORD PTR [rip+0x46fba]        # 4b040 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
    4086:	68 05 00 00 00       	push   0x5
    408b:	e9 90 ff ff ff       	jmp    4020 <.plt>

0000000000004090 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>:
    4090:	ff 25 b2 6f 04 00    	jmp    QWORD PTR [rip+0x46fb2]        # 4b048 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@GLIBCXX_3.4.21>
    4096:	68 06 00 00 00       	push   0x6
    409b:	e9 80 ff ff ff       	jmp    4020 <.plt>

00000000000040a0 <std::basic_ifstream<char, std::char_traits<char> >::close()@plt>:
    40a0:	ff 25 aa 6f 04 00    	jmp    QWORD PTR [rip+0x46faa]        # 4b050 <std::basic_ifstream<char, std::char_traits<char> >::close()@GLIBCXX_3.4>
    40a6:	68 07 00 00 00       	push   0x7
    40ab:	e9 70 ff ff ff       	jmp    4020 <.plt>

00000000000040b0 <std::ostream::operator<<(unsigned long)@plt>:
    40b0:	ff 25 a2 6f 04 00    	jmp    QWORD PTR [rip+0x46fa2]        # 4b058 <std::ostream::operator<<(unsigned long)@GLIBCXX_3.4>
    40b6:	68 08 00 00 00       	push   0x8
    40bb:	e9 60 ff ff ff       	jmp    4020 <.plt>

00000000000040c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>:
    40c0:	ff 25 9a 6f 04 00    	jmp    QWORD PTR [rip+0x46f9a]        # 4b060 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@GLIBCXX_3.4>
    40c6:	68 09 00 00 00       	push   0x9
    40cb:	e9 50 ff ff ff       	jmp    4020 <.plt>

00000000000040d0 <std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const@plt>:
    40d0:	ff 25 92 6f 04 00    	jmp    QWORD PTR [rip+0x46f92]        # 4b068 <std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const@GLIBCXX_3.4.26>
    40d6:	68 0a 00 00 00       	push   0xa
    40db:	e9 40 ff ff ff       	jmp    4020 <.plt>

00000000000040e0 <std::filesystem::__cxx11::path::_List::_List()@plt>:
    40e0:	ff 25 8a 6f 04 00    	jmp    QWORD PTR [rip+0x46f8a]        # 4b070 <std::filesystem::__cxx11::path::_List::_List()@GLIBCXX_3.4.26>
    40e6:	68 0b 00 00 00       	push   0xb
    40eb:	e9 30 ff ff ff       	jmp    4020 <.plt>

00000000000040f0 <snd_pcm_hw_params_set_access@plt>:
    40f0:	ff 25 82 6f 04 00    	jmp    QWORD PTR [rip+0x46f82]        # 4b078 <snd_pcm_hw_params_set_access@ALSA_0.9>
    40f6:	68 0c 00 00 00       	push   0xc
    40fb:	e9 20 ff ff ff       	jmp    4020 <.plt>

0000000000004100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
    4100:	ff 25 7a 6f 04 00    	jmp    QWORD PTR [rip+0x46f7a]        # 4b080 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
    4106:	68 0d 00 00 00       	push   0xd
    410b:	e9 10 ff ff ff       	jmp    4020 <.plt>

0000000000004110 <std::__throw_bad_alloc()@plt>:
    4110:	ff 25 72 6f 04 00    	jmp    QWORD PTR [rip+0x46f72]        # 4b088 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    4116:	68 0e 00 00 00       	push   0xe
    411b:	e9 00 ff ff ff       	jmp    4020 <.plt>

0000000000004120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const@plt>:
    4120:	ff 25 6a 6f 04 00    	jmp    QWORD PTR [rip+0x46f6a]        # 4b090 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const@GLIBCXX_3.4.21>
    4126:	68 0f 00 00 00       	push   0xf
    412b:	e9 f0 fe ff ff       	jmp    4020 <.plt>

0000000000004130 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)@plt>:
    4130:	ff 25 62 6f 04 00    	jmp    QWORD PTR [rip+0x46f62]        # 4b098 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)@GLIBCXX_3.4.26>
    4136:	68 10 00 00 00       	push   0x10
    413b:	e9 e0 fe ff ff       	jmp    4020 <.plt>

0000000000004140 <__cxa_begin_catch@plt>:
    4140:	ff 25 5a 6f 04 00    	jmp    QWORD PTR [rip+0x46f5a]        # 4b0a0 <__cxa_begin_catch@CXXABI_1.3>
    4146:	68 11 00 00 00       	push   0x11
    414b:	e9 d0 fe ff ff       	jmp    4020 <.plt>

0000000000004150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>:
    4150:	ff 25 52 6f 04 00    	jmp    QWORD PTR [rip+0x46f52]        # 4b0a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@GLIBCXX_3.4.21>
    4156:	68 12 00 00 00       	push   0x12
    415b:	e9 c0 fe ff ff       	jmp    4020 <.plt>

0000000000004160 <snd_pcm_hw_params_get_buffer_size@plt>:
    4160:	ff 25 4a 6f 04 00    	jmp    QWORD PTR [rip+0x46f4a]        # 4b0b0 <snd_pcm_hw_params_get_buffer_size@ALSA_0.9.0rc4>
    4166:	68 13 00 00 00       	push   0x13
    416b:	e9 b0 fe ff ff       	jmp    4020 <.plt>

0000000000004170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    4170:	ff 25 42 6f 04 00    	jmp    QWORD PTR [rip+0x46f42]        # 4b0b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    4176:	68 14 00 00 00       	push   0x14
    417b:	e9 a0 fe ff ff       	jmp    4020 <.plt>

0000000000004180 <strlen@plt>:
    4180:	ff 25 3a 6f 04 00    	jmp    QWORD PTR [rip+0x46f3a]        # 4b0c0 <strlen@GLIBC_2.2.5>
    4186:	68 15 00 00 00       	push   0x15
    418b:	e9 90 fe ff ff       	jmp    4020 <.plt>

0000000000004190 <memcmp@plt>:
    4190:	ff 25 32 6f 04 00    	jmp    QWORD PTR [rip+0x46f32]        # 4b0c8 <memcmp@GLIBC_2.2.5>
    4196:	68 16 00 00 00       	push   0x16
    419b:	e9 80 fe ff ff       	jmp    4020 <.plt>

00000000000041a0 <strncmp@plt>:
    41a0:	ff 25 2a 6f 04 00    	jmp    QWORD PTR [rip+0x46f2a]        # 4b0d0 <strncmp@GLIBC_2.2.5>
    41a6:	68 17 00 00 00       	push   0x17
    41ab:	e9 70 fe ff ff       	jmp    4020 <.plt>

00000000000041b0 <snd_pcm_hw_params_set_format@plt>:
    41b0:	ff 25 22 6f 04 00    	jmp    QWORD PTR [rip+0x46f22]        # 4b0d8 <snd_pcm_hw_params_set_format@ALSA_0.9>
    41b6:	68 18 00 00 00       	push   0x18
    41bb:	e9 60 fe ff ff       	jmp    4020 <.plt>

00000000000041c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@plt>:
    41c0:	ff 25 1a 6f 04 00    	jmp    QWORD PTR [rip+0x46f1a]        # 4b0e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@GLIBCXX_3.4.21>
    41c6:	68 19 00 00 00       	push   0x19
    41cb:	e9 50 fe ff ff       	jmp    4020 <.plt>

00000000000041d0 <std::__throw_length_error(char const*)@plt>:
    41d0:	ff 25 12 6f 04 00    	jmp    QWORD PTR [rip+0x46f12]        # 4b0e8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    41d6:	68 1a 00 00 00       	push   0x1a
    41db:	e9 40 fe ff ff       	jmp    4020 <.plt>

00000000000041e0 <memset@plt>:
    41e0:	ff 25 0a 6f 04 00    	jmp    QWORD PTR [rip+0x46f0a]        # 4b0f0 <memset@GLIBC_2.2.5>
    41e6:	68 1b 00 00 00       	push   0x1b
    41eb:	e9 30 fe ff ff       	jmp    4020 <.plt>

00000000000041f0 <dlerror@plt>:
    41f0:	ff 25 02 6f 04 00    	jmp    QWORD PTR [rip+0x46f02]        # 4b0f8 <dlerror@GLIBC_2.2.5>
    41f6:	68 1c 00 00 00       	push   0x1c
    41fb:	e9 20 fe ff ff       	jmp    4020 <.plt>

0000000000004200 <tan@plt>:
    4200:	ff 25 fa 6e 04 00    	jmp    QWORD PTR [rip+0x46efa]        # 4b100 <tan@GLIBC_2.2.5>
    4206:	68 1d 00 00 00       	push   0x1d
    420b:	e9 10 fe ff ff       	jmp    4020 <.plt>

0000000000004210 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>:
    4210:	ff 25 f2 6e 04 00    	jmp    QWORD PTR [rip+0x46ef2]        # 4b108 <std::allocator<char>::allocator(std::allocator<char> const&)@GLIBCXX_3.4>
    4216:	68 1e 00 00 00       	push   0x1e
    421b:	e9 00 fe ff ff       	jmp    4020 <.plt>

0000000000004220 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()@plt>:
    4220:	ff 25 ea 6e 04 00    	jmp    QWORD PTR [rip+0x46eea]        # 4b110 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()@GLIBCXX_3.4.26>
    4226:	68 1f 00 00 00       	push   0x1f
    422b:	e9 f0 fd ff ff       	jmp    4020 <.plt>

0000000000004230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>:
    4230:	ff 25 e2 6e 04 00    	jmp    QWORD PTR [rip+0x46ee2]        # 4b118 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@GLIBCXX_3.4.21>
    4236:	68 20 00 00 00       	push   0x20
    423b:	e9 e0 fd ff ff       	jmp    4020 <.plt>

0000000000004240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
    4240:	ff 25 da 6e 04 00    	jmp    QWORD PTR [rip+0x46eda]        # 4b120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
    4246:	68 21 00 00 00       	push   0x21
    424b:	e9 d0 fd ff ff       	jmp    4020 <.plt>

0000000000004250 <std::__throw_invalid_argument(char const*)@plt>:
    4250:	ff 25 d2 6e 04 00    	jmp    QWORD PTR [rip+0x46ed2]        # 4b128 <std::__throw_invalid_argument(char const*)@GLIBCXX_3.4>
    4256:	68 22 00 00 00       	push   0x22
    425b:	e9 c0 fd ff ff       	jmp    4020 <.plt>

0000000000004260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
    4260:	ff 25 ca 6e 04 00    	jmp    QWORD PTR [rip+0x46eca]        # 4b130 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    4266:	68 23 00 00 00       	push   0x23
    426b:	e9 b0 fd ff ff       	jmp    4020 <.plt>

0000000000004270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)@plt>:
    4270:	ff 25 c2 6e 04 00    	jmp    QWORD PTR [rip+0x46ec2]        # 4b138 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)@GLIBCXX_3.4.21>
    4276:	68 24 00 00 00       	push   0x24
    427b:	e9 a0 fd ff ff       	jmp    4020 <.plt>

0000000000004280 <__assert_fail@plt>:
    4280:	ff 25 ba 6e 04 00    	jmp    QWORD PTR [rip+0x46eba]        # 4b140 <__assert_fail@GLIBC_2.2.5>
    4286:	68 25 00 00 00       	push   0x25
    428b:	e9 90 fd ff ff       	jmp    4020 <.plt>

0000000000004290 <snd_pcm_open@plt>:
    4290:	ff 25 b2 6e 04 00    	jmp    QWORD PTR [rip+0x46eb2]        # 4b148 <snd_pcm_open@ALSA_0.9>
    4296:	68 26 00 00 00       	push   0x26
    429b:	e9 80 fd ff ff       	jmp    4020 <.plt>

00000000000042a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>:
    42a0:	ff 25 aa 6e 04 00    	jmp    QWORD PTR [rip+0x46eaa]        # 4b150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@GLIBCXX_3.4.21>
    42a6:	68 27 00 00 00       	push   0x27
    42ab:	e9 70 fd ff ff       	jmp    4020 <.plt>

00000000000042b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>:
    42b0:	ff 25 a2 6e 04 00    	jmp    QWORD PTR [rip+0x46ea2]        # 4b158 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@GLIBCXX_3.4.21>
    42b6:	68 28 00 00 00       	push   0x28
    42bb:	e9 60 fd ff ff       	jmp    4020 <.plt>

00000000000042c0 <std::__throw_logic_error(char const*)@plt>:
    42c0:	ff 25 9a 6e 04 00    	jmp    QWORD PTR [rip+0x46e9a]        # 4b160 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    42c6:	68 29 00 00 00       	push   0x29
    42cb:	e9 50 fd ff ff       	jmp    4020 <.plt>

00000000000042d0 <aligned_alloc@plt>:
    42d0:	ff 25 92 6e 04 00    	jmp    QWORD PTR [rip+0x46e92]        # 4b168 <aligned_alloc@GLIBC_2.16>
    42d6:	68 2a 00 00 00       	push   0x2a
    42db:	e9 40 fd ff ff       	jmp    4020 <.plt>

00000000000042e0 <cosf@plt>:
    42e0:	ff 25 8a 6e 04 00    	jmp    QWORD PTR [rip+0x46e8a]        # 4b170 <cosf@GLIBC_2.2.5>
    42e6:	68 2b 00 00 00       	push   0x2b
    42eb:	e9 30 fd ff ff       	jmp    4020 <.plt>

00000000000042f0 <dlclose@plt>:
    42f0:	ff 25 82 6e 04 00    	jmp    QWORD PTR [rip+0x46e82]        # 4b178 <dlclose@GLIBC_2.2.5>
    42f6:	68 2c 00 00 00       	push   0x2c
    42fb:	e9 20 fd ff ff       	jmp    4020 <.plt>

0000000000004300 <snd_strerror@plt>:
    4300:	ff 25 7a 6e 04 00    	jmp    QWORD PTR [rip+0x46e7a]        # 4b180 <snd_strerror@ALSA_0.9>
    4306:	68 2d 00 00 00       	push   0x2d
    430b:	e9 10 fd ff ff       	jmp    4020 <.plt>

0000000000004310 <std::filesystem::__cxx11::path::_M_split_cmpts()@plt>:
    4310:	ff 25 72 6e 04 00    	jmp    QWORD PTR [rip+0x46e72]        # 4b188 <std::filesystem::__cxx11::path::_M_split_cmpts()@GLIBCXX_3.4.26>
    4316:	68 2e 00 00 00       	push   0x2e
    431b:	e9 00 fd ff ff       	jmp    4020 <.plt>

0000000000004320 <snd_pcm_hw_params_set_period_size_near@plt>:
    4320:	ff 25 6a 6e 04 00    	jmp    QWORD PTR [rip+0x46e6a]        # 4b190 <snd_pcm_hw_params_set_period_size_near@ALSA_0.9.0rc4>
    4326:	68 2f 00 00 00       	push   0x2f
    432b:	e9 f0 fc ff ff       	jmp    4020 <.plt>

0000000000004330 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>:
    4330:	ff 25 62 6e 04 00    	jmp    QWORD PTR [rip+0x46e62]        # 4b198 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@GLIBCXX_3.4.21>
    4336:	68 30 00 00 00       	push   0x30
    433b:	e9 e0 fc ff ff       	jmp    4020 <.plt>

0000000000004340 <std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)@plt>:
    4340:	ff 25 5a 6e 04 00    	jmp    QWORD PTR [rip+0x46e5a]        # 4b1a0 <std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)@GLIBCXX_3.4.26>
    4346:	68 31 00 00 00       	push   0x31
    434b:	e9 d0 fc ff ff       	jmp    4020 <.plt>

0000000000004350 <memcpy@plt>:
    4350:	ff 25 52 6e 04 00    	jmp    QWORD PTR [rip+0x46e52]        # 4b1a8 <memcpy@GLIBC_2.14>
    4356:	68 32 00 00 00       	push   0x32
    435b:	e9 c0 fc ff ff       	jmp    4020 <.plt>

0000000000004360 <sinf@plt>:
    4360:	ff 25 4a 6e 04 00    	jmp    QWORD PTR [rip+0x46e4a]        # 4b1b0 <sinf@GLIBC_2.2.5>
    4366:	68 33 00 00 00       	push   0x33
    436b:	e9 b0 fc ff ff       	jmp    4020 <.plt>

0000000000004370 <snd_pcm_hw_params_get_period_size@plt>:
    4370:	ff 25 42 6e 04 00    	jmp    QWORD PTR [rip+0x46e42]        # 4b1b8 <snd_pcm_hw_params_get_period_size@ALSA_0.9.0rc4>
    4376:	68 34 00 00 00       	push   0x34
    437b:	e9 a0 fc ff ff       	jmp    4020 <.plt>

0000000000004380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>:
    4380:	ff 25 3a 6e 04 00    	jmp    QWORD PTR [rip+0x46e3a]        # 4b1c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@GLIBCXX_3.4.21>
    4386:	68 35 00 00 00       	push   0x35
    438b:	e9 90 fc ff ff       	jmp    4020 <.plt>

0000000000004390 <snd_pcm_writei@plt>:
    4390:	ff 25 32 6e 04 00    	jmp    QWORD PTR [rip+0x46e32]        # 4b1c8 <snd_pcm_writei@ALSA_0.9>
    4396:	68 36 00 00 00       	push   0x36
    439b:	e9 80 fc ff ff       	jmp    4020 <.plt>

00000000000043a0 <snd_pcm_hw_params@plt>:
    43a0:	ff 25 2a 6e 04 00    	jmp    QWORD PTR [rip+0x46e2a]        # 4b1d0 <snd_pcm_hw_params@ALSA_0.9>
    43a6:	68 37 00 00 00       	push   0x37
    43ab:	e9 70 fc ff ff       	jmp    4020 <.plt>

00000000000043b0 <__cxa_atexit@plt>:
    43b0:	ff 25 22 6e 04 00    	jmp    QWORD PTR [rip+0x46e22]        # 4b1d8 <__cxa_atexit@GLIBC_2.2.5>
    43b6:	68 38 00 00 00       	push   0x38
    43bb:	e9 60 fc ff ff       	jmp    4020 <.plt>

00000000000043c0 <snd_pcm_prepare@plt>:
    43c0:	ff 25 1a 6e 04 00    	jmp    QWORD PTR [rip+0x46e1a]        # 4b1e0 <snd_pcm_prepare@ALSA_0.9>
    43c6:	68 39 00 00 00       	push   0x39
    43cb:	e9 50 fc ff ff       	jmp    4020 <.plt>

00000000000043d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    43d0:	ff 25 12 6e 04 00    	jmp    QWORD PTR [rip+0x46e12]        # 4b1e8 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    43d6:	68 3a 00 00 00       	push   0x3a
    43db:	e9 40 fc ff ff       	jmp    4020 <.plt>

00000000000043e0 <snd_pcm_hw_params_set_rate_near@plt>:
    43e0:	ff 25 0a 6e 04 00    	jmp    QWORD PTR [rip+0x46e0a]        # 4b1f0 <snd_pcm_hw_params_set_rate_near@ALSA_0.9.0rc4>
    43e6:	68 3b 00 00 00       	push   0x3b
    43eb:	e9 30 fc ff ff       	jmp    4020 <.plt>

00000000000043f0 <fclose@plt>:
    43f0:	ff 25 02 6e 04 00    	jmp    QWORD PTR [rip+0x46e02]        # 4b1f8 <fclose@GLIBC_2.2.5>
    43f6:	68 3c 00 00 00       	push   0x3c
    43fb:	e9 20 fc ff ff       	jmp    4020 <.plt>

0000000000004400 <operator new(unsigned long)@plt>:
    4400:	ff 25 fa 6d 04 00    	jmp    QWORD PTR [rip+0x46dfa]        # 4b200 <operator new(unsigned long)@GLIBCXX_3.4>
    4406:	68 3d 00 00 00       	push   0x3d
    440b:	e9 10 fc ff ff       	jmp    4020 <.plt>

0000000000004410 <operator delete(void*, unsigned long)@plt>:
    4410:	ff 25 f2 6d 04 00    	jmp    QWORD PTR [rip+0x46df2]        # 4b208 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    4416:	68 3e 00 00 00       	push   0x3e
    441b:	e9 00 fc ff ff       	jmp    4020 <.plt>

0000000000004420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>:
    4420:	ff 25 ea 6d 04 00    	jmp    QWORD PTR [rip+0x46dea]        # 4b210 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@GLIBCXX_3.4.21>
    4426:	68 3f 00 00 00       	push   0x3f
    442b:	e9 f0 fb ff ff       	jmp    4020 <.plt>

0000000000004430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
    4430:	ff 25 e2 6d 04 00    	jmp    QWORD PTR [rip+0x46de2]        # 4b218 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
    4436:	68 40 00 00 00       	push   0x40
    443b:	e9 e0 fb ff ff       	jmp    4020 <.plt>

0000000000004440 <acosf@plt>:
    4440:	ff 25 da 6d 04 00    	jmp    QWORD PTR [rip+0x46dda]        # 4b220 <acosf@GLIBC_2.2.5>
    4446:	68 41 00 00 00       	push   0x41
    444b:	e9 d0 fb ff ff       	jmp    4020 <.plt>

0000000000004450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>:
    4450:	ff 25 d2 6d 04 00    	jmp    QWORD PTR [rip+0x46dd2]        # 4b228 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@GLIBCXX_3.4.21>
    4456:	68 42 00 00 00       	push   0x42
    445b:	e9 c0 fb ff ff       	jmp    4020 <.plt>

0000000000004460 <std::allocator<char>::~allocator()@plt>:
    4460:	ff 25 ca 6d 04 00    	jmp    QWORD PTR [rip+0x46dca]        # 4b230 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
    4466:	68 43 00 00 00       	push   0x43
    446b:	e9 b0 fb ff ff       	jmp    4020 <.plt>

0000000000004470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>:
    4470:	ff 25 c2 6d 04 00    	jmp    QWORD PTR [rip+0x46dc2]        # 4b238 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@GLIBCXX_3.4.21>
    4476:	68 44 00 00 00       	push   0x44
    447b:	e9 a0 fb ff ff       	jmp    4020 <.plt>

0000000000004480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const@plt>:
    4480:	ff 25 ba 6d 04 00    	jmp    QWORD PTR [rip+0x46dba]        # 4b240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const@GLIBCXX_3.4.21>
    4486:	68 45 00 00 00       	push   0x45
    448b:	e9 90 fb ff ff       	jmp    4020 <.plt>

0000000000004490 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>:
    4490:	ff 25 b2 6d 04 00    	jmp    QWORD PTR [rip+0x46db2]        # 4b248 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@GLIBCXX_3.4.21>
    4496:	68 46 00 00 00       	push   0x46
    449b:	e9 80 fb ff ff       	jmp    4020 <.plt>

00000000000044a0 <fseek@plt>:
    44a0:	ff 25 aa 6d 04 00    	jmp    QWORD PTR [rip+0x46daa]        # 4b250 <fseek@GLIBC_2.2.5>
    44a6:	68 47 00 00 00       	push   0x47
    44ab:	e9 70 fb ff ff       	jmp    4020 <.plt>

00000000000044b0 <__stack_chk_fail@plt>:
    44b0:	ff 25 a2 6d 04 00    	jmp    QWORD PTR [rip+0x46da2]        # 4b258 <__stack_chk_fail@GLIBC_2.4>
    44b6:	68 48 00 00 00       	push   0x48
    44bb:	e9 60 fb ff ff       	jmp    4020 <.plt>

00000000000044c0 <snd_pcm_hw_params_get_period_time@plt>:
    44c0:	ff 25 9a 6d 04 00    	jmp    QWORD PTR [rip+0x46d9a]        # 4b260 <snd_pcm_hw_params_get_period_time@ALSA_0.9.0rc4>
    44c6:	68 49 00 00 00       	push   0x49
    44cb:	e9 50 fb ff ff       	jmp    4020 <.plt>

00000000000044d0 <snd_pcm_hw_params_sizeof@plt>:
    44d0:	ff 25 92 6d 04 00    	jmp    QWORD PTR [rip+0x46d92]        # 4b268 <snd_pcm_hw_params_sizeof@ALSA_0.9>
    44d6:	68 4a 00 00 00       	push   0x4a
    44db:	e9 40 fb ff ff       	jmp    4020 <.plt>

00000000000044e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
    44e0:	ff 25 8a 6d 04 00    	jmp    QWORD PTR [rip+0x46d8a]        # 4b270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
    44e6:	68 4b 00 00 00       	push   0x4b
    44eb:	e9 30 fb ff ff       	jmp    4020 <.plt>

00000000000044f0 <fopen@plt>:
    44f0:	ff 25 82 6d 04 00    	jmp    QWORD PTR [rip+0x46d82]        # 4b278 <fopen@GLIBC_2.2.5>
    44f6:	68 4c 00 00 00       	push   0x4c
    44fb:	e9 20 fb ff ff       	jmp    4020 <.plt>

0000000000004500 <free@plt>:
    4500:	ff 25 7a 6d 04 00    	jmp    QWORD PTR [rip+0x46d7a]        # 4b280 <free@GLIBC_2.2.5>
    4506:	68 4d 00 00 00       	push   0x4d
    450b:	e9 10 fb ff ff       	jmp    4020 <.plt>

0000000000004510 <exit@plt>:
    4510:	ff 25 72 6d 04 00    	jmp    QWORD PTR [rip+0x46d72]        # 4b288 <exit@GLIBC_2.2.5>
    4516:	68 4e 00 00 00       	push   0x4e
    451b:	e9 00 fb ff ff       	jmp    4020 <.plt>

0000000000004520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
    4520:	ff 25 6a 6d 04 00    	jmp    QWORD PTR [rip+0x46d6a]        # 4b290 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
    4526:	68 4f 00 00 00       	push   0x4f
    452b:	e9 f0 fa ff ff       	jmp    4020 <.plt>

0000000000004530 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt>:
    4530:	ff 25 62 6d 04 00    	jmp    QWORD PTR [rip+0x46d62]        # 4b298 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@GLIBCXX_3.4.21>
    4536:	68 50 00 00 00       	push   0x50
    453b:	e9 e0 fa ff ff       	jmp    4020 <.plt>

0000000000004540 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>:
    4540:	ff 25 5a 6d 04 00    	jmp    QWORD PTR [rip+0x46d5a]        # 4b2a0 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@GLIBCXX_3.4.21>
    4546:	68 51 00 00 00       	push   0x51
    454b:	e9 d0 fa ff ff       	jmp    4020 <.plt>

0000000000004550 <snd_pcm_close@plt>:
    4550:	ff 25 52 6d 04 00    	jmp    QWORD PTR [rip+0x46d52]        # 4b2a8 <snd_pcm_close@ALSA_0.9>
    4556:	68 52 00 00 00       	push   0x52
    455b:	e9 c0 fa ff ff       	jmp    4020 <.plt>

0000000000004560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    4560:	ff 25 4a 6d 04 00    	jmp    QWORD PTR [rip+0x46d4a]        # 4b2b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    4566:	68 53 00 00 00       	push   0x53
    456b:	e9 b0 fa ff ff       	jmp    4020 <.plt>

0000000000004570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@plt>:
    4570:	ff 25 42 6d 04 00    	jmp    QWORD PTR [rip+0x46d42]        # 4b2b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@GLIBCXX_3.4.21>
    4576:	68 54 00 00 00       	push   0x54
    457b:	e9 a0 fa ff ff       	jmp    4020 <.plt>

0000000000004580 <snd_pcm_drain@plt>:
    4580:	ff 25 3a 6d 04 00    	jmp    QWORD PTR [rip+0x46d3a]        # 4b2c0 <snd_pcm_drain@ALSA_0.9>
    4586:	68 55 00 00 00       	push   0x55
    458b:	e9 90 fa ff ff       	jmp    4020 <.plt>

0000000000004590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@plt>:
    4590:	ff 25 32 6d 04 00    	jmp    QWORD PTR [rip+0x46d32]        # 4b2c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@GLIBCXX_3.4.21>
    4596:	68 56 00 00 00       	push   0x56
    459b:	e9 80 fa ff ff       	jmp    4020 <.plt>

00000000000045a0 <malloc@plt>:
    45a0:	ff 25 2a 6d 04 00    	jmp    QWORD PTR [rip+0x46d2a]        # 4b2d0 <malloc@GLIBC_2.2.5>
    45a6:	68 57 00 00 00       	push   0x57
    45ab:	e9 70 fa ff ff       	jmp    4020 <.plt>

00000000000045b0 <snd_pcm_hw_params_set_channels@plt>:
    45b0:	ff 25 22 6d 04 00    	jmp    QWORD PTR [rip+0x46d22]        # 4b2d8 <snd_pcm_hw_params_set_channels@ALSA_0.9>
    45b6:	68 58 00 00 00       	push   0x58
    45bb:	e9 60 fa ff ff       	jmp    4020 <.plt>

00000000000045c0 <std::ostream::operator<<(unsigned int)@plt>:
    45c0:	ff 25 1a 6d 04 00    	jmp    QWORD PTR [rip+0x46d1a]        # 4b2e0 <std::ostream::operator<<(unsigned int)@GLIBCXX_3.4>
    45c6:	68 59 00 00 00       	push   0x59
    45cb:	e9 50 fa ff ff       	jmp    4020 <.plt>

00000000000045d0 <ldexpf@plt>:
    45d0:	ff 25 12 6d 04 00    	jmp    QWORD PTR [rip+0x46d12]        # 4b2e8 <ldexpf@GLIBC_2.2.5>
    45d6:	68 5a 00 00 00       	push   0x5a
    45db:	e9 40 fa ff ff       	jmp    4020 <.plt>

00000000000045e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>:
    45e0:	ff 25 0a 6d 04 00    	jmp    QWORD PTR [rip+0x46d0a]        # 4b2f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@GLIBCXX_3.4.21>
    45e6:	68 5b 00 00 00       	push   0x5b
    45eb:	e9 30 fa ff ff       	jmp    4020 <.plt>

00000000000045f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>:
    45f0:	ff 25 02 6d 04 00    	jmp    QWORD PTR [rip+0x46d02]        # 4b2f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@GLIBCXX_3.4.21>
    45f6:	68 5c 00 00 00       	push   0x5c
    45fb:	e9 20 fa ff ff       	jmp    4020 <.plt>

0000000000004600 <strcmp@plt>:
    4600:	ff 25 fa 6c 04 00    	jmp    QWORD PTR [rip+0x46cfa]        # 4b300 <strcmp@GLIBC_2.2.5>
    4606:	68 5d 00 00 00       	push   0x5d
    460b:	e9 10 fa ff ff       	jmp    4020 <.plt>

0000000000004610 <std::__throw_out_of_range(char const*)@plt>:
    4610:	ff 25 f2 6c 04 00    	jmp    QWORD PTR [rip+0x46cf2]        # 4b308 <std::__throw_out_of_range(char const*)@GLIBCXX_3.4>
    4616:	68 5e 00 00 00       	push   0x5e
    461b:	e9 00 fa ff ff       	jmp    4020 <.plt>

0000000000004620 <__cxa_rethrow@plt>:
    4620:	ff 25 ea 6c 04 00    	jmp    QWORD PTR [rip+0x46cea]        # 4b310 <__cxa_rethrow@CXXABI_1.3>
    4626:	68 5f 00 00 00       	push   0x5f
    462b:	e9 f0 f9 ff ff       	jmp    4020 <.plt>

0000000000004630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)@plt>:
    4630:	ff 25 e2 6c 04 00    	jmp    QWORD PTR [rip+0x46ce2]        # 4b318 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)@GLIBCXX_3.4.26>
    4636:	68 60 00 00 00       	push   0x60
    463b:	e9 e0 f9 ff ff       	jmp    4020 <.plt>

0000000000004640 <dlopen@plt>:
    4640:	ff 25 da 6c 04 00    	jmp    QWORD PTR [rip+0x46cda]        # 4b320 <dlopen@GLIBC_2.2.5>
    4646:	68 61 00 00 00       	push   0x61
    464b:	e9 d0 f9 ff ff       	jmp    4020 <.plt>

0000000000004650 <fread@plt>:
    4650:	ff 25 d2 6c 04 00    	jmp    QWORD PTR [rip+0x46cd2]        # 4b328 <fread@GLIBC_2.2.5>
    4656:	68 62 00 00 00       	push   0x62
    465b:	e9 c0 f9 ff ff       	jmp    4020 <.plt>

0000000000004660 <std::ios_base::Init::Init()@plt>:
    4660:	ff 25 ca 6c 04 00    	jmp    QWORD PTR [rip+0x46cca]        # 4b330 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    4666:	68 63 00 00 00       	push   0x63
    466b:	e9 b0 f9 ff ff       	jmp    4020 <.plt>

0000000000004670 <feof@plt>:
    4670:	ff 25 c2 6c 04 00    	jmp    QWORD PTR [rip+0x46cc2]        # 4b338 <feof@GLIBC_2.2.5>
    4676:	68 64 00 00 00       	push   0x64
    467b:	e9 a0 f9 ff ff       	jmp    4020 <.plt>

0000000000004680 <powf@plt>:
    4680:	ff 25 ba 6c 04 00    	jmp    QWORD PTR [rip+0x46cba]        # 4b340 <powf@GLIBC_2.27>
    4686:	68 65 00 00 00       	push   0x65
    468b:	e9 90 f9 ff ff       	jmp    4020 <.plt>

0000000000004690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt>:
    4690:	ff 25 b2 6c 04 00    	jmp    QWORD PTR [rip+0x46cb2]        # 4b348 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@GLIBCXX_3.4.21>
    4696:	68 66 00 00 00       	push   0x66
    469b:	e9 80 f9 ff ff       	jmp    4020 <.plt>

00000000000046a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    46a0:	ff 25 aa 6c 04 00    	jmp    QWORD PTR [rip+0x46caa]        # 4b350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    46a6:	68 67 00 00 00       	push   0x67
    46ab:	e9 70 f9 ff ff       	jmp    4020 <.plt>

00000000000046b0 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@plt>:
    46b0:	ff 25 a2 6c 04 00    	jmp    QWORD PTR [rip+0x46ca2]        # 4b358 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@GLIBCXX_3.4>
    46b6:	68 68 00 00 00       	push   0x68
    46bb:	e9 60 f9 ff ff       	jmp    4020 <.plt>

00000000000046c0 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>:
    46c0:	ff 25 9a 6c 04 00    	jmp    QWORD PTR [rip+0x46c9a]        # 4b360 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@GLIBCXX_3.4.21>
    46c6:	68 69 00 00 00       	push   0x69
    46cb:	e9 50 f9 ff ff       	jmp    4020 <.plt>

00000000000046d0 <memmove@plt>:
    46d0:	ff 25 92 6c 04 00    	jmp    QWORD PTR [rip+0x46c92]        # 4b368 <memmove@GLIBC_2.2.5>
    46d6:	68 6a 00 00 00       	push   0x6a
    46db:	e9 40 f9 ff ff       	jmp    4020 <.plt>

00000000000046e0 <__cxa_end_catch@plt>:
    46e0:	ff 25 8a 6c 04 00    	jmp    QWORD PTR [rip+0x46c8a]        # 4b370 <__cxa_end_catch@CXXABI_1.3>
    46e6:	68 6b 00 00 00       	push   0x6b
    46eb:	e9 30 f9 ff ff       	jmp    4020 <.plt>

00000000000046f0 <realloc@plt>:
    46f0:	ff 25 82 6c 04 00    	jmp    QWORD PTR [rip+0x46c82]        # 4b378 <realloc@GLIBC_2.2.5>
    46f6:	68 6c 00 00 00       	push   0x6c
    46fb:	e9 20 f9 ff ff       	jmp    4020 <.plt>

0000000000004700 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@plt>:
    4700:	ff 25 7a 6c 04 00    	jmp    QWORD PTR [rip+0x46c7a]        # 4b380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@GLIBCXX_3.4.21>
    4706:	68 6d 00 00 00       	push   0x6d
    470b:	e9 10 f9 ff ff       	jmp    4020 <.plt>

0000000000004710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)@plt>:
    4710:	ff 25 72 6c 04 00    	jmp    QWORD PTR [rip+0x46c72]        # 4b388 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)@GLIBCXX_3.4.21>
    4716:	68 6e 00 00 00       	push   0x6e
    471b:	e9 00 f9 ff ff       	jmp    4020 <.plt>

0000000000004720 <std::ostream::operator<<(int)@plt>:
    4720:	ff 25 6a 6c 04 00    	jmp    QWORD PTR [rip+0x46c6a]        # 4b390 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    4726:	68 6f 00 00 00       	push   0x6f
    472b:	e9 f0 f8 ff ff       	jmp    4020 <.plt>

0000000000004730 <_Unwind_Resume@plt>:
    4730:	ff 25 62 6c 04 00    	jmp    QWORD PTR [rip+0x46c62]        # 4b398 <_Unwind_Resume@GCC_3.0>
    4736:	68 70 00 00 00       	push   0x70
    473b:	e9 e0 f8 ff ff       	jmp    4020 <.plt>

0000000000004740 <std::allocator<char>::allocator()@plt>:
    4740:	ff 25 5a 6c 04 00    	jmp    QWORD PTR [rip+0x46c5a]        # 4b3a0 <std::allocator<char>::allocator()@GLIBCXX_3.4>
    4746:	68 71 00 00 00       	push   0x71
    474b:	e9 d0 f8 ff ff       	jmp    4020 <.plt>

0000000000004750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    4750:	ff 25 52 6c 04 00    	jmp    QWORD PTR [rip+0x46c52]        # 4b3a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    4756:	68 72 00 00 00       	push   0x72
    475b:	e9 c0 f8 ff ff       	jmp    4020 <.plt>

0000000000004760 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const@plt>:
    4760:	ff 25 4a 6c 04 00    	jmp    QWORD PTR [rip+0x46c4a]        # 4b3b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const@GLIBCXX_3.4.21>
    4766:	68 73 00 00 00       	push   0x73
    476b:	e9 b0 f8 ff ff       	jmp    4020 <.plt>

0000000000004770 <sqrtf@plt>:
    4770:	ff 25 42 6c 04 00    	jmp    QWORD PTR [rip+0x46c42]        # 4b3b8 <sqrtf@GLIBC_2.2.5>
    4776:	68 74 00 00 00       	push   0x74
    477b:	e9 a0 f8 ff ff       	jmp    4020 <.plt>

0000000000004780 <snd_pcm_hw_params_any@plt>:
    4780:	ff 25 3a 6c 04 00    	jmp    QWORD PTR [rip+0x46c3a]        # 4b3c0 <snd_pcm_hw_params_any@ALSA_0.9>
    4786:	68 75 00 00 00       	push   0x75
    478b:	e9 90 f8 ff ff       	jmp    4020 <.plt>

0000000000004790 <dlsym@plt>:
    4790:	ff 25 32 6c 04 00    	jmp    QWORD PTR [rip+0x46c32]        # 4b3c8 <dlsym@GLIBC_2.2.5>
    4796:	68 76 00 00 00       	push   0x76
    479b:	e9 80 f8 ff ff       	jmp    4020 <.plt>

00000000000047a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)@plt>:
    47a0:	ff 25 2a 6c 04 00    	jmp    QWORD PTR [rip+0x46c2a]        # 4b3d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)@GLIBCXX_3.4.26>
    47a6:	68 77 00 00 00       	push   0x77
    47ab:	e9 70 f8 ff ff       	jmp    4020 <.plt>

00000000000047b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
    47b0:	ff 25 22 6c 04 00    	jmp    QWORD PTR [rip+0x46c22]        # 4b3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
    47b6:	68 78 00 00 00       	push   0x78
    47bb:	e9 60 f8 ff ff       	jmp    4020 <.plt>

00000000000047c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    47c0:	ff 25 1a 6c 04 00    	jmp    QWORD PTR [rip+0x46c1a]        # 4b3e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    47c6:	68 79 00 00 00       	push   0x79
    47cb:	e9 50 f8 ff ff       	jmp    4020 <.plt>

00000000000047d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>:
    47d0:	ff 25 12 6c 04 00    	jmp    QWORD PTR [rip+0x46c12]        # 4b3e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@GLIBCXX_3.4.21>
    47d6:	68 7a 00 00 00       	push   0x7a
    47db:	e9 40 f8 ff ff       	jmp    4020 <.plt>

00000000000047e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@plt>:
    47e0:	ff 25 0a 6c 04 00    	jmp    QWORD PTR [rip+0x46c0a]        # 4b3f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@GLIBCXX_3.4.21>
    47e6:	68 7b 00 00 00       	push   0x7b
    47eb:	e9 30 f8 ff ff       	jmp    4020 <.plt>

Disassembly of section .plt.got:

00000000000047f0 <strtol@plt>:
    47f0:	ff 25 da 67 04 00    	jmp    QWORD PTR [rip+0x467da]        # 4afd0 <strtol@GLIBC_2.2.5>
    47f6:	66 90                	xchg   ax,ax

Disassembly of section .text:

0000000000004800 <_start>:
    4800:	f3 0f 1e fa          	endbr64 
    4804:	31 ed                	xor    ebp,ebp
    4806:	49 89 d1             	mov    r9,rdx
    4809:	5e                   	pop    rsi
    480a:	48 89 e2             	mov    rdx,rsp
    480d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    4811:	50                   	push   rax
    4812:	54                   	push   rsp
    4813:	4c 8d 05 86 4b 03 00 	lea    r8,[rip+0x34b86]        # 393a0 <__libc_csu_fini>
    481a:	48 8d 0d 0f 4b 03 00 	lea    rcx,[rip+0x34b0f]        # 39330 <__libc_csu_init>
    4821:	48 8d 3d 87 ee 01 00 	lea    rdi,[rip+0x1ee87]        # 236af <main>
    4828:	ff 15 b2 67 04 00    	call   QWORD PTR [rip+0x467b2]        # 4afe0 <__libc_start_main@GLIBC_2.2.5>
    482e:	f4                   	hlt    
    482f:	90                   	nop

0000000000004830 <deregister_tm_clones>:
    4830:	48 8d 3d b9 6c 04 00 	lea    rdi,[rip+0x46cb9]        # 4b4f0 <__TMC_END__>
    4837:	48 8d 05 b2 6c 04 00 	lea    rax,[rip+0x46cb2]        # 4b4f0 <__TMC_END__>
    483e:	48 39 f8             	cmp    rax,rdi
    4841:	74 15                	je     4858 <deregister_tm_clones+0x28>
    4843:	48 8b 05 8e 67 04 00 	mov    rax,QWORD PTR [rip+0x4678e]        # 4afd8 <_ITM_deregisterTMCloneTable>
    484a:	48 85 c0             	test   rax,rax
    484d:	74 09                	je     4858 <deregister_tm_clones+0x28>
    484f:	ff e0                	jmp    rax
    4851:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    4858:	c3                   	ret    
    4859:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004860 <register_tm_clones>:
    4860:	48 8d 3d 89 6c 04 00 	lea    rdi,[rip+0x46c89]        # 4b4f0 <__TMC_END__>
    4867:	48 8d 35 82 6c 04 00 	lea    rsi,[rip+0x46c82]        # 4b4f0 <__TMC_END__>
    486e:	48 29 fe             	sub    rsi,rdi
    4871:	48 89 f0             	mov    rax,rsi
    4874:	48 c1 ee 3f          	shr    rsi,0x3f
    4878:	48 c1 f8 03          	sar    rax,0x3
    487c:	48 01 c6             	add    rsi,rax
    487f:	48 d1 fe             	sar    rsi,1
    4882:	74 14                	je     4898 <register_tm_clones+0x38>
    4884:	48 8b 05 65 67 04 00 	mov    rax,QWORD PTR [rip+0x46765]        # 4aff0 <_ITM_registerTMCloneTable>
    488b:	48 85 c0             	test   rax,rax
    488e:	74 08                	je     4898 <register_tm_clones+0x38>
    4890:	ff e0                	jmp    rax
    4892:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4898:	c3                   	ret    
    4899:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000048a0 <__do_global_dtors_aux>:
    48a0:	f3 0f 1e fa          	endbr64 
    48a4:	80 3d 85 6e 04 00 00 	cmp    BYTE PTR [rip+0x46e85],0x0        # 4b730 <completed.0>
    48ab:	75 33                	jne    48e0 <__do_global_dtors_aux+0x40>
    48ad:	55                   	push   rbp
    48ae:	48 83 3d 02 67 04 00 00 	cmp    QWORD PTR [rip+0x46702],0x0        # 4afb8 <__cxa_finalize@GLIBC_2.2.5>
    48b6:	48 89 e5             	mov    rbp,rsp
    48b9:	74 0d                	je     48c8 <__do_global_dtors_aux+0x28>
    48bb:	48 8b 3d 46 6b 04 00 	mov    rdi,QWORD PTR [rip+0x46b46]        # 4b408 <__dso_handle>
    48c2:	ff 15 f0 66 04 00    	call   QWORD PTR [rip+0x466f0]        # 4afb8 <__cxa_finalize@GLIBC_2.2.5>
    48c8:	e8 63 ff ff ff       	call   4830 <deregister_tm_clones>
    48cd:	c6 05 5c 6e 04 00 01 	mov    BYTE PTR [rip+0x46e5c],0x1        # 4b730 <completed.0>
    48d4:	5d                   	pop    rbp
    48d5:	c3                   	ret    
    48d6:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    48e0:	c3                   	ret    
    48e1:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    48ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000048f0 <frame_dummy>:
    48f0:	f3 0f 1e fa          	endbr64 
    48f4:	e9 67 ff ff ff       	jmp    4860 <register_tm_clones>
    48f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004900 <maxofthree_asm>:
    4900:	39 f7                	cmp    edi,esi
    4902:	0f 4c fe             	cmovl  edi,esi
    4905:	39 d7                	cmp    edi,edx
    4907:	0f 4c fa             	cmovl  edi,edx
    490a:	89 f8                	mov    eax,edi
    490c:	c3                   	ret    

000000000000490d <test_asm>:
    490d:	48 83 ec 14          	sub    rsp,0x14
    4911:	41 ba 09 00 00 00    	mov    r10d,0x9
    4917:	66 41 bb 78 0a       	mov    r11w,0xa78

000000000000491c <loop>:
    491c:	66 46 89 1c 54       	mov    WORD PTR [rsp+r10*2],r11w
    4921:	49 83 ea 01          	sub    r10,0x1
    4925:	75 f5                	jne    491c <loop>
    4927:	b8 01 00 00 00       	mov    eax,0x1
    492c:	bf 01 00 00 00       	mov    edi,0x1
    4931:	48 89 e6             	mov    rsi,rsp
    4934:	ba 14 00 00 00       	mov    edx,0x14
    4939:	0f 05                	syscall 
    493b:	48 83 c4 14          	add    rsp,0x14
    493f:	b8 00 00 00 00       	mov    eax,0x0
    4944:	c3                   	ret    

0000000000004945 <stbi__sse2_available()>:
    4945:	55                   	push   rbp
    4946:	48 89 e5             	mov    rbp,rsp
    4949:	b8 01 00 00 00       	mov    eax,0x1
    494e:	5d                   	pop    rbp
    494f:	c3                   	ret    

0000000000004950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>:
    4950:	55                   	push   rbp
    4951:	48 89 e5             	mov    rbp,rsp
    4954:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4958:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    495c:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    495f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4963:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    496b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    496f:	c7 40 30 00 00 00 00 	mov    DWORD PTR [rax+0x30],0x0
    4976:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    497a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    497e:	48 89 90 c8 00 00 00 	mov    QWORD PTR [rax+0xc8],rdx
    4985:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4989:	48 8b 90 c8 00 00 00 	mov    rdx,QWORD PTR [rax+0xc8]
    4990:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4994:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    499b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    499e:	48 63 d0             	movsxd rdx,eax
    49a1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    49a5:	48 01 c2             	add    rdx,rax
    49a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49ac:	48 89 90 d0 00 00 00 	mov    QWORD PTR [rax+0xd0],rdx
    49b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49b7:	48 8b 90 d0 00 00 00 	mov    rdx,QWORD PTR [rax+0xd0]
    49be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49c2:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    49c9:	90                   	nop
    49ca:	5d                   	pop    rbp
    49cb:	c3                   	ret    

00000000000049cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>:
    49cc:	55                   	push   rbp
    49cd:	48 89 e5             	mov    rbp,rsp
    49d0:	48 83 ec 20          	sub    rsp,0x20
    49d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    49d8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    49dc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    49e0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    49e4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
    49e8:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    49eb:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
    49ef:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
    49f3:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
    49f7:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
    49fb:	48 89 41 20          	mov    QWORD PTR [rcx+0x20],rax
    49ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a03:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    4a07:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    4a0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a0f:	c7 40 34 80 00 00 00 	mov    DWORD PTR [rax+0x34],0x80
    4a16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a1a:	c7 40 30 01 00 00 00 	mov    DWORD PTR [rax+0x30],0x1
    4a21:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a25:	48 8d 50 38          	lea    rdx,[rax+0x38]
    4a29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a2d:	48 89 90 c8 00 00 00 	mov    QWORD PTR [rax+0xc8],rdx
    4a34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a38:	48 89 c7             	mov    rdi,rax
    4a3b:	e8 c0 19 00 00       	call   6400 <stbi__refill_buffer(stbi__context*)>
    4a40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a44:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    4a4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a4f:	48 89 90 d0 00 00 00 	mov    QWORD PTR [rax+0xd0],rdx
    4a56:	90                   	nop
    4a57:	c9                   	leave  
    4a58:	c3                   	ret    

0000000000004a59 <stbi__stdio_read(void*, char*, int)>:
    4a59:	55                   	push   rbp
    4a5a:	48 89 e5             	mov    rbp,rsp
    4a5d:	48 83 ec 20          	sub    rsp,0x20
    4a61:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4a65:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4a69:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    4a6c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    4a6f:	48 63 d0             	movsxd rdx,eax
    4a72:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    4a76:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    4a7a:	be 01 00 00 00       	mov    esi,0x1
    4a7f:	48 89 c7             	mov    rdi,rax
    4a82:	e8 c9 fb ff ff       	call   4650 <fread@plt>
    4a87:	c9                   	leave  
    4a88:	c3                   	ret    

0000000000004a89 <stbi__stdio_skip(void*, int)>:
    4a89:	55                   	push   rbp
    4a8a:	48 89 e5             	mov    rbp,rsp
    4a8d:	48 83 ec 10          	sub    rsp,0x10
    4a91:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4a95:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    4a98:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    4a9b:	48 63 c8             	movsxd rcx,eax
    4a9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4aa2:	ba 01 00 00 00       	mov    edx,0x1
    4aa7:	48 89 ce             	mov    rsi,rcx
    4aaa:	48 89 c7             	mov    rdi,rax
    4aad:	e8 ee f9 ff ff       	call   44a0 <fseek@plt>
    4ab2:	90                   	nop
    4ab3:	c9                   	leave  
    4ab4:	c3                   	ret    

0000000000004ab5 <stbi__stdio_eof(void*)>:
    4ab5:	55                   	push   rbp
    4ab6:	48 89 e5             	mov    rbp,rsp
    4ab9:	48 83 ec 10          	sub    rsp,0x10
    4abd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4ac1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4ac5:	48 89 c7             	mov    rdi,rax
    4ac8:	e8 a3 fb ff ff       	call   4670 <feof@plt>
    4acd:	c9                   	leave  
    4ace:	c3                   	ret    

0000000000004acf <stbi__start_file(stbi__context*, _IO_FILE*)>:
    4acf:	55                   	push   rbp
    4ad0:	48 89 e5             	mov    rbp,rsp
    4ad3:	48 83 ec 10          	sub    rsp,0x10
    4ad7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4adb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4adf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    4ae3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4ae7:	48 8d 35 e2 69 04 00 	lea    rsi,[rip+0x469e2]        # 4b4d0 <stbi__stdio_callbacks>
    4aee:	48 89 c7             	mov    rdi,rax
    4af1:	e8 d6 fe ff ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    4af6:	90                   	nop
    4af7:	c9                   	leave  
    4af8:	c3                   	ret    

0000000000004af9 <stbi__rewind(stbi__context*)>:
    4af9:	55                   	push   rbp
    4afa:	48 89 e5             	mov    rbp,rsp
    4afd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b01:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b05:	48 8b 90 c8 00 00 00 	mov    rdx,QWORD PTR [rax+0xc8]
    4b0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b10:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    4b17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b1b:	48 8b 90 d0 00 00 00 	mov    rdx,QWORD PTR [rax+0xd0]
    4b22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b26:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    4b2d:	90                   	nop
    4b2e:	5d                   	pop    rbp
    4b2f:	c3                   	ret    

0000000000004b30 <stbi_failure_reason>:
    4b30:	55                   	push   rbp
    4b31:	48 89 e5             	mov    rbp,rsp
    4b34:	64 48 8b 04 25 f0 ff ff ff 	mov    rax,QWORD PTR fs:0xfffffffffffffff0
    4b3d:	5d                   	pop    rbp
    4b3e:	c3                   	ret    

0000000000004b3f <stbi__err(char const*)>:
    4b3f:	55                   	push   rbp
    4b40:	48 89 e5             	mov    rbp,rsp
    4b43:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b4b:	64 48 89 04 25 f0 ff ff ff 	mov    QWORD PTR fs:0xfffffffffffffff0,rax
    4b54:	b8 00 00 00 00       	mov    eax,0x0
    4b59:	5d                   	pop    rbp
    4b5a:	c3                   	ret    

0000000000004b5b <stbi__malloc(unsigned long)>:
    4b5b:	55                   	push   rbp
    4b5c:	48 89 e5             	mov    rbp,rsp
    4b5f:	48 83 ec 10          	sub    rsp,0x10
    4b63:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b6b:	48 89 c7             	mov    rdi,rax
    4b6e:	e8 2d fa ff ff       	call   45a0 <malloc@plt>
    4b73:	c9                   	leave  
    4b74:	c3                   	ret    

0000000000004b75 <stbi__addsizes_valid(int, int)>:
    4b75:	55                   	push   rbp
    4b76:	48 89 e5             	mov    rbp,rsp
    4b79:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4b7c:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4b7f:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    4b83:	79 07                	jns    4b8c <stbi__addsizes_valid(int, int)+0x17>
    4b85:	b8 00 00 00 00       	mov    eax,0x0
    4b8a:	eb 11                	jmp    4b9d <stbi__addsizes_valid(int, int)+0x28>
    4b8c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
    4b91:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
    4b94:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    4b97:	0f 9e c0             	setle  al
    4b9a:	0f b6 c0             	movzx  eax,al
    4b9d:	5d                   	pop    rbp
    4b9e:	c3                   	ret    

0000000000004b9f <stbi__mul2sizes_valid(int, int)>:
    4b9f:	55                   	push   rbp
    4ba0:	48 89 e5             	mov    rbp,rsp
    4ba3:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4ba6:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4ba9:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    4bad:	78 06                	js     4bb5 <stbi__mul2sizes_valid(int, int)+0x16>
    4baf:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    4bb3:	79 07                	jns    4bbc <stbi__mul2sizes_valid(int, int)+0x1d>
    4bb5:	b8 00 00 00 00       	mov    eax,0x0
    4bba:	eb 1f                	jmp    4bdb <stbi__mul2sizes_valid(int, int)+0x3c>
    4bbc:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    4bc0:	75 07                	jne    4bc9 <stbi__mul2sizes_valid(int, int)+0x2a>
    4bc2:	b8 01 00 00 00       	mov    eax,0x1
    4bc7:	eb 12                	jmp    4bdb <stbi__mul2sizes_valid(int, int)+0x3c>
    4bc9:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
    4bce:	99                   	cdq    
    4bcf:	f7 7d f8             	idiv   DWORD PTR [rbp-0x8]
    4bd2:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    4bd5:	0f 9e c0             	setle  al
    4bd8:	0f b6 c0             	movzx  eax,al
    4bdb:	5d                   	pop    rbp
    4bdc:	c3                   	ret    

0000000000004bdd <stbi__mad2sizes_valid(int, int, int)>:
    4bdd:	55                   	push   rbp
    4bde:	48 89 e5             	mov    rbp,rsp
    4be1:	48 83 ec 10          	sub    rsp,0x10
    4be5:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4be8:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4beb:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4bee:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    4bf1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4bf4:	89 d6                	mov    esi,edx
    4bf6:	89 c7                	mov    edi,eax
    4bf8:	e8 a2 ff ff ff       	call   4b9f <stbi__mul2sizes_valid(int, int)>
    4bfd:	85 c0                	test   eax,eax
    4bff:	74 1e                	je     4c1f <stbi__mad2sizes_valid(int, int, int)+0x42>
    4c01:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c04:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4c08:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4c0b:	89 d6                	mov    esi,edx
    4c0d:	89 c7                	mov    edi,eax
    4c0f:	e8 61 ff ff ff       	call   4b75 <stbi__addsizes_valid(int, int)>
    4c14:	85 c0                	test   eax,eax
    4c16:	74 07                	je     4c1f <stbi__mad2sizes_valid(int, int, int)+0x42>
    4c18:	b8 01 00 00 00       	mov    eax,0x1
    4c1d:	eb 05                	jmp    4c24 <stbi__mad2sizes_valid(int, int, int)+0x47>
    4c1f:	b8 00 00 00 00       	mov    eax,0x0
    4c24:	0f b6 c0             	movzx  eax,al
    4c27:	c9                   	leave  
    4c28:	c3                   	ret    

0000000000004c29 <stbi__mad3sizes_valid(int, int, int, int)>:
    4c29:	55                   	push   rbp
    4c2a:	48 89 e5             	mov    rbp,rsp
    4c2d:	48 83 ec 10          	sub    rsp,0x10
    4c31:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4c34:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4c37:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4c3a:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4c3d:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    4c40:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c43:	89 d6                	mov    esi,edx
    4c45:	89 c7                	mov    edi,eax
    4c47:	e8 53 ff ff ff       	call   4b9f <stbi__mul2sizes_valid(int, int)>
    4c4c:	85 c0                	test   eax,eax
    4c4e:	74 39                	je     4c89 <stbi__mad3sizes_valid(int, int, int, int)+0x60>
    4c50:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c53:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4c57:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4c5a:	89 d6                	mov    esi,edx
    4c5c:	89 c7                	mov    edi,eax
    4c5e:	e8 3c ff ff ff       	call   4b9f <stbi__mul2sizes_valid(int, int)>
    4c63:	85 c0                	test   eax,eax
    4c65:	74 22                	je     4c89 <stbi__mad3sizes_valid(int, int, int, int)+0x60>
    4c67:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c6a:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4c6e:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4c72:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    4c75:	89 d6                	mov    esi,edx
    4c77:	89 c7                	mov    edi,eax
    4c79:	e8 f7 fe ff ff       	call   4b75 <stbi__addsizes_valid(int, int)>
    4c7e:	85 c0                	test   eax,eax
    4c80:	74 07                	je     4c89 <stbi__mad3sizes_valid(int, int, int, int)+0x60>
    4c82:	b8 01 00 00 00       	mov    eax,0x1
    4c87:	eb 05                	jmp    4c8e <stbi__mad3sizes_valid(int, int, int, int)+0x65>
    4c89:	b8 00 00 00 00       	mov    eax,0x0
    4c8e:	0f b6 c0             	movzx  eax,al
    4c91:	c9                   	leave  
    4c92:	c3                   	ret    

0000000000004c93 <stbi__mad4sizes_valid(int, int, int, int, int)>:
    4c93:	55                   	push   rbp
    4c94:	48 89 e5             	mov    rbp,rsp
    4c97:	48 83 ec 18          	sub    rsp,0x18
    4c9b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4c9e:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4ca1:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4ca4:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4ca7:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
    4cab:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    4cae:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4cb1:	89 d6                	mov    esi,edx
    4cb3:	89 c7                	mov    edi,eax
    4cb5:	e8 e5 fe ff ff       	call   4b9f <stbi__mul2sizes_valid(int, int)>
    4cba:	85 c0                	test   eax,eax
    4cbc:	74 58                	je     4d16 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4cbe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4cc1:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4cc5:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4cc8:	89 d6                	mov    esi,edx
    4cca:	89 c7                	mov    edi,eax
    4ccc:	e8 ce fe ff ff       	call   4b9f <stbi__mul2sizes_valid(int, int)>
    4cd1:	85 c0                	test   eax,eax
    4cd3:	74 41                	je     4d16 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4cd5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4cd8:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4cdc:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4ce0:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    4ce3:	89 d6                	mov    esi,edx
    4ce5:	89 c7                	mov    edi,eax
    4ce7:	e8 b3 fe ff ff       	call   4b9f <stbi__mul2sizes_valid(int, int)>
    4cec:	85 c0                	test   eax,eax
    4cee:	74 26                	je     4d16 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4cf0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4cf3:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4cf7:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4cfb:	0f af 45 f0          	imul   eax,DWORD PTR [rbp-0x10]
    4cff:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    4d02:	89 d6                	mov    esi,edx
    4d04:	89 c7                	mov    edi,eax
    4d06:	e8 6a fe ff ff       	call   4b75 <stbi__addsizes_valid(int, int)>
    4d0b:	85 c0                	test   eax,eax
    4d0d:	74 07                	je     4d16 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4d0f:	b8 01 00 00 00       	mov    eax,0x1
    4d14:	eb 05                	jmp    4d1b <stbi__mad4sizes_valid(int, int, int, int, int)+0x88>
    4d16:	b8 00 00 00 00       	mov    eax,0x0
    4d1b:	0f b6 c0             	movzx  eax,al
    4d1e:	c9                   	leave  
    4d1f:	c3                   	ret    

0000000000004d20 <stbi__malloc_mad2(int, int, int)>:
    4d20:	55                   	push   rbp
    4d21:	48 89 e5             	mov    rbp,rsp
    4d24:	48 83 ec 10          	sub    rsp,0x10
    4d28:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4d2b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4d2e:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4d31:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4d34:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
    4d37:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d3a:	89 ce                	mov    esi,ecx
    4d3c:	89 c7                	mov    edi,eax
    4d3e:	e8 9a fe ff ff       	call   4bdd <stbi__mad2sizes_valid(int, int, int)>
    4d43:	85 c0                	test   eax,eax
    4d45:	0f 94 c0             	sete   al
    4d48:	84 c0                	test   al,al
    4d4a:	74 07                	je     4d53 <stbi__malloc_mad2(int, int, int)+0x33>
    4d4c:	b8 00 00 00 00       	mov    eax,0x0
    4d51:	eb 19                	jmp    4d6c <stbi__malloc_mad2(int, int, int)+0x4c>
    4d53:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d56:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4d5a:	89 c2                	mov    edx,eax
    4d5c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    4d5f:	01 d0                	add    eax,edx
    4d61:	48 98                	cdqe   
    4d63:	48 89 c7             	mov    rdi,rax
    4d66:	e8 f0 fd ff ff       	call   4b5b <stbi__malloc(unsigned long)>
    4d6b:	90                   	nop
    4d6c:	c9                   	leave  
    4d6d:	c3                   	ret    

0000000000004d6e <stbi__malloc_mad3(int, int, int, int)>:
    4d6e:	55                   	push   rbp
    4d6f:	48 89 e5             	mov    rbp,rsp
    4d72:	48 83 ec 10          	sub    rsp,0x10
    4d76:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4d79:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4d7c:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4d7f:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4d82:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
    4d85:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4d88:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
    4d8b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d8e:	89 c7                	mov    edi,eax
    4d90:	e8 94 fe ff ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
    4d95:	85 c0                	test   eax,eax
    4d97:	0f 94 c0             	sete   al
    4d9a:	84 c0                	test   al,al
    4d9c:	74 07                	je     4da5 <stbi__malloc_mad3(int, int, int, int)+0x37>
    4d9e:	b8 00 00 00 00       	mov    eax,0x0
    4da3:	eb 1d                	jmp    4dc2 <stbi__malloc_mad3(int, int, int, int)+0x54>
    4da5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4da8:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4dac:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4db0:	89 c2                	mov    edx,eax
    4db2:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    4db5:	01 d0                	add    eax,edx
    4db7:	48 98                	cdqe   
    4db9:	48 89 c7             	mov    rdi,rax
    4dbc:	e8 9a fd ff ff       	call   4b5b <stbi__malloc(unsigned long)>
    4dc1:	90                   	nop
    4dc2:	c9                   	leave  
    4dc3:	c3                   	ret    

0000000000004dc4 <stbi__malloc_mad4(int, int, int, int, int)>:
    4dc4:	55                   	push   rbp
    4dc5:	48 89 e5             	mov    rbp,rsp
    4dc8:	48 83 ec 20          	sub    rsp,0x20
    4dcc:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4dcf:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4dd2:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4dd5:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4dd8:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
    4ddc:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
    4ddf:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
    4de2:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4de5:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
    4de8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4deb:	41 89 f8             	mov    r8d,edi
    4dee:	89 c7                	mov    edi,eax
    4df0:	e8 9e fe ff ff       	call   4c93 <stbi__mad4sizes_valid(int, int, int, int, int)>
    4df5:	85 c0                	test   eax,eax
    4df7:	0f 94 c0             	sete   al
    4dfa:	84 c0                	test   al,al
    4dfc:	74 07                	je     4e05 <stbi__malloc_mad4(int, int, int, int, int)+0x41>
    4dfe:	b8 00 00 00 00       	mov    eax,0x0
    4e03:	eb 21                	jmp    4e26 <stbi__malloc_mad4(int, int, int, int, int)+0x62>
    4e05:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e08:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4e0c:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4e10:	0f af 45 f0          	imul   eax,DWORD PTR [rbp-0x10]
    4e14:	89 c2                	mov    edx,eax
    4e16:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    4e19:	01 d0                	add    eax,edx
    4e1b:	48 98                	cdqe   
    4e1d:	48 89 c7             	mov    rdi,rax
    4e20:	e8 36 fd ff ff       	call   4b5b <stbi__malloc(unsigned long)>
    4e25:	90                   	nop
    4e26:	c9                   	leave  
    4e27:	c3                   	ret    

0000000000004e28 <stbi_image_free>:
    4e28:	55                   	push   rbp
    4e29:	48 89 e5             	mov    rbp,rsp
    4e2c:	48 83 ec 10          	sub    rsp,0x10
    4e30:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4e34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4e38:	48 89 c7             	mov    rdi,rax
    4e3b:	e8 c0 f6 ff ff       	call   4500 <free@plt>
    4e40:	90                   	nop
    4e41:	c9                   	leave  
    4e42:	c3                   	ret    

0000000000004e43 <stbi_set_flip_vertically_on_load>:
    4e43:	55                   	push   rbp
    4e44:	48 89 e5             	mov    rbp,rsp
    4e47:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4e4a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e4d:	89 05 e1 68 04 00    	mov    DWORD PTR [rip+0x468e1],eax        # 4b734 <stbi__vertically_flip_on_load_global>
    4e53:	90                   	nop
    4e54:	5d                   	pop    rbp
    4e55:	c3                   	ret    

0000000000004e56 <stbi_set_flip_vertically_on_load_thread>:
    4e56:	55                   	push   rbp
    4e57:	48 89 e5             	mov    rbp,rsp
    4e5a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4e5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e60:	64 89 04 25 f8 ff ff ff 	mov    DWORD PTR fs:0xfffffffffffffff8,eax
    4e68:	64 c7 04 25 fc ff ff ff 01 00 00 00 	mov    DWORD PTR fs:0xfffffffffffffffc,0x1
    4e74:	90                   	nop
    4e75:	5d                   	pop    rbp
    4e76:	c3                   	ret    

0000000000004e77 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>:
    4e77:	55                   	push   rbp
    4e78:	48 89 e5             	mov    rbp,rsp
    4e7b:	48 83 ec 40          	sub    rsp,0x40
    4e7f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    4e83:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    4e87:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    4e8b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    4e8f:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    4e93:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
    4e97:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4e9b:	ba 0c 00 00 00       	mov    edx,0xc
    4ea0:	be 00 00 00 00       	mov    esi,0x0
    4ea5:	48 89 c7             	mov    rdi,rax
    4ea8:	e8 33 f3 ff ff       	call   41e0 <memset@plt>
    4ead:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4eb1:	c7 00 08 00 00 00    	mov    DWORD PTR [rax],0x8
    4eb7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4ebb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
    4ec2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4ec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
    4ecd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4ed1:	48 89 c7             	mov    rdi,rax
    4ed4:	e8 97 e6 00 00       	call   13570 <stbi__jpeg_test(stbi__context*)>
    4ed9:	85 c0                	test   eax,eax
    4edb:	0f 95 c0             	setne  al
    4ede:	84 c0                	test   al,al
    4ee0:	74 2a                	je     4f0c <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x95>
    4ee2:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4ee6:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4ee9:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4eed:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4ef1:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4ef5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4ef9:	4d 89 c1             	mov    r9,r8
    4efc:	41 89 f8             	mov    r8d,edi
    4eff:	48 89 c7             	mov    rdi,rax
    4f02:	e8 f0 e5 00 00       	call   134f7 <stbi__jpeg_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4f07:	e9 36 02 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    4f0c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f10:	48 89 c7             	mov    rdi,rax
    4f13:	e8 19 30 01 00       	call   17f31 <stbi__png_test(stbi__context*)>
    4f18:	85 c0                	test   eax,eax
    4f1a:	0f 95 c0             	setne  al
    4f1d:	84 c0                	test   al,al
    4f1f:	74 2a                	je     4f4b <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0xd4>
    4f21:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4f25:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4f28:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4f2c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4f30:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4f34:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f38:	4d 89 c1             	mov    r9,r8
    4f3b:	41 89 f8             	mov    r8d,edi
    4f3e:	48 89 c7             	mov    rdi,rax
    4f41:	e8 79 2f 01 00       	call   17ebf <stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4f46:	e9 f7 01 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    4f4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f4f:	48 89 c7             	mov    rdi,rax
    4f52:	e8 3e 32 01 00       	call   18195 <stbi__bmp_test(stbi__context*)>
    4f57:	85 c0                	test   eax,eax
    4f59:	0f 95 c0             	setne  al
    4f5c:	84 c0                	test   al,al
    4f5e:	74 2a                	je     4f8a <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x113>
    4f60:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4f64:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4f67:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4f6b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4f6f:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4f73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f77:	4d 89 c1             	mov    r9,r8
    4f7a:	41 89 f8             	mov    r8d,edi
    4f7d:	48 89 c7             	mov    rdi,rax
    4f80:	e8 53 38 01 00       	call   187d8 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4f85:	e9 b8 01 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    4f8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f8e:	48 89 c7             	mov    rdi,rax
    4f91:	e8 3b 69 01 00       	call   1b8d1 <stbi__gif_test(stbi__context*)>
    4f96:	85 c0                	test   eax,eax
    4f98:	0f 95 c0             	setne  al
    4f9b:	84 c0                	test   al,al
    4f9d:	74 2a                	je     4fc9 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x152>
    4f9f:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4fa3:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4fa6:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4faa:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4fae:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4fb2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4fb6:	4d 89 c1             	mov    r9,r8
    4fb9:	41 89 f8             	mov    r8d,edi
    4fbc:	48 89 c7             	mov    rdi,rax
    4fbf:	e8 21 7d 01 00       	call   1cce5 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4fc4:	e9 79 01 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    4fc9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4fcd:	48 89 c7             	mov    rdi,rax
    4fd0:	e8 3a 56 01 00       	call   1a60f <stbi__psd_test(stbi__context*)>
    4fd5:	85 c0                	test   eax,eax
    4fd7:	0f 95 c0             	setne  al
    4fda:	84 c0                	test   al,al
    4fdc:	74 31                	je     500f <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x198>
    4fde:	4c 8b 4d c0          	mov    r9,QWORD PTR [rbp-0x40]
    4fe2:	44 8b 45 cc          	mov    r8d,DWORD PTR [rbp-0x34]
    4fe6:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4fea:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4fee:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4ff2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4ff6:	48 83 ec 08          	sub    rsp,0x8
    4ffa:	8b 7d 10             	mov    edi,DWORD PTR [rbp+0x10]
    4ffd:	57                   	push   rdi
    4ffe:	48 89 c7             	mov    rdi,rax
    5001:	e8 34 57 01 00       	call   1a73a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>
    5006:	48 83 c4 10          	add    rsp,0x10
    500a:	e9 33 01 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    500f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5013:	48 89 c7             	mov    rdi,rax
    5016:	e8 df 67 01 00       	call   1b7fa <stbi__pic_test(stbi__context*)>
    501b:	85 c0                	test   eax,eax
    501d:	0f 95 c0             	setne  al
    5020:	84 c0                	test   al,al
    5022:	74 2a                	je     504e <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x1d7>
    5024:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    5028:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    502b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    502f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5033:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    5037:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    503b:	4d 89 c1             	mov    r9,r8
    503e:	41 89 f8             	mov    r8d,edi
    5041:	48 89 c7             	mov    rdi,rax
    5044:	e8 e1 65 01 00       	call   1b62a <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    5049:	e9 f4 00 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    504e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5052:	48 89 c7             	mov    rdi,rax
    5055:	e8 21 92 01 00       	call   1e27b <stbi__pnm_test(stbi__context*)>
    505a:	85 c0                	test   eax,eax
    505c:	0f 95 c0             	setne  al
    505f:	84 c0                	test   al,al
    5061:	74 2a                	je     508d <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x216>
    5063:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    5067:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    506a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    506e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5072:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    5076:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    507a:	4d 89 c1             	mov    r9,r8
    507d:	41 89 f8             	mov    r8d,edi
    5080:	48 89 c7             	mov    rdi,rax
    5083:	e8 49 92 01 00       	call   1e2d1 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    5088:	e9 b5 00 00 00       	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    508d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5091:	48 89 c7             	mov    rdi,rax
    5094:	e8 6d 7e 01 00       	call   1cf06 <stbi__hdr_test(stbi__context*)>
    5099:	85 c0                	test   eax,eax
    509b:	0f 95 c0             	setne  al
    509e:	84 c0                	test   al,al
    50a0:	74 53                	je     50f5 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x27e>
    50a2:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    50a6:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    50a9:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    50ad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    50b1:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    50b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    50b9:	4d 89 c1             	mov    r9,r8
    50bc:	41 89 f8             	mov    r8d,edi
    50bf:	48 89 c7             	mov    rdi,rax
    50c2:	e8 40 81 01 00       	call   1d207 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    50c7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    50cb:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    50cf:	75 08                	jne    50d9 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x262>
    50d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    50d5:	8b 00                	mov    eax,DWORD PTR [rax]
    50d7:	eb 03                	jmp    50dc <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x265>
    50d9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    50dc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    50e0:	8b 12                	mov    edx,DWORD PTR [rdx]
    50e2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
    50e6:	8b 31                	mov    esi,DWORD PTR [rcx]
    50e8:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
    50ec:	89 c1                	mov    ecx,eax
    50ee:	e8 7f 24 00 00       	call   7572 <stbi__hdr_to_ldr(float*, int, int, int)>
    50f3:	eb 4d                	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    50f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    50f9:	48 89 c7             	mov    rdi,rax
    50fc:	e8 33 4a 01 00       	call   19b34 <stbi__tga_test(stbi__context*)>
    5101:	85 c0                	test   eax,eax
    5103:	0f 95 c0             	setne  al
    5106:	84 c0                	test   al,al
    5108:	74 27                	je     5131 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ba>
    510a:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    510e:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    5111:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5115:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5119:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    511d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5121:	4d 89 c1             	mov    r9,r8
    5124:	41 89 f8             	mov    r8d,edi
    5127:	48 89 c7             	mov    rdi,rax
    512a:	e8 6a 4c 01 00       	call   19d99 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    512f:	eb 11                	jmp    5142 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2cb>
    5131:	48 8d 3d e8 4e 03 00 	lea    rdi,[rip+0x34ee8]        # 3a020 <_IO_stdin_used+0x20>
    5138:	e8 02 fa ff ff       	call   4b3f <stbi__err(char const*)>
    513d:	b8 00 00 00 00       	mov    eax,0x0
    5142:	c9                   	leave  
    5143:	c3                   	ret    

0000000000005144 <stbi__convert_16_to_8(unsigned short*, int, int, int)>:
    5144:	55                   	push   rbp
    5145:	48 89 e5             	mov    rbp,rsp
    5148:	48 83 ec 30          	sub    rsp,0x30
    514c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5150:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    5153:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    5156:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    5159:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    515c:	0f af 45 e0          	imul   eax,DWORD PTR [rbp-0x20]
    5160:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    5163:	0f af c2             	imul   eax,edx
    5166:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    5169:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    516c:	48 98                	cdqe   
    516e:	48 89 c7             	mov    rdi,rax
    5171:	e8 e5 f9 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
    5176:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    517a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    517f:	75 13                	jne    5194 <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x50>
    5181:	48 8d 3d ab 4e 03 00 	lea    rdi,[rip+0x34eab]        # 3a033 <_IO_stdin_used+0x33>
    5188:	e8 b2 f9 ff ff       	call   4b3f <stbi__err(char const*)>
    518d:	b8 00 00 00 00       	mov    eax,0x0
    5192:	eb 4f                	jmp    51e3 <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x9f>
    5194:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    519b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    519e:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    51a1:	7d 30                	jge    51d3 <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x8f>
    51a3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    51a6:	48 98                	cdqe   
    51a8:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    51ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    51b0:	48 01 d0             	add    rax,rdx
    51b3:	0f b7 00             	movzx  eax,WORD PTR [rax]
    51b6:	66 c1 e8 08          	shr    ax,0x8
    51ba:	89 c1                	mov    ecx,eax
    51bc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    51bf:	48 63 d0             	movsxd rdx,eax
    51c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    51c6:	48 01 d0             	add    rax,rdx
    51c9:	89 ca                	mov    edx,ecx
    51cb:	88 10                	mov    BYTE PTR [rax],dl
    51cd:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    51d1:	eb c8                	jmp    519b <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x57>
    51d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    51d7:	48 89 c7             	mov    rdi,rax
    51da:	e8 21 f3 ff ff       	call   4500 <free@plt>
    51df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    51e3:	c9                   	leave  
    51e4:	c3                   	ret    

00000000000051e5 <stbi__convert_8_to_16(unsigned char*, int, int, int)>:
    51e5:	55                   	push   rbp
    51e6:	48 89 e5             	mov    rbp,rsp
    51e9:	48 83 ec 30          	sub    rsp,0x30
    51ed:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    51f1:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    51f4:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    51f7:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    51fa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    51fd:	0f af 45 e0          	imul   eax,DWORD PTR [rbp-0x20]
    5201:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    5204:	0f af c2             	imul   eax,edx
    5207:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    520a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    520d:	01 c0                	add    eax,eax
    520f:	48 98                	cdqe   
    5211:	48 89 c7             	mov    rdi,rax
    5214:	e8 42 f9 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
    5219:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    521d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    5222:	75 13                	jne    5237 <stbi__convert_8_to_16(unsigned char*, int, int, int)+0x52>
    5224:	48 8d 3d 08 4e 03 00 	lea    rdi,[rip+0x34e08]        # 3a033 <_IO_stdin_used+0x33>
    522b:	e8 0f f9 ff ff       	call   4b3f <stbi__err(char const*)>
    5230:	b8 00 00 00 00       	mov    eax,0x0
    5235:	eb 65                	jmp    529c <stbi__convert_8_to_16(unsigned char*, int, int, int)+0xb7>
    5237:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    523e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5241:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    5244:	7d 46                	jge    528c <stbi__convert_8_to_16(unsigned char*, int, int, int)+0xa7>
    5246:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5249:	48 63 d0             	movsxd rdx,eax
    524c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5250:	48 01 d0             	add    rax,rdx
    5253:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    5256:	0f b6 c0             	movzx  eax,al
    5259:	c1 e0 08             	shl    eax,0x8
    525c:	89 c1                	mov    ecx,eax
    525e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5261:	48 63 d0             	movsxd rdx,eax
    5264:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5268:	48 01 d0             	add    rax,rdx
    526b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    526e:	0f b6 d0             	movzx  edx,al
    5271:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5274:	48 98                	cdqe   
    5276:	48 8d 34 00          	lea    rsi,[rax+rax*1]
    527a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    527e:	48 01 f0             	add    rax,rsi
    5281:	01 ca                	add    edx,ecx
    5283:	66 89 10             	mov    WORD PTR [rax],dx
    5286:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    528a:	eb b2                	jmp    523e <stbi__convert_8_to_16(unsigned char*, int, int, int)+0x59>
    528c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5290:	48 89 c7             	mov    rdi,rax
    5293:	e8 68 f2 ff ff       	call   4500 <free@plt>
    5298:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    529c:	c9                   	leave  
    529d:	c3                   	ret    

000000000000529e <stbi__vertical_flip(void*, int, int, int)>:
    529e:	55                   	push   rbp
    529f:	48 89 e5             	mov    rbp,rsp
    52a2:	48 81 ec 70 08 00 00 	sub    rsp,0x870
    52a9:	48 89 bd a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdi
    52b0:	89 b5 a4 f7 ff ff    	mov    DWORD PTR [rbp-0x85c],esi
    52b6:	89 95 a0 f7 ff ff    	mov    DWORD PTR [rbp-0x860],edx
    52bc:	89 8d 9c f7 ff ff    	mov    DWORD PTR [rbp-0x864],ecx
    52c2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    52cb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    52cf:	31 c0                	xor    eax,eax
    52d1:	8b 85 a4 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x85c]
    52d7:	48 63 d0             	movsxd rdx,eax
    52da:	8b 85 9c f7 ff ff    	mov    eax,DWORD PTR [rbp-0x864]
    52e0:	48 98                	cdqe   
    52e2:	48 0f af c2          	imul   rax,rdx
    52e6:	48 89 85 d8 f7 ff ff 	mov    QWORD PTR [rbp-0x828],rax
    52ed:	48 8b 85 a8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x858]
    52f4:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
    52fb:	c7 85 bc f7 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x844],0x0
    5305:	8b 85 a0 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x860]
    530b:	d1 f8                	sar    eax,1
    530d:	39 85 bc f7 ff ff    	cmp    DWORD PTR [rbp-0x844],eax
    5313:	0f 8d 27 01 00 00    	jge    5440 <stbi__vertical_flip(void*, int, int, int)+0x1a2>
    5319:	8b 85 bc f7 ff ff    	mov    eax,DWORD PTR [rbp-0x844]
    531f:	48 98                	cdqe   
    5321:	48 0f af 85 d8 f7 ff ff 	imul   rax,QWORD PTR [rbp-0x828]
    5329:	48 89 c2             	mov    rdx,rax
    532c:	48 8b 85 e0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x820]
    5333:	48 01 d0             	add    rax,rdx
    5336:	48 89 85 c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rax
    533d:	8b 85 a0 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x860]
    5343:	2b 85 bc f7 ff ff    	sub    eax,DWORD PTR [rbp-0x844]
    5349:	83 e8 01             	sub    eax,0x1
    534c:	48 98                	cdqe   
    534e:	48 0f af 85 d8 f7 ff ff 	imul   rax,QWORD PTR [rbp-0x828]
    5356:	48 89 c2             	mov    rdx,rax
    5359:	48 8b 85 e0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x820]
    5360:	48 01 d0             	add    rax,rdx
    5363:	48 89 85 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rax
    536a:	48 8b 85 d8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x828]
    5371:	48 89 85 d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rax
    5378:	48 83 bd d0 f7 ff ff 00 	cmp    QWORD PTR [rbp-0x830],0x0
    5380:	0f 84 ae 00 00 00    	je     5434 <stbi__vertical_flip(void*, int, int, int)+0x196>
    5386:	b8 00 08 00 00       	mov    eax,0x800
    538b:	48 81 bd d0 f7 ff ff 00 08 00 00 	cmp    QWORD PTR [rbp-0x830],0x800
    5396:	48 0f 46 85 d0 f7 ff ff 	cmovbe rax,QWORD PTR [rbp-0x830]
    539e:	48 89 85 e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rax
    53a5:	48 8b 95 e8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x818]
    53ac:	48 8b 8d c0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x840]
    53b3:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
    53ba:	48 89 ce             	mov    rsi,rcx
    53bd:	48 89 c7             	mov    rdi,rax
    53c0:	e8 8b ef ff ff       	call   4350 <memcpy@plt>
    53c5:	48 8b 95 e8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x818]
    53cc:	48 8b 8d c8 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x838]
    53d3:	48 8b 85 c0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x840]
    53da:	48 89 ce             	mov    rsi,rcx
    53dd:	48 89 c7             	mov    rdi,rax
    53e0:	e8 6b ef ff ff       	call   4350 <memcpy@plt>
    53e5:	48 8b 95 e8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x818]
    53ec:	48 8d 8d f0 f7 ff ff 	lea    rcx,[rbp-0x810]
    53f3:	48 8b 85 c8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x838]
    53fa:	48 89 ce             	mov    rsi,rcx
    53fd:	48 89 c7             	mov    rdi,rax
    5400:	e8 4b ef ff ff       	call   4350 <memcpy@plt>
    5405:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
    540c:	48 01 85 c0 f7 ff ff 	add    QWORD PTR [rbp-0x840],rax
    5413:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
    541a:	48 01 85 c8 f7 ff ff 	add    QWORD PTR [rbp-0x838],rax
    5421:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
    5428:	48 29 85 d0 f7 ff ff 	sub    QWORD PTR [rbp-0x830],rax
    542f:	e9 44 ff ff ff       	jmp    5378 <stbi__vertical_flip(void*, int, int, int)+0xda>
    5434:	83 85 bc f7 ff ff 01 	add    DWORD PTR [rbp-0x844],0x1
    543b:	e9 c5 fe ff ff       	jmp    5305 <stbi__vertical_flip(void*, int, int, int)+0x67>
    5440:	90                   	nop
    5441:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    5445:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    544e:	74 05                	je     5455 <stbi__vertical_flip(void*, int, int, int)+0x1b7>
    5450:	e8 5b f0 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5455:	c9                   	leave  
    5456:	c3                   	ret    

0000000000005457 <stbi__vertical_flip_slices(void*, int, int, int, int)>:
    5457:	55                   	push   rbp
    5458:	48 89 e5             	mov    rbp,rsp
    545b:	48 83 ec 30          	sub    rsp,0x30
    545f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5463:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    5466:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    5469:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    546c:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
    5470:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    5473:	0f af 45 e0          	imul   eax,DWORD PTR [rbp-0x20]
    5477:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    547a:	0f af c2             	imul   eax,edx
    547d:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    5480:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5484:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5488:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    548f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5492:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
    5495:	7d 24                	jge    54bb <stbi__vertical_flip_slices(void*, int, int, int, int)+0x64>
    5497:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
    549a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    549d:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
    54a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    54a4:	48 89 c7             	mov    rdi,rax
    54a7:	e8 f2 fd ff ff       	call   529e <stbi__vertical_flip(void*, int, int, int)>
    54ac:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    54af:	48 98                	cdqe   
    54b1:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
    54b5:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    54b9:	eb d4                	jmp    548f <stbi__vertical_flip_slices(void*, int, int, int, int)+0x38>
    54bb:	90                   	nop
    54bc:	c9                   	leave  
    54bd:	c3                   	ret    

00000000000054be <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>:
    54be:	55                   	push   rbp
    54bf:	48 89 e5             	mov    rbp,rsp
    54c2:	48 83 ec 60          	sub    rsp,0x60
    54c6:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    54ca:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    54ce:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    54d2:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    54d6:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
    54da:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    54e3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    54e7:	31 c0                	xor    eax,eax
    54e9:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
    54ed:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    54f0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    54f4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    54f8:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    54fc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5500:	48 83 ec 08          	sub    rsp,0x8
    5504:	6a 08                	push   0x8
    5506:	4d 89 c1             	mov    r9,r8
    5509:	41 89 f8             	mov    r8d,edi
    550c:	48 89 c7             	mov    rdi,rax
    550f:	e8 63 f9 ff ff       	call   4e77 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>
    5514:	48 83 c4 10          	add    rsp,0x10
    5518:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    551c:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    5521:	75 0a                	jne    552d <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x6f>
    5523:	b8 00 00 00 00       	mov    eax,0x0
    5528:	e9 b5 00 00 00       	jmp    55e2 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x124>
    552d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    5530:	83 f8 08             	cmp    eax,0x8
    5533:	74 5a                	je     558f <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xd1>
    5535:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    5538:	83 f8 10             	cmp    eax,0x10
    553b:	74 1f                	je     555c <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x9e>
    553d:	48 8d 0d fc 4a 03 00 	lea    rcx,[rip+0x34afc]        # 3a040 <_IO_stdin_used+0x40>
    5544:	ba 97 04 00 00       	mov    edx,0x497
    5549:	48 8d 35 48 4b 03 00 	lea    rsi,[rip+0x34b48]        # 3a098 <_IO_stdin_used+0x98>
    5550:	48 8d 3d 61 4b 03 00 	lea    rdi,[rip+0x34b61]        # 3a0b8 <_IO_stdin_used+0xb8>
    5557:	e8 24 ed ff ff       	call   4280 <__assert_fail@plt>
    555c:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    5560:	75 08                	jne    556a <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xac>
    5562:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    5566:	8b 00                	mov    eax,DWORD PTR [rax]
    5568:	eb 03                	jmp    556d <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xaf>
    556a:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    556d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5571:	8b 12                	mov    edx,DWORD PTR [rdx]
    5573:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    5577:	8b 31                	mov    esi,DWORD PTR [rcx]
    5579:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
    557d:	89 c1                	mov    ecx,eax
    557f:	e8 c0 fb ff ff       	call   5144 <stbi__convert_16_to_8(unsigned short*, int, int, int)>
    5584:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    5588:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [rbp-0x14],0x8
    558f:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    5597:	85 c0                	test   eax,eax
    5599:	74 0a                	je     55a5 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xe7>
    559b:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    55a3:	eb 06                	jmp    55ab <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xed>
    55a5:	8b 05 89 61 04 00    	mov    eax,DWORD PTR [rip+0x46189]        # 4b734 <stbi__vertically_flip_on_load_global>
    55ab:	85 c0                	test   eax,eax
    55ad:	74 2f                	je     55de <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x120>
    55af:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    55b3:	75 08                	jne    55bd <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xff>
    55b5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    55b9:	8b 00                	mov    eax,DWORD PTR [rax]
    55bb:	eb 03                	jmp    55c0 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x102>
    55bd:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    55c0:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    55c3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    55c7:	8b 10                	mov    edx,DWORD PTR [rax]
    55c9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    55cd:	8b 30                	mov    esi,DWORD PTR [rax]
    55cf:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
    55d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    55d6:	48 89 c7             	mov    rdi,rax
    55d9:	e8 c0 fc ff ff       	call   529e <stbi__vertical_flip(void*, int, int, int)>
    55de:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    55e2:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
    55e6:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
    55ef:	74 05                	je     55f6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x138>
    55f1:	e8 ba ee ff ff       	call   44b0 <__stack_chk_fail@plt>
    55f6:	c9                   	leave  
    55f7:	c3                   	ret    

00000000000055f8 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>:
    55f8:	55                   	push   rbp
    55f9:	48 89 e5             	mov    rbp,rsp
    55fc:	48 83 ec 60          	sub    rsp,0x60
    5600:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    5604:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    5608:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    560c:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    5610:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
    5614:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    561d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5621:	31 c0                	xor    eax,eax
    5623:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
    5627:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    562a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    562e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5632:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5636:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    563a:	48 83 ec 08          	sub    rsp,0x8
    563e:	6a 10                	push   0x10
    5640:	4d 89 c1             	mov    r9,r8
    5643:	41 89 f8             	mov    r8d,edi
    5646:	48 89 c7             	mov    rdi,rax
    5649:	e8 29 f8 ff ff       	call   4e77 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>
    564e:	48 83 c4 10          	add    rsp,0x10
    5652:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    5656:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    565b:	75 0a                	jne    5667 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x6f>
    565d:	b8 00 00 00 00       	mov    eax,0x0
    5662:	e9 bb 00 00 00       	jmp    5722 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x12a>
    5667:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    566a:	83 f8 10             	cmp    eax,0x10
    566d:	74 5a                	je     56c9 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xd1>
    566f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    5672:	83 f8 08             	cmp    eax,0x8
    5675:	74 1f                	je     5696 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x9e>
    5677:	48 8d 0d 5a 4a 03 00 	lea    rcx,[rip+0x34a5a]        # 3a0d8 <_IO_stdin_used+0xd8>
    567e:	ba af 04 00 00       	mov    edx,0x4af
    5683:	48 8d 35 0e 4a 03 00 	lea    rsi,[rip+0x34a0e]        # 3a098 <_IO_stdin_used+0x98>
    568a:	48 8d 3d 9d 4a 03 00 	lea    rdi,[rip+0x34a9d]        # 3a12e <_IO_stdin_used+0x12e>
    5691:	e8 ea eb ff ff       	call   4280 <__assert_fail@plt>
    5696:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    569a:	75 08                	jne    56a4 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xac>
    569c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    56a0:	8b 00                	mov    eax,DWORD PTR [rax]
    56a2:	eb 03                	jmp    56a7 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xaf>
    56a4:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    56a7:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    56ab:	8b 12                	mov    edx,DWORD PTR [rdx]
    56ad:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    56b1:	8b 31                	mov    esi,DWORD PTR [rcx]
    56b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
    56b7:	89 c1                	mov    ecx,eax
    56b9:	e8 27 fb ff ff       	call   51e5 <stbi__convert_8_to_16(unsigned char*, int, int, int)>
    56be:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    56c2:	c7 45 ec 10 00 00 00 	mov    DWORD PTR [rbp-0x14],0x10
    56c9:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    56d1:	85 c0                	test   eax,eax
    56d3:	74 0a                	je     56df <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xe7>
    56d5:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    56dd:	eb 06                	jmp    56e5 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xed>
    56df:	8b 05 4f 60 04 00    	mov    eax,DWORD PTR [rip+0x4604f]        # 4b734 <stbi__vertically_flip_on_load_global>
    56e5:	85 c0                	test   eax,eax
    56e7:	74 35                	je     571e <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x126>
    56e9:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    56ed:	75 08                	jne    56f7 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xff>
    56ef:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    56f3:	8b 00                	mov    eax,DWORD PTR [rax]
    56f5:	eb 03                	jmp    56fa <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x102>
    56f7:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    56fa:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    56fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    5700:	48 98                	cdqe   
    5702:	01 c0                	add    eax,eax
    5704:	89 c1                	mov    ecx,eax
    5706:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    570a:	8b 10                	mov    edx,DWORD PTR [rax]
    570c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    5710:	8b 30                	mov    esi,DWORD PTR [rax]
    5712:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5716:	48 89 c7             	mov    rdi,rax
    5719:	e8 80 fb ff ff       	call   529e <stbi__vertical_flip(void*, int, int, int)>
    571e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5722:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
    5726:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
    572f:	74 05                	je     5736 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x13e>
    5731:	e8 7a ed ff ff       	call   44b0 <__stack_chk_fail@plt>
    5736:	c9                   	leave  
    5737:	c3                   	ret    

0000000000005738 <stbi__float_postprocess(float*, int*, int*, int*, int)>:
    5738:	55                   	push   rbp
    5739:	48 89 e5             	mov    rbp,rsp
    573c:	48 83 ec 40          	sub    rsp,0x40
    5740:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5744:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    5748:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    574c:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    5750:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    5754:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    575c:	85 c0                	test   eax,eax
    575e:	74 0a                	je     576a <stbi__float_postprocess(float*, int*, int*, int*, int)+0x32>
    5760:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    5768:	eb 06                	jmp    5770 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x38>
    576a:	8b 05 c4 5f 04 00    	mov    eax,DWORD PTR [rip+0x45fc4]        # 4b734 <stbi__vertically_flip_on_load_global>
    5770:	85 c0                	test   eax,eax
    5772:	74 3d                	je     57b1 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x79>
    5774:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
    5779:	74 36                	je     57b1 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x79>
    577b:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    577f:	75 08                	jne    5789 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x51>
    5781:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    5785:	8b 00                	mov    eax,DWORD PTR [rax]
    5787:	eb 03                	jmp    578c <stbi__float_postprocess(float*, int*, int*, int*, int)+0x54>
    5789:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    578c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    578f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    5792:	48 98                	cdqe   
    5794:	c1 e0 02             	shl    eax,0x2
    5797:	89 c1                	mov    ecx,eax
    5799:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    579d:	8b 10                	mov    edx,DWORD PTR [rax]
    579f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    57a3:	8b 30                	mov    esi,DWORD PTR [rax]
    57a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    57a9:	48 89 c7             	mov    rdi,rax
    57ac:	e8 ed fa ff ff       	call   529e <stbi__vertical_flip(void*, int, int, int)>
    57b1:	90                   	nop
    57b2:	c9                   	leave  
    57b3:	c3                   	ret    

00000000000057b4 <stbi__fopen(char const*, char const*)>:
    57b4:	55                   	push   rbp
    57b5:	48 89 e5             	mov    rbp,rsp
    57b8:	48 83 ec 20          	sub    rsp,0x20
    57bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    57c0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    57c4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    57c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    57cc:	48 89 d6             	mov    rsi,rdx
    57cf:	48 89 c7             	mov    rdi,rax
    57d2:	e8 19 ed ff ff       	call   44f0 <fopen@plt>
    57d7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    57db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    57df:	c9                   	leave  
    57e0:	c3                   	ret    

00000000000057e1 <stbi_load>:
    57e1:	55                   	push   rbp
    57e2:	48 89 e5             	mov    rbp,rsp
    57e5:	48 83 ec 40          	sub    rsp,0x40
    57e9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    57ed:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    57f1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    57f5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    57f9:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    57fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5801:	48 8d 35 3f 49 03 00 	lea    rsi,[rip+0x3493f]        # 3a147 <_IO_stdin_used+0x147>
    5808:	48 89 c7             	mov    rdi,rax
    580b:	e8 a4 ff ff ff       	call   57b4 <stbi__fopen(char const*, char const*)>
    5810:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    5814:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    5819:	75 13                	jne    582e <stbi_load+0x4d>
    581b:	48 8d 3d 28 49 03 00 	lea    rdi,[rip+0x34928]        # 3a14a <_IO_stdin_used+0x14a>
    5822:	e8 18 f3 ff ff       	call   4b3f <stbi__err(char const*)>
    5827:	b8 00 00 00 00       	mov    eax,0x0
    582c:	eb 32                	jmp    5860 <stbi_load+0x7f>
    582e:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    5831:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5835:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5839:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    583d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5841:	41 89 f8             	mov    r8d,edi
    5844:	48 89 c7             	mov    rdi,rax
    5847:	e8 16 00 00 00       	call   5862 <stbi_load_from_file>
    584c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5850:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5854:	48 89 c7             	mov    rdi,rax
    5857:	e8 94 eb ff ff       	call   43f0 <fclose@plt>
    585c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    5860:	c9                   	leave  
    5861:	c3                   	ret    

0000000000005862 <stbi_load_from_file>:
    5862:	55                   	push   rbp
    5863:	48 89 e5             	mov    rbp,rsp
    5866:	48 81 ec 20 01 00 00 	sub    rsp,0x120
    586d:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    5874:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
    587b:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    5882:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    5889:	44 89 85 ec fe ff ff 	mov    DWORD PTR [rbp-0x114],r8d
    5890:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5899:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    589d:	31 c0                	xor    eax,eax
    589f:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    58a6:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    58ad:	48 89 d6             	mov    rsi,rdx
    58b0:	48 89 c7             	mov    rdi,rax
    58b3:	e8 17 f2 ff ff       	call   4acf <stbi__start_file(stbi__context*, _IO_FILE*)>
    58b8:	8b bd ec fe ff ff    	mov    edi,DWORD PTR [rbp-0x114]
    58be:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
    58c5:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
    58cc:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
    58d3:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    58da:	41 89 f8             	mov    r8d,edi
    58dd:	48 89 c7             	mov    rdi,rax
    58e0:	e8 d9 fb ff ff       	call   54be <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    58e5:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    58ec:	48 83 bd 18 ff ff ff 00 	cmp    QWORD PTR [rbp-0xe8],0x0
    58f4:	74 27                	je     591d <stbi_load_from_file+0xbb>
    58f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    58fa:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    58fe:	48 29 d0             	sub    rax,rdx
    5901:	f7 d8                	neg    eax
    5903:	48 63 c8             	movsxd rcx,eax
    5906:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    590d:	ba 01 00 00 00       	mov    edx,0x1
    5912:	48 89 ce             	mov    rsi,rcx
    5915:	48 89 c7             	mov    rdi,rax
    5918:	e8 83 eb ff ff       	call   44a0 <fseek@plt>
    591d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5924:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    5928:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    5931:	74 05                	je     5938 <stbi_load_from_file+0xd6>
    5933:	e8 78 eb ff ff       	call   44b0 <__stack_chk_fail@plt>
    5938:	c9                   	leave  
    5939:	c3                   	ret    

000000000000593a <stbi_load_from_file_16>:
    593a:	55                   	push   rbp
    593b:	48 89 e5             	mov    rbp,rsp
    593e:	48 81 ec 20 01 00 00 	sub    rsp,0x120
    5945:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    594c:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
    5953:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    595a:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    5961:	44 89 85 ec fe ff ff 	mov    DWORD PTR [rbp-0x114],r8d
    5968:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5971:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5975:	31 c0                	xor    eax,eax
    5977:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    597e:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5985:	48 89 d6             	mov    rsi,rdx
    5988:	48 89 c7             	mov    rdi,rax
    598b:	e8 3f f1 ff ff       	call   4acf <stbi__start_file(stbi__context*, _IO_FILE*)>
    5990:	8b bd ec fe ff ff    	mov    edi,DWORD PTR [rbp-0x114]
    5996:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
    599d:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
    59a4:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
    59ab:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    59b2:	41 89 f8             	mov    r8d,edi
    59b5:	48 89 c7             	mov    rdi,rax
    59b8:	e8 3b fc ff ff       	call   55f8 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>
    59bd:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    59c4:	48 83 bd 18 ff ff ff 00 	cmp    QWORD PTR [rbp-0xe8],0x0
    59cc:	74 27                	je     59f5 <stbi_load_from_file_16+0xbb>
    59ce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    59d2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    59d6:	48 29 d0             	sub    rax,rdx
    59d9:	f7 d8                	neg    eax
    59db:	48 63 c8             	movsxd rcx,eax
    59de:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    59e5:	ba 01 00 00 00       	mov    edx,0x1
    59ea:	48 89 ce             	mov    rsi,rcx
    59ed:	48 89 c7             	mov    rdi,rax
    59f0:	e8 ab ea ff ff       	call   44a0 <fseek@plt>
    59f5:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    59fc:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    5a00:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    5a09:	74 05                	je     5a10 <stbi_load_from_file_16+0xd6>
    5a0b:	e8 a0 ea ff ff       	call   44b0 <__stack_chk_fail@plt>
    5a10:	c9                   	leave  
    5a11:	c3                   	ret    

0000000000005a12 <stbi_load_16>:
    5a12:	55                   	push   rbp
    5a13:	48 89 e5             	mov    rbp,rsp
    5a16:	48 83 ec 40          	sub    rsp,0x40
    5a1a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5a1e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    5a22:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    5a26:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    5a2a:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    5a2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5a32:	48 8d 35 0e 47 03 00 	lea    rsi,[rip+0x3470e]        # 3a147 <_IO_stdin_used+0x147>
    5a39:	48 89 c7             	mov    rdi,rax
    5a3c:	e8 73 fd ff ff       	call   57b4 <stbi__fopen(char const*, char const*)>
    5a41:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    5a45:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    5a4a:	75 13                	jne    5a5f <stbi_load_16+0x4d>
    5a4c:	48 8d 3d f7 46 03 00 	lea    rdi,[rip+0x346f7]        # 3a14a <_IO_stdin_used+0x14a>
    5a53:	e8 e7 f0 ff ff       	call   4b3f <stbi__err(char const*)>
    5a58:	b8 00 00 00 00       	mov    eax,0x0
    5a5d:	eb 32                	jmp    5a91 <stbi_load_16+0x7f>
    5a5f:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    5a62:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5a66:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5a6a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    5a6e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5a72:	41 89 f8             	mov    r8d,edi
    5a75:	48 89 c7             	mov    rdi,rax
    5a78:	e8 bd fe ff ff       	call   593a <stbi_load_from_file_16>
    5a7d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5a81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5a85:	48 89 c7             	mov    rdi,rax
    5a88:	e8 63 e9 ff ff       	call   43f0 <fclose@plt>
    5a8d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    5a91:	c9                   	leave  
    5a92:	c3                   	ret    

0000000000005a93 <stbi_load_16_from_memory>:
    5a93:	55                   	push   rbp
    5a94:	48 89 e5             	mov    rbp,rsp
    5a97:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5a9e:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5aa5:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    5aab:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5ab2:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5ab9:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5ac0:	44 89 8d 10 ff ff ff 	mov    DWORD PTR [rbp-0xf0],r9d
    5ac7:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5ad0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5ad4:	31 c0                	xor    eax,eax
    5ad6:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    5adc:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5ae3:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5aea:	48 89 ce             	mov    rsi,rcx
    5aed:	48 89 c7             	mov    rdi,rax
    5af0:	e8 5b ee ff ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5af5:	8b bd 10 ff ff ff    	mov    edi,DWORD PTR [rbp-0xf0]
    5afb:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5b02:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5b09:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5b10:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5b17:	41 89 f8             	mov    r8d,edi
    5b1a:	48 89 c7             	mov    rdi,rax
    5b1d:	e8 d6 fa ff ff       	call   55f8 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>
    5b22:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    5b26:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    5b2f:	74 05                	je     5b36 <stbi_load_16_from_memory+0xa3>
    5b31:	e8 7a e9 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5b36:	c9                   	leave  
    5b37:	c3                   	ret    

0000000000005b38 <stbi_load_16_from_callbacks>:
    5b38:	55                   	push   rbp
    5b39:	48 89 e5             	mov    rbp,rsp
    5b3c:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5b43:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5b4a:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    5b51:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5b58:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5b5f:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5b66:	44 89 8d f4 fe ff ff 	mov    DWORD PTR [rbp-0x10c],r9d
    5b6d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5b76:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5b7a:	31 c0                	xor    eax,eax
    5b7c:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    5b83:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5b8a:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5b91:	48 89 ce             	mov    rsi,rcx
    5b94:	48 89 c7             	mov    rdi,rax
    5b97:	e8 30 ee ff ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    5b9c:	8b bd f4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x10c]
    5ba2:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5ba9:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5bb0:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5bb7:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5bbe:	41 89 f8             	mov    r8d,edi
    5bc1:	48 89 c7             	mov    rdi,rax
    5bc4:	e8 2f fa ff ff       	call   55f8 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>
    5bc9:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    5bcd:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    5bd6:	74 05                	je     5bdd <stbi_load_16_from_callbacks+0xa5>
    5bd8:	e8 d3 e8 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5bdd:	c9                   	leave  
    5bde:	c3                   	ret    

0000000000005bdf <stbi_load_from_memory>:
    5bdf:	55                   	push   rbp
    5be0:	48 89 e5             	mov    rbp,rsp
    5be3:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5bea:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5bf1:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    5bf7:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5bfe:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5c05:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5c0c:	44 89 8d 10 ff ff ff 	mov    DWORD PTR [rbp-0xf0],r9d
    5c13:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5c1c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5c20:	31 c0                	xor    eax,eax
    5c22:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    5c28:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5c2f:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5c36:	48 89 ce             	mov    rsi,rcx
    5c39:	48 89 c7             	mov    rdi,rax
    5c3c:	e8 0f ed ff ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5c41:	8b bd 10 ff ff ff    	mov    edi,DWORD PTR [rbp-0xf0]
    5c47:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5c4e:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5c55:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5c5c:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5c63:	41 89 f8             	mov    r8d,edi
    5c66:	48 89 c7             	mov    rdi,rax
    5c69:	e8 50 f8 ff ff       	call   54be <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5c6e:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    5c72:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    5c7b:	74 05                	je     5c82 <stbi_load_from_memory+0xa3>
    5c7d:	e8 2e e8 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5c82:	c9                   	leave  
    5c83:	c3                   	ret    

0000000000005c84 <stbi_load_from_callbacks>:
    5c84:	55                   	push   rbp
    5c85:	48 89 e5             	mov    rbp,rsp
    5c88:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5c8f:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5c96:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    5c9d:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5ca4:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5cab:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5cb2:	44 89 8d f4 fe ff ff 	mov    DWORD PTR [rbp-0x10c],r9d
    5cb9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5cc2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5cc6:	31 c0                	xor    eax,eax
    5cc8:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    5ccf:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5cd6:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5cdd:	48 89 ce             	mov    rsi,rcx
    5ce0:	48 89 c7             	mov    rdi,rax
    5ce3:	e8 e4 ec ff ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    5ce8:	8b bd f4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x10c]
    5cee:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5cf5:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5cfc:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5d03:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5d0a:	41 89 f8             	mov    r8d,edi
    5d0d:	48 89 c7             	mov    rdi,rax
    5d10:	e8 a9 f7 ff ff       	call   54be <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5d15:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    5d19:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    5d22:	74 05                	je     5d29 <stbi_load_from_callbacks+0xa5>
    5d24:	e8 87 e7 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5d29:	c9                   	leave  
    5d2a:	c3                   	ret    

0000000000005d2b <stbi_load_gif_from_memory>:
    5d2b:	55                   	push   rbp
    5d2c:	48 89 e5             	mov    rbp,rsp
    5d2f:	48 81 ec 30 01 00 00 	sub    rsp,0x130
    5d36:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    5d3d:	89 b5 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],esi
    5d43:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    5d4a:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    5d51:	4c 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],r8
    5d58:	4c 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r9
    5d5f:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    5d63:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
    5d6a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5d73:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5d77:	31 c0                	xor    eax,eax
    5d79:	8b 95 04 ff ff ff    	mov    edx,DWORD PTR [rbp-0xfc]
    5d7f:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
    5d86:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5d8d:	48 89 ce             	mov    rsi,rcx
    5d90:	48 89 c7             	mov    rdi,rax
    5d93:	e8 b8 eb ff ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5d98:	4c 8b 8d d8 fe ff ff 	mov    r9,QWORD PTR [rbp-0x128]
    5d9f:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
    5da6:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
    5dad:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
    5db4:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
    5dbb:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5dc2:	48 83 ec 08          	sub    rsp,0x8
    5dc6:	8b 7d 18             	mov    edi,DWORD PTR [rbp+0x18]
    5dc9:	57                   	push   rdi
    5dca:	48 89 c7             	mov    rdi,rax
    5dcd:	e8 5f 6b 01 00       	call   1c931 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)>
    5dd2:	48 83 c4 10          	add    rsp,0x10
    5dd6:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    5ddd:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    5de5:	85 c0                	test   eax,eax
    5de7:	74 0a                	je     5df3 <stbi_load_gif_from_memory+0xc8>
    5de9:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    5df1:	eb 06                	jmp    5df9 <stbi_load_gif_from_memory+0xce>
    5df3:	8b 05 3b 59 04 00    	mov    eax,DWORD PTR [rip+0x4593b]        # 4b734 <stbi__vertically_flip_on_load_global>
    5df9:	85 c0                	test   eax,eax
    5dfb:	74 36                	je     5e33 <stbi_load_gif_from_memory+0x108>
    5dfd:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    5e04:	8b 38                	mov    edi,DWORD PTR [rax]
    5e06:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
    5e0d:	8b 08                	mov    ecx,DWORD PTR [rax]
    5e0f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
    5e16:	8b 10                	mov    edx,DWORD PTR [rax]
    5e18:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
    5e1f:	8b 30                	mov    esi,DWORD PTR [rax]
    5e21:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5e28:	41 89 f8             	mov    r8d,edi
    5e2b:	48 89 c7             	mov    rdi,rax
    5e2e:	e8 24 f6 ff ff       	call   5457 <stbi__vertical_flip_slices(void*, int, int, int, int)>
    5e33:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5e3a:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    5e3e:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    5e47:	74 05                	je     5e4e <stbi_load_gif_from_memory+0x123>
    5e49:	e8 62 e6 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5e4e:	c9                   	leave  
    5e4f:	c3                   	ret    

0000000000005e50 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>:
    5e50:	55                   	push   rbp
    5e51:	48 89 e5             	mov    rbp,rsp
    5e54:	48 83 ec 60          	sub    rsp,0x60
    5e58:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    5e5c:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    5e60:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    5e64:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    5e68:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
    5e6c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5e75:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5e79:	31 c0                	xor    eax,eax
    5e7b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5e7f:	48 89 c7             	mov    rdi,rax
    5e82:	e8 7f 70 01 00       	call   1cf06 <stbi__hdr_test(stbi__context*)>
    5e87:	85 c0                	test   eax,eax
    5e89:	0f 95 c0             	setne  al
    5e8c:	84 c0                	test   al,al
    5e8e:	74 54                	je     5ee4 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0x94>
    5e90:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
    5e94:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5e97:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    5e9b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5e9f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5ea3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5ea7:	4d 89 c1             	mov    r9,r8
    5eaa:	41 89 f8             	mov    r8d,edi
    5ead:	48 89 c7             	mov    rdi,rax
    5eb0:	e8 52 73 01 00       	call   1d207 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    5eb5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    5eb9:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    5ebe:	74 1e                	je     5ede <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0x8e>
    5ec0:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5ec3:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    5ec7:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5ecb:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5ecf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5ed3:	41 89 f8             	mov    r8d,edi
    5ed6:	48 89 c7             	mov    rdi,rax
    5ed9:	e8 5a f8 ff ff       	call   5738 <stbi__float_postprocess(float*, int*, int*, int*, int)>
    5ede:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5ee2:	eb 64                	jmp    5f48 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xf8>
    5ee4:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5ee7:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    5eeb:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5eef:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5ef3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5ef7:	41 89 f8             	mov    r8d,edi
    5efa:	48 89 c7             	mov    rdi,rax
    5efd:	e8 bc f5 ff ff       	call   54be <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5f02:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    5f06:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
    5f0b:	74 2a                	je     5f37 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xe7>
    5f0d:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    5f11:	75 08                	jne    5f1b <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xcb>
    5f13:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    5f17:	8b 00                	mov    eax,DWORD PTR [rax]
    5f19:	eb 03                	jmp    5f1e <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xce>
    5f1b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    5f1e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5f22:	8b 12                	mov    edx,DWORD PTR [rdx]
    5f24:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    5f28:	8b 31                	mov    esi,DWORD PTR [rcx]
    5f2a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
    5f2e:	89 c1                	mov    ecx,eax
    5f30:	e8 77 14 00 00       	call   73ac <stbi__ldr_to_hdr(unsigned char*, int, int, int)>
    5f35:	eb 11                	jmp    5f48 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xf8>
    5f37:	48 8d 3d e2 40 03 00 	lea    rdi,[rip+0x340e2]        # 3a020 <_IO_stdin_used+0x20>
    5f3e:	e8 fc eb ff ff       	call   4b3f <stbi__err(char const*)>
    5f43:	b8 00 00 00 00       	mov    eax,0x0
    5f48:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    5f4c:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    5f55:	74 05                	je     5f5c <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0x10c>
    5f57:	e8 54 e5 ff ff       	call   44b0 <__stack_chk_fail@plt>
    5f5c:	c9                   	leave  
    5f5d:	c3                   	ret    

0000000000005f5e <stbi_loadf_from_memory>:
    5f5e:	55                   	push   rbp
    5f5f:	48 89 e5             	mov    rbp,rsp
    5f62:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5f69:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5f70:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    5f76:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5f7d:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5f84:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5f8b:	44 89 8d 10 ff ff ff 	mov    DWORD PTR [rbp-0xf0],r9d
    5f92:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5f9b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5f9f:	31 c0                	xor    eax,eax
    5fa1:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    5fa7:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5fae:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5fb5:	48 89 ce             	mov    rsi,rcx
    5fb8:	48 89 c7             	mov    rdi,rax
    5fbb:	e8 90 e9 ff ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5fc0:	8b bd 10 ff ff ff    	mov    edi,DWORD PTR [rbp-0xf0]
    5fc6:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5fcd:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5fd4:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5fdb:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5fe2:	41 89 f8             	mov    r8d,edi
    5fe5:	48 89 c7             	mov    rdi,rax
    5fe8:	e8 63 fe ff ff       	call   5e50 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>
    5fed:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    5ff1:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    5ffa:	74 05                	je     6001 <stbi_loadf_from_memory+0xa3>
    5ffc:	e8 af e4 ff ff       	call   44b0 <__stack_chk_fail@plt>
    6001:	c9                   	leave  
    6002:	c3                   	ret    

0000000000006003 <stbi_loadf_from_callbacks>:
    6003:	55                   	push   rbp
    6004:	48 89 e5             	mov    rbp,rsp
    6007:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    600e:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    6015:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    601c:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    6023:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    602a:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    6031:	44 89 8d f4 fe ff ff 	mov    DWORD PTR [rbp-0x10c],r9d
    6038:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    6041:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6045:	31 c0                	xor    eax,eax
    6047:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    604e:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    6055:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    605c:	48 89 ce             	mov    rsi,rcx
    605f:	48 89 c7             	mov    rdi,rax
    6062:	e8 65 e9 ff ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    6067:	8b bd f4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x10c]
    606d:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    6074:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    607b:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    6082:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6089:	41 89 f8             	mov    r8d,edi
    608c:	48 89 c7             	mov    rdi,rax
    608f:	e8 bc fd ff ff       	call   5e50 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>
    6094:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    6098:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    60a1:	74 05                	je     60a8 <stbi_loadf_from_callbacks+0xa5>
    60a3:	e8 08 e4 ff ff       	call   44b0 <__stack_chk_fail@plt>
    60a8:	c9                   	leave  
    60a9:	c3                   	ret    

00000000000060aa <stbi_loadf>:
    60aa:	55                   	push   rbp
    60ab:	48 89 e5             	mov    rbp,rsp
    60ae:	48 83 ec 40          	sub    rsp,0x40
    60b2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    60b6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    60ba:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    60be:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    60c2:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    60c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    60ca:	48 8d 35 76 40 03 00 	lea    rsi,[rip+0x34076]        # 3a147 <_IO_stdin_used+0x147>
    60d1:	48 89 c7             	mov    rdi,rax
    60d4:	e8 db f6 ff ff       	call   57b4 <stbi__fopen(char const*, char const*)>
    60d9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    60dd:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    60e2:	75 13                	jne    60f7 <stbi_loadf+0x4d>
    60e4:	48 8d 3d 5f 40 03 00 	lea    rdi,[rip+0x3405f]        # 3a14a <_IO_stdin_used+0x14a>
    60eb:	e8 4f ea ff ff       	call   4b3f <stbi__err(char const*)>
    60f0:	b8 00 00 00 00       	mov    eax,0x0
    60f5:	eb 32                	jmp    6129 <stbi_loadf+0x7f>
    60f7:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    60fa:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    60fe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    6102:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    6106:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    610a:	41 89 f8             	mov    r8d,edi
    610d:	48 89 c7             	mov    rdi,rax
    6110:	e8 16 00 00 00       	call   612b <stbi_loadf_from_file>
    6115:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6119:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    611d:	48 89 c7             	mov    rdi,rax
    6120:	e8 cb e2 ff ff       	call   43f0 <fclose@plt>
    6125:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6129:	c9                   	leave  
    612a:	c3                   	ret    

000000000000612b <stbi_loadf_from_file>:
    612b:	55                   	push   rbp
    612c:	48 89 e5             	mov    rbp,rsp
    612f:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    6136:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    613d:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    6144:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    614b:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    6152:	44 89 85 fc fe ff ff 	mov    DWORD PTR [rbp-0x104],r8d
    6159:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    6162:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6166:	31 c0                	xor    eax,eax
    6168:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
    616f:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6176:	48 89 d6             	mov    rsi,rdx
    6179:	48 89 c7             	mov    rdi,rax
    617c:	e8 4e e9 ff ff       	call   4acf <stbi__start_file(stbi__context*, _IO_FILE*)>
    6181:	8b bd fc fe ff ff    	mov    edi,DWORD PTR [rbp-0x104]
    6187:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
    618e:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    6195:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
    619c:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    61a3:	41 89 f8             	mov    r8d,edi
    61a6:	48 89 c7             	mov    rdi,rax
    61a9:	e8 a2 fc ff ff       	call   5e50 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>
    61ae:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    61b2:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    61bb:	74 05                	je     61c2 <stbi_loadf_from_file+0x97>
    61bd:	e8 ee e2 ff ff       	call   44b0 <__stack_chk_fail@plt>
    61c2:	c9                   	leave  
    61c3:	c3                   	ret    

00000000000061c4 <stbi_is_hdr_from_memory>:
    61c4:	55                   	push   rbp
    61c5:	48 89 e5             	mov    rbp,rsp
    61c8:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
    61cf:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    61d6:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    61dc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    61e5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    61e9:	31 c0                	xor    eax,eax
    61eb:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    61f1:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    61f8:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    61ff:	48 89 ce             	mov    rsi,rcx
    6202:	48 89 c7             	mov    rdi,rax
    6205:	e8 46 e7 ff ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    620a:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6211:	48 89 c7             	mov    rdi,rax
    6214:	e8 ed 6c 01 00       	call   1cf06 <stbi__hdr_test(stbi__context*)>
    6219:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    621d:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    6226:	74 05                	je     622d <stbi_is_hdr_from_memory+0x69>
    6228:	e8 83 e2 ff ff       	call   44b0 <__stack_chk_fail@plt>
    622d:	c9                   	leave  
    622e:	c3                   	ret    

000000000000622f <stbi_is_hdr>:
    622f:	55                   	push   rbp
    6230:	48 89 e5             	mov    rbp,rsp
    6233:	48 83 ec 20          	sub    rsp,0x20
    6237:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    623b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    623f:	48 8d 35 01 3f 03 00 	lea    rsi,[rip+0x33f01]        # 3a147 <_IO_stdin_used+0x147>
    6246:	48 89 c7             	mov    rdi,rax
    6249:	e8 66 f5 ff ff       	call   57b4 <stbi__fopen(char const*, char const*)>
    624e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6252:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    6259:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    625e:	74 1b                	je     627b <stbi_is_hdr+0x4c>
    6260:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6264:	48 89 c7             	mov    rdi,rax
    6267:	e8 14 00 00 00       	call   6280 <stbi_is_hdr_from_file>
    626c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    626f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6273:	48 89 c7             	mov    rdi,rax
    6276:	e8 75 e1 ff ff       	call   43f0 <fclose@plt>
    627b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    627e:	c9                   	leave  
    627f:	c3                   	ret    

0000000000006280 <stbi_is_hdr_from_file>:
    6280:	55                   	push   rbp
    6281:	48 89 e5             	mov    rbp,rsp
    6284:	48 81 ec 00 01 00 00 	sub    rsp,0x100
    628b:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    6292:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    629b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    629f:	31 c0                	xor    eax,eax
    62a1:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    62a8:	48 89 c7             	mov    rdi,rax
    62ab:	e8 80 dd ff ff       	call   4030 <ftell@plt>
    62b0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    62b7:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    62be:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    62c5:	48 89 d6             	mov    rsi,rdx
    62c8:	48 89 c7             	mov    rdi,rax
    62cb:	e8 ff e7 ff ff       	call   4acf <stbi__start_file(stbi__context*, _IO_FILE*)>
    62d0:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    62d7:	48 89 c7             	mov    rdi,rax
    62da:	e8 27 6c 01 00       	call   1cf06 <stbi__hdr_test(stbi__context*)>
    62df:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
    62e5:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    62ec:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    62f3:	ba 00 00 00 00       	mov    edx,0x0
    62f8:	48 89 ce             	mov    rsi,rcx
    62fb:	48 89 c7             	mov    rdi,rax
    62fe:	e8 9d e1 ff ff       	call   44a0 <fseek@plt>
    6303:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
    6309:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    630d:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    6316:	74 05                	je     631d <stbi_is_hdr_from_file+0x9d>
    6318:	e8 93 e1 ff ff       	call   44b0 <__stack_chk_fail@plt>
    631d:	c9                   	leave  
    631e:	c3                   	ret    

000000000000631f <stbi_is_hdr_from_callbacks>:
    631f:	55                   	push   rbp
    6320:	48 89 e5             	mov    rbp,rsp
    6323:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
    632a:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    6331:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    6338:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    6341:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6345:	31 c0                	xor    eax,eax
    6347:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    634e:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    6355:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    635c:	48 89 ce             	mov    rsi,rcx
    635f:	48 89 c7             	mov    rdi,rax
    6362:	e8 65 e6 ff ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    6367:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    636e:	48 89 c7             	mov    rdi,rax
    6371:	e8 90 6b 01 00       	call   1cf06 <stbi__hdr_test(stbi__context*)>
    6376:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    637a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
    6383:	74 05                	je     638a <stbi_is_hdr_from_callbacks+0x6b>
    6385:	e8 26 e1 ff ff       	call   44b0 <__stack_chk_fail@plt>
    638a:	c9                   	leave  
    638b:	c3                   	ret    

000000000000638c <stbi_ldr_to_hdr_gamma>:
    638c:	55                   	push   rbp
    638d:	48 89 e5             	mov    rbp,rsp
    6390:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    6395:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
    639a:	f3 0f 11 05 7e 50 04 00 	movss  DWORD PTR [rip+0x4507e],xmm0        # 4b420 <stbi__l2h_gamma>
    63a2:	90                   	nop
    63a3:	5d                   	pop    rbp
    63a4:	c3                   	ret    

00000000000063a5 <stbi_ldr_to_hdr_scale>:
    63a5:	55                   	push   rbp
    63a6:	48 89 e5             	mov    rbp,rsp
    63a9:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    63ae:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
    63b3:	f3 0f 11 05 69 50 04 00 	movss  DWORD PTR [rip+0x45069],xmm0        # 4b424 <stbi__l2h_scale>
    63bb:	90                   	nop
    63bc:	5d                   	pop    rbp
    63bd:	c3                   	ret    

00000000000063be <stbi_hdr_to_ldr_gamma>:
    63be:	55                   	push   rbp
    63bf:	48 89 e5             	mov    rbp,rsp
    63c2:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    63c7:	f3 0f 10 05 8d 69 03 00 	movss  xmm0,DWORD PTR [rip+0x3698d]        # 3cd5c <NANO_SEC+0x1a94>
    63cf:	f3 0f 5e 45 fc       	divss  xmm0,DWORD PTR [rbp-0x4]
    63d4:	f3 0f 11 05 4c 50 04 00 	movss  DWORD PTR [rip+0x4504c],xmm0        # 4b428 <stbi__h2l_gamma_i>
    63dc:	90                   	nop
    63dd:	5d                   	pop    rbp
    63de:	c3                   	ret    

00000000000063df <stbi_hdr_to_ldr_scale>:
    63df:	55                   	push   rbp
    63e0:	48 89 e5             	mov    rbp,rsp
    63e3:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    63e8:	f3 0f 10 05 6c 69 03 00 	movss  xmm0,DWORD PTR [rip+0x3696c]        # 3cd5c <NANO_SEC+0x1a94>
    63f0:	f3 0f 5e 45 fc       	divss  xmm0,DWORD PTR [rbp-0x4]
    63f5:	f3 0f 11 05 2f 50 04 00 	movss  DWORD PTR [rip+0x4502f],xmm0        # 4b42c <stbi__h2l_scale_i>
    63fd:	90                   	nop
    63fe:	5d                   	pop    rbp
    63ff:	c3                   	ret    

0000000000006400 <stbi__refill_buffer(stbi__context*)>:
    6400:	55                   	push   rbp
    6401:	48 89 e5             	mov    rbp,rsp
    6404:	48 83 ec 20          	sub    rsp,0x20
    6408:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    640c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6410:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
    6414:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6418:	8b 50 34             	mov    edx,DWORD PTR [rax+0x34]
    641b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    641f:	48 8d 70 38          	lea    rsi,[rax+0x38]
    6423:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6427:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    642b:	48 89 c7             	mov    rdi,rax
    642e:	ff d1                	call   rcx
    6430:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    6433:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    6437:	75 45                	jne    647e <stbi__refill_buffer(stbi__context*)+0x7e>
    6439:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    643d:	c7 40 30 00 00 00 00 	mov    DWORD PTR [rax+0x30],0x0
    6444:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6448:	48 8d 50 38          	lea    rdx,[rax+0x38]
    644c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6450:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    6457:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    645b:	48 83 c0 38          	add    rax,0x38
    645f:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6463:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6467:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    646e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6472:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
    6479:	c6 00 00             	mov    BYTE PTR [rax],0x0
    647c:	eb 2e                	jmp    64ac <stbi__refill_buffer(stbi__context*)+0xac>
    647e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6482:	48 8d 50 38          	lea    rdx,[rax+0x38]
    6486:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    648a:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    6491:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6495:	48 8d 50 38          	lea    rdx,[rax+0x38]
    6499:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    649c:	48 98                	cdqe   
    649e:	48 01 c2             	add    rdx,rax
    64a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64a5:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    64ac:	90                   	nop
    64ad:	c9                   	leave  
    64ae:	c3                   	ret    

00000000000064af <stbi__get8(stbi__context*)>:
    64af:	55                   	push   rbp
    64b0:	48 89 e5             	mov    rbp,rsp
    64b3:	48 83 ec 10          	sub    rsp,0x10
    64b7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    64bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    64bf:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    64c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    64ca:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
    64d1:	48 39 c2             	cmp    rdx,rax
    64d4:	73 1f                	jae    64f5 <stbi__get8(stbi__context*)+0x46>
    64d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    64da:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
    64e1:	48 8d 48 01          	lea    rcx,[rax+0x1]
    64e5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    64e9:	48 89 8a b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rcx
    64f0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    64f3:	eb 3b                	jmp    6530 <stbi__get8(stbi__context*)+0x81>
    64f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    64f9:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    64fc:	85 c0                	test   eax,eax
    64fe:	74 2b                	je     652b <stbi__get8(stbi__context*)+0x7c>
    6500:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6504:	48 89 c7             	mov    rdi,rax
    6507:	e8 f4 fe ff ff       	call   6400 <stbi__refill_buffer(stbi__context*)>
    650c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6510:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
    6517:	48 8d 48 01          	lea    rcx,[rax+0x1]
    651b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    651f:	48 89 8a b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rcx
    6526:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6529:	eb 05                	jmp    6530 <stbi__get8(stbi__context*)+0x81>
    652b:	b8 00 00 00 00       	mov    eax,0x0
    6530:	c9                   	leave  
    6531:	c3                   	ret    

0000000000006532 <stbi__at_eof(stbi__context*)>:
    6532:	55                   	push   rbp
    6533:	48 89 e5             	mov    rbp,rsp
    6536:	48 83 ec 10          	sub    rsp,0x10
    653a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    653e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6542:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    6546:	48 85 c0             	test   rax,rax
    6549:	74 37                	je     6582 <stbi__at_eof(stbi__context*)+0x50>
    654b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    654f:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
    6553:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6557:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    655b:	48 89 c7             	mov    rdi,rax
    655e:	ff d2                	call   rdx
    6560:	85 c0                	test   eax,eax
    6562:	0f 94 c0             	sete   al
    6565:	84 c0                	test   al,al
    6567:	74 07                	je     6570 <stbi__at_eof(stbi__context*)+0x3e>
    6569:	b8 00 00 00 00       	mov    eax,0x0
    656e:	eb 31                	jmp    65a1 <stbi__at_eof(stbi__context*)+0x6f>
    6570:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6574:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    6577:	85 c0                	test   eax,eax
    6579:	75 07                	jne    6582 <stbi__at_eof(stbi__context*)+0x50>
    657b:	b8 01 00 00 00       	mov    eax,0x1
    6580:	eb 1f                	jmp    65a1 <stbi__at_eof(stbi__context*)+0x6f>
    6582:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6586:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    658d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6591:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
    6598:	48 39 c2             	cmp    rdx,rax
    659b:	0f 93 c0             	setae  al
    659e:	0f b6 c0             	movzx  eax,al
    65a1:	c9                   	leave  
    65a2:	c3                   	ret    

00000000000065a3 <stbi__skip(stbi__context*, int)>:
    65a3:	55                   	push   rbp
    65a4:	48 89 e5             	mov    rbp,rsp
    65a7:	48 83 ec 20          	sub    rsp,0x20
    65ab:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    65af:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    65b2:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    65b6:	79 1b                	jns    65d3 <stbi__skip(stbi__context*, int)+0x30>
    65b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    65bc:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    65c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    65c7:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    65ce:	e9 89 00 00 00       	jmp    665c <stbi__skip(stbi__context*, int)+0xb9>
    65d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    65d7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    65db:	48 85 c0             	test   rax,rax
    65de:	74 5e                	je     663e <stbi__skip(stbi__context*, int)+0x9b>
    65e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    65e4:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    65eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    65ef:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    65f6:	48 89 d0             	mov    rax,rdx
    65f9:	48 29 c8             	sub    rax,rcx
    65fc:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    65ff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6602:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
    6605:	7d 37                	jge    663e <stbi__skip(stbi__context*, int)+0x9b>
    6607:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    660b:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    6612:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6616:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    661d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6621:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
    6625:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    6628:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
    662b:	89 c2                	mov    edx,eax
    662d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6631:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    6635:	89 d6                	mov    esi,edx
    6637:	48 89 c7             	mov    rdi,rax
    663a:	ff d1                	call   rcx
    663c:	eb 1e                	jmp    665c <stbi__skip(stbi__context*, int)+0xb9>
    663e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6642:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    6649:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    664c:	48 98                	cdqe   
    664e:	48 01 c2             	add    rdx,rax
    6651:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6655:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    665c:	c9                   	leave  
    665d:	c3                   	ret    

000000000000665e <stbi__getn(stbi__context*, unsigned char*, int)>:
    665e:	55                   	push   rbp
    665f:	48 89 e5             	mov    rbp,rsp
    6662:	48 83 ec 30          	sub    rsp,0x30
    6666:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    666a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    666e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    6671:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6675:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    6679:	48 85 c0             	test   rax,rax
    667c:	0f 84 a1 00 00 00    	je     6723 <stbi__getn(stbi__context*, unsigned char*, int)+0xc5>
    6682:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6686:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    668d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6691:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    6698:	48 89 d0             	mov    rax,rdx
    669b:	48 29 c8             	sub    rax,rcx
    669e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    66a1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    66a4:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
    66a7:	7d 7a                	jge    6723 <stbi__getn(stbi__context*, unsigned char*, int)+0xc5>
    66a9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    66ac:	48 63 d0             	movsxd rdx,eax
    66af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66b3:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    66ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    66be:	48 89 ce             	mov    rsi,rcx
    66c1:	48 89 c7             	mov    rdi,rax
    66c4:	e8 87 dc ff ff       	call   4350 <memcpy@plt>
    66c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66cd:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
    66d1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    66d4:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    66d7:	89 c2                	mov    edx,eax
    66d9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    66dc:	48 63 f0             	movsxd rsi,eax
    66df:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    66e3:	48 01 c6             	add    rsi,rax
    66e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66ea:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    66ee:	48 89 c7             	mov    rdi,rax
    66f1:	ff d1                	call   rcx
    66f3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    66f6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    66f9:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    66fc:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    66ff:	0f 94 c0             	sete   al
    6702:	0f b6 c0             	movzx  eax,al
    6705:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    6708:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    670c:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    6713:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6717:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    671e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6721:	eb 6d                	jmp    6790 <stbi__getn(stbi__context*, unsigned char*, int)+0x132>
    6723:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6727:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    672e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    6731:	48 98                	cdqe   
    6733:	48 01 c2             	add    rdx,rax
    6736:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    673a:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
    6741:	48 39 c2             	cmp    rdx,rax
    6744:	77 45                	ja     678b <stbi__getn(stbi__context*, unsigned char*, int)+0x12d>
    6746:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    6749:	48 63 d0             	movsxd rdx,eax
    674c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6750:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    6757:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    675b:	48 89 ce             	mov    rsi,rcx
    675e:	48 89 c7             	mov    rdi,rax
    6761:	e8 ea db ff ff       	call   4350 <memcpy@plt>
    6766:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    676a:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    6771:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    6774:	48 98                	cdqe   
    6776:	48 01 c2             	add    rdx,rax
    6779:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    677d:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    6784:	b8 01 00 00 00       	mov    eax,0x1
    6789:	eb 05                	jmp    6790 <stbi__getn(stbi__context*, unsigned char*, int)+0x132>
    678b:	b8 00 00 00 00       	mov    eax,0x0
    6790:	c9                   	leave  
    6791:	c3                   	ret    

0000000000006792 <stbi__get16be(stbi__context*)>:
    6792:	55                   	push   rbp
    6793:	48 89 e5             	mov    rbp,rsp
    6796:	53                   	push   rbx
    6797:	48 83 ec 28          	sub    rsp,0x28
    679b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    679f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    67a3:	48 89 c7             	mov    rdi,rax
    67a6:	e8 04 fd ff ff       	call   64af <stbi__get8(stbi__context*)>
    67ab:	0f b6 c0             	movzx  eax,al
    67ae:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    67b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    67b4:	c1 e0 08             	shl    eax,0x8
    67b7:	89 c3                	mov    ebx,eax
    67b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    67bd:	48 89 c7             	mov    rdi,rax
    67c0:	e8 ea fc ff ff       	call   64af <stbi__get8(stbi__context*)>
    67c5:	0f b6 c0             	movzx  eax,al
    67c8:	01 d8                	add    eax,ebx
    67ca:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    67ce:	c9                   	leave  
    67cf:	c3                   	ret    

00000000000067d0 <stbi__get32be(stbi__context*)>:
    67d0:	55                   	push   rbp
    67d1:	48 89 e5             	mov    rbp,rsp
    67d4:	53                   	push   rbx
    67d5:	48 83 ec 28          	sub    rsp,0x28
    67d9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    67dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    67e1:	48 89 c7             	mov    rdi,rax
    67e4:	e8 a9 ff ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    67e9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    67ec:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    67ef:	c1 e0 10             	shl    eax,0x10
    67f2:	89 c3                	mov    ebx,eax
    67f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    67f8:	48 89 c7             	mov    rdi,rax
    67fb:	e8 92 ff ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    6800:	01 d8                	add    eax,ebx
    6802:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    6806:	c9                   	leave  
    6807:	c3                   	ret    

0000000000006808 <stbi__get16le(stbi__context*)>:
    6808:	55                   	push   rbp
    6809:	48 89 e5             	mov    rbp,rsp
    680c:	48 83 ec 20          	sub    rsp,0x20
    6810:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    6814:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6818:	48 89 c7             	mov    rdi,rax
    681b:	e8 8f fc ff ff       	call   64af <stbi__get8(stbi__context*)>
    6820:	0f b6 c0             	movzx  eax,al
    6823:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    6826:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    682a:	48 89 c7             	mov    rdi,rax
    682d:	e8 7d fc ff ff       	call   64af <stbi__get8(stbi__context*)>
    6832:	0f b6 c0             	movzx  eax,al
    6835:	c1 e0 08             	shl    eax,0x8
    6838:	89 c2                	mov    edx,eax
    683a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    683d:	01 d0                	add    eax,edx
    683f:	c9                   	leave  
    6840:	c3                   	ret    

0000000000006841 <stbi__get32le(stbi__context*)>:
    6841:	55                   	push   rbp
    6842:	48 89 e5             	mov    rbp,rsp
    6845:	48 83 ec 20          	sub    rsp,0x20
    6849:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    684d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6851:	48 89 c7             	mov    rdi,rax
    6854:	e8 af ff ff ff       	call   6808 <stbi__get16le(stbi__context*)>
    6859:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    685c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6860:	48 89 c7             	mov    rdi,rax
    6863:	e8 a0 ff ff ff       	call   6808 <stbi__get16le(stbi__context*)>
    6868:	c1 e0 10             	shl    eax,0x10
    686b:	89 c2                	mov    edx,eax
    686d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6870:	01 d0                	add    eax,edx
    6872:	c9                   	leave  
    6873:	c3                   	ret    

0000000000006874 <stbi__compute_y(int, int, int)>:
    6874:	55                   	push   rbp
    6875:	48 89 e5             	mov    rbp,rsp
    6878:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    687b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    687e:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    6881:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6884:	6b d0 4d             	imul   edx,eax,0x4d
    6887:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    688a:	69 c0 96 00 00 00    	imul   eax,eax,0x96
    6890:	01 c2                	add    edx,eax
    6892:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    6895:	6b c0 1d             	imul   eax,eax,0x1d
    6898:	01 d0                	add    eax,edx
    689a:	c1 f8 08             	sar    eax,0x8
    689d:	5d                   	pop    rbp
    689e:	c3                   	ret    

000000000000689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>:
    689f:	55                   	push   rbp
    68a0:	48 89 e5             	mov    rbp,rsp
    68a3:	48 83 ec 40          	sub    rsp,0x40
    68a7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    68ab:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    68ae:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    68b1:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    68b4:	44 89 45 c8          	mov    DWORD PTR [rbp-0x38],r8d
    68b8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    68bb:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
    68be:	75 09                	jne    68c9 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x2a>
    68c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    68c4:	e9 2f 05 00 00       	jmp    6df8 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x559>
    68c9:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
    68cd:	7e 06                	jle    68d5 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x36>
    68cf:	83 7d d0 04          	cmp    DWORD PTR [rbp-0x30],0x4
    68d3:	7e 1f                	jle    68f4 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x55>
    68d5:	48 8d 0d 7c 38 03 00 	lea    rcx,[rip+0x3387c]        # 3a158 <_IO_stdin_used+0x158>
    68dc:	ba 7c 06 00 00       	mov    edx,0x67c
    68e1:	48 8d 35 b0 37 03 00 	lea    rsi,[rip+0x337b0]        # 3a098 <_IO_stdin_used+0x98>
    68e8:	48 8d 3d c9 38 03 00 	lea    rdi,[rip+0x338c9]        # 3a1b8 <_IO_stdin_used+0x1b8>
    68ef:	e8 8c d9 ff ff       	call   4280 <__assert_fail@plt>
    68f4:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
    68f7:	8b 75 cc             	mov    esi,DWORD PTR [rbp-0x34]
    68fa:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    68fd:	b9 00 00 00 00       	mov    ecx,0x0
    6902:	89 c7                	mov    edi,eax
    6904:	e8 65 e4 ff ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
    6909:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    690d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    6912:	75 22                	jne    6936 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x97>
    6914:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6918:	48 89 c7             	mov    rdi,rax
    691b:	e8 e0 db ff ff       	call   4500 <free@plt>
    6920:	48 8d 3d 0c 37 03 00 	lea    rdi,[rip+0x3370c]        # 3a033 <_IO_stdin_used+0x33>
    6927:	e8 13 e2 ff ff       	call   4b3f <stbi__err(char const*)>
    692c:	b8 00 00 00 00       	mov    eax,0x0
    6931:	e9 c2 04 00 00       	jmp    6df8 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x559>
    6936:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    693d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    6940:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    6943:	0f 8d 9f 04 00 00    	jge    6de8 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x549>
    6949:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    694c:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6950:	89 c2                	mov    edx,eax
    6952:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    6955:	0f af c2             	imul   eax,edx
    6958:	89 c2                	mov    edx,eax
    695a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    695e:	48 01 d0             	add    rax,rdx
    6961:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    6965:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    6968:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    696c:	89 c2                	mov    edx,eax
    696e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6971:	0f af c2             	imul   eax,edx
    6974:	89 c2                	mov    edx,eax
    6976:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    697a:	48 01 d0             	add    rax,rdx
    697d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    6981:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    6984:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    698b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    698e:	01 d0                	add    eax,edx
    6990:	83 e8 0a             	sub    eax,0xa
    6993:	83 f8 19             	cmp    eax,0x19
    6996:	0f 87 02 04 00 00    	ja     6d9e <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x4ff>
    699c:	89 c0                	mov    eax,eax
    699e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    69a6:	48 8d 05 2f 38 03 00 	lea    rax,[rip+0x3382f]        # 3a1dc <_IO_stdin_used+0x1dc>
    69ad:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    69b0:	48 98                	cdqe   
    69b2:	48 8d 15 23 38 03 00 	lea    rdx,[rip+0x33823]        # 3a1dc <_IO_stdin_used+0x1dc>
    69b9:	48 01 d0             	add    rax,rdx
    69bc:	ff e0                	jmp    rax
    69be:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    69c1:	83 e8 01             	sub    eax,0x1
    69c4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    69c7:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    69cb:	0f 88 ec 03 00 00    	js     6dbd <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x51e>
    69d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    69d5:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    69d8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    69dc:	88 10                	mov    BYTE PTR [rax],dl
    69de:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    69e2:	48 83 c0 01          	add    rax,0x1
    69e6:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    69e9:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    69ed:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
    69f2:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    69f7:	eb ce                	jmp    69c7 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x128>
    69f9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    69fc:	83 e8 01             	sub    eax,0x1
    69ff:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6a02:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6a06:	0f 88 b4 03 00 00    	js     6dc0 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x521>
    6a0c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a10:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6a14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6a18:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6a1b:	88 02                	mov    BYTE PTR [rdx],al
    6a1d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a21:	48 83 c0 01          	add    rax,0x1
    6a25:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6a28:	88 10                	mov    BYTE PTR [rax],dl
    6a2a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6a2d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a31:	88 10                	mov    BYTE PTR [rax],dl
    6a33:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6a37:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
    6a3c:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
    6a41:	eb bf                	jmp    6a02 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x163>
    6a43:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6a46:	83 e8 01             	sub    eax,0x1
    6a49:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6a4c:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6a50:	0f 88 6d 03 00 00    	js     6dc3 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x524>
    6a56:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a5a:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6a5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6a62:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6a65:	88 02                	mov    BYTE PTR [rdx],al
    6a67:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a6b:	48 83 c0 01          	add    rax,0x1
    6a6f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6a72:	88 10                	mov    BYTE PTR [rax],dl
    6a74:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6a77:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a7b:	88 10                	mov    BYTE PTR [rax],dl
    6a7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a81:	48 83 c0 03          	add    rax,0x3
    6a85:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6a88:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6a8c:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
    6a91:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6a96:	eb b4                	jmp    6a4c <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x1ad>
    6a98:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6a9b:	83 e8 01             	sub    eax,0x1
    6a9e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6aa1:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6aa5:	0f 88 1b 03 00 00    	js     6dc6 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x527>
    6aab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6aaf:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6ab2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6ab6:	88 10                	mov    BYTE PTR [rax],dl
    6ab8:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6abc:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6ac1:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    6ac6:	eb d9                	jmp    6aa1 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x202>
    6ac8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6acb:	83 e8 01             	sub    eax,0x1
    6ace:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6ad1:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6ad5:	0f 88 ee 02 00 00    	js     6dc9 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x52a>
    6adb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6adf:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6ae3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6ae7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6aea:	88 02                	mov    BYTE PTR [rdx],al
    6aec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6af0:	48 83 c0 01          	add    rax,0x1
    6af4:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6af7:	88 10                	mov    BYTE PTR [rax],dl
    6af9:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6afc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b00:	88 10                	mov    BYTE PTR [rax],dl
    6b02:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6b06:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6b0b:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
    6b10:	eb bf                	jmp    6ad1 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x232>
    6b12:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6b15:	83 e8 01             	sub    eax,0x1
    6b18:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6b1b:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6b1f:	0f 88 a7 02 00 00    	js     6dcc <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x52d>
    6b25:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b29:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6b2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b31:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6b34:	88 02                	mov    BYTE PTR [rdx],al
    6b36:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b3a:	48 83 c0 01          	add    rax,0x1
    6b3e:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6b41:	88 10                	mov    BYTE PTR [rax],dl
    6b43:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6b46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b4a:	88 10                	mov    BYTE PTR [rax],dl
    6b4c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b50:	48 8d 50 03          	lea    rdx,[rax+0x3]
    6b54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b58:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    6b5c:	88 02                	mov    BYTE PTR [rdx],al
    6b5e:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6b62:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6b67:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6b6c:	eb ad                	jmp    6b1b <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x27c>
    6b6e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6b71:	83 e8 01             	sub    eax,0x1
    6b74:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6b77:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6b7b:	0f 88 4e 02 00 00    	js     6dcf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x530>
    6b81:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b85:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6b88:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b8c:	88 10                	mov    BYTE PTR [rax],dl
    6b8e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b92:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6b96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b9a:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    6b9e:	88 02                	mov    BYTE PTR [rdx],al
    6ba0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6ba4:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6ba8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6bac:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
    6bb0:	88 02                	mov    BYTE PTR [rdx],al
    6bb2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6bb6:	48 83 c0 03          	add    rax,0x3
    6bba:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6bbd:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6bc1:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
    6bc6:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6bcb:	eb aa                	jmp    6b77 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x2d8>
    6bcd:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6bd0:	83 e8 01             	sub    eax,0x1
    6bd3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6bd6:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6bda:	0f 88 f2 01 00 00    	js     6dd2 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x533>
    6be0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6be4:	48 83 c0 02          	add    rax,0x2
    6be8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6beb:	0f b6 d0             	movzx  edx,al
    6bee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6bf2:	48 83 c0 01          	add    rax,0x1
    6bf6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6bf9:	0f b6 c8             	movzx  ecx,al
    6bfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c00:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c03:	0f b6 c0             	movzx  eax,al
    6c06:	89 ce                	mov    esi,ecx
    6c08:	89 c7                	mov    edi,eax
    6c0a:	e8 65 fc ff ff       	call   6874 <stbi__compute_y(int, int, int)>
    6c0f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6c13:	88 02                	mov    BYTE PTR [rdx],al
    6c15:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6c19:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
    6c1e:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    6c23:	eb b1                	jmp    6bd6 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x337>
    6c25:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6c28:	83 e8 01             	sub    eax,0x1
    6c2b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6c2e:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6c32:	0f 88 9d 01 00 00    	js     6dd5 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x536>
    6c38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c3c:	48 83 c0 02          	add    rax,0x2
    6c40:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c43:	0f b6 d0             	movzx  edx,al
    6c46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c4a:	48 83 c0 01          	add    rax,0x1
    6c4e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c51:	0f b6 c8             	movzx  ecx,al
    6c54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c58:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c5b:	0f b6 c0             	movzx  eax,al
    6c5e:	89 ce                	mov    esi,ecx
    6c60:	89 c7                	mov    edi,eax
    6c62:	e8 0d fc ff ff       	call   6874 <stbi__compute_y(int, int, int)>
    6c67:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6c6b:	88 02                	mov    BYTE PTR [rdx],al
    6c6d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6c71:	48 83 c0 01          	add    rax,0x1
    6c75:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6c78:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6c7c:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
    6c81:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    6c86:	eb a6                	jmp    6c2e <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x38f>
    6c88:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6c8b:	83 e8 01             	sub    eax,0x1
    6c8e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6c91:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6c95:	0f 88 3d 01 00 00    	js     6dd8 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x539>
    6c9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c9f:	48 83 c0 02          	add    rax,0x2
    6ca3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6ca6:	0f b6 d0             	movzx  edx,al
    6ca9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6cad:	48 83 c0 01          	add    rax,0x1
    6cb1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6cb4:	0f b6 c8             	movzx  ecx,al
    6cb7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6cbb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6cbe:	0f b6 c0             	movzx  eax,al
    6cc1:	89 ce                	mov    esi,ecx
    6cc3:	89 c7                	mov    edi,eax
    6cc5:	e8 aa fb ff ff       	call   6874 <stbi__compute_y(int, int, int)>
    6cca:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6cce:	88 02                	mov    BYTE PTR [rdx],al
    6cd0:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6cd4:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    6cd9:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    6cde:	eb b1                	jmp    6c91 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x3f2>
    6ce0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6ce3:	83 e8 01             	sub    eax,0x1
    6ce6:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6ce9:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6ced:	0f 88 e8 00 00 00    	js     6ddb <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x53c>
    6cf3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6cf7:	48 83 c0 02          	add    rax,0x2
    6cfb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6cfe:	0f b6 d0             	movzx  edx,al
    6d01:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d05:	48 83 c0 01          	add    rax,0x1
    6d09:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d0c:	0f b6 c8             	movzx  ecx,al
    6d0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d13:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d16:	0f b6 c0             	movzx  eax,al
    6d19:	89 ce                	mov    esi,ecx
    6d1b:	89 c7                	mov    edi,eax
    6d1d:	e8 52 fb ff ff       	call   6874 <stbi__compute_y(int, int, int)>
    6d22:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6d26:	88 02                	mov    BYTE PTR [rdx],al
    6d28:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6d2c:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6d30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d34:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
    6d38:	88 02                	mov    BYTE PTR [rdx],al
    6d3a:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6d3e:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    6d43:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    6d48:	eb 9f                	jmp    6ce9 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x44a>
    6d4a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6d4d:	83 e8 01             	sub    eax,0x1
    6d50:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6d53:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6d57:	0f 88 81 00 00 00    	js     6dde <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x53f>
    6d5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d61:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6d64:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6d68:	88 10                	mov    BYTE PTR [rax],dl
    6d6a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6d6e:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6d72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d76:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    6d7a:	88 02                	mov    BYTE PTR [rdx],al
    6d7c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6d80:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6d84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d88:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
    6d8c:	88 02                	mov    BYTE PTR [rdx],al
    6d8e:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6d92:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    6d97:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
    6d9c:	eb b5                	jmp    6d53 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x4b4>
    6d9e:	48 8d 0d b3 33 03 00 	lea    rcx,[rip+0x333b3]        # 3a158 <_IO_stdin_used+0x158>
    6da5:	ba 99 06 00 00       	mov    edx,0x699
    6daa:	48 8d 35 e7 32 03 00 	lea    rsi,[rip+0x332e7]        # 3a098 <_IO_stdin_used+0x98>
    6db1:	48 8d 3d 1f 34 03 00 	lea    rdi,[rip+0x3341f]        # 3a1d7 <_IO_stdin_used+0x1d7>
    6db8:	e8 c3 d4 ff ff       	call   4280 <__assert_fail@plt>
    6dbd:	90                   	nop
    6dbe:	eb 1f                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dc0:	90                   	nop
    6dc1:	eb 1c                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dc3:	90                   	nop
    6dc4:	eb 19                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dc6:	90                   	nop
    6dc7:	eb 16                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dc9:	90                   	nop
    6dca:	eb 13                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dcc:	90                   	nop
    6dcd:	eb 10                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dcf:	90                   	nop
    6dd0:	eb 0d                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dd2:	90                   	nop
    6dd3:	eb 0a                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dd5:	90                   	nop
    6dd6:	eb 07                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dd8:	90                   	nop
    6dd9:	eb 04                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6ddb:	90                   	nop
    6ddc:	eb 01                	jmp    6ddf <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x540>
    6dde:	90                   	nop
    6ddf:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    6de3:	e9 55 fb ff ff       	jmp    693d <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x9e>
    6de8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6dec:	48 89 c7             	mov    rdi,rax
    6def:	e8 0c d7 ff ff       	call   4500 <free@plt>
    6df4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6df8:	c9                   	leave  
    6df9:	c3                   	ret    

0000000000006dfa <stbi__compute_y_16(int, int, int)>:
    6dfa:	55                   	push   rbp
    6dfb:	48 89 e5             	mov    rbp,rsp
    6dfe:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    6e01:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    6e04:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    6e07:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6e0a:	6b d0 4d             	imul   edx,eax,0x4d
    6e0d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    6e10:	69 c0 96 00 00 00    	imul   eax,eax,0x96
    6e16:	01 c2                	add    edx,eax
    6e18:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    6e1b:	6b c0 1d             	imul   eax,eax,0x1d
    6e1e:	01 d0                	add    eax,edx
    6e20:	c1 f8 08             	sar    eax,0x8
    6e23:	5d                   	pop    rbp
    6e24:	c3                   	ret    

0000000000006e25 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)>:
    6e25:	55                   	push   rbp
    6e26:	48 89 e5             	mov    rbp,rsp
    6e29:	48 83 ec 40          	sub    rsp,0x40
    6e2d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    6e31:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    6e34:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    6e37:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    6e3a:	44 89 45 c8          	mov    DWORD PTR [rbp-0x38],r8d
    6e3e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6e41:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
    6e44:	75 09                	jne    6e4f <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x2a>
    6e46:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6e4a:	e9 5b 05 00 00       	jmp    73aa <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x585>
    6e4f:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
    6e53:	7e 06                	jle    6e5b <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x36>
    6e55:	83 7d d0 04          	cmp    DWORD PTR [rbp-0x30],0x4
    6e59:	7e 1f                	jle    6e7a <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55>
    6e5b:	48 8d 0d e6 33 03 00 	lea    rcx,[rip+0x333e6]        # 3a248 <_IO_stdin_used+0x248>
    6e62:	ba b5 06 00 00       	mov    edx,0x6b5
    6e67:	48 8d 35 2a 32 03 00 	lea    rsi,[rip+0x3322a]        # 3a098 <_IO_stdin_used+0x98>
    6e6e:	48 8d 3d 43 33 03 00 	lea    rdi,[rip+0x33343]        # 3a1b8 <_IO_stdin_used+0x1b8>
    6e75:	e8 06 d4 ff ff       	call   4280 <__assert_fail@plt>
    6e7a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6e7d:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6e81:	0f af 45 c8          	imul   eax,DWORD PTR [rbp-0x38]
    6e85:	01 c0                	add    eax,eax
    6e87:	89 c0                	mov    eax,eax
    6e89:	48 89 c7             	mov    rdi,rax
    6e8c:	e8 ca dc ff ff       	call   4b5b <stbi__malloc(unsigned long)>
    6e91:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6e95:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    6e9a:	75 22                	jne    6ebe <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x99>
    6e9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6ea0:	48 89 c7             	mov    rdi,rax
    6ea3:	e8 58 d6 ff ff       	call   4500 <free@plt>
    6ea8:	48 8d 3d 84 31 03 00 	lea    rdi,[rip+0x33184]        # 3a033 <_IO_stdin_used+0x33>
    6eaf:	e8 8b dc ff ff       	call   4b3f <stbi__err(char const*)>
    6eb4:	b8 00 00 00 00       	mov    eax,0x0
    6eb9:	e9 ec 04 00 00       	jmp    73aa <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x585>
    6ebe:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    6ec5:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    6ec8:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    6ecb:	0f 8d c9 04 00 00    	jge    739a <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x575>
    6ed1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    6ed4:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6ed8:	89 c2                	mov    edx,eax
    6eda:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    6edd:	0f af c2             	imul   eax,edx
    6ee0:	89 c0                	mov    eax,eax
    6ee2:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    6ee6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6eea:	48 01 d0             	add    rax,rdx
    6eed:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    6ef1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    6ef4:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6ef8:	89 c2                	mov    edx,eax
    6efa:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6efd:	0f af c2             	imul   eax,edx
    6f00:	89 c0                	mov    eax,eax
    6f02:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    6f06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6f0a:	48 01 d0             	add    rax,rdx
    6f0d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    6f11:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    6f14:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    6f1b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6f1e:	01 d0                	add    eax,edx
    6f20:	83 e8 0a             	sub    eax,0xa
    6f23:	83 f8 19             	cmp    eax,0x19
    6f26:	0f 87 24 04 00 00    	ja     7350 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x52b>
    6f2c:	89 c0                	mov    eax,eax
    6f2e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    6f36:	48 8d 05 67 33 03 00 	lea    rax,[rip+0x33367]        # 3a2a4 <_IO_stdin_used+0x2a4>
    6f3d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    6f40:	48 98                	cdqe   
    6f42:	48 8d 15 5b 33 03 00 	lea    rdx,[rip+0x3335b]        # 3a2a4 <_IO_stdin_used+0x2a4>
    6f49:	48 01 d0             	add    rax,rdx
    6f4c:	ff e0                	jmp    rax
    6f4e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6f51:	83 e8 01             	sub    eax,0x1
    6f54:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6f57:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6f5b:	0f 88 0e 04 00 00    	js     736f <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x54a>
    6f61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6f65:	0f b7 10             	movzx  edx,WORD PTR [rax]
    6f68:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6f6c:	66 89 10             	mov    WORD PTR [rax],dx
    6f6f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6f73:	48 83 c0 02          	add    rax,0x2
    6f77:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    6f7c:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6f80:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6f85:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6f8a:	eb cb                	jmp    6f57 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x132>
    6f8c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6f8f:	83 e8 01             	sub    eax,0x1
    6f92:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6f95:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6f99:	0f 88 d3 03 00 00    	js     7372 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x54d>
    6f9f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6fa3:	48 8d 50 04          	lea    rdx,[rax+0x4]
    6fa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6fab:	0f b7 00             	movzx  eax,WORD PTR [rax]
    6fae:	66 89 02             	mov    WORD PTR [rdx],ax
    6fb1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6fb5:	48 83 c0 02          	add    rax,0x2
    6fb9:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    6fbc:	66 89 10             	mov    WORD PTR [rax],dx
    6fbf:	0f b7 10             	movzx  edx,WORD PTR [rax]
    6fc2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6fc6:	66 89 10             	mov    WORD PTR [rax],dx
    6fc9:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6fcd:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6fd2:	48 83 45 f0 06       	add    QWORD PTR [rbp-0x10],0x6
    6fd7:	eb bc                	jmp    6f95 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x170>
    6fd9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6fdc:	83 e8 01             	sub    eax,0x1
    6fdf:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6fe2:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6fe6:	0f 88 89 03 00 00    	js     7375 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x550>
    6fec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6ff0:	48 8d 50 04          	lea    rdx,[rax+0x4]
    6ff4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6ff8:	0f b7 00             	movzx  eax,WORD PTR [rax]
    6ffb:	66 89 02             	mov    WORD PTR [rdx],ax
    6ffe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7002:	48 83 c0 02          	add    rax,0x2
    7006:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    7009:	66 89 10             	mov    WORD PTR [rax],dx
    700c:	0f b7 10             	movzx  edx,WORD PTR [rax]
    700f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7013:	66 89 10             	mov    WORD PTR [rax],dx
    7016:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    701a:	48 83 c0 06          	add    rax,0x6
    701e:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    7023:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7027:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    702c:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
    7031:	eb af                	jmp    6fe2 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x1bd>
    7033:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7036:	83 e8 01             	sub    eax,0x1
    7039:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    703c:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7040:	0f 88 32 03 00 00    	js     7378 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x553>
    7046:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    704a:	0f b7 10             	movzx  edx,WORD PTR [rax]
    704d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7051:	66 89 10             	mov    WORD PTR [rax],dx
    7054:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7058:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    705d:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    7062:	eb d8                	jmp    703c <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x217>
    7064:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7067:	83 e8 01             	sub    eax,0x1
    706a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    706d:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7071:	0f 88 04 03 00 00    	js     737b <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x556>
    7077:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    707b:	48 8d 50 04          	lea    rdx,[rax+0x4]
    707f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7083:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7086:	66 89 02             	mov    WORD PTR [rdx],ax
    7089:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    708d:	48 83 c0 02          	add    rax,0x2
    7091:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    7094:	66 89 10             	mov    WORD PTR [rax],dx
    7097:	0f b7 10             	movzx  edx,WORD PTR [rax]
    709a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    709e:	66 89 10             	mov    WORD PTR [rax],dx
    70a1:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    70a5:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    70aa:	48 83 45 f0 06       	add    QWORD PTR [rbp-0x10],0x6
    70af:	eb bc                	jmp    706d <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x248>
    70b1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    70b4:	83 e8 01             	sub    eax,0x1
    70b7:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    70ba:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    70be:	0f 88 ba 02 00 00    	js     737e <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x559>
    70c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70c8:	48 8d 50 04          	lea    rdx,[rax+0x4]
    70cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    70d0:	0f b7 00             	movzx  eax,WORD PTR [rax]
    70d3:	66 89 02             	mov    WORD PTR [rdx],ax
    70d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70da:	48 83 c0 02          	add    rax,0x2
    70de:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    70e1:	66 89 10             	mov    WORD PTR [rax],dx
    70e4:	0f b7 10             	movzx  edx,WORD PTR [rax]
    70e7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70eb:	66 89 10             	mov    WORD PTR [rax],dx
    70ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70f2:	48 8d 50 06          	lea    rdx,[rax+0x6]
    70f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    70fa:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
    70fe:	66 89 02             	mov    WORD PTR [rdx],ax
    7101:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7105:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    710a:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
    710f:	eb a9                	jmp    70ba <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x295>
    7111:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7114:	83 e8 01             	sub    eax,0x1
    7117:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    711a:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    711e:	0f 88 5d 02 00 00    	js     7381 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55c>
    7124:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7128:	0f b7 10             	movzx  edx,WORD PTR [rax]
    712b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    712f:	66 89 10             	mov    WORD PTR [rax],dx
    7132:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7136:	48 8d 50 02          	lea    rdx,[rax+0x2]
    713a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    713e:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
    7142:	66 89 02             	mov    WORD PTR [rdx],ax
    7145:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7149:	48 8d 50 04          	lea    rdx,[rax+0x4]
    714d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7151:	0f b7 40 04          	movzx  eax,WORD PTR [rax+0x4]
    7155:	66 89 02             	mov    WORD PTR [rdx],ax
    7158:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    715c:	48 83 c0 06          	add    rax,0x6
    7160:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    7165:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7169:	48 83 45 e8 06       	add    QWORD PTR [rbp-0x18],0x6
    716e:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
    7173:	eb a5                	jmp    711a <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x2f5>
    7175:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7178:	83 e8 01             	sub    eax,0x1
    717b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    717e:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7182:	0f 88 fc 01 00 00    	js     7384 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55f>
    7188:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    718c:	48 83 c0 04          	add    rax,0x4
    7190:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7193:	0f b7 d0             	movzx  edx,ax
    7196:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    719a:	48 83 c0 02          	add    rax,0x2
    719e:	0f b7 00             	movzx  eax,WORD PTR [rax]
    71a1:	0f b7 c8             	movzx  ecx,ax
    71a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    71a8:	0f b7 00             	movzx  eax,WORD PTR [rax]
    71ab:	0f b7 c0             	movzx  eax,ax
    71ae:	89 ce                	mov    esi,ecx
    71b0:	89 c7                	mov    edi,eax
    71b2:	e8 43 fc ff ff       	call   6dfa <stbi__compute_y_16(int, int, int)>
    71b7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    71bb:	66 89 02             	mov    WORD PTR [rdx],ax
    71be:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    71c2:	48 83 45 e8 06       	add    QWORD PTR [rbp-0x18],0x6
    71c7:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    71cc:	eb b0                	jmp    717e <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x359>
    71ce:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    71d1:	83 e8 01             	sub    eax,0x1
    71d4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    71d7:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    71db:	0f 88 a6 01 00 00    	js     7387 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x562>
    71e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    71e5:	48 83 c0 04          	add    rax,0x4
    71e9:	0f b7 00             	movzx  eax,WORD PTR [rax]
    71ec:	0f b7 d0             	movzx  edx,ax
    71ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    71f3:	48 83 c0 02          	add    rax,0x2
    71f7:	0f b7 00             	movzx  eax,WORD PTR [rax]
    71fa:	0f b7 c8             	movzx  ecx,ax
    71fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7201:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7204:	0f b7 c0             	movzx  eax,ax
    7207:	89 ce                	mov    esi,ecx
    7209:	89 c7                	mov    edi,eax
    720b:	e8 ea fb ff ff       	call   6dfa <stbi__compute_y_16(int, int, int)>
    7210:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    7214:	66 89 02             	mov    WORD PTR [rdx],ax
    7217:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    721b:	48 83 c0 02          	add    rax,0x2
    721f:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    7224:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7228:	48 83 45 e8 06       	add    QWORD PTR [rbp-0x18],0x6
    722d:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    7232:	eb a3                	jmp    71d7 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x3b2>
    7234:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7237:	83 e8 01             	sub    eax,0x1
    723a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    723d:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7241:	0f 88 43 01 00 00    	js     738a <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x565>
    7247:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    724b:	48 83 c0 04          	add    rax,0x4
    724f:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7252:	0f b7 d0             	movzx  edx,ax
    7255:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7259:	48 83 c0 02          	add    rax,0x2
    725d:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7260:	0f b7 c8             	movzx  ecx,ax
    7263:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7267:	0f b7 00             	movzx  eax,WORD PTR [rax]
    726a:	0f b7 c0             	movzx  eax,ax
    726d:	89 ce                	mov    esi,ecx
    726f:	89 c7                	mov    edi,eax
    7271:	e8 84 fb ff ff       	call   6dfa <stbi__compute_y_16(int, int, int)>
    7276:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    727a:	66 89 02             	mov    WORD PTR [rdx],ax
    727d:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7281:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    7286:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    728b:	eb b0                	jmp    723d <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x418>
    728d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7290:	83 e8 01             	sub    eax,0x1
    7293:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    7296:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    729a:	0f 88 ed 00 00 00    	js     738d <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x568>
    72a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72a4:	48 83 c0 04          	add    rax,0x4
    72a8:	0f b7 00             	movzx  eax,WORD PTR [rax]
    72ab:	0f b7 d0             	movzx  edx,ax
    72ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72b2:	48 83 c0 02          	add    rax,0x2
    72b6:	0f b7 00             	movzx  eax,WORD PTR [rax]
    72b9:	0f b7 c8             	movzx  ecx,ax
    72bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72c0:	0f b7 00             	movzx  eax,WORD PTR [rax]
    72c3:	0f b7 c0             	movzx  eax,ax
    72c6:	89 ce                	mov    esi,ecx
    72c8:	89 c7                	mov    edi,eax
    72ca:	e8 2b fb ff ff       	call   6dfa <stbi__compute_y_16(int, int, int)>
    72cf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    72d3:	66 89 02             	mov    WORD PTR [rdx],ax
    72d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    72da:	48 8d 50 02          	lea    rdx,[rax+0x2]
    72de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72e2:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
    72e6:	66 89 02             	mov    WORD PTR [rdx],ax
    72e9:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    72ed:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    72f2:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    72f7:	eb 9d                	jmp    7296 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x471>
    72f9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    72fc:	83 e8 01             	sub    eax,0x1
    72ff:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    7302:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7306:	0f 88 84 00 00 00    	js     7390 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56b>
    730c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7310:	0f b7 10             	movzx  edx,WORD PTR [rax]
    7313:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7317:	66 89 10             	mov    WORD PTR [rax],dx
    731a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    731e:	48 8d 50 02          	lea    rdx,[rax+0x2]
    7322:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7326:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
    732a:	66 89 02             	mov    WORD PTR [rdx],ax
    732d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7331:	48 8d 50 04          	lea    rdx,[rax+0x4]
    7335:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7339:	0f b7 40 04          	movzx  eax,WORD PTR [rax+0x4]
    733d:	66 89 02             	mov    WORD PTR [rdx],ax
    7340:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7344:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    7349:	48 83 45 f0 06       	add    QWORD PTR [rbp-0x10],0x6
    734e:	eb b2                	jmp    7302 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x4dd>
    7350:	48 8d 0d f1 2e 03 00 	lea    rcx,[rip+0x32ef1]        # 3a248 <_IO_stdin_used+0x248>
    7357:	ba d2 06 00 00       	mov    edx,0x6d2
    735c:	48 8d 35 35 2d 03 00 	lea    rsi,[rip+0x32d35]        # 3a098 <_IO_stdin_used+0x98>
    7363:	48 8d 3d 6d 2e 03 00 	lea    rdi,[rip+0x32e6d]        # 3a1d7 <_IO_stdin_used+0x1d7>
    736a:	e8 11 cf ff ff       	call   4280 <__assert_fail@plt>
    736f:	90                   	nop
    7370:	eb 1f                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7372:	90                   	nop
    7373:	eb 1c                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7375:	90                   	nop
    7376:	eb 19                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7378:	90                   	nop
    7379:	eb 16                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    737b:	90                   	nop
    737c:	eb 13                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    737e:	90                   	nop
    737f:	eb 10                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7381:	90                   	nop
    7382:	eb 0d                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7384:	90                   	nop
    7385:	eb 0a                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7387:	90                   	nop
    7388:	eb 07                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    738a:	90                   	nop
    738b:	eb 04                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    738d:	90                   	nop
    738e:	eb 01                	jmp    7391 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x56c>
    7390:	90                   	nop
    7391:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    7395:	e9 2b fb ff ff       	jmp    6ec5 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0xa0>
    739a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    739e:	48 89 c7             	mov    rdi,rax
    73a1:	e8 5a d1 ff ff       	call   4500 <free@plt>
    73a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    73aa:	c9                   	leave  
    73ab:	c3                   	ret    

00000000000073ac <stbi__ldr_to_hdr(unsigned char*, int, int, int)>:
    73ac:	55                   	push   rbp
    73ad:	48 89 e5             	mov    rbp,rsp
    73b0:	48 83 ec 40          	sub    rsp,0x40
    73b4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    73b8:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    73bb:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    73be:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    73c1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
    73c6:	75 0a                	jne    73d2 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x26>
    73c8:	b8 00 00 00 00       	mov    eax,0x0
    73cd:	e9 9e 01 00 00       	jmp    7570 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1c4>
    73d2:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    73d5:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
    73d8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    73db:	41 b8 00 00 00 00    	mov    r8d,0x0
    73e1:	b9 04 00 00 00       	mov    ecx,0x4
    73e6:	89 c7                	mov    edi,eax
    73e8:	e8 d7 d9 ff ff       	call   4dc4 <stbi__malloc_mad4(int, int, int, int, int)>
    73ed:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    73f1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    73f6:	75 22                	jne    741a <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x6e>
    73f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    73fc:	48 89 c7             	mov    rdi,rax
    73ff:	e8 fc d0 ff ff       	call   4500 <free@plt>
    7404:	48 8d 3d 28 2c 03 00 	lea    rdi,[rip+0x32c28]        # 3a033 <_IO_stdin_used+0x33>
    740b:	e8 2f d7 ff ff       	call   4b3f <stbi__err(char const*)>
    7410:	b8 00 00 00 00       	mov    eax,0x0
    7415:	e9 56 01 00 00       	jmp    7570 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1c4>
    741a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    741d:	83 e0 01             	and    eax,0x1
    7420:	85 c0                	test   eax,eax
    7422:	74 08                	je     742c <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x80>
    7424:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7427:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    742a:	eb 09                	jmp    7435 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x89>
    742c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    742f:	83 e8 01             	sub    eax,0x1
    7432:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7435:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    743c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    743f:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
    7443:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    7446:	0f 8d 9e 00 00 00    	jge    74ea <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x13e>
    744c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    7453:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7456:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    7459:	0f 8d 82 00 00 00    	jge    74e1 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x135>
    745f:	f3 0f 10 15 b9 3f 04 00 	movss  xmm2,DWORD PTR [rip+0x43fb9]        # 4b420 <stbi__l2h_gamma>
    7467:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    746a:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    746e:	89 c2                	mov    edx,eax
    7470:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7473:	01 d0                	add    eax,edx
    7475:	48 63 d0             	movsxd rdx,eax
    7478:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    747c:	48 01 d0             	add    rax,rdx
    747f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    7482:	0f b6 c0             	movzx  eax,al
    7485:	66 0f ef c0          	pxor   xmm0,xmm0
    7489:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
    748d:	f3 0f 10 0d cb 58 03 00 	movss  xmm1,DWORD PTR [rip+0x358cb]        # 3cd60 <NANO_SEC+0x1a98>
    7495:	f3 0f 5e c1          	divss  xmm0,xmm1
    7499:	66 0f 7e c0          	movd   eax,xmm0
    749d:	0f 28 ca             	movaps xmm1,xmm2
    74a0:	66 0f 6e c0          	movd   xmm0,eax
    74a4:	e8 e5 d7 01 00       	call   24c8e <std::pow(float, float)>
    74a9:	f3 0f 10 0d 73 3f 04 00 	movss  xmm1,DWORD PTR [rip+0x43f73]        # 4b424 <stbi__l2h_scale>
    74b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    74b4:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    74b8:	89 c2                	mov    edx,eax
    74ba:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    74bd:	01 d0                	add    eax,edx
    74bf:	48 98                	cdqe   
    74c1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    74c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    74cd:	48 01 d0             	add    rax,rdx
    74d0:	f3 0f 59 c1          	mulss  xmm0,xmm1
    74d4:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
    74d8:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    74dc:	e9 72 ff ff ff       	jmp    7453 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0xa7>
    74e1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    74e5:	e9 52 ff ff ff       	jmp    743c <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x90>
    74ea:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    74ed:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
    74f0:	7d 6e                	jge    7560 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1b4>
    74f2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    74f9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    74fc:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
    7500:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    7503:	7d 5b                	jge    7560 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1b4>
    7505:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7508:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    750c:	89 c2                	mov    edx,eax
    750e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7511:	01 d0                	add    eax,edx
    7513:	48 63 d0             	movsxd rdx,eax
    7516:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    751a:	48 01 d0             	add    rax,rdx
    751d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    7520:	0f b6 c0             	movzx  eax,al
    7523:	66 0f ef c0          	pxor   xmm0,xmm0
    7527:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
    752b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    752e:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    7532:	89 c2                	mov    edx,eax
    7534:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7537:	01 d0                	add    eax,edx
    7539:	48 98                	cdqe   
    753b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7543:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    7547:	48 01 d0             	add    rax,rdx
    754a:	f3 0f 10 0d 0e 58 03 00 	movss  xmm1,DWORD PTR [rip+0x3580e]        # 3cd60 <NANO_SEC+0x1a98>
    7552:	f3 0f 5e c1          	divss  xmm0,xmm1
    7556:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
    755a:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    755e:	eb 99                	jmp    74f9 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x14d>
    7560:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7564:	48 89 c7             	mov    rdi,rax
    7567:	e8 94 cf ff ff       	call   4500 <free@plt>
    756c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    7570:	c9                   	leave  
    7571:	c3                   	ret    

0000000000007572 <stbi__hdr_to_ldr(float*, int, int, int)>:
    7572:	55                   	push   rbp
    7573:	48 89 e5             	mov    rbp,rsp
    7576:	48 83 ec 40          	sub    rsp,0x40
    757a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    757e:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    7581:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    7584:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    7587:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
    758c:	75 0a                	jne    7598 <stbi__hdr_to_ldr(float*, int, int, int)+0x26>
    758e:	b8 00 00 00 00       	mov    eax,0x0
    7593:	e9 fb 01 00 00       	jmp    7793 <stbi__hdr_to_ldr(float*, int, int, int)+0x221>
    7598:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    759b:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
    759e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    75a1:	b9 00 00 00 00       	mov    ecx,0x0
    75a6:	89 c7                	mov    edi,eax
    75a8:	e8 c1 d7 ff ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
    75ad:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    75b1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    75b6:	75 22                	jne    75da <stbi__hdr_to_ldr(float*, int, int, int)+0x68>
    75b8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    75bc:	48 89 c7             	mov    rdi,rax
    75bf:	e8 3c cf ff ff       	call   4500 <free@plt>
    75c4:	48 8d 3d 68 2a 03 00 	lea    rdi,[rip+0x32a68]        # 3a033 <_IO_stdin_used+0x33>
    75cb:	e8 6f d5 ff ff       	call   4b3f <stbi__err(char const*)>
    75d0:	b8 00 00 00 00       	mov    eax,0x0
    75d5:	e9 b9 01 00 00       	jmp    7793 <stbi__hdr_to_ldr(float*, int, int, int)+0x221>
    75da:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    75dd:	83 e0 01             	and    eax,0x1
    75e0:	85 c0                	test   eax,eax
    75e2:	74 08                	je     75ec <stbi__hdr_to_ldr(float*, int, int, int)+0x7a>
    75e4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    75e7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    75ea:	eb 09                	jmp    75f5 <stbi__hdr_to_ldr(float*, int, int, int)+0x83>
    75ec:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    75ef:	83 e8 01             	sub    eax,0x1
    75f2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    75f5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    75fc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    75ff:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
    7603:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    7606:	0f 8d 77 01 00 00    	jge    7783 <stbi__hdr_to_ldr(float*, int, int, int)+0x211>
    760c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    7613:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7616:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
    7619:	0f 8d be 00 00 00    	jge    76dd <stbi__hdr_to_ldr(float*, int, int, int)+0x16b>
    761f:	f3 0f 10 15 01 3e 04 00 	movss  xmm2,DWORD PTR [rip+0x43e01]        # 4b428 <stbi__h2l_gamma_i>
    7627:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    762a:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    762e:	89 c2                	mov    edx,eax
    7630:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7633:	01 d0                	add    eax,edx
    7635:	48 98                	cdqe   
    7637:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    763f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7643:	48 01 d0             	add    rax,rdx
    7646:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
    764a:	f3 0f 10 05 da 3d 04 00 	movss  xmm0,DWORD PTR [rip+0x43dda]        # 4b42c <stbi__h2l_scale_i>
    7652:	f3 0f 59 c8          	mulss  xmm1,xmm0
    7656:	66 0f 7e c8          	movd   eax,xmm1
    765a:	0f 28 ca             	movaps xmm1,xmm2
    765d:	66 0f 6e c0          	movd   xmm0,eax
    7661:	e8 28 d6 01 00       	call   24c8e <std::pow(float, float)>
    7666:	f3 0f 10 0d f2 56 03 00 	movss  xmm1,DWORD PTR [rip+0x356f2]        # 3cd60 <NANO_SEC+0x1a98>
    766e:	f3 0f 59 c8          	mulss  xmm1,xmm0
    7672:	f3 0f 10 05 ea 56 03 00 	movss  xmm0,DWORD PTR [rip+0x356ea]        # 3cd64 <NANO_SEC+0x1a9c>
    767a:	f3 0f 58 c1          	addss  xmm0,xmm1
    767e:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
    7683:	66 0f ef c0          	pxor   xmm0,xmm0
    7687:	0f 2f 45 f0          	comiss xmm0,DWORD PTR [rbp-0x10]
    768b:	76 09                	jbe    7696 <stbi__hdr_to_ldr(float*, int, int, int)+0x124>
    768d:	66 0f ef c0          	pxor   xmm0,xmm0
    7691:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
    7696:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
    769b:	0f 2f 05 be 56 03 00 	comiss xmm0,DWORD PTR [rip+0x356be]        # 3cd60 <NANO_SEC+0x1a98>
    76a2:	76 0d                	jbe    76b1 <stbi__hdr_to_ldr(float*, int, int, int)+0x13f>
    76a4:	f3 0f 10 05 b4 56 03 00 	movss  xmm0,DWORD PTR [rip+0x356b4]        # 3cd60 <NANO_SEC+0x1a98>
    76ac:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
    76b1:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
    76b6:	f3 0f 2c d0          	cvttss2si edx,xmm0
    76ba:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    76bd:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    76c1:	89 c1                	mov    ecx,eax
    76c3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    76c6:	01 c8                	add    eax,ecx
    76c8:	48 63 c8             	movsxd rcx,eax
    76cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    76cf:	48 01 c8             	add    rax,rcx
    76d2:	88 10                	mov    BYTE PTR [rax],dl
    76d4:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    76d8:	e9 36 ff ff ff       	jmp    7613 <stbi__hdr_to_ldr(float*, int, int, int)+0xa1>
    76dd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    76e0:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
    76e3:	0f 8d 91 00 00 00    	jge    777a <stbi__hdr_to_ldr(float*, int, int, int)+0x208>
    76e9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    76ec:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    76f0:	89 c2                	mov    edx,eax
    76f2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    76f5:	01 d0                	add    eax,edx
    76f7:	48 98                	cdqe   
    76f9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7701:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7705:	48 01 d0             	add    rax,rdx
    7708:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
    770c:	f3 0f 10 05 4c 56 03 00 	movss  xmm0,DWORD PTR [rip+0x3564c]        # 3cd60 <NANO_SEC+0x1a98>
    7714:	f3 0f 59 c8          	mulss  xmm1,xmm0
    7718:	f3 0f 10 05 44 56 03 00 	movss  xmm0,DWORD PTR [rip+0x35644]        # 3cd64 <NANO_SEC+0x1a9c>
    7720:	f3 0f 58 c1          	addss  xmm0,xmm1
    7724:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
    7729:	66 0f ef c0          	pxor   xmm0,xmm0
    772d:	0f 2f 45 f4          	comiss xmm0,DWORD PTR [rbp-0xc]
    7731:	76 09                	jbe    773c <stbi__hdr_to_ldr(float*, int, int, int)+0x1ca>
    7733:	66 0f ef c0          	pxor   xmm0,xmm0
    7737:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
    773c:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
    7741:	0f 2f 05 18 56 03 00 	comiss xmm0,DWORD PTR [rip+0x35618]        # 3cd60 <NANO_SEC+0x1a98>
    7748:	76 0d                	jbe    7757 <stbi__hdr_to_ldr(float*, int, int, int)+0x1e5>
    774a:	f3 0f 10 05 0e 56 03 00 	movss  xmm0,DWORD PTR [rip+0x3560e]        # 3cd60 <NANO_SEC+0x1a98>
    7752:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
    7757:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
    775c:	f3 0f 2c d0          	cvttss2si edx,xmm0
    7760:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7763:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    7767:	89 c1                	mov    ecx,eax
    7769:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    776c:	01 c8                	add    eax,ecx
    776e:	48 63 c8             	movsxd rcx,eax
    7771:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    7775:	48 01 c8             	add    rax,rcx
    7778:	88 10                	mov    BYTE PTR [rax],dl
    777a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    777e:	e9 79 fe ff ff       	jmp    75fc <stbi__hdr_to_ldr(float*, int, int, int)+0x8a>
    7783:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7787:	48 89 c7             	mov    rdi,rax
    778a:	e8 71 cd ff ff       	call   4500 <free@plt>
    778f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    7793:	c9                   	leave  
    7794:	c3                   	ret    

0000000000007795 <stbi__build_huffman(stbi__huffman*, int*)>:
    7795:	55                   	push   rbp
    7796:	48 89 e5             	mov    rbp,rsp
    7799:	48 83 ec 30          	sub    rsp,0x30
    779d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    77a1:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    77a5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    77ac:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    77b3:	83 7d e4 0f          	cmp    DWORD PTR [rbp-0x1c],0xf
    77b7:	7f 4a                	jg     7803 <stbi__build_huffman(stbi__huffman*, int*)+0x6e>
    77b9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    77c0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    77c3:	48 98                	cdqe   
    77c5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    77cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    77d1:	48 01 d0             	add    rax,rdx
    77d4:	8b 00                	mov    eax,DWORD PTR [rax]
    77d6:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    77d9:	7d 22                	jge    77fd <stbi__build_huffman(stbi__huffman*, int*)+0x68>
    77db:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    77de:	8d 48 01             	lea    ecx,[rax+0x1]
    77e1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    77e4:	8d 50 01             	lea    edx,[rax+0x1]
    77e7:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    77ea:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    77ee:	48 98                	cdqe   
    77f0:	88 8c 02 00 05 00 00 	mov    BYTE PTR [rdx+rax*1+0x500],cl
    77f7:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    77fb:	eb c3                	jmp    77c0 <stbi__build_huffman(stbi__huffman*, int*)+0x2b>
    77fd:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    7801:	eb b0                	jmp    77b3 <stbi__build_huffman(stbi__huffman*, int*)+0x1e>
    7803:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    7807:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    780a:	48 98                	cdqe   
    780c:	c6 84 02 00 05 00 00 00 	mov    BYTE PTR [rdx+rax*1+0x500],0x0
    7814:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    781b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    7822:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
    7829:	83 7d e8 10          	cmp    DWORD PTR [rbp-0x18],0x10
    782d:	0f 8f cb 00 00 00    	jg     78fe <stbi__build_huffman(stbi__huffman*, int*)+0x169>
    7833:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7836:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
    7839:	89 c1                	mov    ecx,eax
    783b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    783f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    7842:	48 63 d2             	movsxd rdx,edx
    7845:	48 81 c2 90 01 00 00 	add    rdx,0x190
    784c:	89 4c 90 0c          	mov    DWORD PTR [rax+rdx*4+0xc],ecx
    7850:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    7854:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7857:	48 98                	cdqe   
    7859:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7861:	0f b6 c0             	movzx  eax,al
    7864:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    7867:	75 63                	jne    78cc <stbi__build_huffman(stbi__huffman*, int*)+0x137>
    7869:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    786d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7870:	48 98                	cdqe   
    7872:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    787a:	0f b6 c0             	movzx  eax,al
    787d:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    7880:	75 26                	jne    78a8 <stbi__build_huffman(stbi__huffman*, int*)+0x113>
    7882:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7885:	8d 50 01             	lea    edx,[rax+0x1]
    7888:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
    788b:	89 c1                	mov    ecx,eax
    788d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7890:	8d 50 01             	lea    edx,[rax+0x1]
    7893:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    7896:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    789a:	48 98                	cdqe   
    789c:	48 05 00 01 00 00    	add    rax,0x100
    78a2:	66 89 0c 42          	mov    WORD PTR [rdx+rax*2],cx
    78a6:	eb c1                	jmp    7869 <stbi__build_huffman(stbi__huffman*, int*)+0xd4>
    78a8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    78ab:	8d 50 ff             	lea    edx,[rax-0x1]
    78ae:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    78b1:	89 c1                	mov    ecx,eax
    78b3:	d3 ea                	shr    edx,cl
    78b5:	89 d0                	mov    eax,edx
    78b7:	85 c0                	test   eax,eax
    78b9:	74 11                	je     78cc <stbi__build_huffman(stbi__huffman*, int*)+0x137>
    78bb:	48 8d 3d 4a 2a 03 00 	lea    rdi,[rip+0x32a4a]        # 3a30c <_IO_stdin_used+0x30c>
    78c2:	e8 78 d2 ff ff       	call   4b3f <stbi__err(char const*)>
    78c7:	e9 09 01 00 00       	jmp    79d5 <stbi__build_huffman(stbi__huffman*, int*)+0x240>
    78cc:	b8 10 00 00 00       	mov    eax,0x10
    78d1:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
    78d4:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    78d7:	89 c1                	mov    ecx,eax
    78d9:	d3 e2                	shl    edx,cl
    78db:	89 d1                	mov    ecx,edx
    78dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    78e1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    78e4:	48 63 d2             	movsxd rdx,edx
    78e7:	48 81 c2 80 01 00 00 	add    rdx,0x180
    78ee:	89 4c 90 04          	mov    DWORD PTR [rax+rdx*4+0x4],ecx
    78f2:	d1 65 f0             	shl    DWORD PTR [rbp-0x10],1
    78f5:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    78f9:	e9 2b ff ff ff       	jmp    7829 <stbi__build_huffman(stbi__huffman*, int*)+0x94>
    78fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7902:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    7905:	48 63 d2             	movsxd rdx,edx
    7908:	48 81 c2 80 01 00 00 	add    rdx,0x180
    790f:	c7 44 90 04 ff ff ff ff 	mov    DWORD PTR [rax+rdx*4+0x4],0xffffffff
    7917:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    791b:	ba 00 02 00 00       	mov    edx,0x200
    7920:	be ff 00 00 00       	mov    esi,0xff
    7925:	48 89 c7             	mov    rdi,rax
    7928:	e8 b3 c8 ff ff       	call   41e0 <memset@plt>
    792d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    7934:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7937:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
    793a:	0f 8d 90 00 00 00    	jge    79d0 <stbi__build_huffman(stbi__huffman*, int*)+0x23b>
    7940:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    7944:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7947:	48 98                	cdqe   
    7949:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7951:	0f b6 c0             	movzx  eax,al
    7954:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7957:	83 7d f4 09          	cmp    DWORD PTR [rbp-0xc],0x9
    795b:	7f 6a                	jg     79c7 <stbi__build_huffman(stbi__huffman*, int*)+0x232>
    795d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7961:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    7964:	48 63 d2             	movsxd rdx,edx
    7967:	48 81 c2 00 01 00 00 	add    rdx,0x100
    796e:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
    7972:	0f b7 d0             	movzx  edx,ax
    7975:	b8 09 00 00 00       	mov    eax,0x9
    797a:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    797d:	89 c1                	mov    ecx,eax
    797f:	d3 e2                	shl    edx,cl
    7981:	89 d0                	mov    eax,edx
    7983:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7986:	b8 09 00 00 00       	mov    eax,0x9
    798b:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    798e:	ba 01 00 00 00       	mov    edx,0x1
    7993:	89 c1                	mov    ecx,eax
    7995:	d3 e2                	shl    edx,cl
    7997:	89 d0                	mov    eax,edx
    7999:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    799c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    79a3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    79a6:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
    79a9:	7d 1c                	jge    79c7 <stbi__build_huffman(stbi__huffman*, int*)+0x232>
    79ab:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    79ae:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    79b1:	01 d0                	add    eax,edx
    79b3:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    79b6:	89 d1                	mov    ecx,edx
    79b8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    79bc:	48 98                	cdqe   
    79be:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
    79c1:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    79c5:	eb dc                	jmp    79a3 <stbi__build_huffman(stbi__huffman*, int*)+0x20e>
    79c7:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    79cb:	e9 64 ff ff ff       	jmp    7934 <stbi__build_huffman(stbi__huffman*, int*)+0x19f>
    79d0:	b8 01 00 00 00       	mov    eax,0x1
    79d5:	c9                   	leave  
    79d6:	c3                   	ret    

00000000000079d7 <stbi__build_fast_ac(short*, stbi__huffman*)>:
    79d7:	55                   	push   rbp
    79d8:	48 89 e5             	mov    rbp,rsp
    79db:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    79df:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    79e3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    79ea:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
    79f1:	0f 8f 2c 01 00 00    	jg     7b23 <stbi__build_fast_ac(short*, stbi__huffman*)+0x14c>
    79f7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    79fb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    79fe:	48 98                	cdqe   
    7a00:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
    7a04:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
    7a07:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7a0a:	48 98                	cdqe   
    7a0c:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    7a10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7a14:	48 01 d0             	add    rax,rdx
    7a17:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
    7a1c:	80 7d e3 ff          	cmp    BYTE PTR [rbp-0x1d],0xff
    7a20:	0f 84 f4 00 00 00    	je     7b1a <stbi__build_fast_ac(short*, stbi__huffman*)+0x143>
    7a26:	0f b6 45 e3          	movzx  eax,BYTE PTR [rbp-0x1d]
    7a2a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    7a2e:	48 98                	cdqe   
    7a30:	0f b6 84 02 00 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x400]
    7a38:	0f b6 c0             	movzx  eax,al
    7a3b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    7a3e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7a41:	c1 f8 04             	sar    eax,0x4
    7a44:	83 e0 0f             	and    eax,0xf
    7a47:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    7a4a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7a4d:	83 e0 0f             	and    eax,0xf
    7a50:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7a53:	0f b6 45 e3          	movzx  eax,BYTE PTR [rbp-0x1d]
    7a57:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    7a5b:	48 98                	cdqe   
    7a5d:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7a65:	0f b6 c0             	movzx  eax,al
    7a68:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7a6b:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    7a6f:	0f 84 a5 00 00 00    	je     7b1a <stbi__build_fast_ac(short*, stbi__huffman*)+0x143>
    7a75:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    7a78:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7a7b:	01 d0                	add    eax,edx
    7a7d:	83 f8 09             	cmp    eax,0x9
    7a80:	0f 8f 94 00 00 00    	jg     7b1a <stbi__build_fast_ac(short*, stbi__huffman*)+0x143>
    7a86:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7a89:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    7a8c:	89 c1                	mov    ecx,eax
    7a8e:	d3 e2                	shl    edx,cl
    7a90:	89 d0                	mov    eax,edx
    7a92:	25 ff 01 00 00       	and    eax,0x1ff
    7a97:	89 c2                	mov    edx,eax
    7a99:	b8 09 00 00 00       	mov    eax,0x9
    7a9e:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    7aa1:	89 c1                	mov    ecx,eax
    7aa3:	d3 fa                	sar    edx,cl
    7aa5:	89 d0                	mov    eax,edx
    7aa7:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    7aaa:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7aad:	83 e8 01             	sub    eax,0x1
    7ab0:	ba 01 00 00 00       	mov    edx,0x1
    7ab5:	89 c1                	mov    ecx,eax
    7ab7:	d3 e2                	shl    edx,cl
    7ab9:	89 d0                	mov    eax,edx
    7abb:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7abe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7ac1:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
    7ac4:	7d 17                	jge    7add <stbi__build_fast_ac(short*, stbi__huffman*)+0x106>
    7ac6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7ac9:	ba ff ff ff ff       	mov    edx,0xffffffff
    7ace:	89 c1                	mov    ecx,eax
    7ad0:	d3 e2                	shl    edx,cl
    7ad2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7ad5:	01 d0                	add    eax,edx
    7ad7:	83 c0 01             	add    eax,0x1
    7ada:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    7add:	83 7d e8 80          	cmp    DWORD PTR [rbp-0x18],0xffffff80
    7ae1:	7c 37                	jl     7b1a <stbi__build_fast_ac(short*, stbi__huffman*)+0x143>
    7ae3:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
    7ae7:	7f 31                	jg     7b1a <stbi__build_fast_ac(short*, stbi__huffman*)+0x143>
    7ae9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7aec:	c1 e0 04             	shl    eax,0x4
    7aef:	89 c2                	mov    edx,eax
    7af1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7af4:	01 d0                	add    eax,edx
    7af6:	c1 e0 04             	shl    eax,0x4
    7af9:	89 c2                	mov    edx,eax
    7afb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7afe:	89 c1                	mov    ecx,eax
    7b00:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7b03:	01 c8                	add    eax,ecx
    7b05:	01 c2                	add    edx,eax
    7b07:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7b0a:	48 98                	cdqe   
    7b0c:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    7b10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7b14:	48 01 c8             	add    rax,rcx
    7b17:	66 89 10             	mov    WORD PTR [rax],dx
    7b1a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    7b1e:	e9 c7 fe ff ff       	jmp    79ea <stbi__build_fast_ac(short*, stbi__huffman*)+0x13>
    7b23:	90                   	nop
    7b24:	5d                   	pop    rbp
    7b25:	c3                   	ret    

0000000000007b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>:
    7b26:	55                   	push   rbp
    7b27:	48 89 e5             	mov    rbp,rsp
    7b2a:	48 83 ec 20          	sub    rsp,0x20
    7b2e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7b32:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7b36:	8b 80 2c 48 00 00    	mov    eax,DWORD PTR [rax+0x482c]
    7b3c:	85 c0                	test   eax,eax
    7b3e:	75 14                	jne    7b54 <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x2e>
    7b40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7b44:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7b47:	48 89 c7             	mov    rdi,rax
    7b4a:	e8 60 e9 ff ff       	call   64af <stbi__get8(stbi__context*)>
    7b4f:	0f b6 c0             	movzx  eax,al
    7b52:	eb 05                	jmp    7b59 <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x33>
    7b54:	b8 00 00 00 00       	mov    eax,0x0
    7b59:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7b5c:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
    7b63:	75 5a                	jne    7bbf <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x99>
    7b65:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7b69:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7b6c:	48 89 c7             	mov    rdi,rax
    7b6f:	e8 3b e9 ff ff       	call   64af <stbi__get8(stbi__context*)>
    7b74:	0f b6 c0             	movzx  eax,al
    7b77:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7b7a:	81 7d f8 ff 00 00 00 	cmp    DWORD PTR [rbp-0x8],0xff
    7b81:	75 17                	jne    7b9a <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x74>
    7b83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7b87:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7b8a:	48 89 c7             	mov    rdi,rax
    7b8d:	e8 1d e9 ff ff       	call   64af <stbi__get8(stbi__context*)>
    7b92:	0f b6 c0             	movzx  eax,al
    7b95:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7b98:	eb e0                	jmp    7b7a <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x54>
    7b9a:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    7b9e:	74 1f                	je     7bbf <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x99>
    7ba0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7ba3:	89 c2                	mov    edx,eax
    7ba5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ba9:	88 90 28 48 00 00    	mov    BYTE PTR [rax+0x4828],dl
    7baf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7bb3:	c7 80 2c 48 00 00 01 00 00 00 	mov    DWORD PTR [rax+0x482c],0x1
    7bbd:	eb 5d                	jmp    7c1c <stbi__grow_buffer_unsafe(stbi__jpeg*)+0xf6>
    7bbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7bc3:	8b b0 20 48 00 00    	mov    esi,DWORD PTR [rax+0x4820]
    7bc9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7bcd:	8b 90 24 48 00 00    	mov    edx,DWORD PTR [rax+0x4824]
    7bd3:	b8 18 00 00 00       	mov    eax,0x18
    7bd8:	29 d0                	sub    eax,edx
    7bda:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
    7bdd:	89 c1                	mov    ecx,eax
    7bdf:	d3 e2                	shl    edx,cl
    7be1:	89 d0                	mov    eax,edx
    7be3:	09 c6                	or     esi,eax
    7be5:	89 f2                	mov    edx,esi
    7be7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7beb:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7bf1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7bf5:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7bfb:	8d 50 08             	lea    edx,[rax+0x8]
    7bfe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c02:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7c08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c0c:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7c12:	83 f8 18             	cmp    eax,0x18
    7c15:	7f 05                	jg     7c1c <stbi__grow_buffer_unsafe(stbi__jpeg*)+0xf6>
    7c17:	e9 16 ff ff ff       	jmp    7b32 <stbi__grow_buffer_unsafe(stbi__jpeg*)+0xc>
    7c1c:	c9                   	leave  
    7c1d:	c3                   	ret    

0000000000007c1e <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>:
    7c1e:	55                   	push   rbp
    7c1f:	48 89 e5             	mov    rbp,rsp
    7c22:	48 83 ec 20          	sub    rsp,0x20
    7c26:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7c2a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    7c2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c32:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7c38:	83 f8 0f             	cmp    eax,0xf
    7c3b:	7f 0c                	jg     7c49 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x2b>
    7c3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c41:	48 89 c7             	mov    rdi,rax
    7c44:	e8 dd fe ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    7c49:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c4d:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    7c53:	c1 e8 17             	shr    eax,0x17
    7c56:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7c59:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7c5d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7c60:	48 98                	cdqe   
    7c62:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
    7c66:	0f b6 c0             	movzx  eax,al
    7c69:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    7c6c:	81 7d f0 fe 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xfe
    7c73:	7f 7d                	jg     7cf2 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0xd4>
    7c75:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7c79:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7c7c:	48 98                	cdqe   
    7c7e:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7c86:	0f b6 c0             	movzx  eax,al
    7c89:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7c8c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c90:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7c96:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    7c99:	7e 0a                	jle    7ca5 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x87>
    7c9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
    7ca0:	e9 e8 01 00 00       	jmp    7e8d <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x26f>
    7ca5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ca9:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7caf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    7cb2:	89 c1                	mov    ecx,eax
    7cb4:	d3 e2                	shl    edx,cl
    7cb6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7cba:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7cc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7cc4:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7cca:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
    7ccd:	89 c2                	mov    edx,eax
    7ccf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7cd3:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7cd9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7cdd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7ce0:	48 98                	cdqe   
    7ce2:	0f b6 84 02 00 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x400]
    7cea:	0f b6 c0             	movzx  eax,al
    7ced:	e9 9b 01 00 00       	jmp    7e8d <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x26f>
    7cf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7cf6:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    7cfc:	c1 e8 10             	shr    eax,0x10
    7cff:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7d02:	c7 45 f0 0a 00 00 00 	mov    DWORD PTR [rbp-0x10],0xa
    7d09:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    7d0d:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    7d10:	48 63 d2             	movsxd rdx,edx
    7d13:	48 81 c2 80 01 00 00 	add    rdx,0x180
    7d1a:	8b 44 90 04          	mov    eax,DWORD PTR [rax+rdx*4+0x4]
    7d1e:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    7d21:	72 06                	jb     7d29 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x10b>
    7d23:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    7d27:	eb e0                	jmp    7d09 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0xeb>
    7d29:	90                   	nop
    7d2a:	83 7d f0 11          	cmp    DWORD PTR [rbp-0x10],0x11
    7d2e:	75 21                	jne    7d51 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x133>
    7d30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d34:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7d3a:	8d 50 f0             	lea    edx,[rax-0x10]
    7d3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d41:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7d47:	b8 ff ff ff ff       	mov    eax,0xffffffff
    7d4c:	e9 3c 01 00 00       	jmp    7e8d <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x26f>
    7d51:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d55:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7d5b:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    7d5e:	7e 0a                	jle    7d6a <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x14c>
    7d60:	b8 ff ff ff ff       	mov    eax,0xffffffff
    7d65:	e9 23 01 00 00       	jmp    7e8d <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x26f>
    7d6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d6e:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7d74:	b8 20 00 00 00       	mov    eax,0x20
    7d79:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
    7d7c:	89 c1                	mov    ecx,eax
    7d7e:	d3 ea                	shr    edx,cl
    7d80:	89 d1                	mov    ecx,edx
    7d82:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7d85:	48 98                	cdqe   
    7d87:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7d8f:	48 8d 05 8a 25 03 00 	lea    rax,[rip+0x3258a]        # 3a320 <stbi__bmask>
    7d96:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7d99:	21 c1                	and    ecx,eax
    7d9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    7d9f:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    7da2:	48 63 d2             	movsxd rdx,edx
    7da5:	48 81 c2 90 01 00 00 	add    rdx,0x190
    7dac:	8b 44 90 0c          	mov    eax,DWORD PTR [rax+rdx*4+0xc]
    7db0:	01 c8                	add    eax,ecx
    7db2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7db5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7db9:	8b b0 20 48 00 00    	mov    esi,DWORD PTR [rax+0x4820]
    7dbf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7dc3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7dc6:	48 98                	cdqe   
    7dc8:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7dd0:	0f b6 d0             	movzx  edx,al
    7dd3:	b8 20 00 00 00       	mov    eax,0x20
    7dd8:	29 d0                	sub    eax,edx
    7dda:	89 c1                	mov    ecx,eax
    7ddc:	d3 ee                	shr    esi,cl
    7dde:	89 f1                	mov    ecx,esi
    7de0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7de4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7de7:	48 98                	cdqe   
    7de9:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7df1:	0f b6 c0             	movzx  eax,al
    7df4:	48 98                	cdqe   
    7df6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7dfe:	48 8d 05 1b 25 03 00 	lea    rax,[rip+0x3251b]        # 3a320 <stbi__bmask>
    7e05:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7e08:	21 c1                	and    ecx,eax
    7e0a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    7e0e:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    7e11:	48 63 d2             	movsxd rdx,edx
    7e14:	48 81 c2 00 01 00 00 	add    rdx,0x100
    7e1b:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
    7e1f:	0f b7 c0             	movzx  eax,ax
    7e22:	39 c1                	cmp    ecx,eax
    7e24:	74 1f                	je     7e45 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x227>
    7e26:	48 8d 0d 3b 25 03 00 	lea    rcx,[rip+0x3253b]        # 3a368 <stbi__bmask+0x48>
    7e2d:	ba f2 07 00 00       	mov    edx,0x7f2
    7e32:	48 8d 35 5f 22 03 00 	lea    rsi,[rip+0x3225f]        # 3a098 <_IO_stdin_used+0x98>
    7e39:	48 8d 3d 60 25 03 00 	lea    rdi,[rip+0x32560]        # 3a3a0 <stbi__bmask+0x80>
    7e40:	e8 3b c4 ff ff       	call   4280 <__assert_fail@plt>
    7e45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7e49:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7e4f:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
    7e52:	89 c2                	mov    edx,eax
    7e54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7e58:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7e5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7e62:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7e68:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7e6b:	89 c1                	mov    ecx,eax
    7e6d:	d3 e2                	shl    edx,cl
    7e6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7e73:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7e79:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7e7d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7e80:	48 98                	cdqe   
    7e82:	0f b6 84 02 00 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x400]
    7e8a:	0f b6 c0             	movzx  eax,al
    7e8d:	c9                   	leave  
    7e8e:	c3                   	ret    

0000000000007e8f <stbi__extend_receive(stbi__jpeg*, int)>:
    7e8f:	55                   	push   rbp
    7e90:	48 89 e5             	mov    rbp,rsp
    7e93:	48 83 ec 20          	sub    rsp,0x20
    7e97:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7e9b:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    7e9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ea2:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7ea8:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    7eab:	7e 0c                	jle    7eb9 <stbi__extend_receive(stbi__jpeg*, int)+0x2a>
    7ead:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7eb1:	48 89 c7             	mov    rdi,rax
    7eb4:	e8 6d fc ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    7eb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ebd:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    7ec3:	c1 f8 1f             	sar    eax,0x1f
    7ec6:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7ec9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ecd:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7ed3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7ed6:	89 c1                	mov    ecx,eax
    7ed8:	d3 c2                	rol    edx,cl
    7eda:	89 d0                	mov    eax,edx
    7edc:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7edf:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    7ee3:	78 06                	js     7eeb <stbi__extend_receive(stbi__jpeg*, int)+0x5c>
    7ee5:	83 7d e4 10          	cmp    DWORD PTR [rbp-0x1c],0x10
    7ee9:	7e 1f                	jle    7f0a <stbi__extend_receive(stbi__jpeg*, int)+0x7b>
    7eeb:	48 8d 0d 4e 25 03 00 	lea    rcx,[rip+0x3254e]        # 3a440 <stbi__jbias+0x40>
    7ef2:	ba 07 08 00 00       	mov    edx,0x807
    7ef7:	48 8d 35 9a 21 03 00 	lea    rsi,[rip+0x3219a]        # 3a098 <_IO_stdin_used+0x98>
    7efe:	48 8d 3d 6b 25 03 00 	lea    rdi,[rip+0x3256b]        # 3a470 <stbi__jbias+0x70>
    7f05:	e8 76 c3 ff ff       	call   4280 <__assert_fail@plt>
    7f0a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7f0d:	48 98                	cdqe   
    7f0f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7f17:	48 8d 05 02 24 03 00 	lea    rax,[rip+0x32402]        # 3a320 <stbi__bmask>
    7f1e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7f21:	f7 d0                	not    eax
    7f23:	23 45 fc             	and    eax,DWORD PTR [rbp-0x4]
    7f26:	89 c2                	mov    edx,eax
    7f28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f2c:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7f32:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7f35:	48 98                	cdqe   
    7f37:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7f3f:	48 8d 05 da 23 03 00 	lea    rax,[rip+0x323da]        # 3a320 <stbi__bmask>
    7f46:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7f49:	21 45 fc             	and    DWORD PTR [rbp-0x4],eax
    7f4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f50:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7f56:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
    7f59:	89 c2                	mov    edx,eax
    7f5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f5f:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7f65:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7f68:	48 98                	cdqe   
    7f6a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7f72:	48 8d 05 87 24 03 00 	lea    rax,[rip+0x32487]        # 3a400 <stbi__jbias>
    7f79:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
    7f7c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7f7f:	f7 d0                	not    eax
    7f81:	21 d0                	and    eax,edx
    7f83:	89 c2                	mov    edx,eax
    7f85:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    7f88:	01 d0                	add    eax,edx
    7f8a:	c9                   	leave  
    7f8b:	c3                   	ret    

0000000000007f8c <stbi__jpeg_get_bits(stbi__jpeg*, int)>:
    7f8c:	55                   	push   rbp
    7f8d:	48 89 e5             	mov    rbp,rsp
    7f90:	48 83 ec 20          	sub    rsp,0x20
    7f94:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7f98:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    7f9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f9f:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7fa5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    7fa8:	7e 0c                	jle    7fb6 <stbi__jpeg_get_bits(stbi__jpeg*, int)+0x2a>
    7faa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7fae:	48 89 c7             	mov    rdi,rax
    7fb1:	e8 70 fb ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    7fb6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7fba:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7fc0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7fc3:	89 c1                	mov    ecx,eax
    7fc5:	d3 c2                	rol    edx,cl
    7fc7:	89 d0                	mov    eax,edx
    7fc9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7fcc:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7fcf:	48 98                	cdqe   
    7fd1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7fd9:	48 8d 05 40 23 03 00 	lea    rax,[rip+0x32340]        # 3a320 <stbi__bmask>
    7fe0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7fe3:	f7 d0                	not    eax
    7fe5:	23 45 fc             	and    eax,DWORD PTR [rbp-0x4]
    7fe8:	89 c2                	mov    edx,eax
    7fea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7fee:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7ff4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7ff7:	48 98                	cdqe   
    7ff9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    8001:	48 8d 05 18 23 03 00 	lea    rax,[rip+0x32318]        # 3a320 <stbi__bmask>
    8008:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    800b:	21 45 fc             	and    DWORD PTR [rbp-0x4],eax
    800e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8012:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8018:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
    801b:	89 c2                	mov    edx,eax
    801d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8021:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    8027:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    802a:	c9                   	leave  
    802b:	c3                   	ret    

000000000000802c <stbi__jpeg_get_bit(stbi__jpeg*)>:
    802c:	55                   	push   rbp
    802d:	48 89 e5             	mov    rbp,rsp
    8030:	48 83 ec 20          	sub    rsp,0x20
    8034:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    8038:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    803c:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8042:	85 c0                	test   eax,eax
    8044:	7f 0c                	jg     8052 <stbi__jpeg_get_bit(stbi__jpeg*)+0x26>
    8046:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    804a:	48 89 c7             	mov    rdi,rax
    804d:	e8 d4 fa ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    8052:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8056:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    805c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    805f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8063:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    8069:	8d 14 00             	lea    edx,[rax+rax*1]
    806c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8070:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    8076:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    807a:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8080:	8d 50 ff             	lea    edx,[rax-0x1]
    8083:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8087:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    808d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8090:	25 00 00 00 80       	and    eax,0x80000000
    8095:	c9                   	leave  
    8096:	c3                   	ret    

0000000000008097 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)>:
    8097:	55                   	push   rbp
    8098:	48 89 e5             	mov    rbp,rsp
    809b:	48 83 ec 60          	sub    rsp,0x60
    809f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    80a3:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    80a7:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    80ab:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    80af:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
    80b3:	44 89 4d a4          	mov    DWORD PTR [rbp-0x5c],r9d
    80b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    80bb:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    80c1:	83 f8 0f             	cmp    eax,0xf
    80c4:	7f 0c                	jg     80d2 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x3b>
    80c6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    80ca:	48 89 c7             	mov    rdi,rax
    80cd:	e8 54 fa ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    80d2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    80d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    80da:	48 89 d6             	mov    rsi,rdx
    80dd:	48 89 c7             	mov    rdi,rax
    80e0:	e8 39 fb ff ff       	call   7c1e <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    80e5:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    80e8:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    80ec:	79 11                	jns    80ff <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x68>
    80ee:	48 8d 3d 1a 24 03 00 	lea    rdi,[rip+0x3241a]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    80f5:	e8 45 ca ff ff       	call   4b3f <stbi__err(char const*)>
    80fa:	e9 46 02 00 00       	jmp    8345 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2ae>
    80ff:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    8103:	ba 80 00 00 00       	mov    edx,0x80
    8108:	be 00 00 00 00       	mov    esi,0x0
    810d:	48 89 c7             	mov    rdi,rax
    8110:	e8 cb c0 ff ff       	call   41e0 <memset@plt>
    8115:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    8119:	74 13                	je     812e <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x97>
    811b:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    811e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8122:	89 d6                	mov    esi,edx
    8124:	48 89 c7             	mov    rdi,rax
    8127:	e8 63 fd ff ff       	call   7e8f <stbi__extend_receive(stbi__jpeg*, int)>
    812c:	eb 05                	jmp    8133 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x9c>
    812e:	b8 00 00 00 00       	mov    eax,0x0
    8133:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    8136:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    813a:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
    813d:	48 63 d0             	movsxd rdx,eax
    8140:	48 89 d0             	mov    rax,rdx
    8143:	48 01 c0             	add    rax,rax
    8146:	48 01 d0             	add    rax,rdx
    8149:	48 c1 e0 05          	shl    rax,0x5
    814d:	48 01 c8             	add    rax,rcx
    8150:	48 05 b8 46 00 00    	add    rax,0x46b8
    8156:	8b 10                	mov    edx,DWORD PTR [rax]
    8158:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    815b:	01 d0                	add    eax,edx
    815d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    8160:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    8164:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
    8167:	48 63 d0             	movsxd rdx,eax
    816a:	48 89 d0             	mov    rax,rdx
    816d:	48 01 c0             	add    rax,rax
    8170:	48 01 d0             	add    rax,rdx
    8173:	48 c1 e0 05          	shl    rax,0x5
    8177:	48 01 c8             	add    rax,rcx
    817a:	48 8d 90 b8 46 00 00 	lea    rdx,[rax+0x46b8]
    8181:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    8184:	89 02                	mov    DWORD PTR [rdx],eax
    8186:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    818a:	0f b7 00             	movzx  eax,WORD PTR [rax]
    818d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    8190:	0f af c2             	imul   eax,edx
    8193:	89 c2                	mov    edx,eax
    8195:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    8199:	66 89 10             	mov    WORD PTR [rax],dx
    819c:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
    81a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    81a7:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    81ad:	83 f8 0f             	cmp    eax,0xf
    81b0:	7f 0c                	jg     81be <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x127>
    81b2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    81b6:	48 89 c7             	mov    rdi,rax
    81b9:	e8 68 f9 ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    81be:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    81c2:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    81c8:	c1 e8 17             	shr    eax,0x17
    81cb:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    81ce:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    81d1:	48 98                	cdqe   
    81d3:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    81d7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    81db:	48 01 d0             	add    rax,rdx
    81de:	0f b7 00             	movzx  eax,WORD PTR [rax]
    81e1:	98                   	cwde   
    81e2:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    81e5:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    81e9:	0f 84 97 00 00 00    	je     8286 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x1ef>
    81ef:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    81f2:	c1 f8 04             	sar    eax,0x4
    81f5:	83 e0 0f             	and    eax,0xf
    81f8:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
    81fb:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    81fe:	83 e0 0f             	and    eax,0xf
    8201:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    8204:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8208:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    820e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    8211:	89 c1                	mov    ecx,eax
    8213:	d3 e2                	shl    edx,cl
    8215:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8219:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    821f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8223:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8229:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
    822c:	89 c2                	mov    edx,eax
    822e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8232:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    8238:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    823b:	8d 50 01             	lea    edx,[rax+0x1]
    823e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    8241:	48 98                	cdqe   
    8243:	48 8d 15 76 22 03 00 	lea    rdx,[rip+0x32276]        # 3a4c0 <stbi__jpeg_dezigzag>
    824a:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    824e:	0f b6 c0             	movzx  eax,al
    8251:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    8254:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    8257:	c1 f8 08             	sar    eax,0x8
    825a:	89 c2                	mov    edx,eax
    825c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    825f:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8263:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    8267:	48 01 c8             	add    rax,rcx
    826a:	0f b7 00             	movzx  eax,WORD PTR [rax]
    826d:	0f af d0             	imul   edx,eax
    8270:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8273:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8277:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    827b:	48 01 c8             	add    rax,rcx
    827e:	66 89 10             	mov    WORD PTR [rax],dx
    8281:	e9 ae 00 00 00       	jmp    8334 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x29d>
    8286:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
    828a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    828e:	48 89 d6             	mov    rsi,rdx
    8291:	48 89 c7             	mov    rdi,rax
    8294:	e8 85 f9 ff ff       	call   7c1e <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    8299:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    829c:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    82a0:	79 11                	jns    82b3 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x21c>
    82a2:	48 8d 3d 66 22 03 00 	lea    rdi,[rip+0x32266]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    82a9:	e8 91 c8 ff ff       	call   4b3f <stbi__err(char const*)>
    82ae:	e9 92 00 00 00       	jmp    8345 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2ae>
    82b3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    82b6:	83 e0 0f             	and    eax,0xf
    82b9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    82bc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    82bf:	c1 f8 04             	sar    eax,0x4
    82c2:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    82c5:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    82c9:	75 0f                	jne    82da <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x243>
    82cb:	81 7d f4 f0 00 00 00 	cmp    DWORD PTR [rbp-0xc],0xf0
    82d2:	75 6b                	jne    833f <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2a8>
    82d4:	83 45 dc 10          	add    DWORD PTR [rbp-0x24],0x10
    82d8:	eb 5a                	jmp    8334 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x29d>
    82da:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    82dd:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
    82e0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    82e3:	8d 50 01             	lea    edx,[rax+0x1]
    82e6:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    82e9:	48 98                	cdqe   
    82eb:	48 8d 15 ce 21 03 00 	lea    rdx,[rip+0x321ce]        # 3a4c0 <stbi__jpeg_dezigzag>
    82f2:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    82f6:	0f b6 c0             	movzx  eax,al
    82f9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    82fc:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    82ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8303:	89 d6                	mov    esi,edx
    8305:	48 89 c7             	mov    rdi,rax
    8308:	e8 82 fb ff ff       	call   7e8f <stbi__extend_receive(stbi__jpeg*, int)>
    830d:	89 c2                	mov    edx,eax
    830f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8312:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8316:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    831a:	48 01 c8             	add    rax,rcx
    831d:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8320:	0f af d0             	imul   edx,eax
    8323:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8326:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    832a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    832e:	48 01 c8             	add    rax,rcx
    8331:	66 89 10             	mov    WORD PTR [rax],dx
    8334:	83 7d dc 3f          	cmp    DWORD PTR [rbp-0x24],0x3f
    8338:	7f 06                	jg     8340 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2a9>
    833a:	e9 64 fe ff ff       	jmp    81a3 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x10c>
    833f:	90                   	nop
    8340:	b8 01 00 00 00       	mov    eax,0x1
    8345:	c9                   	leave  
    8346:	c3                   	ret    

0000000000008347 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)>:
    8347:	55                   	push   rbp
    8348:	48 89 e5             	mov    rbp,rsp
    834b:	48 83 ec 30          	sub    rsp,0x30
    834f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    8353:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    8357:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    835b:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
    835e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8362:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    8368:	85 c0                	test   eax,eax
    836a:	74 11                	je     837d <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x36>
    836c:	48 8d 3d ad 21 03 00 	lea    rdi,[rip+0x321ad]        # 3a520 <stbi__jpeg_dezigzag+0x60>
    8373:	e8 c7 c7 ff ff       	call   4b3f <stbi__err(char const*)>
    8378:	e9 2b 01 00 00       	jmp    84a8 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x161>
    837d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8381:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8387:	83 f8 0f             	cmp    eax,0xf
    838a:	7f 0c                	jg     8398 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x51>
    838c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8390:	48 89 c7             	mov    rdi,rax
    8393:	e8 8e f7 ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    8398:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    839c:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    83a2:	85 c0                	test   eax,eax
    83a4:	0f 85 bb 00 00 00    	jne    8465 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x11e>
    83aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    83ae:	ba 80 00 00 00       	mov    edx,0x80
    83b3:	be 00 00 00 00       	mov    esi,0x0
    83b8:	48 89 c7             	mov    rdi,rax
    83bb:	e8 20 be ff ff       	call   41e0 <memset@plt>
    83c0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    83c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    83c8:	48 89 d6             	mov    rsi,rdx
    83cb:	48 89 c7             	mov    rdi,rax
    83ce:	e8 4b f8 ff ff       	call   7c1e <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    83d3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    83d6:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    83da:	74 13                	je     83ef <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0xa8>
    83dc:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    83df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    83e3:	89 d6                	mov    esi,edx
    83e5:	48 89 c7             	mov    rdi,rax
    83e8:	e8 a2 fa ff ff       	call   7e8f <stbi__extend_receive(stbi__jpeg*, int)>
    83ed:	eb 05                	jmp    83f4 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0xad>
    83ef:	b8 00 00 00 00       	mov    eax,0x0
    83f4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    83f7:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    83fb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    83fe:	48 63 d0             	movsxd rdx,eax
    8401:	48 89 d0             	mov    rax,rdx
    8404:	48 01 c0             	add    rax,rax
    8407:	48 01 d0             	add    rax,rdx
    840a:	48 c1 e0 05          	shl    rax,0x5
    840e:	48 01 c8             	add    rax,rcx
    8411:	48 05 b8 46 00 00    	add    rax,0x46b8
    8417:	8b 10                	mov    edx,DWORD PTR [rax]
    8419:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    841c:	01 d0                	add    eax,edx
    841e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    8421:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    8425:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    8428:	48 63 d0             	movsxd rdx,eax
    842b:	48 89 d0             	mov    rax,rdx
    842e:	48 01 c0             	add    rax,rax
    8431:	48 01 d0             	add    rax,rdx
    8434:	48 c1 e0 05          	shl    rax,0x5
    8438:	48 01 c8             	add    rax,rcx
    843b:	48 8d 90 b8 46 00 00 	lea    rdx,[rax+0x46b8]
    8442:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8445:	89 02                	mov    DWORD PTR [rdx],eax
    8447:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    844b:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    8451:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
    8454:	89 c1                	mov    ecx,eax
    8456:	d3 e2                	shl    edx,cl
    8458:	89 d0                	mov    eax,edx
    845a:	89 c2                	mov    edx,eax
    845c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    8460:	66 89 10             	mov    WORD PTR [rax],dx
    8463:	eb 3e                	jmp    84a3 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x15c>
    8465:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8469:	48 89 c7             	mov    rdi,rax
    846c:	e8 bb fb ff ff       	call   802c <stbi__jpeg_get_bit(stbi__jpeg*)>
    8471:	85 c0                	test   eax,eax
    8473:	0f 95 c0             	setne  al
    8476:	84 c0                	test   al,al
    8478:	74 29                	je     84a3 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x15c>
    847a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    847e:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8481:	89 c6                	mov    esi,eax
    8483:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8487:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    848d:	ba 01 00 00 00       	mov    edx,0x1
    8492:	89 c1                	mov    ecx,eax
    8494:	d3 e2                	shl    edx,cl
    8496:	89 d0                	mov    eax,edx
    8498:	01 f0                	add    eax,esi
    849a:	89 c2                	mov    edx,eax
    849c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    84a0:	66 89 10             	mov    WORD PTR [rax],dx
    84a3:	b8 01 00 00 00       	mov    eax,0x1
    84a8:	c9                   	leave  
    84a9:	c3                   	ret    

00000000000084aa <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)>:
    84aa:	55                   	push   rbp
    84ab:	48 89 e5             	mov    rbp,rsp
    84ae:	48 83 ec 60          	sub    rsp,0x60
    84b2:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
    84b6:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
    84ba:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
    84be:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
    84c2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    84c6:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    84cc:	85 c0                	test   eax,eax
    84ce:	75 11                	jne    84e1 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x37>
    84d0:	48 8d 3d 49 20 03 00 	lea    rdi,[rip+0x32049]        # 3a520 <stbi__jpeg_dezigzag+0x60>
    84d7:	e8 63 c6 ff ff       	call   4b3f <stbi__err(char const*)>
    84dc:	e9 14 05 00 00       	jmp    89f5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x54b>
    84e1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    84e5:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    84eb:	85 c0                	test   eax,eax
    84ed:	0f 85 36 02 00 00    	jne    8729 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x27f>
    84f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    84f7:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    84fd:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    8500:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8504:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    850a:	85 c0                	test   eax,eax
    850c:	74 21                	je     852f <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x85>
    850e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8512:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8518:	8d 50 ff             	lea    edx,[rax-0x1]
    851b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    851f:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    8525:	b8 01 00 00 00       	mov    eax,0x1
    852a:	e9 c6 04 00 00       	jmp    89f5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x54b>
    852f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8533:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    8539:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
    853c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8540:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8546:	83 f8 0f             	cmp    eax,0xf
    8549:	7f 0c                	jg     8557 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0xad>
    854b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    854f:	48 89 c7             	mov    rdi,rax
    8552:	e8 cf f5 ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    8557:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    855b:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    8561:	c1 e8 17             	shr    eax,0x17
    8564:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    8567:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    856a:	48 98                	cdqe   
    856c:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    8570:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    8574:	48 01 d0             	add    rax,rdx
    8577:	0f b7 00             	movzx  eax,WORD PTR [rax]
    857a:	98                   	cwde   
    857b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    857e:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    8582:	0f 84 8a 00 00 00    	je     8612 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x168>
    8588:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    858b:	c1 f8 04             	sar    eax,0x4
    858e:	83 e0 0f             	and    eax,0xf
    8591:	01 45 c8             	add    DWORD PTR [rbp-0x38],eax
    8594:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    8597:	83 e0 0f             	and    eax,0xf
    859a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    859d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85a1:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    85a7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    85aa:	89 c1                	mov    ecx,eax
    85ac:	d3 e2                	shl    edx,cl
    85ae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85b2:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    85b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85bc:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    85c2:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
    85c5:	89 c2                	mov    edx,eax
    85c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85cb:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    85d1:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    85d4:	8d 50 01             	lea    edx,[rax+0x1]
    85d7:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    85da:	48 98                	cdqe   
    85dc:	48 8d 15 dd 1e 03 00 	lea    rdx,[rip+0x31edd]        # 3a4c0 <stbi__jpeg_dezigzag>
    85e3:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    85e7:	0f b6 c0             	movzx  eax,al
    85ea:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    85ed:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    85f0:	c1 f8 08             	sar    eax,0x8
    85f3:	89 c2                	mov    edx,eax
    85f5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    85f8:	89 c1                	mov    ecx,eax
    85fa:	d3 e2                	shl    edx,cl
    85fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    85ff:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8603:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    8607:	48 01 c8             	add    rax,rcx
    860a:	66 89 10             	mov    WORD PTR [rax],dx
    860d:	e9 ff 00 00 00       	jmp    8711 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x267>
    8612:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
    8616:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    861a:	48 89 d6             	mov    rsi,rdx
    861d:	48 89 c7             	mov    rdi,rax
    8620:	e8 f9 f5 ff ff       	call   7c1e <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    8625:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    8628:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    862c:	79 11                	jns    863f <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x195>
    862e:	48 8d 3d da 1e 03 00 	lea    rdi,[rip+0x31eda]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    8635:	e8 05 c5 ff ff       	call   4b3f <stbi__err(char const*)>
    863a:	e9 b6 03 00 00       	jmp    89f5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x54b>
    863f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    8642:	83 e0 0f             	and    eax,0xf
    8645:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    8648:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    864b:	c1 f8 04             	sar    eax,0x4
    864e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    8651:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
    8655:	75 6d                	jne    86c4 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x21a>
    8657:	83 7d e0 0e          	cmp    DWORD PTR [rbp-0x20],0xe
    865b:	7f 61                	jg     86be <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x214>
    865d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    8660:	ba 01 00 00 00       	mov    edx,0x1
    8665:	89 c1                	mov    ecx,eax
    8667:	d3 e2                	shl    edx,cl
    8669:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    866d:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    8673:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    8677:	74 29                	je     86a2 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x1f8>
    8679:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    867c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8680:	89 d6                	mov    esi,edx
    8682:	48 89 c7             	mov    rdi,rax
    8685:	e8 02 f9 ff ff       	call   7f8c <stbi__jpeg_get_bits(stbi__jpeg*, int)>
    868a:	89 c2                	mov    edx,eax
    868c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8690:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8696:	01 c2                	add    edx,eax
    8698:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    869c:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    86a2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    86a6:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    86ac:	8d 50 ff             	lea    edx,[rax-0x1]
    86af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    86b3:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    86b9:	e9 32 03 00 00       	jmp    89f0 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x546>
    86be:	83 45 c8 10          	add    DWORD PTR [rbp-0x38],0x10
    86c2:	eb 4d                	jmp    8711 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x267>
    86c4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    86c7:	01 45 c8             	add    DWORD PTR [rbp-0x38],eax
    86ca:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    86cd:	8d 50 01             	lea    edx,[rax+0x1]
    86d0:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    86d3:	48 98                	cdqe   
    86d5:	48 8d 15 e4 1d 03 00 	lea    rdx,[rip+0x31de4]        # 3a4c0 <stbi__jpeg_dezigzag>
    86dc:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    86e0:	0f b6 c0             	movzx  eax,al
    86e3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    86e6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    86e9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    86ed:	89 d6                	mov    esi,edx
    86ef:	48 89 c7             	mov    rdi,rax
    86f2:	e8 98 f7 ff ff       	call   7e8f <stbi__extend_receive(stbi__jpeg*, int)>
    86f7:	89 c2                	mov    edx,eax
    86f9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    86fc:	89 c1                	mov    ecx,eax
    86fe:	d3 e2                	shl    edx,cl
    8700:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    8703:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8707:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    870b:	48 01 c8             	add    rax,rcx
    870e:	66 89 10             	mov    WORD PTR [rax],dx
    8711:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8715:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    871b:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    871e:	0f 8f cc 02 00 00    	jg     89f0 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x546>
    8724:	e9 13 fe ff ff       	jmp    853c <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x92>
    8729:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    872d:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    8733:	ba 01 00 00 00       	mov    edx,0x1
    8738:	89 c1                	mov    ecx,eax
    873a:	d3 e2                	shl    edx,cl
    873c:	89 d0                	mov    eax,edx
    873e:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
    8742:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8746:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    874c:	85 c0                	test   eax,eax
    874e:	0f 84 cf 00 00 00    	je     8823 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x379>
    8754:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8758:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    875e:	8d 50 ff             	lea    edx,[rax-0x1]
    8761:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8765:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    876b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    876f:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    8775:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
    8778:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    877c:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    8782:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    8785:	0f 8f 65 02 00 00    	jg     89f0 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x546>
    878b:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    878e:	48 98                	cdqe   
    8790:	48 8d 15 29 1d 03 00 	lea    rdx,[rip+0x31d29]        # 3a4c0 <stbi__jpeg_dezigzag>
    8797:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    879b:	0f b6 c0             	movzx  eax,al
    879e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    87a2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    87a6:	48 01 d0             	add    rax,rdx
    87a9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    87ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    87b1:	0f b7 00             	movzx  eax,WORD PTR [rax]
    87b4:	66 85 c0             	test   ax,ax
    87b7:	74 61                	je     881a <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x370>
    87b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    87bd:	48 89 c7             	mov    rdi,rax
    87c0:	e8 67 f8 ff ff       	call   802c <stbi__jpeg_get_bit(stbi__jpeg*)>
    87c5:	85 c0                	test   eax,eax
    87c7:	0f 95 c0             	setne  al
    87ca:	84 c0                	test   al,al
    87cc:	74 4c                	je     881a <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x370>
    87ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    87d2:	0f b7 00             	movzx  eax,WORD PTR [rax]
    87d5:	66 23 45 c6          	and    ax,WORD PTR [rbp-0x3a]
    87d9:	66 85 c0             	test   ax,ax
    87dc:	75 3c                	jne    881a <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x370>
    87de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    87e2:	0f b7 00             	movzx  eax,WORD PTR [rax]
    87e5:	66 85 c0             	test   ax,ax
    87e8:	7e 1a                	jle    8804 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x35a>
    87ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    87ee:	0f b7 00             	movzx  eax,WORD PTR [rax]
    87f1:	89 c2                	mov    edx,eax
    87f3:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
    87f7:	01 d0                	add    eax,edx
    87f9:	89 c2                	mov    edx,eax
    87fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    87ff:	66 89 10             	mov    WORD PTR [rax],dx
    8802:	eb 16                	jmp    881a <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x370>
    8804:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    8808:	0f b7 00             	movzx  eax,WORD PTR [rax]
    880b:	0f b7 55 c6          	movzx  edx,WORD PTR [rbp-0x3a]
    880f:	29 d0                	sub    eax,edx
    8811:	89 c2                	mov    edx,eax
    8813:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    8817:	66 89 10             	mov    WORD PTR [rax],dx
    881a:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
    881e:	e9 55 ff ff ff       	jmp    8778 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x2ce>
    8823:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8827:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    882d:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
    8830:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
    8834:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8838:	48 89 d6             	mov    rsi,rdx
    883b:	48 89 c7             	mov    rdi,rax
    883e:	e8 db f3 ff ff       	call   7c1e <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    8843:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    8846:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
    884a:	79 11                	jns    885d <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x3b3>
    884c:	48 8d 3d bc 1c 03 00 	lea    rdi,[rip+0x31cbc]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    8853:	e8 e7 c2 ff ff       	call   4b3f <stbi__err(char const*)>
    8858:	e9 98 01 00 00       	jmp    89f5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x54b>
    885d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    8860:	83 e0 0f             	and    eax,0xf
    8863:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
    8866:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    8869:	c1 f8 04             	sar    eax,0x4
    886c:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
    886f:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
    8873:	75 5d                	jne    88d2 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x428>
    8875:	83 7d cc 0e          	cmp    DWORD PTR [rbp-0x34],0xe
    8879:	0f 8f 91 00 00 00    	jg     8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    887f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    8882:	ba 01 00 00 00       	mov    edx,0x1
    8887:	89 c1                	mov    ecx,eax
    8889:	d3 e2                	shl    edx,cl
    888b:	89 d0                	mov    eax,edx
    888d:	8d 50 ff             	lea    edx,[rax-0x1]
    8890:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8894:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    889a:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    889e:	74 29                	je     88c9 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x41f>
    88a0:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    88a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    88a7:	89 d6                	mov    esi,edx
    88a9:	48 89 c7             	mov    rdi,rax
    88ac:	e8 db f6 ff ff       	call   7f8c <stbi__jpeg_get_bits(stbi__jpeg*, int)>
    88b1:	89 c2                	mov    edx,eax
    88b3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    88b7:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    88bd:	01 c2                	add    edx,eax
    88bf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    88c3:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    88c9:	c7 45 cc 40 00 00 00 	mov    DWORD PTR [rbp-0x34],0x40
    88d0:	eb 3e                	jmp    8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    88d2:	83 7d d0 01          	cmp    DWORD PTR [rbp-0x30],0x1
    88d6:	74 11                	je     88e9 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x43f>
    88d8:	48 8d 3d 30 1c 03 00 	lea    rdi,[rip+0x31c30]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    88df:	e8 5b c2 ff ff       	call   4b3f <stbi__err(char const*)>
    88e4:	e9 0c 01 00 00       	jmp    89f5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x54b>
    88e9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    88ed:	48 89 c7             	mov    rdi,rax
    88f0:	e8 37 f7 ff ff       	call   802c <stbi__jpeg_get_bit(stbi__jpeg*)>
    88f5:	85 c0                	test   eax,eax
    88f7:	0f 95 c0             	setne  al
    88fa:	84 c0                	test   al,al
    88fc:	74 09                	je     8907 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x45d>
    88fe:	0f bf 45 c6          	movsx  eax,WORD PTR [rbp-0x3a]
    8902:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
    8905:	eb 09                	jmp    8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    8907:	0f bf 45 c6          	movsx  eax,WORD PTR [rbp-0x3a]
    890b:	f7 d8                	neg    eax
    890d:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
    8910:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8914:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    891a:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    891d:	0f 8f b9 00 00 00    	jg     89dc <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x532>
    8923:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    8927:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    892a:	8d 50 01             	lea    edx,[rax+0x1]
    892d:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    8930:	48 98                	cdqe   
    8932:	48 8d 15 87 1b 03 00 	lea    rdx,[rip+0x31b87]        # 3a4c0 <stbi__jpeg_dezigzag>
    8939:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    893d:	0f b6 c0             	movzx  eax,al
    8940:	48 01 c0             	add    rax,rax
    8943:	48 01 c8             	add    rax,rcx
    8946:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    894a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    894e:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8951:	66 85 c0             	test   ax,ax
    8954:	74 69                	je     89bf <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x515>
    8956:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    895a:	48 89 c7             	mov    rdi,rax
    895d:	e8 ca f6 ff ff       	call   802c <stbi__jpeg_get_bit(stbi__jpeg*)>
    8962:	85 c0                	test   eax,eax
    8964:	0f 95 c0             	setne  al
    8967:	84 c0                	test   al,al
    8969:	74 a5                	je     8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    896b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    896f:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8972:	66 23 45 c6          	and    ax,WORD PTR [rbp-0x3a]
    8976:	66 85 c0             	test   ax,ax
    8979:	75 95                	jne    8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    897b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    897f:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8982:	66 85 c0             	test   ax,ax
    8985:	7e 1d                	jle    89a4 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x4fa>
    8987:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    898b:	0f b7 00             	movzx  eax,WORD PTR [rax]
    898e:	89 c2                	mov    edx,eax
    8990:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
    8994:	01 d0                	add    eax,edx
    8996:	89 c2                	mov    edx,eax
    8998:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    899c:	66 89 10             	mov    WORD PTR [rax],dx
    899f:	e9 6c ff ff ff       	jmp    8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    89a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    89a8:	0f b7 00             	movzx  eax,WORD PTR [rax]
    89ab:	0f b7 55 c6          	movzx  edx,WORD PTR [rbp-0x3a]
    89af:	29 d0                	sub    eax,edx
    89b1:	89 c2                	mov    edx,eax
    89b3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    89b7:	66 89 10             	mov    WORD PTR [rax],dx
    89ba:	e9 51 ff ff ff       	jmp    8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    89bf:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    89c3:	75 0e                	jne    89d3 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x529>
    89c5:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    89c8:	89 c2                	mov    edx,eax
    89ca:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    89ce:	66 89 10             	mov    WORD PTR [rax],dx
    89d1:	eb 09                	jmp    89dc <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x532>
    89d3:	83 6d cc 01          	sub    DWORD PTR [rbp-0x34],0x1
    89d7:	e9 34 ff ff ff       	jmp    8910 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x466>
    89dc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    89e0:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    89e6:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    89e9:	7f 05                	jg     89f0 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x546>
    89eb:	e9 40 fe ff ff       	jmp    8830 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x386>
    89f0:	b8 01 00 00 00       	mov    eax,0x1
    89f5:	c9                   	leave  
    89f6:	c3                   	ret    

00000000000089f7 <stbi__clamp(int)>:
    89f7:	55                   	push   rbp
    89f8:	48 89 e5             	mov    rbp,rsp
    89fb:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    89fe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8a01:	3d ff 00 00 00       	cmp    eax,0xff
    8a06:	76 1d                	jbe    8a25 <stbi__clamp(int)+0x2e>
    8a08:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    8a0c:	79 07                	jns    8a15 <stbi__clamp(int)+0x1e>
    8a0e:	b8 00 00 00 00       	mov    eax,0x0
    8a13:	eb 13                	jmp    8a28 <stbi__clamp(int)+0x31>
    8a15:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
    8a1c:	7e 07                	jle    8a25 <stbi__clamp(int)+0x2e>
    8a1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
    8a23:	eb 03                	jmp    8a28 <stbi__clamp(int)+0x31>
    8a25:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8a28:	5d                   	pop    rbp
    8a29:	c3                   	ret    

0000000000008a2a <stbi__idct_block(unsigned char*, int, short*)>:
    8a2a:	55                   	push   rbp
    8a2b:	48 89 e5             	mov    rbp,rsp
    8a2e:	53                   	push   rbx
    8a2f:	48 81 ec c8 01 00 00 	sub    rsp,0x1c8
    8a36:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
    8a3d:	89 b5 44 fe ff ff    	mov    DWORD PTR [rbp-0x1bc],esi
    8a43:	48 89 95 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdx
    8a4a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    8a53:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    8a57:	31 c0                	xor    eax,eax
    8a59:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
    8a60:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    8a67:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
    8a6e:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
    8a75:	c7 85 58 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x1a8],0x0
    8a7f:	83 bd 58 fe ff ff 07 	cmp    DWORD PTR [rbp-0x1a8],0x7
    8a86:	0f 8f 35 05 00 00    	jg     8fc1 <stbi__idct_block(unsigned char*, int, short*)+0x597>
    8a8c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8a93:	48 83 c0 10          	add    rax,0x10
    8a97:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8a9a:	66 85 c0             	test   ax,ax
    8a9d:	0f 85 22 01 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8aa3:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8aaa:	48 83 c0 20          	add    rax,0x20
    8aae:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8ab1:	66 85 c0             	test   ax,ax
    8ab4:	0f 85 0b 01 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8aba:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8ac1:	48 83 c0 30          	add    rax,0x30
    8ac5:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8ac8:	66 85 c0             	test   ax,ax
    8acb:	0f 85 f4 00 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8ad1:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8ad8:	48 83 c0 40          	add    rax,0x40
    8adc:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8adf:	66 85 c0             	test   ax,ax
    8ae2:	0f 85 dd 00 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8ae8:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8aef:	48 83 c0 50          	add    rax,0x50
    8af3:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8af6:	66 85 c0             	test   ax,ax
    8af9:	0f 85 c6 00 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8aff:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b06:	48 83 c0 60          	add    rax,0x60
    8b0a:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b0d:	66 85 c0             	test   ax,ax
    8b10:	0f 85 af 00 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8b16:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b1d:	48 83 c0 70          	add    rax,0x70
    8b21:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b24:	66 85 c0             	test   ax,ax
    8b27:	0f 85 98 00 00 00    	jne    8bc5 <stbi__idct_block(unsigned char*, int, short*)+0x19b>
    8b2d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b34:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b37:	98                   	cwde   
    8b38:	c1 e0 02             	shl    eax,0x2
    8b3b:	89 85 5c fe ff ff    	mov    DWORD PTR [rbp-0x1a4],eax
    8b41:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8b48:	48 05 e0 00 00 00    	add    rax,0xe0
    8b4e:	8b 95 5c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a4]
    8b54:	89 10                	mov    DWORD PTR [rax],edx
    8b56:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
    8b5d:	48 81 c2 c0 00 00 00 	add    rdx,0xc0
    8b64:	8b 00                	mov    eax,DWORD PTR [rax]
    8b66:	89 02                	mov    DWORD PTR [rdx],eax
    8b68:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8b6f:	48 05 a0 00 00 00    	add    rax,0xa0
    8b75:	8b 12                	mov    edx,DWORD PTR [rdx]
    8b77:	89 10                	mov    DWORD PTR [rax],edx
    8b79:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
    8b80:	48 83 ea 80          	sub    rdx,0xffffffffffffff80
    8b84:	8b 00                	mov    eax,DWORD PTR [rax]
    8b86:	89 02                	mov    DWORD PTR [rdx],eax
    8b88:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8b8f:	48 83 c0 60          	add    rax,0x60
    8b93:	8b 12                	mov    edx,DWORD PTR [rdx]
    8b95:	89 10                	mov    DWORD PTR [rax],edx
    8b97:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
    8b9e:	48 83 c2 40          	add    rdx,0x40
    8ba2:	8b 00                	mov    eax,DWORD PTR [rax]
    8ba4:	89 02                	mov    DWORD PTR [rdx],eax
    8ba6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8bad:	48 83 c0 20          	add    rax,0x20
    8bb1:	8b 12                	mov    edx,DWORD PTR [rdx]
    8bb3:	89 10                	mov    DWORD PTR [rax],edx
    8bb5:	8b 10                	mov    edx,DWORD PTR [rax]
    8bb7:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8bbe:	89 10                	mov    DWORD PTR [rax],edx
    8bc0:	e9 e0 03 00 00       	jmp    8fa5 <stbi__idct_block(unsigned char*, int, short*)+0x57b>
    8bc5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8bcc:	48 83 c0 20          	add    rax,0x20
    8bd0:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8bd3:	98                   	cwde   
    8bd4:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    8bda:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8be1:	48 83 c0 60          	add    rax,0x60
    8be5:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8be8:	98                   	cwde   
    8be9:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    8bef:	8b 95 60 fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a0]
    8bf5:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    8bfb:	01 d0                	add    eax,edx
    8bfd:	69 c0 a9 08 00 00    	imul   eax,eax,0x8a9
    8c03:	89 85 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],eax
    8c09:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    8c0f:	69 d0 71 e2 ff ff    	imul   edx,eax,0xffffe271
    8c15:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    8c1b:	01 d0                	add    eax,edx
    8c1d:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
    8c23:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    8c29:	69 d0 3f 0c 00 00    	imul   edx,eax,0xc3f
    8c2f:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    8c35:	01 d0                	add    eax,edx
    8c37:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
    8c3d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8c44:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8c47:	98                   	cwde   
    8c48:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    8c4e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8c55:	48 83 c0 40          	add    rax,0x40
    8c59:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8c5c:	98                   	cwde   
    8c5d:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    8c63:	8b 95 60 fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a0]
    8c69:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    8c6f:	01 d0                	add    eax,edx
    8c71:	c1 e0 0c             	shl    eax,0xc
    8c74:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
    8c7a:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    8c80:	2b 85 64 fe ff ff    	sub    eax,DWORD PTR [rbp-0x19c]
    8c86:	c1 e0 0c             	shl    eax,0xc
    8c89:	89 85 78 fe ff ff    	mov    DWORD PTR [rbp-0x188],eax
    8c8f:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
    8c95:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    8c9b:	01 d0                	add    eax,edx
    8c9d:	89 85 7c fe ff ff    	mov    DWORD PTR [rbp-0x184],eax
    8ca3:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
    8ca9:	2b 85 70 fe ff ff    	sub    eax,DWORD PTR [rbp-0x190]
    8caf:	89 85 80 fe ff ff    	mov    DWORD PTR [rbp-0x180],eax
    8cb5:	8b 95 78 fe ff ff    	mov    edx,DWORD PTR [rbp-0x188]
    8cbb:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    8cc1:	01 d0                	add    eax,edx
    8cc3:	89 85 84 fe ff ff    	mov    DWORD PTR [rbp-0x17c],eax
    8cc9:	8b 85 78 fe ff ff    	mov    eax,DWORD PTR [rbp-0x188]
    8ccf:	2b 85 6c fe ff ff    	sub    eax,DWORD PTR [rbp-0x194]
    8cd5:	89 85 88 fe ff ff    	mov    DWORD PTR [rbp-0x178],eax
    8cdb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8ce2:	48 83 c0 70          	add    rax,0x70
    8ce6:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8ce9:	98                   	cwde   
    8cea:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
    8cf0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8cf7:	48 83 c0 50          	add    rax,0x50
    8cfb:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8cfe:	98                   	cwde   
    8cff:	89 85 78 fe ff ff    	mov    DWORD PTR [rbp-0x188],eax
    8d05:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8d0c:	48 83 c0 30          	add    rax,0x30
    8d10:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8d13:	98                   	cwde   
    8d14:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
    8d1a:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8d21:	48 83 c0 10          	add    rax,0x10
    8d25:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8d28:	98                   	cwde   
    8d29:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
    8d2f:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
    8d35:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    8d3b:	01 d0                	add    eax,edx
    8d3d:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    8d43:	8b 95 78 fe ff ff    	mov    edx,DWORD PTR [rbp-0x188]
    8d49:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    8d4f:	01 d0                	add    eax,edx
    8d51:	89 85 8c fe ff ff    	mov    DWORD PTR [rbp-0x174],eax
    8d57:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
    8d5d:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    8d63:	01 d0                	add    eax,edx
    8d65:	89 85 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],eax
    8d6b:	8b 95 78 fe ff ff    	mov    edx,DWORD PTR [rbp-0x188]
    8d71:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    8d77:	01 d0                	add    eax,edx
    8d79:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    8d7f:	8b 95 64 fe ff ff    	mov    edx,DWORD PTR [rbp-0x19c]
    8d85:	8b 85 8c fe ff ff    	mov    eax,DWORD PTR [rbp-0x174]
    8d8b:	01 d0                	add    eax,edx
    8d8d:	69 c0 d0 12 00 00    	imul   eax,eax,0x12d0
    8d93:	89 85 90 fe ff ff    	mov    DWORD PTR [rbp-0x170],eax
    8d99:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
    8d9f:	69 c0 c7 04 00 00    	imul   eax,eax,0x4c7
    8da5:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
    8dab:	8b 85 78 fe ff ff    	mov    eax,DWORD PTR [rbp-0x188]
    8db1:	69 c0 da 20 00 00    	imul   eax,eax,0x20da
    8db7:	89 85 78 fe ff ff    	mov    DWORD PTR [rbp-0x188],eax
    8dbd:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    8dc3:	69 c0 2a 31 00 00    	imul   eax,eax,0x312a
    8dc9:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
    8dcf:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    8dd5:	69 c0 05 18 00 00    	imul   eax,eax,0x1805
    8ddb:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
    8de1:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    8de7:	69 d0 9b f1 ff ff    	imul   edx,eax,0xfffff19b
    8ded:	8b 85 90 fe ff ff    	mov    eax,DWORD PTR [rbp-0x170]
    8df3:	01 d0                	add    eax,edx
    8df5:	89 85 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],eax
    8dfb:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    8e01:	69 d0 ff d6 ff ff    	imul   edx,eax,0xffffd6ff
    8e07:	8b 85 90 fe ff ff    	mov    eax,DWORD PTR [rbp-0x170]
    8e0d:	01 d0                	add    eax,edx
    8e0f:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    8e15:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    8e1b:	69 c0 9e e0 ff ff    	imul   eax,eax,0xffffe09e
    8e21:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    8e27:	8b 85 8c fe ff ff    	mov    eax,DWORD PTR [rbp-0x174]
    8e2d:	69 c0 c3 f9 ff ff    	imul   eax,eax,0xfffff9c3
    8e33:	89 85 8c fe ff ff    	mov    DWORD PTR [rbp-0x174],eax
    8e39:	8b 95 68 fe ff ff    	mov    edx,DWORD PTR [rbp-0x198]
    8e3f:	8b 85 8c fe ff ff    	mov    eax,DWORD PTR [rbp-0x174]
    8e45:	01 d0                	add    eax,edx
    8e47:	01 85 70 fe ff ff    	add    DWORD PTR [rbp-0x190],eax
    8e4d:	8b 95 60 fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a0]
    8e53:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    8e59:	01 d0                	add    eax,edx
    8e5b:	01 85 6c fe ff ff    	add    DWORD PTR [rbp-0x194],eax
    8e61:	8b 95 60 fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a0]
    8e67:	8b 85 8c fe ff ff    	mov    eax,DWORD PTR [rbp-0x174]
    8e6d:	01 d0                	add    eax,edx
    8e6f:	01 85 78 fe ff ff    	add    DWORD PTR [rbp-0x188],eax
    8e75:	8b 95 68 fe ff ff    	mov    edx,DWORD PTR [rbp-0x198]
    8e7b:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    8e81:	01 d0                	add    eax,edx
    8e83:	01 85 74 fe ff ff    	add    DWORD PTR [rbp-0x18c],eax
    8e89:	81 85 7c fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x184],0x200
    8e93:	81 85 84 fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x17c],0x200
    8e9d:	81 85 88 fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x178],0x200
    8ea7:	81 85 80 fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x180],0x200
    8eb1:	8b 95 7c fe ff ff    	mov    edx,DWORD PTR [rbp-0x184]
    8eb7:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    8ebd:	01 d0                	add    eax,edx
    8ebf:	c1 f8 0a             	sar    eax,0xa
    8ec2:	89 c2                	mov    edx,eax
    8ec4:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8ecb:	89 10                	mov    DWORD PTR [rax],edx
    8ecd:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
    8ed3:	2b 85 70 fe ff ff    	sub    eax,DWORD PTR [rbp-0x190]
    8ed9:	89 c2                	mov    edx,eax
    8edb:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8ee2:	48 05 e0 00 00 00    	add    rax,0xe0
    8ee8:	c1 fa 0a             	sar    edx,0xa
    8eeb:	89 10                	mov    DWORD PTR [rax],edx
    8eed:	8b 95 84 fe ff ff    	mov    edx,DWORD PTR [rbp-0x17c]
    8ef3:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    8ef9:	01 c2                	add    edx,eax
    8efb:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f02:	48 83 c0 20          	add    rax,0x20
    8f06:	c1 fa 0a             	sar    edx,0xa
    8f09:	89 10                	mov    DWORD PTR [rax],edx
    8f0b:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [rbp-0x17c]
    8f11:	2b 85 6c fe ff ff    	sub    eax,DWORD PTR [rbp-0x194]
    8f17:	89 c2                	mov    edx,eax
    8f19:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f20:	48 05 c0 00 00 00    	add    rax,0xc0
    8f26:	c1 fa 0a             	sar    edx,0xa
    8f29:	89 10                	mov    DWORD PTR [rax],edx
    8f2b:	8b 95 88 fe ff ff    	mov    edx,DWORD PTR [rbp-0x178]
    8f31:	8b 85 78 fe ff ff    	mov    eax,DWORD PTR [rbp-0x188]
    8f37:	01 c2                	add    edx,eax
    8f39:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f40:	48 83 c0 40          	add    rax,0x40
    8f44:	c1 fa 0a             	sar    edx,0xa
    8f47:	89 10                	mov    DWORD PTR [rax],edx
    8f49:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
    8f4f:	2b 85 78 fe ff ff    	sub    eax,DWORD PTR [rbp-0x188]
    8f55:	89 c2                	mov    edx,eax
    8f57:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f5e:	48 05 a0 00 00 00    	add    rax,0xa0
    8f64:	c1 fa 0a             	sar    edx,0xa
    8f67:	89 10                	mov    DWORD PTR [rax],edx
    8f69:	8b 95 80 fe ff ff    	mov    edx,DWORD PTR [rbp-0x180]
    8f6f:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
    8f75:	01 c2                	add    edx,eax
    8f77:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f7e:	48 83 c0 60          	add    rax,0x60
    8f82:	c1 fa 0a             	sar    edx,0xa
    8f85:	89 10                	mov    DWORD PTR [rax],edx
    8f87:	8b 85 80 fe ff ff    	mov    eax,DWORD PTR [rbp-0x180]
    8f8d:	2b 85 74 fe ff ff    	sub    eax,DWORD PTR [rbp-0x18c]
    8f93:	89 c2                	mov    edx,eax
    8f95:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f9c:	48 83 e8 80          	sub    rax,0xffffffffffffff80
    8fa0:	c1 fa 0a             	sar    edx,0xa
    8fa3:	89 10                	mov    DWORD PTR [rax],edx
    8fa5:	83 85 58 fe ff ff 01 	add    DWORD PTR [rbp-0x1a8],0x1
    8fac:	48 83 85 d8 fe ff ff 02 	add    QWORD PTR [rbp-0x128],0x2
    8fb4:	48 83 85 c8 fe ff ff 04 	add    QWORD PTR [rbp-0x138],0x4
    8fbc:	e9 be fa ff ff       	jmp    8a7f <stbi__idct_block(unsigned char*, int, short*)+0x55>
    8fc1:	c7 85 58 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x1a8],0x0
    8fcb:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
    8fd2:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    8fd9:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
    8fe0:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
    8fe7:	83 bd 58 fe ff ff 07 	cmp    DWORD PTR [rbp-0x1a8],0x7
    8fee:	0f 8f 06 04 00 00    	jg     93fa <stbi__idct_block(unsigned char*, int, short*)+0x9d0>
    8ff4:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8ffb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    8ffe:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    9004:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    900b:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
    900e:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    9014:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    901a:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    9020:	01 d0                	add    eax,edx
    9022:	69 c0 a9 08 00 00    	imul   eax,eax,0x8a9
    9028:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
    902e:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    9034:	69 d0 71 e2 ff ff    	imul   edx,eax,0xffffe271
    903a:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
    9040:	01 d0                	add    eax,edx
    9042:	89 85 a0 fe ff ff    	mov    DWORD PTR [rbp-0x160],eax
    9048:	8b 85 94 fe ff ff    	mov    eax,DWORD PTR [rbp-0x16c]
    904e:	69 d0 3f 0c 00 00    	imul   edx,eax,0xc3f
    9054:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
    905a:	01 d0                	add    eax,edx
    905c:	89 85 a4 fe ff ff    	mov    DWORD PTR [rbp-0x15c],eax
    9062:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9069:	8b 00                	mov    eax,DWORD PTR [rax]
    906b:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    9071:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9078:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
    907b:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    9081:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    9087:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    908d:	01 d0                	add    eax,edx
    908f:	c1 e0 0c             	shl    eax,0xc
    9092:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
    9098:	8b 85 94 fe ff ff    	mov    eax,DWORD PTR [rbp-0x16c]
    909e:	2b 85 98 fe ff ff    	sub    eax,DWORD PTR [rbp-0x168]
    90a4:	c1 e0 0c             	shl    eax,0xc
    90a7:	89 85 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],eax
    90ad:	8b 95 a8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x158]
    90b3:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    90b9:	01 d0                	add    eax,edx
    90bb:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
    90c1:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
    90c7:	2b 85 a4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x15c]
    90cd:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
    90d3:	8b 95 ac fe ff ff    	mov    edx,DWORD PTR [rbp-0x154]
    90d9:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    90df:	01 d0                	add    eax,edx
    90e1:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
    90e7:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    90ed:	2b 85 a0 fe ff ff    	sub    eax,DWORD PTR [rbp-0x160]
    90f3:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
    90f9:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9100:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
    9103:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
    9109:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9110:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
    9113:	89 85 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],eax
    9119:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9120:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
    9123:	89 85 a0 fe ff ff    	mov    DWORD PTR [rbp-0x160],eax
    9129:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9130:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    9133:	89 85 a4 fe ff ff    	mov    DWORD PTR [rbp-0x15c],eax
    9139:	8b 95 a8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x158]
    913f:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    9145:	01 d0                	add    eax,edx
    9147:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    914d:	8b 95 ac fe ff ff    	mov    edx,DWORD PTR [rbp-0x154]
    9153:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    9159:	01 d0                	add    eax,edx
    915b:	89 85 c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],eax
    9161:	8b 95 a8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x158]
    9167:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    916d:	01 d0                	add    eax,edx
    916f:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
    9175:	8b 95 ac fe ff ff    	mov    edx,DWORD PTR [rbp-0x154]
    917b:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    9181:	01 d0                	add    eax,edx
    9183:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    9189:	8b 95 98 fe ff ff    	mov    edx,DWORD PTR [rbp-0x168]
    918f:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    9195:	01 d0                	add    eax,edx
    9197:	69 c0 d0 12 00 00    	imul   eax,eax,0x12d0
    919d:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
    91a3:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
    91a9:	69 c0 c7 04 00 00    	imul   eax,eax,0x4c7
    91af:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
    91b5:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    91bb:	69 c0 da 20 00 00    	imul   eax,eax,0x20da
    91c1:	89 85 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],eax
    91c7:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    91cd:	69 c0 2a 31 00 00    	imul   eax,eax,0x312a
    91d3:	89 85 a0 fe ff ff    	mov    DWORD PTR [rbp-0x160],eax
    91d9:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    91df:	69 c0 05 18 00 00    	imul   eax,eax,0x1805
    91e5:	89 85 a4 fe ff ff    	mov    DWORD PTR [rbp-0x15c],eax
    91eb:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
    91f1:	69 d0 9b f1 ff ff    	imul   edx,eax,0xfffff19b
    91f7:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
    91fd:	01 d0                	add    eax,edx
    91ff:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
    9205:	8b 85 94 fe ff ff    	mov    eax,DWORD PTR [rbp-0x16c]
    920b:	69 d0 ff d6 ff ff    	imul   edx,eax,0xffffd6ff
    9211:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
    9217:	01 d0                	add    eax,edx
    9219:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    921f:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    9225:	69 c0 9e e0 ff ff    	imul   eax,eax,0xffffe09e
    922b:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    9231:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    9237:	69 c0 c3 f9 ff ff    	imul   eax,eax,0xfffff9c3
    923d:	89 85 c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],eax
    9243:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [rbp-0x164]
    9249:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    924f:	01 d0                	add    eax,edx
    9251:	01 85 a4 fe ff ff    	add    DWORD PTR [rbp-0x15c],eax
    9257:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    925d:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    9263:	01 d0                	add    eax,edx
    9265:	01 85 a0 fe ff ff    	add    DWORD PTR [rbp-0x160],eax
    926b:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    9271:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    9277:	01 d0                	add    eax,edx
    9279:	01 85 ac fe ff ff    	add    DWORD PTR [rbp-0x154],eax
    927f:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [rbp-0x164]
    9285:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    928b:	01 d0                	add    eax,edx
    928d:	01 85 a8 fe ff ff    	add    DWORD PTR [rbp-0x158],eax
    9293:	81 85 b0 fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x150],0x1010000
    929d:	81 85 b8 fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x148],0x1010000
    92a7:	81 85 bc fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x144],0x1010000
    92b1:	81 85 b4 fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x14c],0x1010000
    92bb:	8b 95 b0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x150]
    92c1:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    92c7:	01 d0                	add    eax,edx
    92c9:	c1 f8 11             	sar    eax,0x11
    92cc:	89 c7                	mov    edi,eax
    92ce:	e8 24 f7 ff ff       	call   89f7 <stbi__clamp(int)>
    92d3:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    92da:	88 02                	mov    BYTE PTR [rdx],al
    92dc:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
    92e2:	2b 85 a4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x15c]
    92e8:	c1 f8 11             	sar    eax,0x11
    92eb:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    92f2:	48 8d 5a 07          	lea    rbx,[rdx+0x7]
    92f6:	89 c7                	mov    edi,eax
    92f8:	e8 fa f6 ff ff       	call   89f7 <stbi__clamp(int)>
    92fd:	88 03                	mov    BYTE PTR [rbx],al
    92ff:	8b 95 b8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x148]
    9305:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    930b:	01 d0                	add    eax,edx
    930d:	c1 f8 11             	sar    eax,0x11
    9310:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9317:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
    931b:	89 c7                	mov    edi,eax
    931d:	e8 d5 f6 ff ff       	call   89f7 <stbi__clamp(int)>
    9322:	88 03                	mov    BYTE PTR [rbx],al
    9324:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
    932a:	2b 85 a0 fe ff ff    	sub    eax,DWORD PTR [rbp-0x160]
    9330:	c1 f8 11             	sar    eax,0x11
    9333:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    933a:	48 8d 5a 06          	lea    rbx,[rdx+0x6]
    933e:	89 c7                	mov    edi,eax
    9340:	e8 b2 f6 ff ff       	call   89f7 <stbi__clamp(int)>
    9345:	88 03                	mov    BYTE PTR [rbx],al
    9347:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
    934d:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    9353:	01 d0                	add    eax,edx
    9355:	c1 f8 11             	sar    eax,0x11
    9358:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    935f:	48 8d 5a 02          	lea    rbx,[rdx+0x2]
    9363:	89 c7                	mov    edi,eax
    9365:	e8 8d f6 ff ff       	call   89f7 <stbi__clamp(int)>
    936a:	88 03                	mov    BYTE PTR [rbx],al
    936c:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
    9372:	2b 85 ac fe ff ff    	sub    eax,DWORD PTR [rbp-0x154]
    9378:	c1 f8 11             	sar    eax,0x11
    937b:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9382:	48 8d 5a 05          	lea    rbx,[rdx+0x5]
    9386:	89 c7                	mov    edi,eax
    9388:	e8 6a f6 ff ff       	call   89f7 <stbi__clamp(int)>
    938d:	88 03                	mov    BYTE PTR [rbx],al
    938f:	8b 95 b4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x14c]
    9395:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
    939b:	01 d0                	add    eax,edx
    939d:	c1 f8 11             	sar    eax,0x11
    93a0:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    93a7:	48 8d 5a 03          	lea    rbx,[rdx+0x3]
    93ab:	89 c7                	mov    edi,eax
    93ad:	e8 45 f6 ff ff       	call   89f7 <stbi__clamp(int)>
    93b2:	88 03                	mov    BYTE PTR [rbx],al
    93b4:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
    93ba:	2b 85 a8 fe ff ff    	sub    eax,DWORD PTR [rbp-0x158]
    93c0:	c1 f8 11             	sar    eax,0x11
    93c3:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    93ca:	48 8d 5a 04          	lea    rbx,[rdx+0x4]
    93ce:	89 c7                	mov    edi,eax
    93d0:	e8 22 f6 ff ff       	call   89f7 <stbi__clamp(int)>
    93d5:	88 03                	mov    BYTE PTR [rbx],al
    93d7:	83 85 58 fe ff ff 01 	add    DWORD PTR [rbp-0x1a8],0x1
    93de:	48 83 85 c8 fe ff ff 20 	add    QWORD PTR [rbp-0x138],0x20
    93e6:	8b 85 44 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1bc]
    93ec:	48 98                	cdqe   
    93ee:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
    93f5:	e9 ed fb ff ff       	jmp    8fe7 <stbi__idct_block(unsigned char*, int, short*)+0x5bd>
    93fa:	90                   	nop
    93fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    93ff:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    9408:	74 05                	je     940f <stbi__idct_block(unsigned char*, int, short*)+0x9e5>
    940a:	e8 a1 b0 ff ff       	call   44b0 <__stack_chk_fail@plt>
    940f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    9413:	c9                   	leave  
    9414:	c3                   	ret    

0000000000009415 <stbi__idct_simd(unsigned char*, int, short*)>:
    9415:	55                   	push   rbp
    9416:	48 89 e5             	mov    rbp,rsp
    9419:	48 81 ec 68 28 00 00 	sub    rsp,0x2868
    9420:	48 89 bd 38 d7 ff ff 	mov    QWORD PTR [rbp-0x28c8],rdi
    9427:	89 b5 34 d7 ff ff    	mov    DWORD PTR [rbp-0x28cc],esi
    942d:	48 89 95 28 d7 ff ff 	mov    QWORD PTR [rbp-0x28d8],rdx
    9434:	66 c7 85 28 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27d8],0x8a9
    943d:	66 c7 85 2a d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27d6],0xeb1a
    9446:	66 c7 85 2c d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27d4],0x8a9
    944f:	66 c7 85 2e d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27d2],0xeb1a
    9458:	66 c7 85 30 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27d0],0x8a9
    9461:	66 c7 85 32 d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27ce],0xeb1a
    946a:	66 c7 85 34 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27cc],0x8a9
    9473:	66 c7 85 36 d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27ca],0xeb1a
    947c:	0f bf 85 28 d8 ff ff 	movsx  eax,WORD PTR [rbp-0x27d8]
    9483:	0f bf 95 2a d8 ff ff 	movsx  edx,WORD PTR [rbp-0x27d6]
    948a:	0f bf 8d 2c d8 ff ff 	movsx  ecx,WORD PTR [rbp-0x27d4]
    9491:	0f bf b5 2e d8 ff ff 	movsx  esi,WORD PTR [rbp-0x27d2]
    9498:	0f bf bd 30 d8 ff ff 	movsx  edi,WORD PTR [rbp-0x27d0]
    949f:	44 0f bf 85 32 d8 ff ff 	movsx  r8d,WORD PTR [rbp-0x27ce]
    94a7:	44 0f bf 8d 34 d8 ff ff 	movsx  r9d,WORD PTR [rbp-0x27cc]
    94af:	44 0f bf 95 36 d8 ff ff 	movsx  r10d,WORD PTR [rbp-0x27ca]
    94b7:	66 44 89 95 38 d8 ff ff 	mov    WORD PTR [rbp-0x27c8],r10w
    94bf:	66 44 89 8d 3a d8 ff ff 	mov    WORD PTR [rbp-0x27c6],r9w
    94c7:	66 44 89 85 3c d8 ff ff 	mov    WORD PTR [rbp-0x27c4],r8w
    94cf:	66 89 bd 3e d8 ff ff 	mov    WORD PTR [rbp-0x27c2],di
    94d6:	66 89 b5 40 d8 ff ff 	mov    WORD PTR [rbp-0x27c0],si
    94dd:	66 89 8d 42 d8 ff ff 	mov    WORD PTR [rbp-0x27be],cx
    94e4:	66 89 95 44 d8 ff ff 	mov    WORD PTR [rbp-0x27bc],dx
    94eb:	66 89 85 46 d8 ff ff 	mov    WORD PTR [rbp-0x27ba],ax
    94f2:	0f b7 85 46 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27ba]
    94f9:	66 0f 6e c0          	movd   xmm0,eax
    94fd:	0f b7 85 44 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27bc]
    9504:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9509:	66 0f 6f c8          	movdqa xmm1,xmm0
    950d:	0f b7 85 42 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27be]
    9514:	66 0f 6e c0          	movd   xmm0,eax
    9518:	0f b7 85 40 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c0]
    951f:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9524:	66 0f 6f e0          	movdqa xmm4,xmm0
    9528:	0f b7 85 3e d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c2]
    952f:	66 0f 6e c0          	movd   xmm0,eax
    9533:	0f b7 85 3c d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c4]
    953a:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    953f:	66 0f 6f d0          	movdqa xmm2,xmm0
    9543:	0f b7 85 3a d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c6]
    954a:	66 0f 6e c0          	movd   xmm0,eax
    954e:	0f b7 85 38 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c8]
    9555:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    955a:	66 0f 6f d8          	movdqa xmm3,xmm0
    955e:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9562:	66 0f 6f c1          	movdqa xmm0,xmm1
    9566:	66 0f 6f c8          	movdqa xmm1,xmm0
    956a:	66 0f 62 d3          	punpckldq xmm2,xmm3
    956e:	66 0f 6f c2          	movdqa xmm0,xmm2
    9572:	66 0f 6f d0          	movdqa xmm2,xmm0
    9576:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    957a:	66 0f 6f c1          	movdqa xmm0,xmm1
    957e:	90                   	nop
    957f:	0f 29 85 90 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2670],xmm0
    9586:	66 c7 85 08 d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27f8],0x14e8
    958f:	66 c7 85 0a d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27f6],0x8a9
    9598:	66 c7 85 0c d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27f4],0x14e8
    95a1:	66 c7 85 0e d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27f2],0x8a9
    95aa:	66 c7 85 10 d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27f0],0x14e8
    95b3:	66 c7 85 12 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27ee],0x8a9
    95bc:	66 c7 85 14 d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27ec],0x14e8
    95c5:	66 c7 85 16 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27ea],0x8a9
    95ce:	0f bf 85 08 d8 ff ff 	movsx  eax,WORD PTR [rbp-0x27f8]
    95d5:	0f bf 95 0a d8 ff ff 	movsx  edx,WORD PTR [rbp-0x27f6]
    95dc:	0f bf 8d 0c d8 ff ff 	movsx  ecx,WORD PTR [rbp-0x27f4]
    95e3:	0f bf b5 0e d8 ff ff 	movsx  esi,WORD PTR [rbp-0x27f2]
    95ea:	0f bf bd 10 d8 ff ff 	movsx  edi,WORD PTR [rbp-0x27f0]
    95f1:	44 0f bf 85 12 d8 ff ff 	movsx  r8d,WORD PTR [rbp-0x27ee]
    95f9:	44 0f bf 8d 14 d8 ff ff 	movsx  r9d,WORD PTR [rbp-0x27ec]
    9601:	44 0f bf 95 16 d8 ff ff 	movsx  r10d,WORD PTR [rbp-0x27ea]
    9609:	66 44 89 95 18 d8 ff ff 	mov    WORD PTR [rbp-0x27e8],r10w
    9611:	66 44 89 8d 1a d8 ff ff 	mov    WORD PTR [rbp-0x27e6],r9w
    9619:	66 44 89 85 1c d8 ff ff 	mov    WORD PTR [rbp-0x27e4],r8w
    9621:	66 89 bd 1e d8 ff ff 	mov    WORD PTR [rbp-0x27e2],di
    9628:	66 89 b5 20 d8 ff ff 	mov    WORD PTR [rbp-0x27e0],si
    962f:	66 89 8d 22 d8 ff ff 	mov    WORD PTR [rbp-0x27de],cx
    9636:	66 89 95 24 d8 ff ff 	mov    WORD PTR [rbp-0x27dc],dx
    963d:	66 89 85 26 d8 ff ff 	mov    WORD PTR [rbp-0x27da],ax
    9644:	0f b7 85 26 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27da]
    964b:	66 0f 6e c0          	movd   xmm0,eax
    964f:	0f b7 85 24 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27dc]
    9656:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    965b:	66 0f 6f c8          	movdqa xmm1,xmm0
    965f:	0f b7 85 22 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27de]
    9666:	66 0f 6e c0          	movd   xmm0,eax
    966a:	0f b7 85 20 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e0]
    9671:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9676:	66 0f 6f e0          	movdqa xmm4,xmm0
    967a:	0f b7 85 1e d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e2]
    9681:	66 0f 6e c0          	movd   xmm0,eax
    9685:	0f b7 85 1c d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e4]
    968c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9691:	66 0f 6f d0          	movdqa xmm2,xmm0
    9695:	0f b7 85 1a d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e6]
    969c:	66 0f 6e c0          	movd   xmm0,eax
    96a0:	0f b7 85 18 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e8]
    96a7:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    96ac:	66 0f 6f d8          	movdqa xmm3,xmm0
    96b0:	66 0f 62 cc          	punpckldq xmm1,xmm4
    96b4:	66 0f 6f c1          	movdqa xmm0,xmm1
    96b8:	66 0f 6f c8          	movdqa xmm1,xmm0
    96bc:	66 0f 62 d3          	punpckldq xmm2,xmm3
    96c0:	66 0f 6f c2          	movdqa xmm0,xmm2
    96c4:	66 0f 6f d0          	movdqa xmm2,xmm0
    96c8:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    96cc:	66 0f 6f c1          	movdqa xmm0,xmm1
    96d0:	90                   	nop
    96d1:	0f 29 85 a0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2660],xmm0
    96d8:	66 c7 85 e8 d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x2818],0x46b
    96e1:	66 c7 85 ea d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2816],0x12d0
    96ea:	66 c7 85 ec d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x2814],0x46b
    96f3:	66 c7 85 ee d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2812],0x12d0
    96fc:	66 c7 85 f0 d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x2810],0x46b
    9705:	66 c7 85 f2 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x280e],0x12d0
    970e:	66 c7 85 f4 d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x280c],0x46b
    9717:	66 c7 85 f6 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x280a],0x12d0
    9720:	0f bf 85 e8 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2818]
    9727:	0f bf 95 ea d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2816]
    972e:	0f bf 8d ec d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2814]
    9735:	0f bf b5 ee d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2812]
    973c:	0f bf bd f0 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2810]
    9743:	44 0f bf 85 f2 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x280e]
    974b:	44 0f bf 8d f4 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x280c]
    9753:	44 0f bf 95 f6 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x280a]
    975b:	66 44 89 95 f8 d7 ff ff 	mov    WORD PTR [rbp-0x2808],r10w
    9763:	66 44 89 8d fa d7 ff ff 	mov    WORD PTR [rbp-0x2806],r9w
    976b:	66 44 89 85 fc d7 ff ff 	mov    WORD PTR [rbp-0x2804],r8w
    9773:	66 89 bd fe d7 ff ff 	mov    WORD PTR [rbp-0x2802],di
    977a:	66 89 b5 00 d8 ff ff 	mov    WORD PTR [rbp-0x2800],si
    9781:	66 89 8d 02 d8 ff ff 	mov    WORD PTR [rbp-0x27fe],cx
    9788:	66 89 95 04 d8 ff ff 	mov    WORD PTR [rbp-0x27fc],dx
    978f:	66 89 85 06 d8 ff ff 	mov    WORD PTR [rbp-0x27fa],ax
    9796:	0f b7 85 06 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27fa]
    979d:	66 0f 6e c0          	movd   xmm0,eax
    97a1:	0f b7 85 04 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27fc]
    97a8:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    97ad:	66 0f 6f c8          	movdqa xmm1,xmm0
    97b1:	0f b7 85 02 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27fe]
    97b8:	66 0f 6e c0          	movd   xmm0,eax
    97bc:	0f b7 85 00 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x2800]
    97c3:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    97c8:	66 0f 6f e0          	movdqa xmm4,xmm0
    97cc:	0f b7 85 fe d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2802]
    97d3:	66 0f 6e c0          	movd   xmm0,eax
    97d7:	0f b7 85 fc d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2804]
    97de:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    97e3:	66 0f 6f d0          	movdqa xmm2,xmm0
    97e7:	0f b7 85 fa d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2806]
    97ee:	66 0f 6e c0          	movd   xmm0,eax
    97f2:	0f b7 85 f8 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2808]
    97f9:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    97fe:	66 0f 6f d8          	movdqa xmm3,xmm0
    9802:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9806:	66 0f 6f c1          	movdqa xmm0,xmm1
    980a:	66 0f 6f c8          	movdqa xmm1,xmm0
    980e:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9812:	66 0f 6f c2          	movdqa xmm0,xmm2
    9816:	66 0f 6f d0          	movdqa xmm2,xmm0
    981a:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    981e:	66 0f 6f c1          	movdqa xmm0,xmm1
    9822:	90                   	nop
    9823:	0f 29 85 b0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2650],xmm0
    982a:	66 c7 85 c8 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2838],0x12d0
    9833:	66 c7 85 ca d7 ff ff cf e9 	mov    WORD PTR [rbp-0x2836],0xe9cf
    983c:	66 c7 85 cc d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2834],0x12d0
    9845:	66 c7 85 ce d7 ff ff cf e9 	mov    WORD PTR [rbp-0x2832],0xe9cf
    984e:	66 c7 85 d0 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2830],0x12d0
    9857:	66 c7 85 d2 d7 ff ff cf e9 	mov    WORD PTR [rbp-0x282e],0xe9cf
    9860:	66 c7 85 d4 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x282c],0x12d0
    9869:	66 c7 85 d6 d7 ff ff cf e9 	mov    WORD PTR [rbp-0x282a],0xe9cf
    9872:	0f bf 85 c8 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2838]
    9879:	0f bf 95 ca d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2836]
    9880:	0f bf 8d cc d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2834]
    9887:	0f bf b5 ce d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2832]
    988e:	0f bf bd d0 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2830]
    9895:	44 0f bf 85 d2 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x282e]
    989d:	44 0f bf 8d d4 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x282c]
    98a5:	44 0f bf 95 d6 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x282a]
    98ad:	66 44 89 95 d8 d7 ff ff 	mov    WORD PTR [rbp-0x2828],r10w
    98b5:	66 44 89 8d da d7 ff ff 	mov    WORD PTR [rbp-0x2826],r9w
    98bd:	66 44 89 85 dc d7 ff ff 	mov    WORD PTR [rbp-0x2824],r8w
    98c5:	66 89 bd de d7 ff ff 	mov    WORD PTR [rbp-0x2822],di
    98cc:	66 89 b5 e0 d7 ff ff 	mov    WORD PTR [rbp-0x2820],si
    98d3:	66 89 8d e2 d7 ff ff 	mov    WORD PTR [rbp-0x281e],cx
    98da:	66 89 95 e4 d7 ff ff 	mov    WORD PTR [rbp-0x281c],dx
    98e1:	66 89 85 e6 d7 ff ff 	mov    WORD PTR [rbp-0x281a],ax
    98e8:	0f b7 85 e6 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x281a]
    98ef:	66 0f 6e c0          	movd   xmm0,eax
    98f3:	0f b7 85 e4 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x281c]
    98fa:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    98ff:	66 0f 6f c8          	movdqa xmm1,xmm0
    9903:	0f b7 85 e2 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x281e]
    990a:	66 0f 6e c0          	movd   xmm0,eax
    990e:	0f b7 85 e0 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2820]
    9915:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    991a:	66 0f 6f e0          	movdqa xmm4,xmm0
    991e:	0f b7 85 de d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2822]
    9925:	66 0f 6e c0          	movd   xmm0,eax
    9929:	0f b7 85 dc d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2824]
    9930:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9935:	66 0f 6f d0          	movdqa xmm2,xmm0
    9939:	0f b7 85 da d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2826]
    9940:	66 0f 6e c0          	movd   xmm0,eax
    9944:	0f b7 85 d8 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2828]
    994b:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9950:	66 0f 6f d8          	movdqa xmm3,xmm0
    9954:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9958:	66 0f 6f c1          	movdqa xmm0,xmm1
    995c:	66 0f 6f c8          	movdqa xmm1,xmm0
    9960:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9964:	66 0f 6f c2          	movdqa xmm0,xmm2
    9968:	66 0f 6f d0          	movdqa xmm2,xmm0
    996c:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9970:	66 0f 6f c1          	movdqa xmm0,xmm1
    9974:	90                   	nop
    9975:	0f 29 85 c0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2640],xmm0
    997c:	66 c7 85 a8 d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x2858],0xe565
    9985:	66 c7 85 aa d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2856],0xe09e
    998e:	66 c7 85 ac d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x2854],0xe565
    9997:	66 c7 85 ae d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2852],0xe09e
    99a0:	66 c7 85 b0 d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x2850],0xe565
    99a9:	66 c7 85 b2 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x284e],0xe09e
    99b2:	66 c7 85 b4 d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x284c],0xe565
    99bb:	66 c7 85 b6 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x284a],0xe09e
    99c4:	0f bf 85 a8 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2858]
    99cb:	0f bf 95 aa d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2856]
    99d2:	0f bf 8d ac d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2854]
    99d9:	0f bf b5 ae d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2852]
    99e0:	0f bf bd b0 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2850]
    99e7:	44 0f bf 85 b2 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x284e]
    99ef:	44 0f bf 8d b4 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x284c]
    99f7:	44 0f bf 95 b6 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x284a]
    99ff:	66 44 89 95 b8 d7 ff ff 	mov    WORD PTR [rbp-0x2848],r10w
    9a07:	66 44 89 8d ba d7 ff ff 	mov    WORD PTR [rbp-0x2846],r9w
    9a0f:	66 44 89 85 bc d7 ff ff 	mov    WORD PTR [rbp-0x2844],r8w
    9a17:	66 89 bd be d7 ff ff 	mov    WORD PTR [rbp-0x2842],di
    9a1e:	66 89 b5 c0 d7 ff ff 	mov    WORD PTR [rbp-0x2840],si
    9a25:	66 89 8d c2 d7 ff ff 	mov    WORD PTR [rbp-0x283e],cx
    9a2c:	66 89 95 c4 d7 ff ff 	mov    WORD PTR [rbp-0x283c],dx
    9a33:	66 89 85 c6 d7 ff ff 	mov    WORD PTR [rbp-0x283a],ax
    9a3a:	0f b7 85 c6 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x283a]
    9a41:	66 0f 6e c0          	movd   xmm0,eax
    9a45:	0f b7 85 c4 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x283c]
    9a4c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9a51:	66 0f 6f c8          	movdqa xmm1,xmm0
    9a55:	0f b7 85 c2 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x283e]
    9a5c:	66 0f 6e c0          	movd   xmm0,eax
    9a60:	0f b7 85 c0 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2840]
    9a67:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9a6c:	66 0f 6f e0          	movdqa xmm4,xmm0
    9a70:	0f b7 85 be d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2842]
    9a77:	66 0f 6e c0          	movd   xmm0,eax
    9a7b:	0f b7 85 bc d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2844]
    9a82:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9a87:	66 0f 6f d0          	movdqa xmm2,xmm0
    9a8b:	0f b7 85 ba d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2846]
    9a92:	66 0f 6e c0          	movd   xmm0,eax
    9a96:	0f b7 85 b8 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2848]
    9a9d:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9aa2:	66 0f 6f d8          	movdqa xmm3,xmm0
    9aa6:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9aaa:	66 0f 6f c1          	movdqa xmm0,xmm1
    9aae:	66 0f 6f c8          	movdqa xmm1,xmm0
    9ab2:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9ab6:	66 0f 6f c2          	movdqa xmm0,xmm2
    9aba:	66 0f 6f d0          	movdqa xmm2,xmm0
    9abe:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9ac2:	66 0f 6f c1          	movdqa xmm0,xmm1
    9ac6:	90                   	nop
    9ac7:	0f 29 85 d0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2630],xmm0
    9ace:	66 c7 85 88 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2878],0xe09e
    9ad7:	66 c7 85 8a d7 ff ff c8 11 	mov    WORD PTR [rbp-0x2876],0x11c8
    9ae0:	66 c7 85 8c d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2874],0xe09e
    9ae9:	66 c7 85 8e d7 ff ff c8 11 	mov    WORD PTR [rbp-0x2872],0x11c8
    9af2:	66 c7 85 90 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2870],0xe09e
    9afb:	66 c7 85 92 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x286e],0x11c8
    9b04:	66 c7 85 94 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x286c],0xe09e
    9b0d:	66 c7 85 96 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x286a],0x11c8
    9b16:	0f bf 85 88 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2878]
    9b1d:	0f bf 95 8a d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2876]
    9b24:	0f bf 8d 8c d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2874]
    9b2b:	0f bf b5 8e d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2872]
    9b32:	0f bf bd 90 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2870]
    9b39:	44 0f bf 85 92 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x286e]
    9b41:	44 0f bf 8d 94 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x286c]
    9b49:	44 0f bf 95 96 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x286a]
    9b51:	66 44 89 95 98 d7 ff ff 	mov    WORD PTR [rbp-0x2868],r10w
    9b59:	66 44 89 8d 9a d7 ff ff 	mov    WORD PTR [rbp-0x2866],r9w
    9b61:	66 44 89 85 9c d7 ff ff 	mov    WORD PTR [rbp-0x2864],r8w
    9b69:	66 89 bd 9e d7 ff ff 	mov    WORD PTR [rbp-0x2862],di
    9b70:	66 89 b5 a0 d7 ff ff 	mov    WORD PTR [rbp-0x2860],si
    9b77:	66 89 8d a2 d7 ff ff 	mov    WORD PTR [rbp-0x285e],cx
    9b7e:	66 89 95 a4 d7 ff ff 	mov    WORD PTR [rbp-0x285c],dx
    9b85:	66 89 85 a6 d7 ff ff 	mov    WORD PTR [rbp-0x285a],ax
    9b8c:	0f b7 85 a6 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x285a]
    9b93:	66 0f 6e c0          	movd   xmm0,eax
    9b97:	0f b7 85 a4 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x285c]
    9b9e:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9ba3:	66 0f 6f c8          	movdqa xmm1,xmm0
    9ba7:	0f b7 85 a2 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x285e]
    9bae:	66 0f 6e c0          	movd   xmm0,eax
    9bb2:	0f b7 85 a0 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2860]
    9bb9:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9bbe:	66 0f 6f e0          	movdqa xmm4,xmm0
    9bc2:	0f b7 85 9e d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2862]
    9bc9:	66 0f 6e c0          	movd   xmm0,eax
    9bcd:	0f b7 85 9c d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2864]
    9bd4:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9bd9:	66 0f 6f d0          	movdqa xmm2,xmm0
    9bdd:	0f b7 85 9a d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2866]
    9be4:	66 0f 6e c0          	movd   xmm0,eax
    9be8:	0f b7 85 98 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2868]
    9bef:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9bf4:	66 0f 6f d8          	movdqa xmm3,xmm0
    9bf8:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9bfc:	66 0f 6f c1          	movdqa xmm0,xmm1
    9c00:	66 0f 6f c8          	movdqa xmm1,xmm0
    9c04:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9c08:	66 0f 6f c2          	movdqa xmm0,xmm2
    9c0c:	66 0f 6f d0          	movdqa xmm2,xmm0
    9c10:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9c14:	66 0f 6f c1          	movdqa xmm0,xmm1
    9c18:	90                   	nop
    9c19:	0f 29 85 e0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2620],xmm0
    9c20:	66 c7 85 68 d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x2898],0x1a9d
    9c29:	66 c7 85 6a d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x2896],0xf9c3
    9c32:	66 c7 85 6c d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x2894],0x1a9d
    9c3b:	66 c7 85 6e d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x2892],0xf9c3
    9c44:	66 c7 85 70 d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x2890],0x1a9d
    9c4d:	66 c7 85 72 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x288e],0xf9c3
    9c56:	66 c7 85 74 d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x288c],0x1a9d
    9c5f:	66 c7 85 76 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x288a],0xf9c3
    9c68:	0f bf 85 68 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2898]
    9c6f:	0f bf 95 6a d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2896]
    9c76:	0f bf 8d 6c d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2894]
    9c7d:	0f bf b5 6e d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2892]
    9c84:	0f bf bd 70 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2890]
    9c8b:	44 0f bf 85 72 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x288e]
    9c93:	44 0f bf 8d 74 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x288c]
    9c9b:	44 0f bf 95 76 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x288a]
    9ca3:	66 44 89 95 78 d7 ff ff 	mov    WORD PTR [rbp-0x2888],r10w
    9cab:	66 44 89 8d 7a d7 ff ff 	mov    WORD PTR [rbp-0x2886],r9w
    9cb3:	66 44 89 85 7c d7 ff ff 	mov    WORD PTR [rbp-0x2884],r8w
    9cbb:	66 89 bd 7e d7 ff ff 	mov    WORD PTR [rbp-0x2882],di
    9cc2:	66 89 b5 80 d7 ff ff 	mov    WORD PTR [rbp-0x2880],si
    9cc9:	66 89 8d 82 d7 ff ff 	mov    WORD PTR [rbp-0x287e],cx
    9cd0:	66 89 95 84 d7 ff ff 	mov    WORD PTR [rbp-0x287c],dx
    9cd7:	66 89 85 86 d7 ff ff 	mov    WORD PTR [rbp-0x287a],ax
    9cde:	0f b7 85 86 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x287a]
    9ce5:	66 0f 6e c0          	movd   xmm0,eax
    9ce9:	0f b7 85 84 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x287c]
    9cf0:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9cf5:	66 0f 6f c8          	movdqa xmm1,xmm0
    9cf9:	0f b7 85 82 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x287e]
    9d00:	66 0f 6e c0          	movd   xmm0,eax
    9d04:	0f b7 85 80 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2880]
    9d0b:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9d10:	66 0f 6f e0          	movdqa xmm4,xmm0
    9d14:	0f b7 85 7e d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2882]
    9d1b:	66 0f 6e c0          	movd   xmm0,eax
    9d1f:	0f b7 85 7c d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2884]
    9d26:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9d2b:	66 0f 6f d0          	movdqa xmm2,xmm0
    9d2f:	0f b7 85 7a d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2886]
    9d36:	66 0f 6e c0          	movd   xmm0,eax
    9d3a:	0f b7 85 78 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2888]
    9d41:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9d46:	66 0f 6f d8          	movdqa xmm3,xmm0
    9d4a:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9d4e:	66 0f 6f c1          	movdqa xmm0,xmm1
    9d52:	66 0f 6f c8          	movdqa xmm1,xmm0
    9d56:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9d5a:	66 0f 6f c2          	movdqa xmm0,xmm2
    9d5e:	66 0f 6f d0          	movdqa xmm2,xmm0
    9d62:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9d66:	66 0f 6f c1          	movdqa xmm0,xmm1
    9d6a:	90                   	nop
    9d6b:	0f 29 85 f0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2610],xmm0
    9d72:	66 c7 85 48 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28b8],0xf9c3
    9d7b:	66 c7 85 4a d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28b6],0x11c8
    9d84:	66 c7 85 4c d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28b4],0xf9c3
    9d8d:	66 c7 85 4e d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28b2],0x11c8
    9d96:	66 c7 85 50 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28b0],0xf9c3
    9d9f:	66 c7 85 52 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28ae],0x11c8
    9da8:	66 c7 85 54 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28ac],0xf9c3
    9db1:	66 c7 85 56 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28aa],0x11c8
    9dba:	0f bf 85 48 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x28b8]
    9dc1:	0f bf 95 4a d7 ff ff 	movsx  edx,WORD PTR [rbp-0x28b6]
    9dc8:	0f bf 8d 4c d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x28b4]
    9dcf:	0f bf b5 4e d7 ff ff 	movsx  esi,WORD PTR [rbp-0x28b2]
    9dd6:	0f bf bd 50 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x28b0]
    9ddd:	44 0f bf 85 52 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x28ae]
    9de5:	44 0f bf 8d 54 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x28ac]
    9ded:	44 0f bf 95 56 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x28aa]
    9df5:	66 44 89 95 58 d7 ff ff 	mov    WORD PTR [rbp-0x28a8],r10w
    9dfd:	66 44 89 8d 5a d7 ff ff 	mov    WORD PTR [rbp-0x28a6],r9w
    9e05:	66 44 89 85 5c d7 ff ff 	mov    WORD PTR [rbp-0x28a4],r8w
    9e0d:	66 89 bd 5e d7 ff ff 	mov    WORD PTR [rbp-0x28a2],di
    9e14:	66 89 b5 60 d7 ff ff 	mov    WORD PTR [rbp-0x28a0],si
    9e1b:	66 89 8d 62 d7 ff ff 	mov    WORD PTR [rbp-0x289e],cx
    9e22:	66 89 95 64 d7 ff ff 	mov    WORD PTR [rbp-0x289c],dx
    9e29:	66 89 85 66 d7 ff ff 	mov    WORD PTR [rbp-0x289a],ax
    9e30:	0f b7 85 66 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x289a]
    9e37:	66 0f 6e c0          	movd   xmm0,eax
    9e3b:	0f b7 85 64 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x289c]
    9e42:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9e47:	66 0f 6f c8          	movdqa xmm1,xmm0
    9e4b:	0f b7 85 62 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x289e]
    9e52:	66 0f 6e c0          	movd   xmm0,eax
    9e56:	0f b7 85 60 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a0]
    9e5d:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9e62:	66 0f 6f e0          	movdqa xmm4,xmm0
    9e66:	0f b7 85 5e d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a2]
    9e6d:	66 0f 6e c0          	movd   xmm0,eax
    9e71:	0f b7 85 5c d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a4]
    9e78:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9e7d:	66 0f 6f d0          	movdqa xmm2,xmm0
    9e81:	0f b7 85 5a d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a6]
    9e88:	66 0f 6e c0          	movd   xmm0,eax
    9e8c:	0f b7 85 58 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a8]
    9e93:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9e98:	66 0f 6f d8          	movdqa xmm3,xmm0
    9e9c:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9ea0:	66 0f 6f c1          	movdqa xmm0,xmm1
    9ea4:	66 0f 6f c8          	movdqa xmm1,xmm0
    9ea8:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9eac:	66 0f 6f c2          	movdqa xmm0,xmm2
    9eb0:	66 0f 6f d0          	movdqa xmm2,xmm0
    9eb4:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9eb8:	66 0f 6f c1          	movdqa xmm0,xmm1
    9ebc:	90                   	nop
    9ebd:	0f 29 85 00 da ff ff 	movaps XMMWORD PTR [rbp-0x2600],xmm0
    9ec4:	c7 85 fc d8 ff ff 00 02 00 00 	mov    DWORD PTR [rbp-0x2704],0x200
    9ece:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9ed4:	89 85 00 d9 ff ff    	mov    DWORD PTR [rbp-0x2700],eax
    9eda:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9ee0:	89 85 04 d9 ff ff    	mov    DWORD PTR [rbp-0x26fc],eax
    9ee6:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9eec:	89 85 08 d9 ff ff    	mov    DWORD PTR [rbp-0x26f8],eax
    9ef2:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9ef8:	89 85 0c d9 ff ff    	mov    DWORD PTR [rbp-0x26f4],eax
    9efe:	8b 85 00 d9 ff ff    	mov    eax,DWORD PTR [rbp-0x2700]
    9f04:	8b 95 04 d9 ff ff    	mov    edx,DWORD PTR [rbp-0x26fc]
    9f0a:	66 0f 6e ca          	movd   xmm1,edx
    9f0e:	66 0f 6e e8          	movd   xmm5,eax
    9f12:	66 0f 62 cd          	punpckldq xmm1,xmm5
    9f16:	8b 85 08 d9 ff ff    	mov    eax,DWORD PTR [rbp-0x26f8]
    9f1c:	8b 95 0c d9 ff ff    	mov    edx,DWORD PTR [rbp-0x26f4]
    9f22:	66 0f 6e c2          	movd   xmm0,edx
    9f26:	66 0f 6e f0          	movd   xmm6,eax
    9f2a:	66 0f 62 c6          	punpckldq xmm0,xmm6
    9f2e:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    9f32:	90                   	nop
    9f33:	0f 29 85 10 da ff ff 	movaps XMMWORD PTR [rbp-0x25f0],xmm0
    9f3a:	c7 85 e8 d8 ff ff 00 00 01 01 	mov    DWORD PTR [rbp-0x2718],0x1010000
    9f44:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9f4a:	89 85 ec d8 ff ff    	mov    DWORD PTR [rbp-0x2714],eax
    9f50:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9f56:	89 85 f0 d8 ff ff    	mov    DWORD PTR [rbp-0x2710],eax
    9f5c:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9f62:	89 85 f4 d8 ff ff    	mov    DWORD PTR [rbp-0x270c],eax
    9f68:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9f6e:	89 85 f8 d8 ff ff    	mov    DWORD PTR [rbp-0x2708],eax
    9f74:	8b 85 ec d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2714]
    9f7a:	8b 95 f0 d8 ff ff    	mov    edx,DWORD PTR [rbp-0x2710]
    9f80:	66 0f 6e ca          	movd   xmm1,edx
    9f84:	66 0f 6e f8          	movd   xmm7,eax
    9f88:	66 0f 62 cf          	punpckldq xmm1,xmm7
    9f8c:	8b 85 f4 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x270c]
    9f92:	8b 95 f8 d8 ff ff    	mov    edx,DWORD PTR [rbp-0x2708]
    9f98:	66 0f 6e c2          	movd   xmm0,edx
    9f9c:	66 0f 6e e8          	movd   xmm5,eax
    9fa0:	66 0f 62 c5          	punpckldq xmm0,xmm5
    9fa4:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    9fa8:	90                   	nop
    9fa9:	0f 29 85 20 da ff ff 	movaps XMMWORD PTR [rbp-0x25e0],xmm0
    9fb0:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    9fb7:	48 89 85 88 d9 ff ff 	mov    QWORD PTR [rbp-0x2678],rax
    9fbe:	48 8b 85 88 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2678]
    9fc5:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    9fc9:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    9fd0:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    9fd7:	48 83 c0 10          	add    rax,0x10
    9fdb:	48 89 85 80 d9 ff ff 	mov    QWORD PTR [rbp-0x2680],rax
    9fe2:	48 8b 85 80 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2680]
    9fe9:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    9fed:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    9ff4:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    9ffb:	48 83 c0 20          	add    rax,0x20
    9fff:	48 89 85 78 d9 ff ff 	mov    QWORD PTR [rbp-0x2688],rax
    a006:	48 8b 85 78 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2688]
    a00d:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a011:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    a018:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a01f:	48 83 c0 30          	add    rax,0x30
    a023:	48 89 85 70 d9 ff ff 	mov    QWORD PTR [rbp-0x2690],rax
    a02a:	48 8b 85 70 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2690]
    a031:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a035:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    a03c:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a043:	48 83 c0 40          	add    rax,0x40
    a047:	48 89 85 68 d9 ff ff 	mov    QWORD PTR [rbp-0x2698],rax
    a04e:	48 8b 85 68 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2698]
    a055:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a059:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    a060:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a067:	48 83 c0 50          	add    rax,0x50
    a06b:	48 89 85 60 d9 ff ff 	mov    QWORD PTR [rbp-0x26a0],rax
    a072:	48 8b 85 60 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26a0]
    a079:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a07d:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    a084:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a08b:	48 83 c0 60          	add    rax,0x60
    a08f:	48 89 85 58 d9 ff ff 	mov    QWORD PTR [rbp-0x26a8],rax
    a096:	48 8b 85 58 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26a8]
    a09d:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a0a1:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    a0a8:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a0af:	48 83 c0 70          	add    rax,0x70
    a0b3:	48 89 85 50 d9 ff ff 	mov    QWORD PTR [rbp-0x26b0],rax
    a0ba:	48 8b 85 50 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26b0]
    a0c1:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a0c5:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    a0cc:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    a0d4:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    a0d8:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    a0e0:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    a0e4:	66 0f 6f 4d f0       	movdqa xmm1,XMMWORD PTR [rbp-0x10]
    a0e9:	66 0f 6f 45 e0       	movdqa xmm0,XMMWORD PTR [rbp-0x20]
    a0ee:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a0f2:	0f 29 85 b0 da ff ff 	movaps XMMWORD PTR [rbp-0x2550],xmm0
    a0f9:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    a101:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    a105:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    a10d:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    a111:	66 0f 6f 4d d0       	movdqa xmm1,XMMWORD PTR [rbp-0x30]
    a116:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
    a11b:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a11f:	0f 29 85 c0 da ff ff 	movaps XMMWORD PTR [rbp-0x2540],xmm0
    a126:	66 0f 6f 85 b0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2550]
    a12e:	0f 29 45 a0          	movaps XMMWORD PTR [rbp-0x60],xmm0
    a132:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    a13a:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    a13e:	66 0f 6f 45 b0       	movdqa xmm0,XMMWORD PTR [rbp-0x50]
    a143:	66 0f 6f 4d a0       	movdqa xmm1,XMMWORD PTR [rbp-0x60]
    a148:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a14c:	0f 29 85 d0 da ff ff 	movaps XMMWORD PTR [rbp-0x2530],xmm0
    a153:	66 0f 6f 85 c0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2540]
    a15b:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
    a15f:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    a167:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
    a16b:	66 0f 6f 45 90       	movdqa xmm0,XMMWORD PTR [rbp-0x70]
    a170:	66 0f 6f 4d 80       	movdqa xmm1,XMMWORD PTR [rbp-0x80]
    a175:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a179:	0f 29 85 e0 da ff ff 	movaps XMMWORD PTR [rbp-0x2520],xmm0
    a180:	66 0f 6f 85 b0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2550]
    a188:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
    a18f:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    a197:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
    a19e:	66 0f 6f 85 70 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x90]
    a1a6:	66 0f 6f 8d 60 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa0]
    a1ae:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a1b2:	0f 29 85 f0 da ff ff 	movaps XMMWORD PTR [rbp-0x2510],xmm0
    a1b9:	66 0f 6f 85 c0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2540]
    a1c1:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
    a1c8:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    a1d0:	0f 29 85 50 ff ff ff 	movaps XMMWORD PTR [rbp-0xb0],xmm0
    a1d7:	66 0f 6f 85 50 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb0]
    a1df:	66 0f 6f 8d 40 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc0]
    a1e7:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a1eb:	0f 29 85 00 db ff ff 	movaps XMMWORD PTR [rbp-0x2500],xmm0
    a1f2:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    a1fa:	0f 29 85 20 ff ff ff 	movaps XMMWORD PTR [rbp-0xe0],xmm0
    a201:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    a209:	0f 29 85 30 ff ff ff 	movaps XMMWORD PTR [rbp-0xd0],xmm0
    a210:	66 0f 6f 8d 20 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe0]
    a218:	66 0f 6f 85 30 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd0]
    a220:	66 0f fd c1          	paddw  xmm0,xmm1
    a224:	0f 29 85 10 db ff ff 	movaps XMMWORD PTR [rbp-0x24f0],xmm0
    a22b:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    a233:	0f 29 85 00 ff ff ff 	movaps XMMWORD PTR [rbp-0x100],xmm0
    a23a:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    a242:	0f 29 85 10 ff ff ff 	movaps XMMWORD PTR [rbp-0xf0],xmm0
    a249:	66 0f 6f 85 00 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x100]
    a251:	66 0f 6f 8d 10 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf0]
    a259:	66 0f f9 c1          	psubw  xmm0,xmm1
    a25d:	0f 29 85 20 db ff ff 	movaps XMMWORD PTR [rbp-0x24e0],xmm0
    a264:	66 0f ef c0          	pxor   xmm0,xmm0
    a268:	0f 29 85 e0 fe ff ff 	movaps XMMWORD PTR [rbp-0x120],xmm0
    a26f:	66 0f 6f 85 10 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24f0]
    a277:	0f 29 85 f0 fe ff ff 	movaps XMMWORD PTR [rbp-0x110],xmm0
    a27e:	66 0f 6f 8d f0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x110]
    a286:	66 0f 6f 85 e0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x120]
    a28e:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a292:	0f 29 85 d0 fe ff ff 	movaps XMMWORD PTR [rbp-0x130],xmm0
    a299:	c7 85 e4 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x271c],0x4
    a2a3:	66 0f 6f 8d d0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x130]
    a2ab:	66 0f 6e 85 e4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x271c]
    a2b3:	66 0f e2 c8          	psrad  xmm1,xmm0
    a2b7:	66 0f 6f c1          	movdqa xmm0,xmm1
    a2bb:	0f 29 85 30 db ff ff 	movaps XMMWORD PTR [rbp-0x24d0],xmm0
    a2c2:	66 0f ef c0          	pxor   xmm0,xmm0
    a2c6:	0f 29 85 b0 fe ff ff 	movaps XMMWORD PTR [rbp-0x150],xmm0
    a2cd:	66 0f 6f 85 10 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24f0]
    a2d5:	0f 29 85 c0 fe ff ff 	movaps XMMWORD PTR [rbp-0x140],xmm0
    a2dc:	66 0f 6f 8d c0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x140]
    a2e4:	66 0f 6f 85 b0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x150]
    a2ec:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a2f0:	0f 29 85 a0 fe ff ff 	movaps XMMWORD PTR [rbp-0x160],xmm0
    a2f7:	c7 85 e0 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2720],0x4
    a301:	66 0f 6f 8d a0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x160]
    a309:	66 0f 6e 85 e0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2720]
    a311:	66 0f e2 c8          	psrad  xmm1,xmm0
    a315:	66 0f 6f c1          	movdqa xmm0,xmm1
    a319:	0f 29 85 40 db ff ff 	movaps XMMWORD PTR [rbp-0x24c0],xmm0
    a320:	66 0f ef c0          	pxor   xmm0,xmm0
    a324:	0f 29 85 80 fe ff ff 	movaps XMMWORD PTR [rbp-0x180],xmm0
    a32b:	66 0f 6f 85 20 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24e0]
    a333:	0f 29 85 90 fe ff ff 	movaps XMMWORD PTR [rbp-0x170],xmm0
    a33a:	66 0f 6f 8d 90 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x170]
    a342:	66 0f 6f 85 80 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x180]
    a34a:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a34e:	0f 29 85 70 fe ff ff 	movaps XMMWORD PTR [rbp-0x190],xmm0
    a355:	c7 85 dc d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2724],0x4
    a35f:	66 0f 6f 8d 70 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x190]
    a367:	66 0f 6e 85 dc d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2724]
    a36f:	66 0f e2 c8          	psrad  xmm1,xmm0
    a373:	66 0f 6f c1          	movdqa xmm0,xmm1
    a377:	0f 29 85 50 db ff ff 	movaps XMMWORD PTR [rbp-0x24b0],xmm0
    a37e:	66 0f ef c0          	pxor   xmm0,xmm0
    a382:	0f 29 85 50 fe ff ff 	movaps XMMWORD PTR [rbp-0x1b0],xmm0
    a389:	66 0f 6f 85 20 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24e0]
    a391:	0f 29 85 60 fe ff ff 	movaps XMMWORD PTR [rbp-0x1a0],xmm0
    a398:	66 0f 6f 8d 60 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a0]
    a3a0:	66 0f 6f 85 50 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b0]
    a3a8:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a3ac:	0f 29 85 40 fe ff ff 	movaps XMMWORD PTR [rbp-0x1c0],xmm0
    a3b3:	c7 85 d8 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2728],0x4
    a3bd:	66 0f 6f 8d 40 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1c0]
    a3c5:	66 0f 6e 85 d8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2728]
    a3cd:	66 0f e2 c8          	psrad  xmm1,xmm0
    a3d1:	66 0f 6f c1          	movdqa xmm0,xmm1
    a3d5:	0f 29 85 60 db ff ff 	movaps XMMWORD PTR [rbp-0x24a0],xmm0
    a3dc:	66 0f 6f 85 30 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24d0]
    a3e4:	0f 29 85 20 fe ff ff 	movaps XMMWORD PTR [rbp-0x1e0],xmm0
    a3eb:	66 0f 6f 85 f0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2510]
    a3f3:	0f 29 85 30 fe ff ff 	movaps XMMWORD PTR [rbp-0x1d0],xmm0
    a3fa:	66 0f 6f 8d 20 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1e0]
    a402:	66 0f 6f 85 30 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d0]
    a40a:	66 0f fe c1          	paddd  xmm0,xmm1
    a40e:	0f 29 85 70 db ff ff 	movaps XMMWORD PTR [rbp-0x2490],xmm0
    a415:	66 0f 6f 85 40 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24c0]
    a41d:	0f 29 85 00 fe ff ff 	movaps XMMWORD PTR [rbp-0x200],xmm0
    a424:	66 0f 6f 85 00 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2500]
    a42c:	0f 29 85 10 fe ff ff 	movaps XMMWORD PTR [rbp-0x1f0],xmm0
    a433:	66 0f 6f 8d 00 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x200]
    a43b:	66 0f 6f 85 10 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f0]
    a443:	66 0f fe c1          	paddd  xmm0,xmm1
    a447:	0f 29 85 80 db ff ff 	movaps XMMWORD PTR [rbp-0x2480],xmm0
    a44e:	66 0f 6f 85 30 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24d0]
    a456:	0f 29 85 e0 fd ff ff 	movaps XMMWORD PTR [rbp-0x220],xmm0
    a45d:	66 0f 6f 85 f0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2510]
    a465:	0f 29 85 f0 fd ff ff 	movaps XMMWORD PTR [rbp-0x210],xmm0
    a46c:	66 0f 6f 85 e0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x220]
    a474:	66 0f 6f 8d f0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x210]
    a47c:	66 0f fa c1          	psubd  xmm0,xmm1
    a480:	0f 29 85 90 db ff ff 	movaps XMMWORD PTR [rbp-0x2470],xmm0
    a487:	66 0f 6f 85 40 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24c0]
    a48f:	0f 29 85 c0 fd ff ff 	movaps XMMWORD PTR [rbp-0x240],xmm0
    a496:	66 0f 6f 85 00 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2500]
    a49e:	0f 29 85 d0 fd ff ff 	movaps XMMWORD PTR [rbp-0x230],xmm0
    a4a5:	66 0f 6f 85 c0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x240]
    a4ad:	66 0f 6f 8d d0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x230]
    a4b5:	66 0f fa c1          	psubd  xmm0,xmm1
    a4b9:	0f 29 85 a0 db ff ff 	movaps XMMWORD PTR [rbp-0x2460],xmm0
    a4c0:	66 0f 6f 85 50 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24b0]
    a4c8:	0f 29 85 a0 fd ff ff 	movaps XMMWORD PTR [rbp-0x260],xmm0
    a4cf:	66 0f 6f 85 d0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2530]
    a4d7:	0f 29 85 b0 fd ff ff 	movaps XMMWORD PTR [rbp-0x250],xmm0
    a4de:	66 0f 6f 8d a0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x260]
    a4e6:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
    a4ee:	66 0f fe c1          	paddd  xmm0,xmm1
    a4f2:	0f 29 85 b0 db ff ff 	movaps XMMWORD PTR [rbp-0x2450],xmm0
    a4f9:	66 0f 6f 85 60 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24a0]
    a501:	0f 29 85 80 fd ff ff 	movaps XMMWORD PTR [rbp-0x280],xmm0
    a508:	66 0f 6f 85 e0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2520]
    a510:	0f 29 85 90 fd ff ff 	movaps XMMWORD PTR [rbp-0x270],xmm0
    a517:	66 0f 6f 8d 80 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x280]
    a51f:	66 0f 6f 85 90 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x270]
    a527:	66 0f fe c1          	paddd  xmm0,xmm1
    a52b:	0f 29 85 c0 db ff ff 	movaps XMMWORD PTR [rbp-0x2440],xmm0
    a532:	66 0f 6f 85 50 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24b0]
    a53a:	0f 29 85 60 fd ff ff 	movaps XMMWORD PTR [rbp-0x2a0],xmm0
    a541:	66 0f 6f 85 d0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2530]
    a549:	0f 29 85 70 fd ff ff 	movaps XMMWORD PTR [rbp-0x290],xmm0
    a550:	66 0f 6f 85 60 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2a0]
    a558:	66 0f 6f 8d 70 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x290]
    a560:	66 0f fa c1          	psubd  xmm0,xmm1
    a564:	0f 29 85 d0 db ff ff 	movaps XMMWORD PTR [rbp-0x2430],xmm0
    a56b:	66 0f 6f 85 60 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24a0]
    a573:	0f 29 85 40 fd ff ff 	movaps XMMWORD PTR [rbp-0x2c0],xmm0
    a57a:	66 0f 6f 85 e0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2520]
    a582:	0f 29 85 50 fd ff ff 	movaps XMMWORD PTR [rbp-0x2b0],xmm0
    a589:	66 0f 6f 85 40 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2c0]
    a591:	66 0f 6f 8d 50 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2b0]
    a599:	66 0f fa c1          	psubd  xmm0,xmm1
    a59d:	0f 29 85 e0 db ff ff 	movaps XMMWORD PTR [rbp-0x2420],xmm0
    a5a4:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    a5ac:	0f 29 85 20 fd ff ff 	movaps XMMWORD PTR [rbp-0x2e0],xmm0
    a5b3:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    a5bb:	0f 29 85 30 fd ff ff 	movaps XMMWORD PTR [rbp-0x2d0],xmm0
    a5c2:	66 0f 6f 8d 30 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2d0]
    a5ca:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
    a5d2:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a5d6:	0f 29 85 f0 db ff ff 	movaps XMMWORD PTR [rbp-0x2410],xmm0
    a5dd:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    a5e5:	0f 29 85 00 fd ff ff 	movaps XMMWORD PTR [rbp-0x300],xmm0
    a5ec:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    a5f4:	0f 29 85 10 fd ff ff 	movaps XMMWORD PTR [rbp-0x2f0],xmm0
    a5fb:	66 0f 6f 8d 10 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2f0]
    a603:	66 0f 6f 85 00 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x300]
    a60b:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a60f:	0f 29 85 00 dc ff ff 	movaps XMMWORD PTR [rbp-0x2400],xmm0
    a616:	66 0f 6f 85 f0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2410]
    a61e:	0f 29 85 e0 fc ff ff 	movaps XMMWORD PTR [rbp-0x320],xmm0
    a625:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    a62d:	0f 29 85 f0 fc ff ff 	movaps XMMWORD PTR [rbp-0x310],xmm0
    a634:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
    a63c:	66 0f 6f 8d e0 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x320]
    a644:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a648:	0f 29 85 10 dc ff ff 	movaps XMMWORD PTR [rbp-0x23f0],xmm0
    a64f:	66 0f 6f 85 00 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2400]
    a657:	0f 29 85 c0 fc ff ff 	movaps XMMWORD PTR [rbp-0x340],xmm0
    a65e:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    a666:	0f 29 85 d0 fc ff ff 	movaps XMMWORD PTR [rbp-0x330],xmm0
    a66d:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
    a675:	66 0f 6f 8d c0 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x340]
    a67d:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a681:	0f 29 85 20 dc ff ff 	movaps XMMWORD PTR [rbp-0x23e0],xmm0
    a688:	66 0f 6f 85 f0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2410]
    a690:	0f 29 85 a0 fc ff ff 	movaps XMMWORD PTR [rbp-0x360],xmm0
    a697:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    a69f:	0f 29 85 b0 fc ff ff 	movaps XMMWORD PTR [rbp-0x350],xmm0
    a6a6:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
    a6ae:	66 0f 6f 8d a0 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x360]
    a6b6:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a6ba:	0f 29 85 30 dc ff ff 	movaps XMMWORD PTR [rbp-0x23d0],xmm0
    a6c1:	66 0f 6f 85 00 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2400]
    a6c9:	0f 29 85 80 fc ff ff 	movaps XMMWORD PTR [rbp-0x380],xmm0
    a6d0:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    a6d8:	0f 29 85 90 fc ff ff 	movaps XMMWORD PTR [rbp-0x370],xmm0
    a6df:	66 0f 6f 85 90 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x370]
    a6e7:	66 0f 6f 8d 80 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x380]
    a6ef:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a6f3:	0f 29 85 40 dc ff ff 	movaps XMMWORD PTR [rbp-0x23c0],xmm0
    a6fa:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    a702:	0f 29 85 60 fc ff ff 	movaps XMMWORD PTR [rbp-0x3a0],xmm0
    a709:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    a711:	0f 29 85 70 fc ff ff 	movaps XMMWORD PTR [rbp-0x390],xmm0
    a718:	66 0f 6f 8d 70 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x390]
    a720:	66 0f 6f 85 60 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3a0]
    a728:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a72c:	0f 29 85 50 dc ff ff 	movaps XMMWORD PTR [rbp-0x23b0],xmm0
    a733:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    a73b:	0f 29 85 40 fc ff ff 	movaps XMMWORD PTR [rbp-0x3c0],xmm0
    a742:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    a74a:	0f 29 85 50 fc ff ff 	movaps XMMWORD PTR [rbp-0x3b0],xmm0
    a751:	66 0f 6f 8d 50 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x3b0]
    a759:	66 0f 6f 85 40 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3c0]
    a761:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a765:	0f 29 85 60 dc ff ff 	movaps XMMWORD PTR [rbp-0x23a0],xmm0
    a76c:	66 0f 6f 85 50 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23b0]
    a774:	0f 29 85 20 fc ff ff 	movaps XMMWORD PTR [rbp-0x3e0],xmm0
    a77b:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    a783:	0f 29 85 30 fc ff ff 	movaps XMMWORD PTR [rbp-0x3d0],xmm0
    a78a:	66 0f 6f 85 30 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3d0]
    a792:	66 0f 6f 8d 20 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x3e0]
    a79a:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a79e:	0f 29 85 70 dc ff ff 	movaps XMMWORD PTR [rbp-0x2390],xmm0
    a7a5:	66 0f 6f 85 60 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23a0]
    a7ad:	0f 29 85 00 fc ff ff 	movaps XMMWORD PTR [rbp-0x400],xmm0
    a7b4:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    a7bc:	0f 29 85 10 fc ff ff 	movaps XMMWORD PTR [rbp-0x3f0],xmm0
    a7c3:	66 0f 6f 85 10 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3f0]
    a7cb:	66 0f 6f 8d 00 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x400]
    a7d3:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a7d7:	0f 29 85 80 dc ff ff 	movaps XMMWORD PTR [rbp-0x2380],xmm0
    a7de:	66 0f 6f 85 50 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23b0]
    a7e6:	0f 29 85 e0 fb ff ff 	movaps XMMWORD PTR [rbp-0x420],xmm0
    a7ed:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    a7f5:	0f 29 85 f0 fb ff ff 	movaps XMMWORD PTR [rbp-0x410],xmm0
    a7fc:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
    a804:	66 0f 6f 8d e0 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x420]
    a80c:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a810:	0f 29 85 90 dc ff ff 	movaps XMMWORD PTR [rbp-0x2370],xmm0
    a817:	66 0f 6f 85 60 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23a0]
    a81f:	0f 29 85 c0 fb ff ff 	movaps XMMWORD PTR [rbp-0x440],xmm0
    a826:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    a82e:	0f 29 85 d0 fb ff ff 	movaps XMMWORD PTR [rbp-0x430],xmm0
    a835:	66 0f 6f 85 d0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x430]
    a83d:	66 0f 6f 8d c0 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x440]
    a845:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a849:	0f 29 85 a0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2360],xmm0
    a850:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    a858:	0f 29 85 a0 fb ff ff 	movaps XMMWORD PTR [rbp-0x460],xmm0
    a85f:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    a867:	0f 29 85 b0 fb ff ff 	movaps XMMWORD PTR [rbp-0x450],xmm0
    a86e:	66 0f 6f 8d a0 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x460]
    a876:	66 0f 6f 85 b0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x450]
    a87e:	66 0f fd c1          	paddw  xmm0,xmm1
    a882:	0f 29 85 b0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2350],xmm0
    a889:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    a891:	0f 29 85 80 fb ff ff 	movaps XMMWORD PTR [rbp-0x480],xmm0
    a898:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    a8a0:	0f 29 85 90 fb ff ff 	movaps XMMWORD PTR [rbp-0x470],xmm0
    a8a7:	66 0f 6f 8d 80 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x480]
    a8af:	66 0f 6f 85 90 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x470]
    a8b7:	66 0f fd c1          	paddw  xmm0,xmm1
    a8bb:	0f 29 85 c0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2340],xmm0
    a8c2:	66 0f 6f 85 b0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2350]
    a8ca:	0f 29 85 60 fb ff ff 	movaps XMMWORD PTR [rbp-0x4a0],xmm0
    a8d1:	66 0f 6f 85 c0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2340]
    a8d9:	0f 29 85 70 fb ff ff 	movaps XMMWORD PTR [rbp-0x490],xmm0
    a8e0:	66 0f 6f 8d 70 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x490]
    a8e8:	66 0f 6f 85 60 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4a0]
    a8f0:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a8f4:	0f 29 85 d0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2330],xmm0
    a8fb:	66 0f 6f 85 b0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2350]
    a903:	0f 29 85 40 fb ff ff 	movaps XMMWORD PTR [rbp-0x4c0],xmm0
    a90a:	66 0f 6f 85 c0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2340]
    a912:	0f 29 85 50 fb ff ff 	movaps XMMWORD PTR [rbp-0x4b0],xmm0
    a919:	66 0f 6f 8d 50 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x4b0]
    a921:	66 0f 6f 85 40 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4c0]
    a929:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a92d:	0f 29 85 e0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2320],xmm0
    a934:	66 0f 6f 85 d0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2330]
    a93c:	0f 29 85 20 fb ff ff 	movaps XMMWORD PTR [rbp-0x4e0],xmm0
    a943:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    a94b:	0f 29 85 30 fb ff ff 	movaps XMMWORD PTR [rbp-0x4d0],xmm0
    a952:	66 0f 6f 85 30 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4d0]
    a95a:	66 0f 6f 8d 20 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x4e0]
    a962:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a966:	0f 29 85 f0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2310],xmm0
    a96d:	66 0f 6f 85 e0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2320]
    a975:	0f 29 85 00 fb ff ff 	movaps XMMWORD PTR [rbp-0x500],xmm0
    a97c:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    a984:	0f 29 85 10 fb ff ff 	movaps XMMWORD PTR [rbp-0x4f0],xmm0
    a98b:	66 0f 6f 85 10 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4f0]
    a993:	66 0f 6f 8d 00 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x500]
    a99b:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a99f:	0f 29 85 00 dd ff ff 	movaps XMMWORD PTR [rbp-0x2300],xmm0
    a9a6:	66 0f 6f 85 d0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2330]
    a9ae:	0f 29 85 e0 fa ff ff 	movaps XMMWORD PTR [rbp-0x520],xmm0
    a9b5:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    a9bd:	0f 29 85 f0 fa ff ff 	movaps XMMWORD PTR [rbp-0x510],xmm0
    a9c4:	66 0f 6f 85 f0 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x510]
    a9cc:	66 0f 6f 8d e0 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x520]
    a9d4:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a9d8:	0f 29 85 10 dd ff ff 	movaps XMMWORD PTR [rbp-0x22f0],xmm0
    a9df:	66 0f 6f 85 e0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2320]
    a9e7:	0f 29 85 c0 fa ff ff 	movaps XMMWORD PTR [rbp-0x540],xmm0
    a9ee:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    a9f6:	0f 29 85 d0 fa ff ff 	movaps XMMWORD PTR [rbp-0x530],xmm0
    a9fd:	66 0f 6f 85 d0 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x530]
    aa05:	66 0f 6f 8d c0 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x540]
    aa0d:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    aa11:	0f 29 85 20 dd ff ff 	movaps XMMWORD PTR [rbp-0x22e0],xmm0
    aa18:	66 0f 6f 85 10 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23f0]
    aa20:	0f 29 85 a0 fa ff ff 	movaps XMMWORD PTR [rbp-0x560],xmm0
    aa27:	66 0f 6f 85 f0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2310]
    aa2f:	0f 29 85 b0 fa ff ff 	movaps XMMWORD PTR [rbp-0x550],xmm0
    aa36:	66 0f 6f 8d a0 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x560]
    aa3e:	66 0f 6f 85 b0 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x550]
    aa46:	66 0f fe c1          	paddd  xmm0,xmm1
    aa4a:	0f 29 85 30 dd ff ff 	movaps XMMWORD PTR [rbp-0x22d0],xmm0
    aa51:	66 0f 6f 85 20 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23e0]
    aa59:	0f 29 85 80 fa ff ff 	movaps XMMWORD PTR [rbp-0x580],xmm0
    aa60:	66 0f 6f 85 00 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2300]
    aa68:	0f 29 85 90 fa ff ff 	movaps XMMWORD PTR [rbp-0x570],xmm0
    aa6f:	66 0f 6f 8d 80 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x580]
    aa77:	66 0f 6f 85 90 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x570]
    aa7f:	66 0f fe c1          	paddd  xmm0,xmm1
    aa83:	0f 29 85 40 dd ff ff 	movaps XMMWORD PTR [rbp-0x22c0],xmm0
    aa8a:	66 0f 6f 85 70 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2390]
    aa92:	0f 29 85 60 fa ff ff 	movaps XMMWORD PTR [rbp-0x5a0],xmm0
    aa99:	66 0f 6f 85 10 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22f0]
    aaa1:	0f 29 85 70 fa ff ff 	movaps XMMWORD PTR [rbp-0x590],xmm0
    aaa8:	66 0f 6f 8d 60 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x5a0]
    aab0:	66 0f 6f 85 70 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x590]
    aab8:	66 0f fe c1          	paddd  xmm0,xmm1
    aabc:	0f 29 85 50 dd ff ff 	movaps XMMWORD PTR [rbp-0x22b0],xmm0
    aac3:	66 0f 6f 85 80 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2380]
    aacb:	0f 29 85 40 fa ff ff 	movaps XMMWORD PTR [rbp-0x5c0],xmm0
    aad2:	66 0f 6f 85 20 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22e0]
    aada:	0f 29 85 50 fa ff ff 	movaps XMMWORD PTR [rbp-0x5b0],xmm0
    aae1:	66 0f 6f 8d 40 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x5c0]
    aae9:	66 0f 6f 85 50 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x5b0]
    aaf1:	66 0f fe c1          	paddd  xmm0,xmm1
    aaf5:	0f 29 85 60 dd ff ff 	movaps XMMWORD PTR [rbp-0x22a0],xmm0
    aafc:	66 0f 6f 85 30 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23d0]
    ab04:	0f 29 85 20 fa ff ff 	movaps XMMWORD PTR [rbp-0x5e0],xmm0
    ab0b:	66 0f 6f 85 10 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22f0]
    ab13:	0f 29 85 30 fa ff ff 	movaps XMMWORD PTR [rbp-0x5d0],xmm0
    ab1a:	66 0f 6f 8d 20 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x5e0]
    ab22:	66 0f 6f 85 30 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x5d0]
    ab2a:	66 0f fe c1          	paddd  xmm0,xmm1
    ab2e:	0f 29 85 70 dd ff ff 	movaps XMMWORD PTR [rbp-0x2290],xmm0
    ab35:	66 0f 6f 85 40 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23c0]
    ab3d:	0f 29 85 00 fa ff ff 	movaps XMMWORD PTR [rbp-0x600],xmm0
    ab44:	66 0f 6f 85 20 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22e0]
    ab4c:	0f 29 85 10 fa ff ff 	movaps XMMWORD PTR [rbp-0x5f0],xmm0
    ab53:	66 0f 6f 8d 00 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x600]
    ab5b:	66 0f 6f 85 10 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x5f0]
    ab63:	66 0f fe c1          	paddd  xmm0,xmm1
    ab67:	0f 29 85 80 dd ff ff 	movaps XMMWORD PTR [rbp-0x2280],xmm0
    ab6e:	66 0f 6f 85 90 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2370]
    ab76:	0f 29 85 e0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x620],xmm0
    ab7d:	66 0f 6f 85 f0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2310]
    ab85:	0f 29 85 f0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x610],xmm0
    ab8c:	66 0f 6f 8d e0 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x620]
    ab94:	66 0f 6f 85 f0 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x610]
    ab9c:	66 0f fe c1          	paddd  xmm0,xmm1
    aba0:	0f 29 85 90 dd ff ff 	movaps XMMWORD PTR [rbp-0x2270],xmm0
    aba7:	66 0f 6f 85 a0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2360]
    abaf:	0f 29 85 c0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x640],xmm0
    abb6:	66 0f 6f 85 00 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2300]
    abbe:	0f 29 85 d0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x630],xmm0
    abc5:	66 0f 6f 8d c0 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x640]
    abcd:	66 0f 6f 85 d0 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x630]
    abd5:	66 0f fe c1          	paddd  xmm0,xmm1
    abd9:	0f 29 85 a0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2260],xmm0
    abe0:	66 0f 6f 85 70 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2490]
    abe8:	0f 29 85 a0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x660],xmm0
    abef:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    abf7:	0f 29 85 b0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x650],xmm0
    abfe:	66 0f 6f 8d a0 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x660]
    ac06:	66 0f 6f 85 b0 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x650]
    ac0e:	66 0f fe c1          	paddd  xmm0,xmm1
    ac12:	0f 29 85 b0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2250],xmm0
    ac19:	66 0f 6f 85 80 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2480]
    ac21:	0f 29 85 80 f9 ff ff 	movaps XMMWORD PTR [rbp-0x680],xmm0
    ac28:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    ac30:	0f 29 85 90 f9 ff ff 	movaps XMMWORD PTR [rbp-0x670],xmm0
    ac37:	66 0f 6f 8d 80 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x680]
    ac3f:	66 0f 6f 85 90 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x670]
    ac47:	66 0f fe c1          	paddd  xmm0,xmm1
    ac4b:	0f 29 85 c0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2240],xmm0
    ac52:	66 0f 6f 85 b0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2250]
    ac5a:	0f 29 85 60 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6a0],xmm0
    ac61:	66 0f 6f 85 90 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2270]
    ac69:	0f 29 85 70 f9 ff ff 	movaps XMMWORD PTR [rbp-0x690],xmm0
    ac70:	66 0f 6f 8d 60 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6a0]
    ac78:	66 0f 6f 85 70 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x690]
    ac80:	66 0f fe c1          	paddd  xmm0,xmm1
    ac84:	0f 29 85 d0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2230],xmm0
    ac8b:	66 0f 6f 85 c0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2240]
    ac93:	0f 29 85 40 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6c0],xmm0
    ac9a:	66 0f 6f 85 a0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2260]
    aca2:	0f 29 85 50 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6b0],xmm0
    aca9:	66 0f 6f 8d 40 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6c0]
    acb1:	66 0f 6f 85 50 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x6b0]
    acb9:	66 0f fe c1          	paddd  xmm0,xmm1
    acbd:	0f 29 85 e0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2220],xmm0
    acc4:	66 0f 6f 85 b0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2250]
    accc:	0f 29 85 20 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6e0],xmm0
    acd3:	66 0f 6f 85 90 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2270]
    acdb:	0f 29 85 30 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6d0],xmm0
    ace2:	66 0f 6f 85 20 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x6e0]
    acea:	66 0f 6f 8d 30 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6d0]
    acf2:	66 0f fa c1          	psubd  xmm0,xmm1
    acf6:	0f 29 85 f0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2210],xmm0
    acfd:	66 0f 6f 85 c0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2240]
    ad05:	0f 29 85 00 f9 ff ff 	movaps XMMWORD PTR [rbp-0x700],xmm0
    ad0c:	66 0f 6f 85 a0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2260]
    ad14:	0f 29 85 10 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6f0],xmm0
    ad1b:	66 0f 6f 85 00 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x700]
    ad23:	66 0f 6f 8d 10 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6f0]
    ad2b:	66 0f fa c1          	psubd  xmm0,xmm1
    ad2f:	0f 29 85 00 de ff ff 	movaps XMMWORD PTR [rbp-0x2200],xmm0
    ad36:	66 0f 6f 85 e0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2220]
    ad3e:	0f 29 85 f0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x710],xmm0
    ad45:	c7 85 d4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x272c],0xa
    ad4f:	66 0f 6f 8d f0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x710]
    ad57:	66 0f 6e 85 d4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x272c]
    ad5f:	66 0f e2 c8          	psrad  xmm1,xmm0
    ad63:	66 0f 6f d1          	movdqa xmm2,xmm1
    ad67:	66 0f 6f 85 d0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2230]
    ad6f:	0f 29 85 e0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x720],xmm0
    ad76:	c7 85 d0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2730],0xa
    ad80:	66 0f 6f 8d e0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x720]
    ad88:	66 0f 6e 85 d0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2730]
    ad90:	66 0f e2 c8          	psrad  xmm1,xmm0
    ad94:	66 0f 6f c1          	movdqa xmm0,xmm1
    ad98:	0f 29 85 c0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x740],xmm0
    ad9f:	0f 29 95 d0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x730],xmm2
    ada6:	66 0f 6f 8d d0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x730]
    adae:	66 0f 6f 85 c0 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x740]
    adb6:	66 0f 6b c1          	packssdw xmm0,xmm1
    adba:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    adc1:	66 0f 6f 85 00 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2200]
    adc9:	0f 29 85 b0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x750],xmm0
    add0:	c7 85 cc d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2734],0xa
    adda:	66 0f 6f 8d b0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x750]
    ade2:	66 0f 6e 85 cc d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2734]
    adea:	66 0f e2 c8          	psrad  xmm1,xmm0
    adee:	66 0f 6f d1          	movdqa xmm2,xmm1
    adf2:	66 0f 6f 85 f0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2210]
    adfa:	0f 29 85 a0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x760],xmm0
    ae01:	c7 85 c8 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2738],0xa
    ae0b:	66 0f 6f 8d a0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x760]
    ae13:	66 0f 6e 85 c8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2738]
    ae1b:	66 0f e2 c8          	psrad  xmm1,xmm0
    ae1f:	66 0f 6f c1          	movdqa xmm0,xmm1
    ae23:	0f 29 85 80 f8 ff ff 	movaps XMMWORD PTR [rbp-0x780],xmm0
    ae2a:	0f 29 95 90 f8 ff ff 	movaps XMMWORD PTR [rbp-0x770],xmm2
    ae31:	66 0f 6f 8d 90 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x770]
    ae39:	66 0f 6f 85 80 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x780]
    ae41:	66 0f 6b c1          	packssdw xmm0,xmm1
    ae45:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    ae4c:	66 0f 6f 85 b0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2450]
    ae54:	0f 29 85 60 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7a0],xmm0
    ae5b:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    ae63:	0f 29 85 70 f8 ff ff 	movaps XMMWORD PTR [rbp-0x790],xmm0
    ae6a:	66 0f 6f 8d 60 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x7a0]
    ae72:	66 0f 6f 85 70 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x790]
    ae7a:	66 0f fe c1          	paddd  xmm0,xmm1
    ae7e:	0f 29 85 10 de ff ff 	movaps XMMWORD PTR [rbp-0x21f0],xmm0
    ae85:	66 0f 6f 85 c0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2440]
    ae8d:	0f 29 85 40 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7c0],xmm0
    ae94:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    ae9c:	0f 29 85 50 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7b0],xmm0
    aea3:	66 0f 6f 8d 40 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x7c0]
    aeab:	66 0f 6f 85 50 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x7b0]
    aeb3:	66 0f fe c1          	paddd  xmm0,xmm1
    aeb7:	0f 29 85 20 de ff ff 	movaps XMMWORD PTR [rbp-0x21e0],xmm0
    aebe:	66 0f 6f 85 10 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21f0]
    aec6:	0f 29 85 20 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7e0],xmm0
    aecd:	66 0f 6f 85 70 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2290]
    aed5:	0f 29 85 30 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7d0],xmm0
    aedc:	66 0f 6f 8d 20 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x7e0]
    aee4:	66 0f 6f 85 30 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x7d0]
    aeec:	66 0f fe c1          	paddd  xmm0,xmm1
    aef0:	0f 29 85 30 de ff ff 	movaps XMMWORD PTR [rbp-0x21d0],xmm0
    aef7:	66 0f 6f 85 20 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21e0]
    aeff:	0f 29 85 00 f8 ff ff 	movaps XMMWORD PTR [rbp-0x800],xmm0
    af06:	66 0f 6f 85 80 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2280]
    af0e:	0f 29 85 10 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7f0],xmm0
    af15:	66 0f 6f 8d 00 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x800]
    af1d:	66 0f 6f 85 10 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x7f0]
    af25:	66 0f fe c1          	paddd  xmm0,xmm1
    af29:	0f 29 85 40 de ff ff 	movaps XMMWORD PTR [rbp-0x21c0],xmm0
    af30:	66 0f 6f 85 10 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21f0]
    af38:	0f 29 85 e0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x820],xmm0
    af3f:	66 0f 6f 85 70 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2290]
    af47:	0f 29 85 f0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x810],xmm0
    af4e:	66 0f 6f 85 e0 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x820]
    af56:	66 0f 6f 8d f0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x810]
    af5e:	66 0f fa c1          	psubd  xmm0,xmm1
    af62:	0f 29 85 50 de ff ff 	movaps XMMWORD PTR [rbp-0x21b0],xmm0
    af69:	66 0f 6f 85 20 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21e0]
    af71:	0f 29 85 c0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x840],xmm0
    af78:	66 0f 6f 85 80 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2280]
    af80:	0f 29 85 d0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x830],xmm0
    af87:	66 0f 6f 85 c0 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x840]
    af8f:	66 0f 6f 8d d0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x830]
    af97:	66 0f fa c1          	psubd  xmm0,xmm1
    af9b:	0f 29 85 60 de ff ff 	movaps XMMWORD PTR [rbp-0x21a0],xmm0
    afa2:	66 0f 6f 85 40 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21c0]
    afaa:	0f 29 85 b0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x850],xmm0
    afb1:	c7 85 c4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x273c],0xa
    afbb:	66 0f 6f 8d b0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x850]
    afc3:	66 0f 6e 85 c4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x273c]
    afcb:	66 0f e2 c8          	psrad  xmm1,xmm0
    afcf:	66 0f 6f d1          	movdqa xmm2,xmm1
    afd3:	66 0f 6f 85 30 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21d0]
    afdb:	0f 29 85 a0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x860],xmm0
    afe2:	c7 85 c0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2740],0xa
    afec:	66 0f 6f 8d a0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x860]
    aff4:	66 0f 6e 85 c0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2740]
    affc:	66 0f e2 c8          	psrad  xmm1,xmm0
    b000:	66 0f 6f c1          	movdqa xmm0,xmm1
    b004:	0f 29 85 80 f7 ff ff 	movaps XMMWORD PTR [rbp-0x880],xmm0
    b00b:	0f 29 95 90 f7 ff ff 	movaps XMMWORD PTR [rbp-0x870],xmm2
    b012:	66 0f 6f 8d 90 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x870]
    b01a:	66 0f 6f 85 80 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x880]
    b022:	66 0f 6b c1          	packssdw xmm0,xmm1
    b026:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    b02d:	66 0f 6f 85 60 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21a0]
    b035:	0f 29 85 70 f7 ff ff 	movaps XMMWORD PTR [rbp-0x890],xmm0
    b03c:	c7 85 bc d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2744],0xa
    b046:	66 0f 6f 8d 70 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x890]
    b04e:	66 0f 6e 85 bc d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2744]
    b056:	66 0f e2 c8          	psrad  xmm1,xmm0
    b05a:	66 0f 6f d1          	movdqa xmm2,xmm1
    b05e:	66 0f 6f 85 50 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21b0]
    b066:	0f 29 85 60 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8a0],xmm0
    b06d:	c7 85 b8 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2748],0xa
    b077:	66 0f 6f 8d 60 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x8a0]
    b07f:	66 0f 6e 85 b8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2748]
    b087:	66 0f e2 c8          	psrad  xmm1,xmm0
    b08b:	66 0f 6f c1          	movdqa xmm0,xmm1
    b08f:	0f 29 85 40 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8c0],xmm0
    b096:	0f 29 95 50 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8b0],xmm2
    b09d:	66 0f 6f 8d 50 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x8b0]
    b0a5:	66 0f 6f 85 40 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x8c0]
    b0ad:	66 0f 6b c1          	packssdw xmm0,xmm1
    b0b1:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    b0b8:	66 0f 6f 85 d0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2430]
    b0c0:	0f 29 85 20 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8e0],xmm0
    b0c7:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b0cf:	0f 29 85 30 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8d0],xmm0
    b0d6:	66 0f 6f 8d 20 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x8e0]
    b0de:	66 0f 6f 85 30 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x8d0]
    b0e6:	66 0f fe c1          	paddd  xmm0,xmm1
    b0ea:	0f 29 85 70 de ff ff 	movaps XMMWORD PTR [rbp-0x2190],xmm0
    b0f1:	66 0f 6f 85 e0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2420]
    b0f9:	0f 29 85 00 f7 ff ff 	movaps XMMWORD PTR [rbp-0x900],xmm0
    b100:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b108:	0f 29 85 10 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8f0],xmm0
    b10f:	66 0f 6f 8d 00 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x900]
    b117:	66 0f 6f 85 10 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x8f0]
    b11f:	66 0f fe c1          	paddd  xmm0,xmm1
    b123:	0f 29 85 80 de ff ff 	movaps XMMWORD PTR [rbp-0x2180],xmm0
    b12a:	66 0f 6f 85 70 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2190]
    b132:	0f 29 85 e0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x920],xmm0
    b139:	66 0f 6f 85 50 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22b0]
    b141:	0f 29 85 f0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x910],xmm0
    b148:	66 0f 6f 8d e0 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x920]
    b150:	66 0f 6f 85 f0 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x910]
    b158:	66 0f fe c1          	paddd  xmm0,xmm1
    b15c:	0f 29 85 90 de ff ff 	movaps XMMWORD PTR [rbp-0x2170],xmm0
    b163:	66 0f 6f 85 80 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2180]
    b16b:	0f 29 85 c0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x940],xmm0
    b172:	66 0f 6f 85 60 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22a0]
    b17a:	0f 29 85 d0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x930],xmm0
    b181:	66 0f 6f 8d c0 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x940]
    b189:	66 0f 6f 85 d0 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x930]
    b191:	66 0f fe c1          	paddd  xmm0,xmm1
    b195:	0f 29 85 a0 de ff ff 	movaps XMMWORD PTR [rbp-0x2160],xmm0
    b19c:	66 0f 6f 85 70 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2190]
    b1a4:	0f 29 85 a0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x960],xmm0
    b1ab:	66 0f 6f 85 50 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22b0]
    b1b3:	0f 29 85 b0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x950],xmm0
    b1ba:	66 0f 6f 85 a0 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x960]
    b1c2:	66 0f 6f 8d b0 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x950]
    b1ca:	66 0f fa c1          	psubd  xmm0,xmm1
    b1ce:	0f 29 85 b0 de ff ff 	movaps XMMWORD PTR [rbp-0x2150],xmm0
    b1d5:	66 0f 6f 85 80 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2180]
    b1dd:	0f 29 85 80 f6 ff ff 	movaps XMMWORD PTR [rbp-0x980],xmm0
    b1e4:	66 0f 6f 85 60 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22a0]
    b1ec:	0f 29 85 90 f6 ff ff 	movaps XMMWORD PTR [rbp-0x970],xmm0
    b1f3:	66 0f 6f 85 80 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x980]
    b1fb:	66 0f 6f 8d 90 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x970]
    b203:	66 0f fa c1          	psubd  xmm0,xmm1
    b207:	0f 29 85 c0 de ff ff 	movaps XMMWORD PTR [rbp-0x2140],xmm0
    b20e:	66 0f 6f 85 a0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2160]
    b216:	0f 29 85 70 f6 ff ff 	movaps XMMWORD PTR [rbp-0x990],xmm0
    b21d:	c7 85 b4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x274c],0xa
    b227:	66 0f 6f 8d 70 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x990]
    b22f:	66 0f 6e 85 b4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x274c]
    b237:	66 0f e2 c8          	psrad  xmm1,xmm0
    b23b:	66 0f 6f d1          	movdqa xmm2,xmm1
    b23f:	66 0f 6f 85 90 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2170]
    b247:	0f 29 85 60 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9a0],xmm0
    b24e:	c7 85 b0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2750],0xa
    b258:	66 0f 6f 8d 60 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9a0]
    b260:	66 0f 6e 85 b0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2750]
    b268:	66 0f e2 c8          	psrad  xmm1,xmm0
    b26c:	66 0f 6f c1          	movdqa xmm0,xmm1
    b270:	0f 29 85 40 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9c0],xmm0
    b277:	0f 29 95 50 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9b0],xmm2
    b27e:	66 0f 6f 8d 50 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9b0]
    b286:	66 0f 6f 85 40 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x9c0]
    b28e:	66 0f 6b c1          	packssdw xmm0,xmm1
    b292:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    b299:	66 0f 6f 85 c0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2140]
    b2a1:	0f 29 85 30 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9d0],xmm0
    b2a8:	c7 85 ac d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2754],0xa
    b2b2:	66 0f 6f 8d 30 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9d0]
    b2ba:	66 0f 6e 85 ac d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2754]
    b2c2:	66 0f e2 c8          	psrad  xmm1,xmm0
    b2c6:	66 0f 6f d1          	movdqa xmm2,xmm1
    b2ca:	66 0f 6f 85 b0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2150]
    b2d2:	0f 29 85 20 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9e0],xmm0
    b2d9:	c7 85 a8 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2758],0xa
    b2e3:	66 0f 6f 8d 20 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9e0]
    b2eb:	66 0f 6e 85 a8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2758]
    b2f3:	66 0f e2 c8          	psrad  xmm1,xmm0
    b2f7:	66 0f 6f c1          	movdqa xmm0,xmm1
    b2fb:	0f 29 85 00 f6 ff ff 	movaps XMMWORD PTR [rbp-0xa00],xmm0
    b302:	0f 29 95 10 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9f0],xmm2
    b309:	66 0f 6f 8d 10 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9f0]
    b311:	66 0f 6f 85 00 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa00]
    b319:	66 0f 6b c1          	packssdw xmm0,xmm1
    b31d:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    b324:	66 0f 6f 85 90 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2470]
    b32c:	0f 29 85 e0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa20],xmm0
    b333:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b33b:	0f 29 85 f0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa10],xmm0
    b342:	66 0f 6f 8d e0 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa20]
    b34a:	66 0f 6f 85 f0 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa10]
    b352:	66 0f fe c1          	paddd  xmm0,xmm1
    b356:	0f 29 85 d0 de ff ff 	movaps XMMWORD PTR [rbp-0x2130],xmm0
    b35d:	66 0f 6f 85 a0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2460]
    b365:	0f 29 85 c0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa40],xmm0
    b36c:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b374:	0f 29 85 d0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa30],xmm0
    b37b:	66 0f 6f 8d c0 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa40]
    b383:	66 0f 6f 85 d0 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa30]
    b38b:	66 0f fe c1          	paddd  xmm0,xmm1
    b38f:	0f 29 85 e0 de ff ff 	movaps XMMWORD PTR [rbp-0x2120],xmm0
    b396:	66 0f 6f 85 d0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2130]
    b39e:	0f 29 85 a0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa60],xmm0
    b3a5:	66 0f 6f 85 30 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22d0]
    b3ad:	0f 29 85 b0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa50],xmm0
    b3b4:	66 0f 6f 8d a0 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa60]
    b3bc:	66 0f 6f 85 b0 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa50]
    b3c4:	66 0f fe c1          	paddd  xmm0,xmm1
    b3c8:	0f 29 85 f0 de ff ff 	movaps XMMWORD PTR [rbp-0x2110],xmm0
    b3cf:	66 0f 6f 85 e0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2120]
    b3d7:	0f 29 85 80 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa80],xmm0
    b3de:	66 0f 6f 85 40 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22c0]
    b3e6:	0f 29 85 90 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa70],xmm0
    b3ed:	66 0f 6f 8d 80 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa80]
    b3f5:	66 0f 6f 85 90 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa70]
    b3fd:	66 0f fe c1          	paddd  xmm0,xmm1
    b401:	0f 29 85 00 df ff ff 	movaps XMMWORD PTR [rbp-0x2100],xmm0
    b408:	66 0f 6f 85 d0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2130]
    b410:	0f 29 85 60 f5 ff ff 	movaps XMMWORD PTR [rbp-0xaa0],xmm0
    b417:	66 0f 6f 85 30 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22d0]
    b41f:	0f 29 85 70 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa90],xmm0
    b426:	66 0f 6f 85 60 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xaa0]
    b42e:	66 0f 6f 8d 70 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa90]
    b436:	66 0f fa c1          	psubd  xmm0,xmm1
    b43a:	0f 29 85 10 df ff ff 	movaps XMMWORD PTR [rbp-0x20f0],xmm0
    b441:	66 0f 6f 85 e0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2120]
    b449:	0f 29 85 40 f5 ff ff 	movaps XMMWORD PTR [rbp-0xac0],xmm0
    b450:	66 0f 6f 85 40 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22c0]
    b458:	0f 29 85 50 f5 ff ff 	movaps XMMWORD PTR [rbp-0xab0],xmm0
    b45f:	66 0f 6f 85 40 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xac0]
    b467:	66 0f 6f 8d 50 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xab0]
    b46f:	66 0f fa c1          	psubd  xmm0,xmm1
    b473:	0f 29 85 20 df ff ff 	movaps XMMWORD PTR [rbp-0x20e0],xmm0
    b47a:	66 0f 6f 85 00 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2100]
    b482:	0f 29 85 30 f5 ff ff 	movaps XMMWORD PTR [rbp-0xad0],xmm0
    b489:	c7 85 a4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x275c],0xa
    b493:	66 0f 6f 8d 30 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xad0]
    b49b:	66 0f 6e 85 a4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x275c]
    b4a3:	66 0f e2 c8          	psrad  xmm1,xmm0
    b4a7:	66 0f 6f d1          	movdqa xmm2,xmm1
    b4ab:	66 0f 6f 85 f0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2110]
    b4b3:	0f 29 85 20 f5 ff ff 	movaps XMMWORD PTR [rbp-0xae0],xmm0
    b4ba:	c7 85 a0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2760],0xa
    b4c4:	66 0f 6f 8d 20 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xae0]
    b4cc:	66 0f 6e 85 a0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2760]
    b4d4:	66 0f e2 c8          	psrad  xmm1,xmm0
    b4d8:	66 0f 6f c1          	movdqa xmm0,xmm1
    b4dc:	0f 29 85 00 f5 ff ff 	movaps XMMWORD PTR [rbp-0xb00],xmm0
    b4e3:	0f 29 95 10 f5 ff ff 	movaps XMMWORD PTR [rbp-0xaf0],xmm2
    b4ea:	66 0f 6f 8d 10 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xaf0]
    b4f2:	66 0f 6f 85 00 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb00]
    b4fa:	66 0f 6b c1          	packssdw xmm0,xmm1
    b4fe:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    b505:	66 0f 6f 85 20 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20e0]
    b50d:	0f 29 85 f0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb10],xmm0
    b514:	c7 85 9c d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2764],0xa
    b51e:	66 0f 6f 8d f0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb10]
    b526:	66 0f 6e 85 9c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2764]
    b52e:	66 0f e2 c8          	psrad  xmm1,xmm0
    b532:	66 0f 6f d1          	movdqa xmm2,xmm1
    b536:	66 0f 6f 85 10 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20f0]
    b53e:	0f 29 85 e0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb20],xmm0
    b545:	c7 85 98 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2768],0xa
    b54f:	66 0f 6f 8d e0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb20]
    b557:	66 0f 6e 85 98 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2768]
    b55f:	66 0f e2 c8          	psrad  xmm1,xmm0
    b563:	66 0f 6f c1          	movdqa xmm0,xmm1
    b567:	0f 29 85 c0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb40],xmm0
    b56e:	0f 29 95 d0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb30],xmm2
    b575:	66 0f 6f 8d d0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb30]
    b57d:	66 0f 6f 85 c0 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb40]
    b585:	66 0f 6b c1          	packssdw xmm0,xmm1
    b589:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    b590:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b598:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b59f:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b5a7:	0f 29 85 a0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb60],xmm0
    b5ae:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b5b6:	0f 29 85 b0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb50],xmm0
    b5bd:	66 0f 6f 8d b0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb50]
    b5c5:	66 0f 6f 85 a0 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb60]
    b5cd:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b5d1:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    b5d8:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b5e0:	0f 29 85 80 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb80],xmm0
    b5e7:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b5ef:	0f 29 85 90 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb70],xmm0
    b5f6:	66 0f 6f 8d 90 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb70]
    b5fe:	66 0f 6f 85 80 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb80]
    b606:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b60a:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    b611:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b619:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b620:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b628:	0f 29 85 60 f4 ff ff 	movaps XMMWORD PTR [rbp-0xba0],xmm0
    b62f:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b637:	0f 29 85 70 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb90],xmm0
    b63e:	66 0f 6f 8d 70 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb90]
    b646:	66 0f 6f 85 60 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xba0]
    b64e:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b652:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    b659:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b661:	0f 29 85 40 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbc0],xmm0
    b668:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b670:	0f 29 85 50 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbb0],xmm0
    b677:	66 0f 6f 8d 50 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xbb0]
    b67f:	66 0f 6f 85 40 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xbc0]
    b687:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b68b:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    b692:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b69a:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b6a1:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b6a9:	0f 29 85 20 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbe0],xmm0
    b6b0:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b6b8:	0f 29 85 30 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbd0],xmm0
    b6bf:	66 0f 6f 8d 30 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xbd0]
    b6c7:	66 0f 6f 85 20 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xbe0]
    b6cf:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b6d3:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    b6da:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b6e2:	0f 29 85 00 f4 ff ff 	movaps XMMWORD PTR [rbp-0xc00],xmm0
    b6e9:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b6f1:	0f 29 85 10 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbf0],xmm0
    b6f8:	66 0f 6f 8d 10 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xbf0]
    b700:	66 0f 6f 85 00 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc00]
    b708:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b70c:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    b713:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b71b:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b722:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b72a:	0f 29 85 e0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc20],xmm0
    b731:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b739:	0f 29 85 f0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc10],xmm0
    b740:	66 0f 6f 8d f0 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc10]
    b748:	66 0f 6f 85 e0 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc20]
    b750:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b754:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    b75b:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b763:	0f 29 85 c0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc40],xmm0
    b76a:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b772:	0f 29 85 d0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc30],xmm0
    b779:	66 0f 6f 8d d0 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc30]
    b781:	66 0f 6f 85 c0 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc40]
    b789:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b78d:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    b794:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b79c:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b7a3:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b7ab:	0f 29 85 a0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc60],xmm0
    b7b2:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b7ba:	0f 29 85 b0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc50],xmm0
    b7c1:	66 0f 6f 8d b0 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc50]
    b7c9:	66 0f 6f 85 a0 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc60]
    b7d1:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b7d5:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    b7dc:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b7e4:	0f 29 85 80 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc80],xmm0
    b7eb:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b7f3:	0f 29 85 90 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc70],xmm0
    b7fa:	66 0f 6f 8d 90 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc70]
    b802:	66 0f 6f 85 80 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc80]
    b80a:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b80e:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    b815:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b81d:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b824:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b82c:	0f 29 85 60 f3 ff ff 	movaps XMMWORD PTR [rbp-0xca0],xmm0
    b833:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b83b:	0f 29 85 70 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc90],xmm0
    b842:	66 0f 6f 8d 70 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc90]
    b84a:	66 0f 6f 85 60 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xca0]
    b852:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b856:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    b85d:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b865:	0f 29 85 40 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcc0],xmm0
    b86c:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b874:	0f 29 85 50 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcb0],xmm0
    b87b:	66 0f 6f 8d 50 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xcb0]
    b883:	66 0f 6f 85 40 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xcc0]
    b88b:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b88f:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    b896:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b89e:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b8a5:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b8ad:	0f 29 85 20 f3 ff ff 	movaps XMMWORD PTR [rbp-0xce0],xmm0
    b8b4:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b8bc:	0f 29 85 30 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcd0],xmm0
    b8c3:	66 0f 6f 8d 30 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xcd0]
    b8cb:	66 0f 6f 85 20 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xce0]
    b8d3:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b8d7:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    b8de:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b8e6:	0f 29 85 00 f3 ff ff 	movaps XMMWORD PTR [rbp-0xd00],xmm0
    b8ed:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b8f5:	0f 29 85 10 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcf0],xmm0
    b8fc:	66 0f 6f 8d 10 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xcf0]
    b904:	66 0f 6f 85 00 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd00]
    b90c:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b910:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    b917:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b91f:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b926:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b92e:	0f 29 85 e0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd20],xmm0
    b935:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b93d:	0f 29 85 f0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd10],xmm0
    b944:	66 0f 6f 8d f0 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd10]
    b94c:	66 0f 6f 85 e0 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd20]
    b954:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b958:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    b95f:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b967:	0f 29 85 c0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd40],xmm0
    b96e:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b976:	0f 29 85 d0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd30],xmm0
    b97d:	66 0f 6f 8d d0 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd30]
    b985:	66 0f 6f 85 c0 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd40]
    b98d:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b991:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    b998:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b9a0:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b9a7:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b9af:	0f 29 85 a0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd60],xmm0
    b9b6:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b9be:	0f 29 85 b0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd50],xmm0
    b9c5:	66 0f 6f 8d b0 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd50]
    b9cd:	66 0f 6f 85 a0 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd60]
    b9d5:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b9d9:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    b9e0:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b9e8:	0f 29 85 80 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd80],xmm0
    b9ef:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b9f7:	0f 29 85 90 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd70],xmm0
    b9fe:	66 0f 6f 8d 90 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd70]
    ba06:	66 0f 6f 85 80 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd80]
    ba0e:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    ba12:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    ba19:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    ba21:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    ba28:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    ba30:	0f 29 85 60 f2 ff ff 	movaps XMMWORD PTR [rbp-0xda0],xmm0
    ba37:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    ba3f:	0f 29 85 70 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd90],xmm0
    ba46:	66 0f 6f 8d 70 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd90]
    ba4e:	66 0f 6f 85 60 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xda0]
    ba56:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    ba5a:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    ba61:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    ba69:	0f 29 85 40 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdc0],xmm0
    ba70:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    ba78:	0f 29 85 50 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdb0],xmm0
    ba7f:	66 0f 6f 8d 50 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xdb0]
    ba87:	66 0f 6f 85 40 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xdc0]
    ba8f:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    ba93:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    ba9a:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    baa2:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    baa9:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bab1:	0f 29 85 20 f2 ff ff 	movaps XMMWORD PTR [rbp-0xde0],xmm0
    bab8:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    bac0:	0f 29 85 30 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdd0],xmm0
    bac7:	66 0f 6f 8d 30 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xdd0]
    bacf:	66 0f 6f 85 20 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xde0]
    bad7:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    badb:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    bae2:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    baea:	0f 29 85 00 f2 ff ff 	movaps XMMWORD PTR [rbp-0xe00],xmm0
    baf1:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    baf9:	0f 29 85 10 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdf0],xmm0
    bb00:	66 0f 6f 8d 10 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xdf0]
    bb08:	66 0f 6f 85 00 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe00]
    bb10:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bb14:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    bb1b:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bb23:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    bb2a:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bb32:	0f 29 85 e0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe20],xmm0
    bb39:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    bb41:	0f 29 85 f0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe10],xmm0
    bb48:	66 0f 6f 8d f0 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe10]
    bb50:	66 0f 6f 85 e0 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe20]
    bb58:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bb5c:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    bb63:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    bb6b:	0f 29 85 c0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe40],xmm0
    bb72:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    bb7a:	0f 29 85 d0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe30],xmm0
    bb81:	66 0f 6f 8d d0 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe30]
    bb89:	66 0f 6f 85 c0 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe40]
    bb91:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bb95:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    bb9c:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    bba4:	0f 29 85 a0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe60],xmm0
    bbab:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bbb3:	0f 29 85 b0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe50],xmm0
    bbba:	66 0f 6f 8d b0 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe50]
    bbc2:	66 0f 6f 85 a0 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe60]
    bbca:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bbce:	0f 29 85 40 df ff ff 	movaps XMMWORD PTR [rbp-0x20c0],xmm0
    bbd5:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    bbdd:	0f 29 85 80 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe80],xmm0
    bbe4:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bbec:	0f 29 85 90 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe70],xmm0
    bbf3:	66 0f 6f 8d 90 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe70]
    bbfb:	66 0f 6f 85 80 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe80]
    bc03:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bc07:	0f 29 85 50 df ff ff 	movaps XMMWORD PTR [rbp-0x20b0],xmm0
    bc0e:	66 0f 6f 85 40 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20c0]
    bc16:	0f 29 85 60 f1 ff ff 	movaps XMMWORD PTR [rbp-0xea0],xmm0
    bc1d:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    bc25:	0f 29 85 70 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe90],xmm0
    bc2c:	66 0f 6f 85 70 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe90]
    bc34:	66 0f 6f 8d 60 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xea0]
    bc3c:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bc40:	0f 29 85 60 df ff ff 	movaps XMMWORD PTR [rbp-0x20a0],xmm0
    bc47:	66 0f 6f 85 50 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20b0]
    bc4f:	0f 29 85 40 f1 ff ff 	movaps XMMWORD PTR [rbp-0xec0],xmm0
    bc56:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    bc5e:	0f 29 85 50 f1 ff ff 	movaps XMMWORD PTR [rbp-0xeb0],xmm0
    bc65:	66 0f 6f 85 50 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xeb0]
    bc6d:	66 0f 6f 8d 40 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xec0]
    bc75:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bc79:	0f 29 85 70 df ff ff 	movaps XMMWORD PTR [rbp-0x2090],xmm0
    bc80:	66 0f 6f 85 40 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20c0]
    bc88:	0f 29 85 20 f1 ff ff 	movaps XMMWORD PTR [rbp-0xee0],xmm0
    bc8f:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    bc97:	0f 29 85 30 f1 ff ff 	movaps XMMWORD PTR [rbp-0xed0],xmm0
    bc9e:	66 0f 6f 85 30 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xed0]
    bca6:	66 0f 6f 8d 20 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xee0]
    bcae:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bcb2:	0f 29 85 80 df ff ff 	movaps XMMWORD PTR [rbp-0x2080],xmm0
    bcb9:	66 0f 6f 85 50 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20b0]
    bcc1:	0f 29 85 00 f1 ff ff 	movaps XMMWORD PTR [rbp-0xf00],xmm0
    bcc8:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    bcd0:	0f 29 85 10 f1 ff ff 	movaps XMMWORD PTR [rbp-0xef0],xmm0
    bcd7:	66 0f 6f 85 10 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xef0]
    bcdf:	66 0f 6f 8d 00 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf00]
    bce7:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bceb:	0f 29 85 90 df ff ff 	movaps XMMWORD PTR [rbp-0x2070],xmm0
    bcf2:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    bcfa:	0f 29 85 e0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf20],xmm0
    bd01:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bd09:	0f 29 85 f0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf10],xmm0
    bd10:	66 0f 6f 8d e0 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf20]
    bd18:	66 0f 6f 85 f0 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf10]
    bd20:	66 0f fd c1          	paddw  xmm0,xmm1
    bd24:	0f 29 85 a0 df ff ff 	movaps XMMWORD PTR [rbp-0x2060],xmm0
    bd2b:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    bd33:	0f 29 85 c0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf40],xmm0
    bd3a:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bd42:	0f 29 85 d0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf30],xmm0
    bd49:	66 0f 6f 85 c0 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf40]
    bd51:	66 0f 6f 8d d0 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf30]
    bd59:	66 0f f9 c1          	psubw  xmm0,xmm1
    bd5d:	0f 29 85 b0 df ff ff 	movaps XMMWORD PTR [rbp-0x2050],xmm0
    bd64:	66 0f ef c0          	pxor   xmm0,xmm0
    bd68:	0f 29 85 a0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf60],xmm0
    bd6f:	66 0f 6f 85 a0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2060]
    bd77:	0f 29 85 b0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf50],xmm0
    bd7e:	66 0f 6f 8d b0 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf50]
    bd86:	66 0f 6f 85 a0 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf60]
    bd8e:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bd92:	0f 29 85 90 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf70],xmm0
    bd99:	c7 85 94 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x276c],0x4
    bda3:	66 0f 6f 8d 90 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf70]
    bdab:	66 0f 6e 85 94 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x276c]
    bdb3:	66 0f e2 c8          	psrad  xmm1,xmm0
    bdb7:	66 0f 6f c1          	movdqa xmm0,xmm1
    bdbb:	0f 29 85 c0 df ff ff 	movaps XMMWORD PTR [rbp-0x2040],xmm0
    bdc2:	66 0f ef c0          	pxor   xmm0,xmm0
    bdc6:	0f 29 85 70 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf90],xmm0
    bdcd:	66 0f 6f 85 a0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2060]
    bdd5:	0f 29 85 80 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf80],xmm0
    bddc:	66 0f 6f 8d 80 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf80]
    bde4:	66 0f 6f 85 70 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf90]
    bdec:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bdf0:	0f 29 85 60 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfa0],xmm0
    bdf7:	c7 85 90 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2770],0x4
    be01:	66 0f 6f 8d 60 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfa0]
    be09:	66 0f 6e 85 90 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2770]
    be11:	66 0f e2 c8          	psrad  xmm1,xmm0
    be15:	66 0f 6f c1          	movdqa xmm0,xmm1
    be19:	0f 29 85 d0 df ff ff 	movaps XMMWORD PTR [rbp-0x2030],xmm0
    be20:	66 0f ef c0          	pxor   xmm0,xmm0
    be24:	0f 29 85 40 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfc0],xmm0
    be2b:	66 0f 6f 85 b0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2050]
    be33:	0f 29 85 50 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfb0],xmm0
    be3a:	66 0f 6f 8d 50 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfb0]
    be42:	66 0f 6f 85 40 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xfc0]
    be4a:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    be4e:	0f 29 85 30 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfd0],xmm0
    be55:	c7 85 8c d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2774],0x4
    be5f:	66 0f 6f 8d 30 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfd0]
    be67:	66 0f 6e 85 8c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2774]
    be6f:	66 0f e2 c8          	psrad  xmm1,xmm0
    be73:	66 0f 6f c1          	movdqa xmm0,xmm1
    be77:	0f 29 85 e0 df ff ff 	movaps XMMWORD PTR [rbp-0x2020],xmm0
    be7e:	66 0f ef c0          	pxor   xmm0,xmm0
    be82:	0f 29 85 10 f0 ff ff 	movaps XMMWORD PTR [rbp-0xff0],xmm0
    be89:	66 0f 6f 85 b0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2050]
    be91:	0f 29 85 20 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfe0],xmm0
    be98:	66 0f 6f 8d 20 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfe0]
    bea0:	66 0f 6f 85 10 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xff0]
    bea8:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    beac:	0f 29 85 00 f0 ff ff 	movaps XMMWORD PTR [rbp-0x1000],xmm0
    beb3:	c7 85 88 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2778],0x4
    bebd:	66 0f 6f 8d 00 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1000]
    bec5:	66 0f 6e 85 88 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2778]
    becd:	66 0f e2 c8          	psrad  xmm1,xmm0
    bed1:	66 0f 6f c1          	movdqa xmm0,xmm1
    bed5:	0f 29 85 f0 df ff ff 	movaps XMMWORD PTR [rbp-0x2010],xmm0
    bedc:	66 0f 6f 85 c0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2040]
    bee4:	0f 29 85 e0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1020],xmm0
    beeb:	66 0f 6f 85 80 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2080]
    bef3:	0f 29 85 f0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1010],xmm0
    befa:	66 0f 6f 8d e0 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1020]
    bf02:	66 0f 6f 85 f0 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1010]
    bf0a:	66 0f fe c1          	paddd  xmm0,xmm1
    bf0e:	0f 29 85 00 e0 ff ff 	movaps XMMWORD PTR [rbp-0x2000],xmm0
    bf15:	66 0f 6f 85 d0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2030]
    bf1d:	0f 29 85 c0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1040],xmm0
    bf24:	66 0f 6f 85 90 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2070]
    bf2c:	0f 29 85 d0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1030],xmm0
    bf33:	66 0f 6f 8d c0 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1040]
    bf3b:	66 0f 6f 85 d0 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1030]
    bf43:	66 0f fe c1          	paddd  xmm0,xmm1
    bf47:	0f 29 85 10 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1ff0],xmm0
    bf4e:	66 0f 6f 85 c0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2040]
    bf56:	0f 29 85 a0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1060],xmm0
    bf5d:	66 0f 6f 85 80 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2080]
    bf65:	0f 29 85 b0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1050],xmm0
    bf6c:	66 0f 6f 85 a0 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1060]
    bf74:	66 0f 6f 8d b0 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1050]
    bf7c:	66 0f fa c1          	psubd  xmm0,xmm1
    bf80:	0f 29 85 20 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fe0],xmm0
    bf87:	66 0f 6f 85 d0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2030]
    bf8f:	0f 29 85 80 ef ff ff 	movaps XMMWORD PTR [rbp-0x1080],xmm0
    bf96:	66 0f 6f 85 90 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2070]
    bf9e:	0f 29 85 90 ef ff ff 	movaps XMMWORD PTR [rbp-0x1070],xmm0
    bfa5:	66 0f 6f 85 80 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1080]
    bfad:	66 0f 6f 8d 90 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1070]
    bfb5:	66 0f fa c1          	psubd  xmm0,xmm1
    bfb9:	0f 29 85 30 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fd0],xmm0
    bfc0:	66 0f 6f 85 e0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2020]
    bfc8:	0f 29 85 60 ef ff ff 	movaps XMMWORD PTR [rbp-0x10a0],xmm0
    bfcf:	66 0f 6f 85 60 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20a0]
    bfd7:	0f 29 85 70 ef ff ff 	movaps XMMWORD PTR [rbp-0x1090],xmm0
    bfde:	66 0f 6f 8d 60 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10a0]
    bfe6:	66 0f 6f 85 70 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1090]
    bfee:	66 0f fe c1          	paddd  xmm0,xmm1
    bff2:	0f 29 85 40 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fc0],xmm0
    bff9:	66 0f 6f 85 f0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2010]
    c001:	0f 29 85 40 ef ff ff 	movaps XMMWORD PTR [rbp-0x10c0],xmm0
    c008:	66 0f 6f 85 70 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2090]
    c010:	0f 29 85 50 ef ff ff 	movaps XMMWORD PTR [rbp-0x10b0],xmm0
    c017:	66 0f 6f 8d 40 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10c0]
    c01f:	66 0f 6f 85 50 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x10b0]
    c027:	66 0f fe c1          	paddd  xmm0,xmm1
    c02b:	0f 29 85 50 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fb0],xmm0
    c032:	66 0f 6f 85 e0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2020]
    c03a:	0f 29 85 20 ef ff ff 	movaps XMMWORD PTR [rbp-0x10e0],xmm0
    c041:	66 0f 6f 85 60 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20a0]
    c049:	0f 29 85 30 ef ff ff 	movaps XMMWORD PTR [rbp-0x10d0],xmm0
    c050:	66 0f 6f 85 20 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x10e0]
    c058:	66 0f 6f 8d 30 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10d0]
    c060:	66 0f fa c1          	psubd  xmm0,xmm1
    c064:	0f 29 85 60 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fa0],xmm0
    c06b:	66 0f 6f 85 f0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2010]
    c073:	0f 29 85 00 ef ff ff 	movaps XMMWORD PTR [rbp-0x1100],xmm0
    c07a:	66 0f 6f 85 70 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2090]
    c082:	0f 29 85 10 ef ff ff 	movaps XMMWORD PTR [rbp-0x10f0],xmm0
    c089:	66 0f 6f 85 00 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1100]
    c091:	66 0f 6f 8d 10 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10f0]
    c099:	66 0f fa c1          	psubd  xmm0,xmm1
    c09d:	0f 29 85 70 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f90],xmm0
    c0a4:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    c0ac:	0f 29 85 e0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1120],xmm0
    c0b3:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    c0bb:	0f 29 85 f0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1110],xmm0
    c0c2:	66 0f 6f 8d f0 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1110]
    c0ca:	66 0f 6f 85 e0 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1120]
    c0d2:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    c0d6:	0f 29 85 80 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f80],xmm0
    c0dd:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    c0e5:	0f 29 85 c0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1140],xmm0
    c0ec:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    c0f4:	0f 29 85 d0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1130],xmm0
    c0fb:	66 0f 6f 8d d0 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1130]
    c103:	66 0f 6f 85 c0 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1140]
    c10b:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    c10f:	0f 29 85 90 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f70],xmm0
    c116:	66 0f 6f 85 80 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f80]
    c11e:	0f 29 85 a0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1160],xmm0
    c125:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    c12d:	0f 29 85 b0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1150],xmm0
    c134:	66 0f 6f 85 b0 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1150]
    c13c:	66 0f 6f 8d a0 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1160]
    c144:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c148:	0f 29 85 a0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f60],xmm0
    c14f:	66 0f 6f 85 90 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f70]
    c157:	0f 29 85 80 ee ff ff 	movaps XMMWORD PTR [rbp-0x1180],xmm0
    c15e:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    c166:	0f 29 85 90 ee ff ff 	movaps XMMWORD PTR [rbp-0x1170],xmm0
    c16d:	66 0f 6f 85 90 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1170]
    c175:	66 0f 6f 8d 80 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1180]
    c17d:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c181:	0f 29 85 b0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f50],xmm0
    c188:	66 0f 6f 85 80 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f80]
    c190:	0f 29 85 60 ee ff ff 	movaps XMMWORD PTR [rbp-0x11a0],xmm0
    c197:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    c19f:	0f 29 85 70 ee ff ff 	movaps XMMWORD PTR [rbp-0x1190],xmm0
    c1a6:	66 0f 6f 85 70 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1190]
    c1ae:	66 0f 6f 8d 60 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11a0]
    c1b6:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c1ba:	0f 29 85 c0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f40],xmm0
    c1c1:	66 0f 6f 85 90 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f70]
    c1c9:	0f 29 85 40 ee ff ff 	movaps XMMWORD PTR [rbp-0x11c0],xmm0
    c1d0:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    c1d8:	0f 29 85 50 ee ff ff 	movaps XMMWORD PTR [rbp-0x11b0],xmm0
    c1df:	66 0f 6f 85 50 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x11b0]
    c1e7:	66 0f 6f 8d 40 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11c0]
    c1ef:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c1f3:	0f 29 85 d0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f30],xmm0
    c1fa:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    c202:	0f 29 85 20 ee ff ff 	movaps XMMWORD PTR [rbp-0x11e0],xmm0
    c209:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    c211:	0f 29 85 30 ee ff ff 	movaps XMMWORD PTR [rbp-0x11d0],xmm0
    c218:	66 0f 6f 8d 30 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11d0]
    c220:	66 0f 6f 85 20 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x11e0]
    c228:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    c22c:	0f 29 85 e0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f20],xmm0
    c233:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    c23b:	0f 29 85 00 ee ff ff 	movaps XMMWORD PTR [rbp-0x1200],xmm0
    c242:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    c24a:	0f 29 85 10 ee ff ff 	movaps XMMWORD PTR [rbp-0x11f0],xmm0
    c251:	66 0f 6f 8d 10 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11f0]
    c259:	66 0f 6f 85 00 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1200]
    c261:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    c265:	0f 29 85 f0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f10],xmm0
    c26c:	66 0f 6f 85 e0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f20]
    c274:	0f 29 85 e0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1220],xmm0
    c27b:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    c283:	0f 29 85 f0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1210],xmm0
    c28a:	66 0f 6f 85 f0 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1210]
    c292:	66 0f 6f 8d e0 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1220]
    c29a:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c29e:	0f 29 85 00 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1f00],xmm0
    c2a5:	66 0f 6f 85 f0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f10]
    c2ad:	0f 29 85 c0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1240],xmm0
    c2b4:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    c2bc:	0f 29 85 d0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1230],xmm0
    c2c3:	66 0f 6f 85 d0 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1230]
    c2cb:	66 0f 6f 8d c0 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1240]
    c2d3:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c2d7:	0f 29 85 10 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ef0],xmm0
    c2de:	66 0f 6f 85 e0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f20]
    c2e6:	0f 29 85 a0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1260],xmm0
    c2ed:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    c2f5:	0f 29 85 b0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1250],xmm0
    c2fc:	66 0f 6f 85 b0 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1250]
    c304:	66 0f 6f 8d a0 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1260]
    c30c:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c310:	0f 29 85 20 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ee0],xmm0
    c317:	66 0f 6f 85 f0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f10]
    c31f:	0f 29 85 80 ed ff ff 	movaps XMMWORD PTR [rbp-0x1280],xmm0
    c326:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    c32e:	0f 29 85 90 ed ff ff 	movaps XMMWORD PTR [rbp-0x1270],xmm0
    c335:	66 0f 6f 85 90 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1270]
    c33d:	66 0f 6f 8d 80 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1280]
    c345:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c349:	0f 29 85 30 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ed0],xmm0
    c350:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    c358:	0f 29 85 60 ed ff ff 	movaps XMMWORD PTR [rbp-0x12a0],xmm0
    c35f:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    c367:	0f 29 85 70 ed ff ff 	movaps XMMWORD PTR [rbp-0x1290],xmm0
    c36e:	66 0f 6f 8d 60 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12a0]
    c376:	66 0f 6f 85 70 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1290]
    c37e:	66 0f fd c1          	paddw  xmm0,xmm1
    c382:	0f 29 85 40 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ec0],xmm0
    c389:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    c391:	0f 29 85 40 ed ff ff 	movaps XMMWORD PTR [rbp-0x12c0],xmm0
    c398:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    c3a0:	0f 29 85 50 ed ff ff 	movaps XMMWORD PTR [rbp-0x12b0],xmm0
    c3a7:	66 0f 6f 8d 40 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12c0]
    c3af:	66 0f 6f 85 50 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x12b0]
    c3b7:	66 0f fd c1          	paddw  xmm0,xmm1
    c3bb:	0f 29 85 50 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1eb0],xmm0
    c3c2:	66 0f 6f 85 40 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ec0]
    c3ca:	0f 29 85 20 ed ff ff 	movaps XMMWORD PTR [rbp-0x12e0],xmm0
    c3d1:	66 0f 6f 85 50 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1eb0]
    c3d9:	0f 29 85 30 ed ff ff 	movaps XMMWORD PTR [rbp-0x12d0],xmm0
    c3e0:	66 0f 6f 8d 30 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12d0]
    c3e8:	66 0f 6f 85 20 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x12e0]
    c3f0:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    c3f4:	0f 29 85 60 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ea0],xmm0
    c3fb:	66 0f 6f 85 40 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ec0]
    c403:	0f 29 85 00 ed ff ff 	movaps XMMWORD PTR [rbp-0x1300],xmm0
    c40a:	66 0f 6f 85 50 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1eb0]
    c412:	0f 29 85 10 ed ff ff 	movaps XMMWORD PTR [rbp-0x12f0],xmm0
    c419:	66 0f 6f 8d 10 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12f0]
    c421:	66 0f 6f 85 00 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1300]
    c429:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    c42d:	0f 29 85 70 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e90],xmm0
    c434:	66 0f 6f 85 60 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ea0]
    c43c:	0f 29 85 e0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1320],xmm0
    c443:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    c44b:	0f 29 85 f0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1310],xmm0
    c452:	66 0f 6f 85 f0 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1310]
    c45a:	66 0f 6f 8d e0 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1320]
    c462:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c466:	0f 29 85 80 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e80],xmm0
    c46d:	66 0f 6f 85 70 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e90]
    c475:	0f 29 85 c0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1340],xmm0
    c47c:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    c484:	0f 29 85 d0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1330],xmm0
    c48b:	66 0f 6f 85 d0 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1330]
    c493:	66 0f 6f 8d c0 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1340]
    c49b:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c49f:	0f 29 85 90 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e70],xmm0
    c4a6:	66 0f 6f 85 60 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ea0]
    c4ae:	0f 29 85 a0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1360],xmm0
    c4b5:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    c4bd:	0f 29 85 b0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1350],xmm0
    c4c4:	66 0f 6f 85 b0 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1350]
    c4cc:	66 0f 6f 8d a0 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1360]
    c4d4:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c4d8:	0f 29 85 a0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e60],xmm0
    c4df:	66 0f 6f 85 70 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e90]
    c4e7:	0f 29 85 80 ec ff ff 	movaps XMMWORD PTR [rbp-0x1380],xmm0
    c4ee:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    c4f6:	0f 29 85 90 ec ff ff 	movaps XMMWORD PTR [rbp-0x1370],xmm0
    c4fd:	66 0f 6f 85 90 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1370]
    c505:	66 0f 6f 8d 80 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1380]
    c50d:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c511:	0f 29 85 b0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e50],xmm0
    c518:	66 0f 6f 85 a0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f60]
    c520:	0f 29 85 60 ec ff ff 	movaps XMMWORD PTR [rbp-0x13a0],xmm0
    c527:	66 0f 6f 85 80 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e80]
    c52f:	0f 29 85 70 ec ff ff 	movaps XMMWORD PTR [rbp-0x1390],xmm0
    c536:	66 0f 6f 8d 60 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x13a0]
    c53e:	66 0f 6f 85 70 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1390]
    c546:	66 0f fe c1          	paddd  xmm0,xmm1
    c54a:	0f 29 85 c0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e40],xmm0
    c551:	66 0f 6f 85 b0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f50]
    c559:	0f 29 85 40 ec ff ff 	movaps XMMWORD PTR [rbp-0x13c0],xmm0
    c560:	66 0f 6f 85 90 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e70]
    c568:	0f 29 85 50 ec ff ff 	movaps XMMWORD PTR [rbp-0x13b0],xmm0
    c56f:	66 0f 6f 8d 40 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x13c0]
    c577:	66 0f 6f 85 50 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x13b0]
    c57f:	66 0f fe c1          	paddd  xmm0,xmm1
    c583:	0f 29 85 d0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e30],xmm0
    c58a:	66 0f 6f 85 00 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f00]
    c592:	0f 29 85 20 ec ff ff 	movaps XMMWORD PTR [rbp-0x13e0],xmm0
    c599:	66 0f 6f 85 a0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e60]
    c5a1:	0f 29 85 30 ec ff ff 	movaps XMMWORD PTR [rbp-0x13d0],xmm0
    c5a8:	66 0f 6f 8d 20 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x13e0]
    c5b0:	66 0f 6f 85 30 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x13d0]
    c5b8:	66 0f fe c1          	paddd  xmm0,xmm1
    c5bc:	0f 29 85 e0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e20],xmm0
    c5c3:	66 0f 6f 85 10 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ef0]
    c5cb:	0f 29 85 00 ec ff ff 	movaps XMMWORD PTR [rbp-0x1400],xmm0
    c5d2:	66 0f 6f 85 b0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e50]
    c5da:	0f 29 85 10 ec ff ff 	movaps XMMWORD PTR [rbp-0x13f0],xmm0
    c5e1:	66 0f 6f 8d 00 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1400]
    c5e9:	66 0f 6f 85 10 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x13f0]
    c5f1:	66 0f fe c1          	paddd  xmm0,xmm1
    c5f5:	0f 29 85 f0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e10],xmm0
    c5fc:	66 0f 6f 85 c0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f40]
    c604:	0f 29 85 e0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1420],xmm0
    c60b:	66 0f 6f 85 a0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e60]
    c613:	0f 29 85 f0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1410],xmm0
    c61a:	66 0f 6f 8d e0 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1420]
    c622:	66 0f 6f 85 f0 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1410]
    c62a:	66 0f fe c1          	paddd  xmm0,xmm1
    c62e:	0f 29 85 00 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1e00],xmm0
    c635:	66 0f 6f 85 d0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f30]
    c63d:	0f 29 85 c0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1440],xmm0
    c644:	66 0f 6f 85 b0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e50]
    c64c:	0f 29 85 d0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1430],xmm0
    c653:	66 0f 6f 8d c0 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1440]
    c65b:	66 0f 6f 85 d0 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1430]
    c663:	66 0f fe c1          	paddd  xmm0,xmm1
    c667:	0f 29 85 10 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1df0],xmm0
    c66e:	66 0f 6f 85 20 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ee0]
    c676:	0f 29 85 a0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1460],xmm0
    c67d:	66 0f 6f 85 80 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e80]
    c685:	0f 29 85 b0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1450],xmm0
    c68c:	66 0f 6f 8d a0 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1460]
    c694:	66 0f 6f 85 b0 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1450]
    c69c:	66 0f fe c1          	paddd  xmm0,xmm1
    c6a0:	0f 29 85 20 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1de0],xmm0
    c6a7:	66 0f 6f 85 30 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ed0]
    c6af:	0f 29 85 80 eb ff ff 	movaps XMMWORD PTR [rbp-0x1480],xmm0
    c6b6:	66 0f 6f 85 90 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e70]
    c6be:	0f 29 85 90 eb ff ff 	movaps XMMWORD PTR [rbp-0x1470],xmm0
    c6c5:	66 0f 6f 8d 80 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1480]
    c6cd:	66 0f 6f 85 90 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1470]
    c6d5:	66 0f fe c1          	paddd  xmm0,xmm1
    c6d9:	0f 29 85 30 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1dd0],xmm0
    c6e0:	66 0f 6f 85 00 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2000]
    c6e8:	0f 29 85 60 eb ff ff 	movaps XMMWORD PTR [rbp-0x14a0],xmm0
    c6ef:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c6f7:	0f 29 85 70 eb ff ff 	movaps XMMWORD PTR [rbp-0x1490],xmm0
    c6fe:	66 0f 6f 8d 60 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x14a0]
    c706:	66 0f 6f 85 70 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1490]
    c70e:	66 0f fe c1          	paddd  xmm0,xmm1
    c712:	0f 29 85 40 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1dc0],xmm0
    c719:	66 0f 6f 85 10 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ff0]
    c721:	0f 29 85 40 eb ff ff 	movaps XMMWORD PTR [rbp-0x14c0],xmm0
    c728:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c730:	0f 29 85 50 eb ff ff 	movaps XMMWORD PTR [rbp-0x14b0],xmm0
    c737:	66 0f 6f 8d 40 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x14c0]
    c73f:	66 0f 6f 85 50 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x14b0]
    c747:	66 0f fe c1          	paddd  xmm0,xmm1
    c74b:	0f 29 85 50 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1db0],xmm0
    c752:	66 0f 6f 85 40 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dc0]
    c75a:	0f 29 85 20 eb ff ff 	movaps XMMWORD PTR [rbp-0x14e0],xmm0
    c761:	66 0f 6f 85 20 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1de0]
    c769:	0f 29 85 30 eb ff ff 	movaps XMMWORD PTR [rbp-0x14d0],xmm0
    c770:	66 0f 6f 8d 20 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x14e0]
    c778:	66 0f 6f 85 30 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x14d0]
    c780:	66 0f fe c1          	paddd  xmm0,xmm1
    c784:	0f 29 85 60 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1da0],xmm0
    c78b:	66 0f 6f 85 50 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1db0]
    c793:	0f 29 85 00 eb ff ff 	movaps XMMWORD PTR [rbp-0x1500],xmm0
    c79a:	66 0f 6f 85 30 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dd0]
    c7a2:	0f 29 85 10 eb ff ff 	movaps XMMWORD PTR [rbp-0x14f0],xmm0
    c7a9:	66 0f 6f 8d 00 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1500]
    c7b1:	66 0f 6f 85 10 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x14f0]
    c7b9:	66 0f fe c1          	paddd  xmm0,xmm1
    c7bd:	0f 29 85 70 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d90],xmm0
    c7c4:	66 0f 6f 85 40 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dc0]
    c7cc:	0f 29 85 e0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1520],xmm0
    c7d3:	66 0f 6f 85 20 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1de0]
    c7db:	0f 29 85 f0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1510],xmm0
    c7e2:	66 0f 6f 85 e0 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1520]
    c7ea:	66 0f 6f 8d f0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1510]
    c7f2:	66 0f fa c1          	psubd  xmm0,xmm1
    c7f6:	0f 29 85 80 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d80],xmm0
    c7fd:	66 0f 6f 85 50 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1db0]
    c805:	0f 29 85 c0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1540],xmm0
    c80c:	66 0f 6f 85 30 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dd0]
    c814:	0f 29 85 d0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1530],xmm0
    c81b:	66 0f 6f 85 c0 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1540]
    c823:	66 0f 6f 8d d0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1530]
    c82b:	66 0f fa c1          	psubd  xmm0,xmm1
    c82f:	0f 29 85 90 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d70],xmm0
    c836:	66 0f 6f 85 70 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d90]
    c83e:	0f 29 85 b0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1550],xmm0
    c845:	c7 85 84 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x277c],0x11
    c84f:	66 0f 6f 8d b0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1550]
    c857:	66 0f 6e 85 84 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x277c]
    c85f:	66 0f e2 c8          	psrad  xmm1,xmm0
    c863:	66 0f 6f d1          	movdqa xmm2,xmm1
    c867:	66 0f 6f 85 60 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1da0]
    c86f:	0f 29 85 a0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1560],xmm0
    c876:	c7 85 80 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2780],0x11
    c880:	66 0f 6f 8d a0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1560]
    c888:	66 0f 6e 85 80 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2780]
    c890:	66 0f e2 c8          	psrad  xmm1,xmm0
    c894:	66 0f 6f c1          	movdqa xmm0,xmm1
    c898:	0f 29 85 80 ea ff ff 	movaps XMMWORD PTR [rbp-0x1580],xmm0
    c89f:	0f 29 95 90 ea ff ff 	movaps XMMWORD PTR [rbp-0x1570],xmm2
    c8a6:	66 0f 6f 8d 90 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1570]
    c8ae:	66 0f 6f 85 80 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1580]
    c8b6:	66 0f 6b c1          	packssdw xmm0,xmm1
    c8ba:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    c8c1:	66 0f 6f 85 90 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d70]
    c8c9:	0f 29 85 70 ea ff ff 	movaps XMMWORD PTR [rbp-0x1590],xmm0
    c8d0:	c7 85 7c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2784],0x11
    c8da:	66 0f 6f 8d 70 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1590]
    c8e2:	66 0f 6e 85 7c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2784]
    c8ea:	66 0f e2 c8          	psrad  xmm1,xmm0
    c8ee:	66 0f 6f d1          	movdqa xmm2,xmm1
    c8f2:	66 0f 6f 85 80 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d80]
    c8fa:	0f 29 85 60 ea ff ff 	movaps XMMWORD PTR [rbp-0x15a0],xmm0
    c901:	c7 85 78 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2788],0x11
    c90b:	66 0f 6f 8d 60 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x15a0]
    c913:	66 0f 6e 85 78 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2788]
    c91b:	66 0f e2 c8          	psrad  xmm1,xmm0
    c91f:	66 0f 6f c1          	movdqa xmm0,xmm1
    c923:	0f 29 85 40 ea ff ff 	movaps XMMWORD PTR [rbp-0x15c0],xmm0
    c92a:	0f 29 95 50 ea ff ff 	movaps XMMWORD PTR [rbp-0x15b0],xmm2
    c931:	66 0f 6f 8d 50 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x15b0]
    c939:	66 0f 6f 85 40 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x15c0]
    c941:	66 0f 6b c1          	packssdw xmm0,xmm1
    c945:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    c94c:	66 0f 6f 85 40 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fc0]
    c954:	0f 29 85 20 ea ff ff 	movaps XMMWORD PTR [rbp-0x15e0],xmm0
    c95b:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c963:	0f 29 85 30 ea ff ff 	movaps XMMWORD PTR [rbp-0x15d0],xmm0
    c96a:	66 0f 6f 8d 20 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x15e0]
    c972:	66 0f 6f 85 30 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x15d0]
    c97a:	66 0f fe c1          	paddd  xmm0,xmm1
    c97e:	0f 29 85 a0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d60],xmm0
    c985:	66 0f 6f 85 50 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fb0]
    c98d:	0f 29 85 00 ea ff ff 	movaps XMMWORD PTR [rbp-0x1600],xmm0
    c994:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c99c:	0f 29 85 10 ea ff ff 	movaps XMMWORD PTR [rbp-0x15f0],xmm0
    c9a3:	66 0f 6f 8d 00 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1600]
    c9ab:	66 0f 6f 85 10 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x15f0]
    c9b3:	66 0f fe c1          	paddd  xmm0,xmm1
    c9b7:	0f 29 85 b0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d50],xmm0
    c9be:	66 0f 6f 85 a0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d60]
    c9c6:	0f 29 85 e0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1620],xmm0
    c9cd:	66 0f 6f 85 00 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e00]
    c9d5:	0f 29 85 f0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1610],xmm0
    c9dc:	66 0f 6f 8d e0 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1620]
    c9e4:	66 0f 6f 85 f0 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1610]
    c9ec:	66 0f fe c1          	paddd  xmm0,xmm1
    c9f0:	0f 29 85 c0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d40],xmm0
    c9f7:	66 0f 6f 85 b0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d50]
    c9ff:	0f 29 85 c0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1640],xmm0
    ca06:	66 0f 6f 85 10 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1df0]
    ca0e:	0f 29 85 d0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1630],xmm0
    ca15:	66 0f 6f 8d c0 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1640]
    ca1d:	66 0f 6f 85 d0 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1630]
    ca25:	66 0f fe c1          	paddd  xmm0,xmm1
    ca29:	0f 29 85 d0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d30],xmm0
    ca30:	66 0f 6f 85 a0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d60]
    ca38:	0f 29 85 a0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1660],xmm0
    ca3f:	66 0f 6f 85 00 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e00]
    ca47:	0f 29 85 b0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1650],xmm0
    ca4e:	66 0f 6f 85 a0 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1660]
    ca56:	66 0f 6f 8d b0 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1650]
    ca5e:	66 0f fa c1          	psubd  xmm0,xmm1
    ca62:	0f 29 85 e0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d20],xmm0
    ca69:	66 0f 6f 85 b0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d50]
    ca71:	0f 29 85 80 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1680],xmm0
    ca78:	66 0f 6f 85 10 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1df0]
    ca80:	0f 29 85 90 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1670],xmm0
    ca87:	66 0f 6f 85 80 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1680]
    ca8f:	66 0f 6f 8d 90 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1670]
    ca97:	66 0f fa c1          	psubd  xmm0,xmm1
    ca9b:	0f 29 85 f0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d10],xmm0
    caa2:	66 0f 6f 85 d0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d30]
    caaa:	0f 29 85 70 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1690],xmm0
    cab1:	c7 85 74 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x278c],0x11
    cabb:	66 0f 6f 8d 70 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1690]
    cac3:	66 0f 6e 85 74 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x278c]
    cacb:	66 0f e2 c8          	psrad  xmm1,xmm0
    cacf:	66 0f 6f d1          	movdqa xmm2,xmm1
    cad3:	66 0f 6f 85 c0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d40]
    cadb:	0f 29 85 60 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16a0],xmm0
    cae2:	c7 85 70 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2790],0x11
    caec:	66 0f 6f 8d 60 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16a0]
    caf4:	66 0f 6e 85 70 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2790]
    cafc:	66 0f e2 c8          	psrad  xmm1,xmm0
    cb00:	66 0f 6f c1          	movdqa xmm0,xmm1
    cb04:	0f 29 85 40 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16c0],xmm0
    cb0b:	0f 29 95 50 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16b0],xmm2
    cb12:	66 0f 6f 8d 50 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16b0]
    cb1a:	66 0f 6f 85 40 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x16c0]
    cb22:	66 0f 6b c1          	packssdw xmm0,xmm1
    cb26:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    cb2d:	66 0f 6f 85 f0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d10]
    cb35:	0f 29 85 30 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16d0],xmm0
    cb3c:	c7 85 6c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2794],0x11
    cb46:	66 0f 6f 8d 30 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16d0]
    cb4e:	66 0f 6e 85 6c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2794]
    cb56:	66 0f e2 c8          	psrad  xmm1,xmm0
    cb5a:	66 0f 6f d1          	movdqa xmm2,xmm1
    cb5e:	66 0f 6f 85 e0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d20]
    cb66:	0f 29 85 20 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16e0],xmm0
    cb6d:	c7 85 68 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2798],0x11
    cb77:	66 0f 6f 8d 20 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16e0]
    cb7f:	66 0f 6e 85 68 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2798]
    cb87:	66 0f e2 c8          	psrad  xmm1,xmm0
    cb8b:	66 0f 6f c1          	movdqa xmm0,xmm1
    cb8f:	0f 29 85 00 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1700],xmm0
    cb96:	0f 29 95 10 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16f0],xmm2
    cb9d:	66 0f 6f 8d 10 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16f0]
    cba5:	66 0f 6f 85 00 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1700]
    cbad:	66 0f 6b c1          	packssdw xmm0,xmm1
    cbb1:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    cbb8:	66 0f 6f 85 60 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fa0]
    cbc0:	0f 29 85 e0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1720],xmm0
    cbc7:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    cbcf:	0f 29 85 f0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1710],xmm0
    cbd6:	66 0f 6f 8d e0 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1720]
    cbde:	66 0f 6f 85 f0 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1710]
    cbe6:	66 0f fe c1          	paddd  xmm0,xmm1
    cbea:	0f 29 85 00 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1d00],xmm0
    cbf1:	66 0f 6f 85 70 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f90]
    cbf9:	0f 29 85 c0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1740],xmm0
    cc00:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    cc08:	0f 29 85 d0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1730],xmm0
    cc0f:	66 0f 6f 8d c0 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1740]
    cc17:	66 0f 6f 85 d0 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1730]
    cc1f:	66 0f fe c1          	paddd  xmm0,xmm1
    cc23:	0f 29 85 10 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cf0],xmm0
    cc2a:	66 0f 6f 85 00 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d00]
    cc32:	0f 29 85 a0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1760],xmm0
    cc39:	66 0f 6f 85 e0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e20]
    cc41:	0f 29 85 b0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1750],xmm0
    cc48:	66 0f 6f 8d a0 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1760]
    cc50:	66 0f 6f 85 b0 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1750]
    cc58:	66 0f fe c1          	paddd  xmm0,xmm1
    cc5c:	0f 29 85 20 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1ce0],xmm0
    cc63:	66 0f 6f 85 10 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cf0]
    cc6b:	0f 29 85 80 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1780],xmm0
    cc72:	66 0f 6f 85 f0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e10]
    cc7a:	0f 29 85 90 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1770],xmm0
    cc81:	66 0f 6f 8d 80 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1780]
    cc89:	66 0f 6f 85 90 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1770]
    cc91:	66 0f fe c1          	paddd  xmm0,xmm1
    cc95:	0f 29 85 30 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cd0],xmm0
    cc9c:	66 0f 6f 85 00 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d00]
    cca4:	0f 29 85 60 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17a0],xmm0
    ccab:	66 0f 6f 85 e0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e20]
    ccb3:	0f 29 85 70 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1790],xmm0
    ccba:	66 0f 6f 85 60 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x17a0]
    ccc2:	66 0f 6f 8d 70 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1790]
    ccca:	66 0f fa c1          	psubd  xmm0,xmm1
    ccce:	0f 29 85 40 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cc0],xmm0
    ccd5:	66 0f 6f 85 10 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cf0]
    ccdd:	0f 29 85 40 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17c0],xmm0
    cce4:	66 0f 6f 85 f0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e10]
    ccec:	0f 29 85 50 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17b0],xmm0
    ccf3:	66 0f 6f 85 40 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x17c0]
    ccfb:	66 0f 6f 8d 50 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17b0]
    cd03:	66 0f fa c1          	psubd  xmm0,xmm1
    cd07:	0f 29 85 50 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cb0],xmm0
    cd0e:	66 0f 6f 85 30 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cd0]
    cd16:	0f 29 85 30 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17d0],xmm0
    cd1d:	c7 85 64 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x279c],0x11
    cd27:	66 0f 6f 8d 30 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17d0]
    cd2f:	66 0f 6e 85 64 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x279c]
    cd37:	66 0f e2 c8          	psrad  xmm1,xmm0
    cd3b:	66 0f 6f d1          	movdqa xmm2,xmm1
    cd3f:	66 0f 6f 85 20 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ce0]
    cd47:	0f 29 85 20 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17e0],xmm0
    cd4e:	c7 85 60 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27a0],0x11
    cd58:	66 0f 6f 8d 20 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17e0]
    cd60:	66 0f 6e 85 60 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27a0]
    cd68:	66 0f e2 c8          	psrad  xmm1,xmm0
    cd6c:	66 0f 6f c1          	movdqa xmm0,xmm1
    cd70:	0f 29 85 00 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1800],xmm0
    cd77:	0f 29 95 10 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17f0],xmm2
    cd7e:	66 0f 6f 8d 10 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17f0]
    cd86:	66 0f 6f 85 00 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1800]
    cd8e:	66 0f 6b c1          	packssdw xmm0,xmm1
    cd92:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    cd99:	66 0f 6f 85 50 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cb0]
    cda1:	0f 29 85 f0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1810],xmm0
    cda8:	c7 85 5c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27a4],0x11
    cdb2:	66 0f 6f 8d f0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1810]
    cdba:	66 0f 6e 85 5c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27a4]
    cdc2:	66 0f e2 c8          	psrad  xmm1,xmm0
    cdc6:	66 0f 6f d1          	movdqa xmm2,xmm1
    cdca:	66 0f 6f 85 40 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cc0]
    cdd2:	0f 29 85 e0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1820],xmm0
    cdd9:	c7 85 58 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27a8],0x11
    cde3:	66 0f 6f 8d e0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1820]
    cdeb:	66 0f 6e 85 58 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27a8]
    cdf3:	66 0f e2 c8          	psrad  xmm1,xmm0
    cdf7:	66 0f 6f c1          	movdqa xmm0,xmm1
    cdfb:	0f 29 85 c0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1840],xmm0
    ce02:	0f 29 95 d0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1830],xmm2
    ce09:	66 0f 6f 8d d0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1830]
    ce11:	66 0f 6f 85 c0 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1840]
    ce19:	66 0f 6b c1          	packssdw xmm0,xmm1
    ce1d:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    ce24:	66 0f 6f 85 20 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fe0]
    ce2c:	0f 29 85 a0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1860],xmm0
    ce33:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    ce3b:	0f 29 85 b0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1850],xmm0
    ce42:	66 0f 6f 8d a0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1860]
    ce4a:	66 0f 6f 85 b0 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1850]
    ce52:	66 0f fe c1          	paddd  xmm0,xmm1
    ce56:	0f 29 85 60 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1ca0],xmm0
    ce5d:	66 0f 6f 85 30 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fd0]
    ce65:	0f 29 85 80 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1880],xmm0
    ce6c:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    ce74:	0f 29 85 90 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1870],xmm0
    ce7b:	66 0f 6f 8d 80 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1880]
    ce83:	66 0f 6f 85 90 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1870]
    ce8b:	66 0f fe c1          	paddd  xmm0,xmm1
    ce8f:	0f 29 85 70 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c90],xmm0
    ce96:	66 0f 6f 85 60 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ca0]
    ce9e:	0f 29 85 60 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18a0],xmm0
    cea5:	66 0f 6f 85 c0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e40]
    cead:	0f 29 85 70 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1890],xmm0
    ceb4:	66 0f 6f 8d 60 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18a0]
    cebc:	66 0f 6f 85 70 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1890]
    cec4:	66 0f fe c1          	paddd  xmm0,xmm1
    cec8:	0f 29 85 80 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c80],xmm0
    cecf:	66 0f 6f 85 70 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c90]
    ced7:	0f 29 85 40 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18c0],xmm0
    cede:	66 0f 6f 85 d0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e30]
    cee6:	0f 29 85 50 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18b0],xmm0
    ceed:	66 0f 6f 8d 40 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18c0]
    cef5:	66 0f 6f 85 50 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x18b0]
    cefd:	66 0f fe c1          	paddd  xmm0,xmm1
    cf01:	0f 29 85 90 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c70],xmm0
    cf08:	66 0f 6f 85 60 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ca0]
    cf10:	0f 29 85 20 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18e0],xmm0
    cf17:	66 0f 6f 85 c0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e40]
    cf1f:	0f 29 85 30 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18d0],xmm0
    cf26:	66 0f 6f 85 20 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x18e0]
    cf2e:	66 0f 6f 8d 30 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18d0]
    cf36:	66 0f fa c1          	psubd  xmm0,xmm1
    cf3a:	0f 29 85 a0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c60],xmm0
    cf41:	66 0f 6f 85 70 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c90]
    cf49:	0f 29 85 00 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1900],xmm0
    cf50:	66 0f 6f 85 d0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e30]
    cf58:	0f 29 85 10 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18f0],xmm0
    cf5f:	66 0f 6f 85 00 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1900]
    cf67:	66 0f 6f 8d 10 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18f0]
    cf6f:	66 0f fa c1          	psubd  xmm0,xmm1
    cf73:	0f 29 85 b0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c50],xmm0
    cf7a:	66 0f 6f 85 90 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c70]
    cf82:	0f 29 85 f0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1910],xmm0
    cf89:	c7 85 54 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27ac],0x11
    cf93:	66 0f 6f 8d f0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1910]
    cf9b:	66 0f 6e 85 54 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27ac]
    cfa3:	66 0f e2 c8          	psrad  xmm1,xmm0
    cfa7:	66 0f 6f d1          	movdqa xmm2,xmm1
    cfab:	66 0f 6f 85 80 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c80]
    cfb3:	0f 29 85 e0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1920],xmm0
    cfba:	c7 85 50 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27b0],0x11
    cfc4:	66 0f 6f 8d e0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1920]
    cfcc:	66 0f 6e 85 50 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27b0]
    cfd4:	66 0f e2 c8          	psrad  xmm1,xmm0
    cfd8:	66 0f 6f c1          	movdqa xmm0,xmm1
    cfdc:	0f 29 85 c0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1940],xmm0
    cfe3:	0f 29 95 d0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1930],xmm2
    cfea:	66 0f 6f 8d d0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1930]
    cff2:	66 0f 6f 85 c0 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1940]
    cffa:	66 0f 6b c1          	packssdw xmm0,xmm1
    cffe:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    d005:	66 0f 6f 85 b0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c50]
    d00d:	0f 29 85 b0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1950],xmm0
    d014:	c7 85 4c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27b4],0x11
    d01e:	66 0f 6f 8d b0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1950]
    d026:	66 0f 6e 85 4c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27b4]
    d02e:	66 0f e2 c8          	psrad  xmm1,xmm0
    d032:	66 0f 6f d1          	movdqa xmm2,xmm1
    d036:	66 0f 6f 85 a0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c60]
    d03e:	0f 29 85 a0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1960],xmm0
    d045:	c7 85 48 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27b8],0x11
    d04f:	66 0f 6f 8d a0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1960]
    d057:	66 0f 6e 85 48 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27b8]
    d05f:	66 0f e2 c8          	psrad  xmm1,xmm0
    d063:	66 0f 6f c1          	movdqa xmm0,xmm1
    d067:	0f 29 85 80 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1980],xmm0
    d06e:	0f 29 95 90 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1970],xmm2
    d075:	66 0f 6f 8d 90 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1970]
    d07d:	66 0f 6f 85 80 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1980]
    d085:	66 0f 6b c1          	packssdw xmm0,xmm1
    d089:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    d090:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    d098:	0f 29 85 60 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19a0],xmm0
    d09f:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    d0a7:	0f 29 85 70 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1990],xmm0
    d0ae:	66 0f 6f 8d 70 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1990]
    d0b6:	66 0f 6f 85 60 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x19a0]
    d0be:	66 0f 67 c1          	packuswb xmm0,xmm1
    d0c2:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d0c9:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    d0d1:	0f 29 85 40 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19c0],xmm0
    d0d8:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    d0e0:	0f 29 85 50 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19b0],xmm0
    d0e7:	66 0f 6f 8d 50 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x19b0]
    d0ef:	66 0f 6f 85 40 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x19c0]
    d0f7:	66 0f 67 c1          	packuswb xmm0,xmm1
    d0fb:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d102:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    d10a:	0f 29 85 20 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19e0],xmm0
    d111:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    d119:	0f 29 85 30 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19d0],xmm0
    d120:	66 0f 6f 8d 30 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x19d0]
    d128:	66 0f 6f 85 20 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x19e0]
    d130:	66 0f 67 c1          	packuswb xmm0,xmm1
    d134:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d13b:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    d143:	0f 29 85 00 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1a00],xmm0
    d14a:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    d152:	0f 29 85 10 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19f0],xmm0
    d159:	66 0f 6f 8d 10 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x19f0]
    d161:	66 0f 6f 85 00 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a00]
    d169:	66 0f 67 c1          	packuswb xmm0,xmm1
    d16d:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d174:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d17c:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d183:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d18b:	0f 29 85 e0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a20],xmm0
    d192:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d19a:	0f 29 85 f0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a10],xmm0
    d1a1:	66 0f 6f 8d f0 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a10]
    d1a9:	66 0f 6f 85 e0 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a20]
    d1b1:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d1b5:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d1bc:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d1c4:	0f 29 85 c0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a40],xmm0
    d1cb:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d1d3:	0f 29 85 d0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a30],xmm0
    d1da:	66 0f 6f 8d d0 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a30]
    d1e2:	66 0f 6f 85 c0 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a40]
    d1ea:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d1ee:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d1f5:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d1fd:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d204:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d20c:	0f 29 85 a0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a60],xmm0
    d213:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d21b:	0f 29 85 b0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a50],xmm0
    d222:	66 0f 6f 8d b0 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a50]
    d22a:	66 0f 6f 85 a0 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a60]
    d232:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d236:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d23d:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d245:	0f 29 85 80 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a80],xmm0
    d24c:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d254:	0f 29 85 90 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a70],xmm0
    d25b:	66 0f 6f 8d 90 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a70]
    d263:	66 0f 6f 85 80 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a80]
    d26b:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d26f:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d276:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d27e:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d285:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d28d:	0f 29 85 60 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1aa0],xmm0
    d294:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d29c:	0f 29 85 70 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a90],xmm0
    d2a3:	66 0f 6f 8d 70 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a90]
    d2ab:	66 0f 6f 85 60 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1aa0]
    d2b3:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d2b7:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d2be:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d2c6:	0f 29 85 40 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ac0],xmm0
    d2cd:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d2d5:	0f 29 85 50 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ab0],xmm0
    d2dc:	66 0f 6f 8d 50 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1ab0]
    d2e4:	66 0f 6f 85 40 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ac0]
    d2ec:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d2f0:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d2f7:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d2ff:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d306:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d30e:	0f 29 85 20 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ae0],xmm0
    d315:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d31d:	0f 29 85 30 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ad0],xmm0
    d324:	66 0f 6f 8d 30 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1ad0]
    d32c:	66 0f 6f 85 20 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ae0]
    d334:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d338:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d33f:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d347:	0f 29 85 00 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1b00],xmm0
    d34e:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d356:	0f 29 85 10 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1af0],xmm0
    d35d:	66 0f 6f 8d 10 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1af0]
    d365:	66 0f 6f 85 00 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b00]
    d36d:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d371:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d378:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d380:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d387:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d38f:	0f 29 85 e0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b20],xmm0
    d396:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d39e:	0f 29 85 f0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b10],xmm0
    d3a5:	66 0f 6f 8d f0 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b10]
    d3ad:	66 0f 6f 85 e0 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b20]
    d3b5:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d3b9:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d3c0:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d3c8:	0f 29 85 c0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b40],xmm0
    d3cf:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d3d7:	0f 29 85 d0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b30],xmm0
    d3de:	66 0f 6f 8d d0 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b30]
    d3e6:	66 0f 6f 85 c0 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b40]
    d3ee:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d3f2:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d3f9:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d401:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d408:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d410:	0f 29 85 a0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b60],xmm0
    d417:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d41f:	0f 29 85 b0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b50],xmm0
    d426:	66 0f 6f 8d b0 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b50]
    d42e:	66 0f 6f 85 a0 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b60]
    d436:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d43a:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d441:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d449:	0f 29 85 80 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b80],xmm0
    d450:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d458:	0f 29 85 90 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b70],xmm0
    d45f:	66 0f 6f 8d 90 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b70]
    d467:	66 0f 6f 85 80 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b80]
    d46f:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d473:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d47a:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d481:	48 89 85 48 d9 ff ff 	mov    QWORD PTR [rbp-0x26b8],rax
    d488:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d490:	0f 29 85 70 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b90],xmm0
    d497:	48 8b 85 70 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1b90]
    d49e:	48 89 c2             	mov    rdx,rax
    d4a1:	48 8b 85 48 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26b8]
    d4a8:	48 89 10             	mov    QWORD PTR [rax],rdx
    d4ab:	90                   	nop
    d4ac:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d4b2:	48 98                	cdqe   
    d4b4:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d4bb:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d4c3:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d4c8:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d4cf:	48 89 85 40 d9 ff ff 	mov    QWORD PTR [rbp-0x26c0],rax
    d4d6:	0f 29 85 60 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1ba0],xmm0
    d4dd:	48 8b 85 60 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1ba0]
    d4e4:	48 89 c2             	mov    rdx,rax
    d4e7:	48 8b 85 40 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26c0]
    d4ee:	48 89 10             	mov    QWORD PTR [rax],rdx
    d4f1:	90                   	nop
    d4f2:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d4f8:	48 98                	cdqe   
    d4fa:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d501:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d508:	48 89 85 38 d9 ff ff 	mov    QWORD PTR [rbp-0x26c8],rax
    d50f:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d517:	0f 29 85 50 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bb0],xmm0
    d51e:	48 8b 85 50 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bb0]
    d525:	48 89 c2             	mov    rdx,rax
    d528:	48 8b 85 38 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26c8]
    d52f:	48 89 10             	mov    QWORD PTR [rax],rdx
    d532:	90                   	nop
    d533:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d539:	48 98                	cdqe   
    d53b:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d542:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d54a:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d54f:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d556:	48 89 85 30 d9 ff ff 	mov    QWORD PTR [rbp-0x26d0],rax
    d55d:	0f 29 85 40 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bc0],xmm0
    d564:	48 8b 85 40 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bc0]
    d56b:	48 89 c2             	mov    rdx,rax
    d56e:	48 8b 85 30 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26d0]
    d575:	48 89 10             	mov    QWORD PTR [rax],rdx
    d578:	90                   	nop
    d579:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d57f:	48 98                	cdqe   
    d581:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d588:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d58f:	48 89 85 28 d9 ff ff 	mov    QWORD PTR [rbp-0x26d8],rax
    d596:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d59e:	0f 29 85 30 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bd0],xmm0
    d5a5:	48 8b 85 30 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bd0]
    d5ac:	48 89 c2             	mov    rdx,rax
    d5af:	48 8b 85 28 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26d8]
    d5b6:	48 89 10             	mov    QWORD PTR [rax],rdx
    d5b9:	90                   	nop
    d5ba:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d5c0:	48 98                	cdqe   
    d5c2:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d5c9:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d5d1:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d5d6:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d5dd:	48 89 85 20 d9 ff ff 	mov    QWORD PTR [rbp-0x26e0],rax
    d5e4:	0f 29 85 20 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1be0],xmm0
    d5eb:	48 8b 85 20 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1be0]
    d5f2:	48 89 c2             	mov    rdx,rax
    d5f5:	48 8b 85 20 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26e0]
    d5fc:	48 89 10             	mov    QWORD PTR [rax],rdx
    d5ff:	90                   	nop
    d600:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d606:	48 98                	cdqe   
    d608:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d60f:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d616:	48 89 85 18 d9 ff ff 	mov    QWORD PTR [rbp-0x26e8],rax
    d61d:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d625:	0f 29 85 10 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bf0],xmm0
    d62c:	48 8b 85 10 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bf0]
    d633:	48 89 c2             	mov    rdx,rax
    d636:	48 8b 85 18 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26e8]
    d63d:	48 89 10             	mov    QWORD PTR [rax],rdx
    d640:	90                   	nop
    d641:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d647:	48 98                	cdqe   
    d649:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d650:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d658:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d65d:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d664:	48 89 85 10 d9 ff ff 	mov    QWORD PTR [rbp-0x26f0],rax
    d66b:	0f 29 85 00 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1c00],xmm0
    d672:	48 8b 85 00 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1c00]
    d679:	48 89 c2             	mov    rdx,rax
    d67c:	48 8b 85 10 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26f0]
    d683:	48 89 10             	mov    QWORD PTR [rax],rdx
    d686:	90                   	nop
    d687:	90                   	nop
    d688:	c9                   	leave  
    d689:	c3                   	ret    

000000000000d68a <stbi__get_marker(stbi__jpeg*)>:
    d68a:	55                   	push   rbp
    d68b:	48 89 e5             	mov    rbp,rsp
    d68e:	48 83 ec 20          	sub    rsp,0x20
    d692:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    d696:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d69a:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    d6a1:	3c ff                	cmp    al,0xff
    d6a3:	74 1f                	je     d6c4 <stbi__get_marker(stbi__jpeg*)+0x3a>
    d6a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d6a9:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    d6b0:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    d6b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d6b7:	c6 80 28 48 00 00 ff 	mov    BYTE PTR [rax+0x4828],0xff
    d6be:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
    d6c2:	eb 3d                	jmp    d701 <stbi__get_marker(stbi__jpeg*)+0x77>
    d6c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d6c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
    d6cb:	48 89 c7             	mov    rdi,rax
    d6ce:	e8 dc 8d ff ff       	call   64af <stbi__get8(stbi__context*)>
    d6d3:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    d6d6:	80 7d ff ff          	cmp    BYTE PTR [rbp-0x1],0xff
    d6da:	74 07                	je     d6e3 <stbi__get_marker(stbi__jpeg*)+0x59>
    d6dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
    d6e1:	eb 1e                	jmp    d701 <stbi__get_marker(stbi__jpeg*)+0x77>
    d6e3:	80 7d ff ff          	cmp    BYTE PTR [rbp-0x1],0xff
    d6e7:	75 14                	jne    d6fd <stbi__get_marker(stbi__jpeg*)+0x73>
    d6e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d6ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
    d6f0:	48 89 c7             	mov    rdi,rax
    d6f3:	e8 b7 8d ff ff       	call   64af <stbi__get8(stbi__context*)>
    d6f8:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    d6fb:	eb e6                	jmp    d6e3 <stbi__get_marker(stbi__jpeg*)+0x59>
    d6fd:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
    d701:	c9                   	leave  
    d702:	c3                   	ret    

000000000000d703 <stbi__jpeg_reset(stbi__jpeg*)>:
    d703:	55                   	push   rbp
    d704:	48 89 e5             	mov    rbp,rsp
    d707:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    d70b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d70f:	c7 80 24 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4824],0x0
    d719:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d71d:	c7 80 20 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4820],0x0
    d727:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d72b:	c7 80 2c 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x482c],0x0
    d735:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d739:	c7 80 d8 47 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x47d8],0x0
    d743:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d747:	8b 90 d8 47 00 00    	mov    edx,DWORD PTR [rax+0x47d8]
    d74d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d751:	89 90 78 47 00 00    	mov    DWORD PTR [rax+0x4778],edx
    d757:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d75b:	8b 90 78 47 00 00    	mov    edx,DWORD PTR [rax+0x4778]
    d761:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d765:	89 90 18 47 00 00    	mov    DWORD PTR [rax+0x4718],edx
    d76b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d76f:	8b 90 18 47 00 00    	mov    edx,DWORD PTR [rax+0x4718]
    d775:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d779:	89 90 b8 46 00 00    	mov    DWORD PTR [rax+0x46b8],edx
    d77f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d783:	c6 80 28 48 00 00 ff 	mov    BYTE PTR [rax+0x4828],0xff
    d78a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d78e:	8b 80 68 48 00 00    	mov    eax,DWORD PTR [rax+0x4868]
    d794:	85 c0                	test   eax,eax
    d796:	74 0c                	je     d7a4 <stbi__jpeg_reset(stbi__jpeg*)+0xa1>
    d798:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d79c:	8b 80 68 48 00 00    	mov    eax,DWORD PTR [rax+0x4868]
    d7a2:	eb 05                	jmp    d7a9 <stbi__jpeg_reset(stbi__jpeg*)+0xa6>
    d7a4:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
    d7a9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    d7ad:	89 82 6c 48 00 00    	mov    DWORD PTR [rdx+0x486c],eax
    d7b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7b7:	c7 80 44 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4844],0x0
    d7c1:	90                   	nop
    d7c2:	5d                   	pop    rbp
    d7c3:	c3                   	ret    

000000000000d7c4 <stbi__parse_entropy_coded_data(stbi__jpeg*)>:
    d7c4:	55                   	push   rbp
    d7c5:	48 89 e5             	mov    rbp,rsp
    d7c8:	48 81 ec 30 01 00 00 	sub    rsp,0x130
    d7cf:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
    d7d6:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    d7df:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    d7e3:	31 c0                	xor    eax,eax
    d7e5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d7ec:	48 89 c7             	mov    rdi,rax
    d7ef:	e8 0f ff ff ff       	call   d703 <stbi__jpeg_reset(stbi__jpeg*)>
    d7f4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d7fb:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    d801:	85 c0                	test   eax,eax
    d803:	0f 85 a5 07 00 00    	jne    dfae <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7ea>
    d809:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d810:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    d816:	83 f8 01             	cmp    eax,0x1
    d819:	0f 85 4d 03 00 00    	jne    db6c <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3a8>
    d81f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d826:	8b 80 58 48 00 00    	mov    eax,DWORD PTR [rax+0x4858]
    d82c:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
    d832:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d839:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d83f:	48 63 d0             	movsxd rdx,eax
    d842:	48 89 d0             	mov    rax,rdx
    d845:	48 01 c0             	add    rax,rax
    d848:	48 01 d0             	add    rax,rdx
    d84b:	48 c1 e0 05          	shl    rax,0x5
    d84f:	48 01 c8             	add    rax,rcx
    d852:	48 05 bc 46 00 00    	add    rax,0x46bc
    d858:	8b 00                	mov    eax,DWORD PTR [rax]
    d85a:	83 c0 07             	add    eax,0x7
    d85d:	c1 f8 03             	sar    eax,0x3
    d860:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
    d866:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d86d:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d873:	48 63 d0             	movsxd rdx,eax
    d876:	48 89 d0             	mov    rax,rdx
    d879:	48 01 c0             	add    rax,rax
    d87c:	48 01 d0             	add    rax,rdx
    d87f:	48 c1 e0 05          	shl    rax,0x5
    d883:	48 01 c8             	add    rax,rcx
    d886:	48 05 c0 46 00 00    	add    rax,0x46c0
    d88c:	8b 00                	mov    eax,DWORD PTR [rax]
    d88e:	83 c0 07             	add    eax,0x7
    d891:	c1 f8 03             	sar    eax,0x3
    d894:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
    d89a:	c7 85 f0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x110],0x0
    d8a4:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
    d8aa:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
    d8b0:	0f 8d ac 02 00 00    	jge    db62 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x39e>
    d8b6:	c7 85 ec fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x114],0x0
    d8c0:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
    d8c6:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
    d8cc:	0f 8d 84 02 00 00    	jge    db56 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x392>
    d8d2:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d8d9:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d8df:	48 63 d0             	movsxd rdx,eax
    d8e2:	48 89 d0             	mov    rax,rdx
    d8e5:	48 01 c0             	add    rax,rax
    d8e8:	48 01 d0             	add    rax,rdx
    d8eb:	48 c1 e0 05          	shl    rax,0x5
    d8ef:	48 01 c8             	add    rax,rcx
    d8f2:	48 05 b4 46 00 00    	add    rax,0x46b4
    d8f8:	8b 00                	mov    eax,DWORD PTR [rax]
    d8fa:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    d900:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d907:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d90d:	48 63 d0             	movsxd rdx,eax
    d910:	48 89 d0             	mov    rax,rdx
    d913:	48 01 c0             	add    rax,rax
    d916:	48 01 d0             	add    rax,rdx
    d919:	48 c1 e0 05          	shl    rax,0x5
    d91d:	48 01 c8             	add    rax,rcx
    d920:	48 05 ac 46 00 00    	add    rax,0x46ac
    d926:	8b 00                	mov    eax,DWORD PTR [rax]
    d928:	48 98                	cdqe   
    d92a:	48 83 c0 69          	add    rax,0x69
    d92e:	48 c1 e0 07          	shl    rax,0x7
    d932:	48 89 c2             	mov    rdx,rax
    d935:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d93c:	48 01 d0             	add    rax,rdx
    d93f:	48 8d 78 08          	lea    rdi,[rax+0x8]
    d943:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
    d949:	48 98                	cdqe   
    d94b:	48 c1 e0 0a          	shl    rax,0xa
    d94f:	48 8d 90 80 36 00 00 	lea    rdx,[rax+0x3680]
    d956:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d95d:	48 01 d0             	add    rax,rdx
    d960:	4c 8d 50 08          	lea    r10,[rax+0x8]
    d964:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d96b:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    d972:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
    d978:	48 98                	cdqe   
    d97a:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    d981:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
    d985:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d98c:	4c 8d 40 08          	lea    r8,[rax+0x8]
    d990:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    d997:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d99d:	48 63 d0             	movsxd rdx,eax
    d9a0:	48 89 d0             	mov    rax,rdx
    d9a3:	48 01 c0             	add    rax,rax
    d9a6:	48 01 d0             	add    rax,rdx
    d9a9:	48 c1 e0 05          	shl    rax,0x5
    d9ad:	48 01 f0             	add    rax,rsi
    d9b0:	48 05 b0 46 00 00    	add    rax,0x46b0
    d9b6:	8b 00                	mov    eax,DWORD PTR [rax]
    d9b8:	48 98                	cdqe   
    d9ba:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    d9c1:	49 8d 14 00          	lea    rdx,[r8+rax*1]
    d9c5:	44 8b 85 50 ff ff ff 	mov    r8d,DWORD PTR [rbp-0xb0]
    d9cc:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
    d9d3:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d9da:	48 83 ec 08          	sub    rsp,0x8
    d9de:	57                   	push   rdi
    d9df:	45 89 c1             	mov    r9d,r8d
    d9e2:	4d 89 d0             	mov    r8,r10
    d9e5:	48 89 c7             	mov    rdi,rax
    d9e8:	e8 aa a6 ff ff       	call   8097 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)>
    d9ed:	48 83 c4 10          	add    rsp,0x10
    d9f1:	85 c0                	test   eax,eax
    d9f3:	0f 94 c0             	sete   al
    d9f6:	84 c0                	test   al,al
    d9f8:	74 0a                	je     da04 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x240>
    d9fa:	b8 00 00 00 00       	mov    eax,0x0
    d9ff:	e9 f8 0b 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    da04:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    da0b:	4c 8b 80 70 48 00 00 	mov    r8,QWORD PTR [rax+0x4870]
    da12:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    da19:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    da1f:	48 63 d0             	movsxd rdx,eax
    da22:	48 89 d0             	mov    rax,rdx
    da25:	48 01 c0             	add    rax,rax
    da28:	48 01 d0             	add    rax,rdx
    da2b:	48 c1 e0 05          	shl    rax,0x5
    da2f:	48 01 c8             	add    rax,rcx
    da32:	48 05 c4 46 00 00    	add    rax,0x46c4
    da38:	8b 08                	mov    ecx,DWORD PTR [rax]
    da3a:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    da41:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    da47:	48 63 d0             	movsxd rdx,eax
    da4a:	48 89 d0             	mov    rax,rdx
    da4d:	48 01 c0             	add    rax,rax
    da50:	48 01 d0             	add    rax,rdx
    da53:	48 c1 e0 05          	shl    rax,0x5
    da57:	48 01 f0             	add    rax,rsi
    da5a:	48 05 d0 46 00 00    	add    rax,0x46d0
    da60:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    da63:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
    da6a:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    da70:	48 63 d0             	movsxd rdx,eax
    da73:	48 89 d0             	mov    rax,rdx
    da76:	48 01 c0             	add    rax,rax
    da79:	48 01 d0             	add    rax,rdx
    da7c:	48 c1 e0 05          	shl    rax,0x5
    da80:	48 01 f8             	add    rax,rdi
    da83:	48 05 c4 46 00 00    	add    rax,0x46c4
    da89:	8b 00                	mov    eax,DWORD PTR [rax]
    da8b:	0f af 85 f0 fe ff ff 	imul   eax,DWORD PTR [rbp-0x110]
    da92:	c1 e0 03             	shl    eax,0x3
    da95:	48 63 d0             	movsxd rdx,eax
    da98:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
    da9e:	c1 e0 03             	shl    eax,0x3
    daa1:	48 98                	cdqe   
    daa3:	48 01 d0             	add    rax,rdx
    daa6:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
    daaa:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
    dab1:	48 89 c2             	mov    rdx,rax
    dab4:	89 ce                	mov    esi,ecx
    dab6:	41 ff d0             	call   r8
    dab9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dac0:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    dac6:	8d 50 ff             	lea    edx,[rax-0x1]
    dac9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dad0:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    dad6:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dadd:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    dae3:	85 c0                	test   eax,eax
    dae5:	0f 9e c0             	setle  al
    dae8:	84 c0                	test   al,al
    daea:	74 5e                	je     db4a <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x386>
    daec:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    daf3:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    daf9:	83 f8 17             	cmp    eax,0x17
    dafc:	7f 0f                	jg     db0d <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x349>
    dafe:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db05:	48 89 c7             	mov    rdi,rax
    db08:	e8 19 a0 ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    db0d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db14:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    db1b:	3c cf                	cmp    al,0xcf
    db1d:	76 12                	jbe    db31 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x36d>
    db1f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db26:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    db2d:	3c d7                	cmp    al,0xd7
    db2f:	76 0a                	jbe    db3b <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x377>
    db31:	b8 01 00 00 00       	mov    eax,0x1
    db36:	e9 c1 0a 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    db3b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db42:	48 89 c7             	mov    rdi,rax
    db45:	e8 b9 fb ff ff       	call   d703 <stbi__jpeg_reset(stbi__jpeg*)>
    db4a:	83 85 ec fe ff ff 01 	add    DWORD PTR [rbp-0x114],0x1
    db51:	e9 6a fd ff ff       	jmp    d8c0 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xfc>
    db56:	83 85 f0 fe ff ff 01 	add    DWORD PTR [rbp-0x110],0x1
    db5d:	e9 42 fd ff ff       	jmp    d8a4 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe0>
    db62:	b8 01 00 00 00       	mov    eax,0x1
    db67:	e9 90 0a 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    db6c:	c7 85 f8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x108],0x0
    db76:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db7d:	8b 80 94 46 00 00    	mov    eax,DWORD PTR [rax+0x4694]
    db83:	39 85 f8 fe ff ff    	cmp    DWORD PTR [rbp-0x108],eax
    db89:	0f 8d 15 04 00 00    	jge    dfa4 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7e0>
    db8f:	c7 85 f4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x10c],0x0
    db99:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dba0:	8b 80 90 46 00 00    	mov    eax,DWORD PTR [rax+0x4690]
    dba6:	39 85 f4 fe ff ff    	cmp    DWORD PTR [rbp-0x10c],eax
    dbac:	0f 8d e6 03 00 00    	jge    df98 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7d4>
    dbb2:	c7 85 fc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x104],0x0
    dbbc:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dbc3:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    dbc9:	39 85 fc fe ff ff    	cmp    DWORD PTR [rbp-0x104],eax
    dbcf:	0f 8d 26 03 00 00    	jge    defb <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x737>
    dbd5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dbdc:	8b 95 fc fe ff ff    	mov    edx,DWORD PTR [rbp-0x104]
    dbe2:	48 63 d2             	movsxd rdx,edx
    dbe5:	48 81 c2 14 12 00 00 	add    rdx,0x1214
    dbec:	8b 44 90 08          	mov    eax,DWORD PTR [rax+rdx*4+0x8]
    dbf0:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
    dbf6:	c7 85 04 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xfc],0x0
    dc00:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dc07:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dc0d:	48 63 d0             	movsxd rdx,eax
    dc10:	48 89 d0             	mov    rax,rdx
    dc13:	48 01 c0             	add    rax,rax
    dc16:	48 01 d0             	add    rax,rdx
    dc19:	48 c1 e0 05          	shl    rax,0x5
    dc1d:	48 01 c8             	add    rax,rcx
    dc20:	48 05 a8 46 00 00    	add    rax,0x46a8
    dc26:	8b 00                	mov    eax,DWORD PTR [rax]
    dc28:	39 85 04 ff ff ff    	cmp    DWORD PTR [rbp-0xfc],eax
    dc2e:	0f 8d bb 02 00 00    	jge    deef <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x72b>
    dc34:	c7 85 00 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x100],0x0
    dc3e:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dc45:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dc4b:	48 63 d0             	movsxd rdx,eax
    dc4e:	48 89 d0             	mov    rax,rdx
    dc51:	48 01 c0             	add    rax,rax
    dc54:	48 01 d0             	add    rax,rdx
    dc57:	48 c1 e0 05          	shl    rax,0x5
    dc5b:	48 01 c8             	add    rax,rcx
    dc5e:	48 05 a4 46 00 00    	add    rax,0x46a4
    dc64:	8b 00                	mov    eax,DWORD PTR [rax]
    dc66:	39 85 00 ff ff ff    	cmp    DWORD PTR [rbp-0x100],eax
    dc6c:	0f 8d 71 02 00 00    	jge    dee3 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x71f>
    dc72:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dc79:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dc7f:	48 63 d0             	movsxd rdx,eax
    dc82:	48 89 d0             	mov    rax,rdx
    dc85:	48 01 c0             	add    rax,rax
    dc88:	48 01 d0             	add    rax,rdx
    dc8b:	48 c1 e0 05          	shl    rax,0x5
    dc8f:	48 01 c8             	add    rax,rcx
    dc92:	48 05 a4 46 00 00    	add    rax,0x46a4
    dc98:	8b 00                	mov    eax,DWORD PTR [rax]
    dc9a:	0f af 85 f4 fe ff ff 	imul   eax,DWORD PTR [rbp-0x10c]
    dca1:	89 c2                	mov    edx,eax
    dca3:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
    dca9:	01 d0                	add    eax,edx
    dcab:	c1 e0 03             	shl    eax,0x3
    dcae:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
    dcb4:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dcbb:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dcc1:	48 63 d0             	movsxd rdx,eax
    dcc4:	48 89 d0             	mov    rax,rdx
    dcc7:	48 01 c0             	add    rax,rax
    dcca:	48 01 d0             	add    rax,rdx
    dccd:	48 c1 e0 05          	shl    rax,0x5
    dcd1:	48 01 c8             	add    rax,rcx
    dcd4:	48 05 a8 46 00 00    	add    rax,0x46a8
    dcda:	8b 00                	mov    eax,DWORD PTR [rax]
    dcdc:	0f af 85 f8 fe ff ff 	imul   eax,DWORD PTR [rbp-0x108]
    dce3:	89 c2                	mov    edx,eax
    dce5:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
    dceb:	01 d0                	add    eax,edx
    dced:	c1 e0 03             	shl    eax,0x3
    dcf0:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
    dcf6:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dcfd:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dd03:	48 63 d0             	movsxd rdx,eax
    dd06:	48 89 d0             	mov    rax,rdx
    dd09:	48 01 c0             	add    rax,rax
    dd0c:	48 01 d0             	add    rax,rdx
    dd0f:	48 c1 e0 05          	shl    rax,0x5
    dd13:	48 01 c8             	add    rax,rcx
    dd16:	48 05 b4 46 00 00    	add    rax,0x46b4
    dd1c:	8b 00                	mov    eax,DWORD PTR [rax]
    dd1e:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
    dd24:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dd2b:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dd31:	48 63 d0             	movsxd rdx,eax
    dd34:	48 89 d0             	mov    rax,rdx
    dd37:	48 01 c0             	add    rax,rax
    dd3a:	48 01 d0             	add    rax,rdx
    dd3d:	48 c1 e0 05          	shl    rax,0x5
    dd41:	48 01 c8             	add    rax,rcx
    dd44:	48 05 ac 46 00 00    	add    rax,0x46ac
    dd4a:	8b 00                	mov    eax,DWORD PTR [rax]
    dd4c:	48 98                	cdqe   
    dd4e:	48 83 c0 69          	add    rax,0x69
    dd52:	48 c1 e0 07          	shl    rax,0x7
    dd56:	48 89 c2             	mov    rdx,rax
    dd59:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd60:	48 01 d0             	add    rax,rdx
    dd63:	48 8d 78 08          	lea    rdi,[rax+0x8]
    dd67:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
    dd6d:	48 98                	cdqe   
    dd6f:	48 c1 e0 0a          	shl    rax,0xa
    dd73:	48 8d 90 80 36 00 00 	lea    rdx,[rax+0x3680]
    dd7a:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd81:	48 01 d0             	add    rax,rdx
    dd84:	4c 8d 50 08          	lea    r10,[rax+0x8]
    dd88:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd8f:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    dd96:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
    dd9c:	48 98                	cdqe   
    dd9e:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    dda5:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
    dda9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    ddb0:	4c 8d 40 08          	lea    r8,[rax+0x8]
    ddb4:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    ddbb:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    ddc1:	48 63 d0             	movsxd rdx,eax
    ddc4:	48 89 d0             	mov    rax,rdx
    ddc7:	48 01 c0             	add    rax,rax
    ddca:	48 01 d0             	add    rax,rdx
    ddcd:	48 c1 e0 05          	shl    rax,0x5
    ddd1:	48 01 f0             	add    rax,rsi
    ddd4:	48 05 b0 46 00 00    	add    rax,0x46b0
    ddda:	8b 00                	mov    eax,DWORD PTR [rax]
    dddc:	48 98                	cdqe   
    ddde:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    dde5:	49 8d 14 00          	lea    rdx,[r8+rax*1]
    dde9:	44 8b 85 40 ff ff ff 	mov    r8d,DWORD PTR [rbp-0xc0]
    ddf0:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
    ddf7:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    ddfe:	48 83 ec 08          	sub    rsp,0x8
    de02:	57                   	push   rdi
    de03:	45 89 c1             	mov    r9d,r8d
    de06:	4d 89 d0             	mov    r8,r10
    de09:	48 89 c7             	mov    rdi,rax
    de0c:	e8 86 a2 ff ff       	call   8097 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)>
    de11:	48 83 c4 10          	add    rsp,0x10
    de15:	85 c0                	test   eax,eax
    de17:	0f 94 c0             	sete   al
    de1a:	84 c0                	test   al,al
    de1c:	74 0a                	je     de28 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x664>
    de1e:	b8 00 00 00 00       	mov    eax,0x0
    de23:	e9 d4 07 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    de28:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    de2f:	4c 8b 80 70 48 00 00 	mov    r8,QWORD PTR [rax+0x4870]
    de36:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    de3d:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    de43:	48 63 d0             	movsxd rdx,eax
    de46:	48 89 d0             	mov    rax,rdx
    de49:	48 01 c0             	add    rax,rax
    de4c:	48 01 d0             	add    rax,rdx
    de4f:	48 c1 e0 05          	shl    rax,0x5
    de53:	48 01 c8             	add    rax,rcx
    de56:	48 05 c4 46 00 00    	add    rax,0x46c4
    de5c:	8b 08                	mov    ecx,DWORD PTR [rax]
    de5e:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    de65:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    de6b:	48 63 d0             	movsxd rdx,eax
    de6e:	48 89 d0             	mov    rax,rdx
    de71:	48 01 c0             	add    rax,rax
    de74:	48 01 d0             	add    rax,rdx
    de77:	48 c1 e0 05          	shl    rax,0x5
    de7b:	48 01 f0             	add    rax,rsi
    de7e:	48 05 d0 46 00 00    	add    rax,0x46d0
    de84:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    de87:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
    de8e:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    de94:	48 63 d0             	movsxd rdx,eax
    de97:	48 89 d0             	mov    rax,rdx
    de9a:	48 01 c0             	add    rax,rax
    de9d:	48 01 d0             	add    rax,rdx
    dea0:	48 c1 e0 05          	shl    rax,0x5
    dea4:	48 01 f8             	add    rax,rdi
    dea7:	48 05 c4 46 00 00    	add    rax,0x46c4
    dead:	8b 00                	mov    eax,DWORD PTR [rax]
    deaf:	0f af 85 48 ff ff ff 	imul   eax,DWORD PTR [rbp-0xb8]
    deb6:	48 63 d0             	movsxd rdx,eax
    deb9:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
    debf:	48 98                	cdqe   
    dec1:	48 01 d0             	add    rax,rdx
    dec4:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
    dec8:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
    decf:	48 89 c2             	mov    rdx,rax
    ded2:	89 ce                	mov    esi,ecx
    ded4:	41 ff d0             	call   r8
    ded7:	83 85 00 ff ff ff 01 	add    DWORD PTR [rbp-0x100],0x1
    dede:	e9 5b fd ff ff       	jmp    dc3e <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x47a>
    dee3:	83 85 04 ff ff ff 01 	add    DWORD PTR [rbp-0xfc],0x1
    deea:	e9 11 fd ff ff       	jmp    dc00 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x43c>
    deef:	83 85 fc fe ff ff 01 	add    DWORD PTR [rbp-0x104],0x1
    def6:	e9 c1 fc ff ff       	jmp    dbbc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3f8>
    defb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df02:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    df08:	8d 50 ff             	lea    edx,[rax-0x1]
    df0b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df12:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    df18:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df1f:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    df25:	85 c0                	test   eax,eax
    df27:	0f 9e c0             	setle  al
    df2a:	84 c0                	test   al,al
    df2c:	74 5e                	je     df8c <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7c8>
    df2e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df35:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    df3b:	83 f8 17             	cmp    eax,0x17
    df3e:	7f 0f                	jg     df4f <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x78b>
    df40:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df47:	48 89 c7             	mov    rdi,rax
    df4a:	e8 d7 9b ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    df4f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df56:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    df5d:	3c cf                	cmp    al,0xcf
    df5f:	76 12                	jbe    df73 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7af>
    df61:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df68:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    df6f:	3c d7                	cmp    al,0xd7
    df71:	76 0a                	jbe    df7d <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7b9>
    df73:	b8 01 00 00 00       	mov    eax,0x1
    df78:	e9 7f 06 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    df7d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df84:	48 89 c7             	mov    rdi,rax
    df87:	e8 77 f7 ff ff       	call   d703 <stbi__jpeg_reset(stbi__jpeg*)>
    df8c:	83 85 f4 fe ff ff 01 	add    DWORD PTR [rbp-0x10c],0x1
    df93:	e9 01 fc ff ff       	jmp    db99 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3d5>
    df98:	83 85 f8 fe ff ff 01 	add    DWORD PTR [rbp-0x108],0x1
    df9f:	e9 d2 fb ff ff       	jmp    db76 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3b2>
    dfa4:	b8 01 00 00 00       	mov    eax,0x1
    dfa9:	e9 4e 06 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    dfae:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dfb5:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    dfbb:	83 f8 01             	cmp    eax,0x1
    dfbe:	0f 85 fe 02 00 00    	jne    e2c2 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xafe>
    dfc4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dfcb:	8b 80 58 48 00 00    	mov    eax,DWORD PTR [rax+0x4858]
    dfd1:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
    dfd7:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dfde:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    dfe4:	48 63 d0             	movsxd rdx,eax
    dfe7:	48 89 d0             	mov    rax,rdx
    dfea:	48 01 c0             	add    rax,rax
    dfed:	48 01 d0             	add    rax,rdx
    dff0:	48 c1 e0 05          	shl    rax,0x5
    dff4:	48 01 c8             	add    rax,rcx
    dff7:	48 05 bc 46 00 00    	add    rax,0x46bc
    dffd:	8b 00                	mov    eax,DWORD PTR [rax]
    dfff:	83 c0 07             	add    eax,0x7
    e002:	c1 f8 03             	sar    eax,0x3
    e005:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
    e00b:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e012:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e018:	48 63 d0             	movsxd rdx,eax
    e01b:	48 89 d0             	mov    rax,rdx
    e01e:	48 01 c0             	add    rax,rax
    e021:	48 01 d0             	add    rax,rdx
    e024:	48 c1 e0 05          	shl    rax,0x5
    e028:	48 01 c8             	add    rax,rcx
    e02b:	48 05 c0 46 00 00    	add    rax,0x46c0
    e031:	8b 00                	mov    eax,DWORD PTR [rax]
    e033:	83 c0 07             	add    eax,0x7
    e036:	c1 f8 03             	sar    eax,0x3
    e039:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
    e03f:	c7 85 0c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf4],0x0
    e049:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
    e04f:	3b 85 38 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xc8]
    e055:	0f 8d 5d 02 00 00    	jge    e2b8 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xaf4>
    e05b:	c7 85 08 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x0
    e065:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
    e06b:	3b 85 34 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xcc]
    e071:	0f 8d 35 02 00 00    	jge    e2ac <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xae8>
    e077:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e07e:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e084:	48 63 d0             	movsxd rdx,eax
    e087:	48 89 d0             	mov    rax,rdx
    e08a:	48 01 c0             	add    rax,rax
    e08d:	48 01 d0             	add    rax,rdx
    e090:	48 c1 e0 05          	shl    rax,0x5
    e094:	48 01 c8             	add    rax,rcx
    e097:	48 05 f0 46 00 00    	add    rax,0x46f0
    e09d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    e0a0:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    e0a7:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e0ad:	48 63 d0             	movsxd rdx,eax
    e0b0:	48 89 d0             	mov    rax,rdx
    e0b3:	48 01 c0             	add    rax,rax
    e0b6:	48 01 d0             	add    rax,rdx
    e0b9:	48 c1 e0 05          	shl    rax,0x5
    e0bd:	48 01 f0             	add    rax,rsi
    e0c0:	48 05 f8 46 00 00    	add    rax,0x46f8
    e0c6:	8b 00                	mov    eax,DWORD PTR [rax]
    e0c8:	0f af 85 0c ff ff ff 	imul   eax,DWORD PTR [rbp-0xf4]
    e0cf:	89 c2                	mov    edx,eax
    e0d1:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
    e0d7:	01 d0                	add    eax,edx
    e0d9:	c1 e0 06             	shl    eax,0x6
    e0dc:	48 98                	cdqe   
    e0de:	48 01 c0             	add    rax,rax
    e0e1:	48 01 c8             	add    rax,rcx
    e0e4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    e0eb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e0f2:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    e0f8:	85 c0                	test   eax,eax
    e0fa:	75 77                	jne    e173 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x9af>
    e0fc:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e103:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e109:	48 63 d0             	movsxd rdx,eax
    e10c:	48 89 d0             	mov    rax,rdx
    e10f:	48 01 c0             	add    rax,rax
    e112:	48 01 d0             	add    rax,rdx
    e115:	48 c1 e0 05          	shl    rax,0x5
    e119:	48 01 c8             	add    rax,rcx
    e11c:	48 05 b0 46 00 00    	add    rax,0x46b0
    e122:	8b 00                	mov    eax,DWORD PTR [rax]
    e124:	48 98                	cdqe   
    e126:	48 69 d0 90 06 00 00 	imul   rdx,rax,0x690
    e12d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e134:	48 01 d0             	add    rax,rdx
    e137:	48 8d 78 08          	lea    rdi,[rax+0x8]
    e13b:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
    e141:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
    e148:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e14f:	89 d1                	mov    ecx,edx
    e151:	48 89 fa             	mov    rdx,rdi
    e154:	48 89 c7             	mov    rdi,rax
    e157:	e8 eb a1 ff ff       	call   8347 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)>
    e15c:	85 c0                	test   eax,eax
    e15e:	0f 94 c0             	sete   al
    e161:	84 c0                	test   al,al
    e163:	0f 84 a6 00 00 00    	je     e20f <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xa4b>
    e169:	b8 00 00 00 00       	mov    eax,0x0
    e16e:	e9 89 04 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e173:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e17a:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e180:	48 63 d0             	movsxd rdx,eax
    e183:	48 89 d0             	mov    rax,rdx
    e186:	48 01 c0             	add    rax,rax
    e189:	48 01 d0             	add    rax,rdx
    e18c:	48 c1 e0 05          	shl    rax,0x5
    e190:	48 01 c8             	add    rax,rcx
    e193:	48 05 b4 46 00 00    	add    rax,0x46b4
    e199:	8b 00                	mov    eax,DWORD PTR [rax]
    e19b:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
    e1a1:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
    e1a7:	48 98                	cdqe   
    e1a9:	48 c1 e0 0a          	shl    rax,0xa
    e1ad:	48 8d 90 80 36 00 00 	lea    rdx,[rax+0x3680]
    e1b4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e1bb:	48 01 d0             	add    rax,rdx
    e1be:	48 8d 48 08          	lea    rcx,[rax+0x8]
    e1c2:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
    e1c8:	48 98                	cdqe   
    e1ca:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    e1d1:	48 8d 90 40 1a 00 00 	lea    rdx,[rax+0x1a40]
    e1d8:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e1df:	48 01 d0             	add    rax,rdx
    e1e2:	48 8d 50 08          	lea    rdx,[rax+0x8]
    e1e6:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
    e1ed:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e1f4:	48 89 c7             	mov    rdi,rax
    e1f7:	e8 ae a2 ff ff       	call   84aa <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)>
    e1fc:	85 c0                	test   eax,eax
    e1fe:	0f 94 c0             	sete   al
    e201:	84 c0                	test   al,al
    e203:	74 0a                	je     e20f <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xa4b>
    e205:	b8 00 00 00 00       	mov    eax,0x0
    e20a:	e9 ed 03 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e20f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e216:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e21c:	8d 50 ff             	lea    edx,[rax-0x1]
    e21f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e226:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    e22c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e233:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e239:	85 c0                	test   eax,eax
    e23b:	0f 9e c0             	setle  al
    e23e:	84 c0                	test   al,al
    e240:	74 5e                	je     e2a0 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xadc>
    e242:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e249:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    e24f:	83 f8 17             	cmp    eax,0x17
    e252:	7f 0f                	jg     e263 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xa9f>
    e254:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e25b:	48 89 c7             	mov    rdi,rax
    e25e:	e8 c3 98 ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    e263:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e26a:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e271:	3c cf                	cmp    al,0xcf
    e273:	76 12                	jbe    e287 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xac3>
    e275:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e27c:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e283:	3c d7                	cmp    al,0xd7
    e285:	76 0a                	jbe    e291 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xacd>
    e287:	b8 01 00 00 00       	mov    eax,0x1
    e28c:	e9 6b 03 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e291:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e298:	48 89 c7             	mov    rdi,rax
    e29b:	e8 63 f4 ff ff       	call   d703 <stbi__jpeg_reset(stbi__jpeg*)>
    e2a0:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
    e2a7:	e9 b9 fd ff ff       	jmp    e065 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x8a1>
    e2ac:	83 85 0c ff ff ff 01 	add    DWORD PTR [rbp-0xf4],0x1
    e2b3:	e9 91 fd ff ff       	jmp    e049 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x885>
    e2b8:	b8 01 00 00 00       	mov    eax,0x1
    e2bd:	e9 3a 03 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e2c2:	c7 85 14 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xec],0x0
    e2cc:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e2d3:	8b 80 94 46 00 00    	mov    eax,DWORD PTR [rax+0x4694]
    e2d9:	39 85 14 ff ff ff    	cmp    DWORD PTR [rbp-0xec],eax
    e2df:	0f 8d 12 03 00 00    	jge    e5f7 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe33>
    e2e5:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
    e2ef:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e2f6:	8b 80 90 46 00 00    	mov    eax,DWORD PTR [rax+0x4690]
    e2fc:	39 85 10 ff ff ff    	cmp    DWORD PTR [rbp-0xf0],eax
    e302:	0f 8d e3 02 00 00    	jge    e5eb <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe27>
    e308:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
    e312:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e319:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    e31f:	39 85 18 ff ff ff    	cmp    DWORD PTR [rbp-0xe8],eax
    e325:	0f 8d 26 02 00 00    	jge    e551 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xd8d>
    e32b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e332:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
    e338:	48 63 d2             	movsxd rdx,edx
    e33b:	48 81 c2 14 12 00 00 	add    rdx,0x1214
    e342:	8b 44 90 08          	mov    eax,DWORD PTR [rax+rdx*4+0x8]
    e346:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
    e34c:	c7 85 20 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe0],0x0
    e356:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e35d:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e363:	48 63 d0             	movsxd rdx,eax
    e366:	48 89 d0             	mov    rax,rdx
    e369:	48 01 c0             	add    rax,rax
    e36c:	48 01 d0             	add    rax,rdx
    e36f:	48 c1 e0 05          	shl    rax,0x5
    e373:	48 01 c8             	add    rax,rcx
    e376:	48 05 a8 46 00 00    	add    rax,0x46a8
    e37c:	8b 00                	mov    eax,DWORD PTR [rax]
    e37e:	39 85 20 ff ff ff    	cmp    DWORD PTR [rbp-0xe0],eax
    e384:	0f 8d bb 01 00 00    	jge    e545 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xd81>
    e38a:	c7 85 1c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe4],0x0
    e394:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e39b:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e3a1:	48 63 d0             	movsxd rdx,eax
    e3a4:	48 89 d0             	mov    rax,rdx
    e3a7:	48 01 c0             	add    rax,rax
    e3aa:	48 01 d0             	add    rax,rdx
    e3ad:	48 c1 e0 05          	shl    rax,0x5
    e3b1:	48 01 c8             	add    rax,rcx
    e3b4:	48 05 a4 46 00 00    	add    rax,0x46a4
    e3ba:	8b 00                	mov    eax,DWORD PTR [rax]
    e3bc:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
    e3c2:	0f 8d 71 01 00 00    	jge    e539 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xd75>
    e3c8:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e3cf:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e3d5:	48 63 d0             	movsxd rdx,eax
    e3d8:	48 89 d0             	mov    rax,rdx
    e3db:	48 01 c0             	add    rax,rax
    e3de:	48 01 d0             	add    rax,rdx
    e3e1:	48 c1 e0 05          	shl    rax,0x5
    e3e5:	48 01 c8             	add    rax,rcx
    e3e8:	48 05 a4 46 00 00    	add    rax,0x46a4
    e3ee:	8b 00                	mov    eax,DWORD PTR [rax]
    e3f0:	0f af 85 10 ff ff ff 	imul   eax,DWORD PTR [rbp-0xf0]
    e3f7:	89 c2                	mov    edx,eax
    e3f9:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
    e3ff:	01 d0                	add    eax,edx
    e401:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
    e407:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e40e:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e414:	48 63 d0             	movsxd rdx,eax
    e417:	48 89 d0             	mov    rax,rdx
    e41a:	48 01 c0             	add    rax,rax
    e41d:	48 01 d0             	add    rax,rdx
    e420:	48 c1 e0 05          	shl    rax,0x5
    e424:	48 01 c8             	add    rax,rcx
    e427:	48 05 a8 46 00 00    	add    rax,0x46a8
    e42d:	8b 00                	mov    eax,DWORD PTR [rax]
    e42f:	0f af 85 14 ff ff ff 	imul   eax,DWORD PTR [rbp-0xec]
    e436:	89 c2                	mov    edx,eax
    e438:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
    e43e:	01 d0                	add    eax,edx
    e440:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
    e446:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e44d:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e453:	48 63 d0             	movsxd rdx,eax
    e456:	48 89 d0             	mov    rax,rdx
    e459:	48 01 c0             	add    rax,rax
    e45c:	48 01 d0             	add    rax,rdx
    e45f:	48 c1 e0 05          	shl    rax,0x5
    e463:	48 01 c8             	add    rax,rcx
    e466:	48 05 f0 46 00 00    	add    rax,0x46f0
    e46c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    e46f:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    e476:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e47c:	48 63 d0             	movsxd rdx,eax
    e47f:	48 89 d0             	mov    rax,rdx
    e482:	48 01 c0             	add    rax,rax
    e485:	48 01 d0             	add    rax,rdx
    e488:	48 c1 e0 05          	shl    rax,0x5
    e48c:	48 01 f0             	add    rax,rsi
    e48f:	48 05 f8 46 00 00    	add    rax,0x46f8
    e495:	8b 00                	mov    eax,DWORD PTR [rax]
    e497:	0f af 85 2c ff ff ff 	imul   eax,DWORD PTR [rbp-0xd4]
    e49e:	89 c2                	mov    edx,eax
    e4a0:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
    e4a6:	01 d0                	add    eax,edx
    e4a8:	c1 e0 06             	shl    eax,0x6
    e4ab:	48 98                	cdqe   
    e4ad:	48 01 c0             	add    rax,rax
    e4b0:	48 01 c8             	add    rax,rcx
    e4b3:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    e4ba:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e4c1:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e4c7:	48 63 d0             	movsxd rdx,eax
    e4ca:	48 89 d0             	mov    rax,rdx
    e4cd:	48 01 c0             	add    rax,rax
    e4d0:	48 01 d0             	add    rax,rdx
    e4d3:	48 c1 e0 05          	shl    rax,0x5
    e4d7:	48 01 c8             	add    rax,rcx
    e4da:	48 05 b0 46 00 00    	add    rax,0x46b0
    e4e0:	8b 00                	mov    eax,DWORD PTR [rax]
    e4e2:	48 98                	cdqe   
    e4e4:	48 69 d0 90 06 00 00 	imul   rdx,rax,0x690
    e4eb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e4f2:	48 01 d0             	add    rax,rdx
    e4f5:	48 8d 78 08          	lea    rdi,[rax+0x8]
    e4f9:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
    e4ff:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
    e506:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e50d:	89 d1                	mov    ecx,edx
    e50f:	48 89 fa             	mov    rdx,rdi
    e512:	48 89 c7             	mov    rdi,rax
    e515:	e8 2d 9e ff ff       	call   8347 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)>
    e51a:	85 c0                	test   eax,eax
    e51c:	0f 94 c0             	sete   al
    e51f:	84 c0                	test   al,al
    e521:	74 0a                	je     e52d <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xd69>
    e523:	b8 00 00 00 00       	mov    eax,0x0
    e528:	e9 cf 00 00 00       	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e52d:	83 85 1c ff ff ff 01 	add    DWORD PTR [rbp-0xe4],0x1
    e534:	e9 5b fe ff ff       	jmp    e394 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xbd0>
    e539:	83 85 20 ff ff ff 01 	add    DWORD PTR [rbp-0xe0],0x1
    e540:	e9 11 fe ff ff       	jmp    e356 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb92>
    e545:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
    e54c:	e9 c1 fd ff ff       	jmp    e312 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb4e>
    e551:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e558:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e55e:	8d 50 ff             	lea    edx,[rax-0x1]
    e561:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e568:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    e56e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e575:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e57b:	85 c0                	test   eax,eax
    e57d:	0f 9e c0             	setle  al
    e580:	84 c0                	test   al,al
    e582:	74 5b                	je     e5df <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe1b>
    e584:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e58b:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    e591:	83 f8 17             	cmp    eax,0x17
    e594:	7f 0f                	jg     e5a5 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xde1>
    e596:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e59d:	48 89 c7             	mov    rdi,rax
    e5a0:	e8 81 95 ff ff       	call   7b26 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    e5a5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5ac:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e5b3:	3c cf                	cmp    al,0xcf
    e5b5:	76 12                	jbe    e5c9 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe05>
    e5b7:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5be:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e5c5:	3c d7                	cmp    al,0xd7
    e5c7:	76 07                	jbe    e5d0 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe0c>
    e5c9:	b8 01 00 00 00       	mov    eax,0x1
    e5ce:	eb 2c                	jmp    e5fc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e5d0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5d7:	48 89 c7             	mov    rdi,rax
    e5da:	e8 24 f1 ff ff       	call   d703 <stbi__jpeg_reset(stbi__jpeg*)>
    e5df:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
    e5e6:	e9 04 fd ff ff       	jmp    e2ef <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb2b>
    e5eb:	83 85 14 ff ff ff 01 	add    DWORD PTR [rbp-0xec],0x1
    e5f2:	e9 d5 fc ff ff       	jmp    e2cc <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb08>
    e5f7:	b8 01 00 00 00       	mov    eax,0x1
    e5fc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
    e600:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
    e609:	74 05                	je     e610 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe4c>
    e60b:	e8 a0 5e ff ff       	call   44b0 <__stack_chk_fail@plt>
    e610:	c9                   	leave  
    e611:	c3                   	ret    

000000000000e612 <stbi__jpeg_dequantize(short*, unsigned short*)>:
    e612:	55                   	push   rbp
    e613:	48 89 e5             	mov    rbp,rsp
    e616:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    e61a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    e61e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    e625:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
    e629:	7f 44                	jg     e66f <stbi__jpeg_dequantize(short*, unsigned short*)+0x5d>
    e62b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    e62e:	48 98                	cdqe   
    e630:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    e634:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    e638:	48 01 d0             	add    rax,rdx
    e63b:	0f b7 00             	movzx  eax,WORD PTR [rax]
    e63e:	89 c2                	mov    edx,eax
    e640:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    e643:	48 98                	cdqe   
    e645:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    e649:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    e64d:	48 01 c8             	add    rax,rcx
    e650:	0f b7 00             	movzx  eax,WORD PTR [rax]
    e653:	0f af d0             	imul   edx,eax
    e656:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    e659:	48 98                	cdqe   
    e65b:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    e65f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    e663:	48 01 c8             	add    rax,rcx
    e666:	66 89 10             	mov    WORD PTR [rax],dx
    e669:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    e66d:	eb b6                	jmp    e625 <stbi__jpeg_dequantize(short*, unsigned short*)+0x13>
    e66f:	90                   	nop
    e670:	5d                   	pop    rbp
    e671:	c3                   	ret    

000000000000e672 <stbi__jpeg_finish(stbi__jpeg*)>:
    e672:	55                   	push   rbp
    e673:	48 89 e5             	mov    rbp,rsp
    e676:	48 83 ec 30          	sub    rsp,0x30
    e67a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    e67e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e682:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    e688:	85 c0                	test   eax,eax
    e68a:	0f 84 f0 01 00 00    	je     e880 <stbi__jpeg_finish(stbi__jpeg*)+0x20e>
    e690:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    e697:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e69b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e69e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    e6a1:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    e6a4:	0f 8d d6 01 00 00    	jge    e880 <stbi__jpeg_finish(stbi__jpeg*)+0x20e>
    e6aa:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e6ae:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e6b1:	48 63 d0             	movsxd rdx,eax
    e6b4:	48 89 d0             	mov    rax,rdx
    e6b7:	48 01 c0             	add    rax,rax
    e6ba:	48 01 d0             	add    rax,rdx
    e6bd:	48 c1 e0 05          	shl    rax,0x5
    e6c1:	48 01 c8             	add    rax,rcx
    e6c4:	48 05 bc 46 00 00    	add    rax,0x46bc
    e6ca:	8b 00                	mov    eax,DWORD PTR [rax]
    e6cc:	83 c0 07             	add    eax,0x7
    e6cf:	c1 f8 03             	sar    eax,0x3
    e6d2:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    e6d5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e6d9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e6dc:	48 63 d0             	movsxd rdx,eax
    e6df:	48 89 d0             	mov    rax,rdx
    e6e2:	48 01 c0             	add    rax,rax
    e6e5:	48 01 d0             	add    rax,rdx
    e6e8:	48 c1 e0 05          	shl    rax,0x5
    e6ec:	48 01 c8             	add    rax,rcx
    e6ef:	48 05 c0 46 00 00    	add    rax,0x46c0
    e6f5:	8b 00                	mov    eax,DWORD PTR [rax]
    e6f7:	83 c0 07             	add    eax,0x7
    e6fa:	c1 f8 03             	sar    eax,0x3
    e6fd:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    e700:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    e707:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    e70a:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    e70d:	0f 8d 64 01 00 00    	jge    e877 <stbi__jpeg_finish(stbi__jpeg*)+0x205>
    e713:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    e71a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e71d:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
    e720:	0f 8d 48 01 00 00    	jge    e86e <stbi__jpeg_finish(stbi__jpeg*)+0x1fc>
    e726:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e72a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e72d:	48 63 d0             	movsxd rdx,eax
    e730:	48 89 d0             	mov    rax,rdx
    e733:	48 01 c0             	add    rax,rax
    e736:	48 01 d0             	add    rax,rdx
    e739:	48 c1 e0 05          	shl    rax,0x5
    e73d:	48 01 c8             	add    rax,rcx
    e740:	48 05 f0 46 00 00    	add    rax,0x46f0
    e746:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    e749:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    e74d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e750:	48 63 d0             	movsxd rdx,eax
    e753:	48 89 d0             	mov    rax,rdx
    e756:	48 01 c0             	add    rax,rax
    e759:	48 01 d0             	add    rax,rdx
    e75c:	48 c1 e0 05          	shl    rax,0x5
    e760:	48 01 f0             	add    rax,rsi
    e763:	48 05 f8 46 00 00    	add    rax,0x46f8
    e769:	8b 00                	mov    eax,DWORD PTR [rax]
    e76b:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
    e76f:	89 c2                	mov    edx,eax
    e771:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e774:	01 d0                	add    eax,edx
    e776:	c1 e0 06             	shl    eax,0x6
    e779:	48 98                	cdqe   
    e77b:	48 01 c0             	add    rax,rax
    e77e:	48 01 c8             	add    rax,rcx
    e781:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e785:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e789:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e78c:	48 63 d0             	movsxd rdx,eax
    e78f:	48 89 d0             	mov    rax,rdx
    e792:	48 01 c0             	add    rax,rax
    e795:	48 01 d0             	add    rax,rdx
    e798:	48 c1 e0 05          	shl    rax,0x5
    e79c:	48 01 c8             	add    rax,rcx
    e79f:	48 05 ac 46 00 00    	add    rax,0x46ac
    e7a5:	8b 00                	mov    eax,DWORD PTR [rax]
    e7a7:	48 98                	cdqe   
    e7a9:	48 83 c0 69          	add    rax,0x69
    e7ad:	48 c1 e0 07          	shl    rax,0x7
    e7b1:	48 89 c2             	mov    rdx,rax
    e7b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e7b8:	48 01 d0             	add    rax,rdx
    e7bb:	48 8d 50 08          	lea    rdx,[rax+0x8]
    e7bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e7c3:	48 89 d6             	mov    rsi,rdx
    e7c6:	48 89 c7             	mov    rdi,rax
    e7c9:	e8 44 fe ff ff       	call   e612 <stbi__jpeg_dequantize(short*, unsigned short*)>
    e7ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e7d2:	4c 8b 80 70 48 00 00 	mov    r8,QWORD PTR [rax+0x4870]
    e7d9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e7dd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e7e0:	48 63 d0             	movsxd rdx,eax
    e7e3:	48 89 d0             	mov    rax,rdx
    e7e6:	48 01 c0             	add    rax,rax
    e7e9:	48 01 d0             	add    rax,rdx
    e7ec:	48 c1 e0 05          	shl    rax,0x5
    e7f0:	48 01 c8             	add    rax,rcx
    e7f3:	48 05 c4 46 00 00    	add    rax,0x46c4
    e7f9:	8b 08                	mov    ecx,DWORD PTR [rax]
    e7fb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    e7ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e802:	48 63 d0             	movsxd rdx,eax
    e805:	48 89 d0             	mov    rax,rdx
    e808:	48 01 c0             	add    rax,rax
    e80b:	48 01 d0             	add    rax,rdx
    e80e:	48 c1 e0 05          	shl    rax,0x5
    e812:	48 01 f0             	add    rax,rsi
    e815:	48 05 d0 46 00 00    	add    rax,0x46d0
    e81b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    e81e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
    e822:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e825:	48 63 d0             	movsxd rdx,eax
    e828:	48 89 d0             	mov    rax,rdx
    e82b:	48 01 c0             	add    rax,rax
    e82e:	48 01 d0             	add    rax,rdx
    e831:	48 c1 e0 05          	shl    rax,0x5
    e835:	48 01 f8             	add    rax,rdi
    e838:	48 05 c4 46 00 00    	add    rax,0x46c4
    e83e:	8b 00                	mov    eax,DWORD PTR [rax]
    e840:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
    e844:	c1 e0 03             	shl    eax,0x3
    e847:	48 63 d0             	movsxd rdx,eax
    e84a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e84d:	c1 e0 03             	shl    eax,0x3
    e850:	48 98                	cdqe   
    e852:	48 01 d0             	add    rax,rdx
    e855:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
    e859:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e85d:	48 89 c2             	mov    rdx,rax
    e860:	89 ce                	mov    esi,ecx
    e862:	41 ff d0             	call   r8
    e865:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    e869:	e9 ac fe ff ff       	jmp    e71a <stbi__jpeg_finish(stbi__jpeg*)+0xa8>
    e86e:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    e872:	e9 90 fe ff ff       	jmp    e707 <stbi__jpeg_finish(stbi__jpeg*)+0x95>
    e877:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    e87b:	e9 17 fe ff ff       	jmp    e697 <stbi__jpeg_finish(stbi__jpeg*)+0x25>
    e880:	90                   	nop
    e881:	c9                   	leave  
    e882:	c3                   	ret    

000000000000e883 <stbi__process_marker(stbi__jpeg*, int)>:
    e883:	55                   	push   rbp
    e884:	48 89 e5             	mov    rbp,rsp
    e887:	53                   	push   rbx
    e888:	48 81 ec b8 00 00 00 	sub    rsp,0xb8
    e88f:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
    e896:	89 b5 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],esi
    e89c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    e8a5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    e8a9:	31 c0                	xor    eax,eax
    e8ab:	81 bd 44 ff ff ff ff 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xff
    e8b5:	74 4d                	je     e904 <stbi__process_marker(stbi__jpeg*, int)+0x81>
    e8b7:	81 bd 44 ff ff ff ff 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xff
    e8c1:	0f 8f 45 04 00 00    	jg     ed0c <stbi__process_marker(stbi__jpeg*, int)+0x489>
    e8c7:	81 bd 44 ff ff ff dd 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdd
    e8d1:	74 42                	je     e915 <stbi__process_marker(stbi__jpeg*, int)+0x92>
    e8d3:	81 bd 44 ff ff ff dd 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdd
    e8dd:	0f 8f 29 04 00 00    	jg     ed0c <stbi__process_marker(stbi__jpeg*, int)+0x489>
    e8e3:	81 bd 44 ff ff ff c4 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xc4
    e8ed:	0f 84 c8 01 00 00    	je     eabb <stbi__process_marker(stbi__jpeg*, int)+0x238>
    e8f3:	81 bd 44 ff ff ff db 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdb
    e8fd:	74 6c                	je     e96b <stbi__process_marker(stbi__jpeg*, int)+0xe8>
    e8ff:	e9 08 04 00 00       	jmp    ed0c <stbi__process_marker(stbi__jpeg*, int)+0x489>
    e904:	48 8d 3d 36 bc 02 00 	lea    rdi,[rip+0x2bc36]        # 3a541 <stbi__process_marker(stbi__jpeg*, int)::tag+0x6>
    e90b:	e8 2f 62 ff ff       	call   4b3f <stbi__err(char const*)>
    e910:	e9 37 06 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    e915:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e91c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e91f:	48 89 c7             	mov    rdi,rax
    e922:	e8 6b 7e ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    e927:	83 f8 04             	cmp    eax,0x4
    e92a:	0f 95 c0             	setne  al
    e92d:	84 c0                	test   al,al
    e92f:	74 11                	je     e942 <stbi__process_marker(stbi__jpeg*, int)+0xbf>
    e931:	48 8d 3d 19 bc 02 00 	lea    rdi,[rip+0x2bc19]        # 3a551 <stbi__process_marker(stbi__jpeg*, int)::tag+0x16>
    e938:	e8 02 62 ff ff       	call   4b3f <stbi__err(char const*)>
    e93d:	e9 0a 06 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    e942:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e949:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e94c:	48 89 c7             	mov    rdi,rax
    e94f:	e8 3e 7e ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    e954:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
    e95b:	89 82 68 48 00 00    	mov    DWORD PTR [rdx+0x4868],eax
    e961:	b8 01 00 00 00       	mov    eax,0x1
    e966:	e9 e1 05 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    e96b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e972:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e975:	48 89 c7             	mov    rdi,rax
    e978:	e8 15 7e ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    e97d:	83 e8 02             	sub    eax,0x2
    e980:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    e986:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    e98d:	0f 8e 16 01 00 00    	jle    eaa9 <stbi__process_marker(stbi__jpeg*, int)+0x226>
    e993:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e99a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e99d:	48 89 c7             	mov    rdi,rax
    e9a0:	e8 0a 7b ff ff       	call   64af <stbi__get8(stbi__context*)>
    e9a5:	0f b6 c0             	movzx  eax,al
    e9a8:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
    e9ae:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
    e9b4:	c1 f8 04             	sar    eax,0x4
    e9b7:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
    e9ba:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
    e9be:	0f 95 c0             	setne  al
    e9c1:	0f b6 c0             	movzx  eax,al
    e9c4:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
    e9c7:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
    e9cd:	83 e0 0f             	and    eax,0xf
    e9d0:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    e9d3:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
    e9d7:	74 17                	je     e9f0 <stbi__process_marker(stbi__jpeg*, int)+0x16d>
    e9d9:	83 7d 80 01          	cmp    DWORD PTR [rbp-0x80],0x1
    e9dd:	74 11                	je     e9f0 <stbi__process_marker(stbi__jpeg*, int)+0x16d>
    e9df:	48 8d 3d 77 bb 02 00 	lea    rdi,[rip+0x2bb77]        # 3a55d <stbi__process_marker(stbi__jpeg*, int)::tag+0x22>
    e9e6:	e8 54 61 ff ff       	call   4b3f <stbi__err(char const*)>
    e9eb:	e9 5c 05 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    e9f0:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
    e9f4:	7e 11                	jle    ea07 <stbi__process_marker(stbi__jpeg*, int)+0x184>
    e9f6:	48 8d 3d 6d bb 02 00 	lea    rdi,[rip+0x2bb6d]        # 3a56a <stbi__process_marker(stbi__jpeg*, int)::tag+0x2f>
    e9fd:	e8 3d 61 ff ff       	call   4b3f <stbi__err(char const*)>
    ea02:	e9 45 05 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ea07:	c7 85 60 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa0],0x0
    ea11:	83 bd 60 ff ff ff 3f 	cmp    DWORD PTR [rbp-0xa0],0x3f
    ea18:	7f 72                	jg     ea8c <stbi__process_marker(stbi__jpeg*, int)+0x209>
    ea1a:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
    ea1e:	74 14                	je     ea34 <stbi__process_marker(stbi__jpeg*, int)+0x1b1>
    ea20:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ea27:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ea2a:	48 89 c7             	mov    rdi,rax
    ea2d:	e8 60 7d ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    ea32:	eb 15                	jmp    ea49 <stbi__process_marker(stbi__jpeg*, int)+0x1c6>
    ea34:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ea3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ea3e:	48 89 c7             	mov    rdi,rax
    ea41:	e8 69 7a ff ff       	call   64af <stbi__get8(stbi__context*)>
    ea46:	0f b6 c0             	movzx  eax,al
    ea49:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
    ea4f:	48 63 d2             	movsxd rdx,edx
    ea52:	48 8d 0d 67 ba 02 00 	lea    rcx,[rip+0x2ba67]        # 3a4c0 <stbi__jpeg_dezigzag>
    ea59:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
    ea5d:	0f b6 ca             	movzx  ecx,dl
    ea60:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
    ea67:	48 63 f1             	movsxd rsi,ecx
    ea6a:	8b 4d 88             	mov    ecx,DWORD PTR [rbp-0x78]
    ea6d:	48 63 c9             	movsxd rcx,ecx
    ea70:	48 c1 e1 06          	shl    rcx,0x6
    ea74:	48 01 f1             	add    rcx,rsi
    ea77:	48 81 c1 40 1a 00 00 	add    rcx,0x1a40
    ea7e:	66 89 44 4a 08       	mov    WORD PTR [rdx+rcx*2+0x8],ax
    ea83:	83 85 60 ff ff ff 01 	add    DWORD PTR [rbp-0xa0],0x1
    ea8a:	eb 85                	jmp    ea11 <stbi__process_marker(stbi__jpeg*, int)+0x18e>
    ea8c:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
    ea90:	74 07                	je     ea99 <stbi__process_marker(stbi__jpeg*, int)+0x216>
    ea92:	b8 81 00 00 00       	mov    eax,0x81
    ea97:	eb 05                	jmp    ea9e <stbi__process_marker(stbi__jpeg*, int)+0x21b>
    ea99:	b8 41 00 00 00       	mov    eax,0x41
    ea9e:	29 85 5c ff ff ff    	sub    DWORD PTR [rbp-0xa4],eax
    eaa4:	e9 dd fe ff ff       	jmp    e986 <stbi__process_marker(stbi__jpeg*, int)+0x103>
    eaa9:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    eab0:	0f 94 c0             	sete   al
    eab3:	0f b6 c0             	movzx  eax,al
    eab6:	e9 91 04 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    eabb:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eac2:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eac5:	48 89 c7             	mov    rdi,rax
    eac8:	e8 c5 7c ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    eacd:	83 e8 02             	sub    eax,0x2
    ead0:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    ead6:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    eadd:	0f 8e 17 02 00 00    	jle    ecfa <stbi__process_marker(stbi__jpeg*, int)+0x477>
    eae3:	c7 85 68 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x98],0x0
    eaed:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eaf4:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eaf7:	48 89 c7             	mov    rdi,rax
    eafa:	e8 b0 79 ff ff       	call   64af <stbi__get8(stbi__context*)>
    eaff:	0f b6 c0             	movzx  eax,al
    eb02:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    eb05:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
    eb08:	c1 f8 04             	sar    eax,0x4
    eb0b:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
    eb0e:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
    eb11:	83 e0 0f             	and    eax,0xf
    eb14:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
    eb17:	83 7d 90 01          	cmp    DWORD PTR [rbp-0x70],0x1
    eb1b:	7f 06                	jg     eb23 <stbi__process_marker(stbi__jpeg*, int)+0x2a0>
    eb1d:	83 7d 94 03          	cmp    DWORD PTR [rbp-0x6c],0x3
    eb21:	7e 11                	jle    eb34 <stbi__process_marker(stbi__jpeg*, int)+0x2b1>
    eb23:	48 8d 3d 4e ba 02 00 	lea    rdi,[rip+0x2ba4e]        # 3a578 <stbi__process_marker(stbi__jpeg*, int)::tag+0x3d>
    eb2a:	e8 10 60 ff ff       	call   4b3f <stbi__err(char const*)>
    eb2f:	e9 18 04 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    eb34:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
    eb3e:	83 bd 64 ff ff ff 0f 	cmp    DWORD PTR [rbp-0x9c],0xf
    eb45:	7f 3c                	jg     eb83 <stbi__process_marker(stbi__jpeg*, int)+0x300>
    eb47:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eb4e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb51:	48 89 c7             	mov    rdi,rax
    eb54:	e8 56 79 ff ff       	call   64af <stbi__get8(stbi__context*)>
    eb59:	0f b6 d0             	movzx  edx,al
    eb5c:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
    eb62:	48 98                	cdqe   
    eb64:	89 54 85 a0          	mov    DWORD PTR [rbp+rax*4-0x60],edx
    eb68:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
    eb6e:	48 98                	cdqe   
    eb70:	8b 44 85 a0          	mov    eax,DWORD PTR [rbp+rax*4-0x60]
    eb74:	01 85 68 ff ff ff    	add    DWORD PTR [rbp-0x98],eax
    eb7a:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
    eb81:	eb bb                	jmp    eb3e <stbi__process_marker(stbi__jpeg*, int)+0x2bb>
    eb83:	83 ad 5c ff ff ff 11 	sub    DWORD PTR [rbp-0xa4],0x11
    eb8a:	83 7d 90 00          	cmp    DWORD PTR [rbp-0x70],0x0
    eb8e:	75 63                	jne    ebf3 <stbi__process_marker(stbi__jpeg*, int)+0x370>
    eb90:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eb97:	48 8d 50 08          	lea    rdx,[rax+0x8]
    eb9b:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    eb9e:	48 98                	cdqe   
    eba0:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    eba7:	48 01 c2             	add    rdx,rax
    ebaa:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    ebae:	48 89 c6             	mov    rsi,rax
    ebb1:	48 89 d7             	mov    rdi,rdx
    ebb4:	e8 dc 8b ff ff       	call   7795 <stbi__build_huffman(stbi__huffman*, int*)>
    ebb9:	85 c0                	test   eax,eax
    ebbb:	0f 94 c0             	sete   al
    ebbe:	84 c0                	test   al,al
    ebc0:	74 0a                	je     ebcc <stbi__process_marker(stbi__jpeg*, int)+0x349>
    ebc2:	b8 00 00 00 00       	mov    eax,0x0
    ebc7:	e9 80 03 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ebcc:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ebcf:	48 98                	cdqe   
    ebd1:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ebd8:	48 8d 90 00 04 00 00 	lea    rdx,[rax+0x400]
    ebdf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ebe6:	48 01 d0             	add    rax,rdx
    ebe9:	48 83 c0 08          	add    rax,0x8
    ebed:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
    ebf1:	eb 64                	jmp    ec57 <stbi__process_marker(stbi__jpeg*, int)+0x3d4>
    ebf3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ebfa:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    ec01:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ec04:	48 98                	cdqe   
    ec06:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ec0d:	48 01 c2             	add    rdx,rax
    ec10:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    ec14:	48 89 c6             	mov    rsi,rax
    ec17:	48 89 d7             	mov    rdi,rdx
    ec1a:	e8 76 8b ff ff       	call   7795 <stbi__build_huffman(stbi__huffman*, int*)>
    ec1f:	85 c0                	test   eax,eax
    ec21:	0f 94 c0             	sete   al
    ec24:	84 c0                	test   al,al
    ec26:	74 0a                	je     ec32 <stbi__process_marker(stbi__jpeg*, int)+0x3af>
    ec28:	b8 00 00 00 00       	mov    eax,0x0
    ec2d:	e9 1a 03 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ec32:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ec35:	48 98                	cdqe   
    ec37:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ec3e:	48 8d 90 40 1e 00 00 	lea    rdx,[rax+0x1e40]
    ec45:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ec4c:	48 01 d0             	add    rax,rdx
    ec4f:	48 83 c0 08          	add    rax,0x8
    ec53:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
    ec57:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
    ec61:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
    ec67:	3b 85 68 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x98]
    ec6d:	7d 2e                	jge    ec9d <stbi__process_marker(stbi__jpeg*, int)+0x41a>
    ec6f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ec76:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ec79:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
    ec7f:	48 63 ca             	movsxd rcx,edx
    ec82:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
    ec86:	48 8d 1c 11          	lea    rbx,[rcx+rdx*1]
    ec8a:	48 89 c7             	mov    rdi,rax
    ec8d:	e8 1d 78 ff ff       	call   64af <stbi__get8(stbi__context*)>
    ec92:	88 03                	mov    BYTE PTR [rbx],al
    ec94:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
    ec9b:	eb c4                	jmp    ec61 <stbi__process_marker(stbi__jpeg*, int)+0x3de>
    ec9d:	83 7d 90 00          	cmp    DWORD PTR [rbp-0x70],0x0
    eca1:	74 46                	je     ece9 <stbi__process_marker(stbi__jpeg*, int)+0x466>
    eca3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ecaa:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    ecb1:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ecb4:	48 98                	cdqe   
    ecb6:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ecbd:	48 01 c2             	add    rdx,rax
    ecc0:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ecc3:	48 98                	cdqe   
    ecc5:	48 c1 e0 0a          	shl    rax,0xa
    ecc9:	48 8d 88 80 36 00 00 	lea    rcx,[rax+0x3680]
    ecd0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ecd7:	48 01 c8             	add    rax,rcx
    ecda:	48 83 c0 08          	add    rax,0x8
    ecde:	48 89 d6             	mov    rsi,rdx
    ece1:	48 89 c7             	mov    rdi,rax
    ece4:	e8 ee 8c ff ff       	call   79d7 <stbi__build_fast_ac(short*, stbi__huffman*)>
    ece9:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
    ecef:	29 85 5c ff ff ff    	sub    DWORD PTR [rbp-0xa4],eax
    ecf5:	e9 dc fd ff ff       	jmp    ead6 <stbi__process_marker(stbi__jpeg*, int)+0x253>
    ecfa:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    ed01:	0f 94 c0             	sete   al
    ed04:	0f b6 c0             	movzx  eax,al
    ed07:	e9 40 02 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ed0c:	81 bd 44 ff ff ff df 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdf
    ed16:	7e 0c                	jle    ed24 <stbi__process_marker(stbi__jpeg*, int)+0x4a1>
    ed18:	81 bd 44 ff ff ff ef 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xef
    ed22:	7e 10                	jle    ed34 <stbi__process_marker(stbi__jpeg*, int)+0x4b1>
    ed24:	81 bd 44 ff ff ff fe 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xfe
    ed2e:	0f 85 0b 02 00 00    	jne    ef3f <stbi__process_marker(stbi__jpeg*, int)+0x6bc>
    ed34:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ed3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ed3e:	48 89 c7             	mov    rdi,rax
    ed41:	e8 4c 7a ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    ed46:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    ed4c:	83 bd 5c ff ff ff 01 	cmp    DWORD PTR [rbp-0xa4],0x1
    ed53:	7f 2e                	jg     ed83 <stbi__process_marker(stbi__jpeg*, int)+0x500>
    ed55:	81 bd 44 ff ff ff fe 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xfe
    ed5f:	75 11                	jne    ed72 <stbi__process_marker(stbi__jpeg*, int)+0x4ef>
    ed61:	48 8d 3d 1f b8 02 00 	lea    rdi,[rip+0x2b81f]        # 3a587 <stbi__process_marker(stbi__jpeg*, int)::tag+0x4c>
    ed68:	e8 d2 5d ff ff       	call   4b3f <stbi__err(char const*)>
    ed6d:	e9 da 01 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ed72:	48 8d 3d 1a b8 02 00 	lea    rdi,[rip+0x2b81a]        # 3a593 <stbi__process_marker(stbi__jpeg*, int)::tag+0x58>
    ed79:	e8 c1 5d ff ff       	call   4b3f <stbi__err(char const*)>
    ed7e:	e9 c9 01 00 00       	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ed83:	83 ad 5c ff ff ff 02 	sub    DWORD PTR [rbp-0xa4],0x2
    ed8a:	81 bd 44 ff ff ff e0 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xe0
    ed94:	0f 85 96 00 00 00    	jne    ee30 <stbi__process_marker(stbi__jpeg*, int)+0x5ad>
    ed9a:	83 bd 5c ff ff ff 04 	cmp    DWORD PTR [rbp-0xa4],0x4
    eda1:	0f 8e 89 00 00 00    	jle    ee30 <stbi__process_marker(stbi__jpeg*, int)+0x5ad>
    eda7:	c7 85 6c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x94],0x1
    edb1:	c7 85 70 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x90],0x0
    edbb:	83 bd 70 ff ff ff 04 	cmp    DWORD PTR [rbp-0x90],0x4
    edc2:	7f 42                	jg     ee06 <stbi__process_marker(stbi__jpeg*, int)+0x583>
    edc4:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    edcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
    edce:	48 89 c7             	mov    rdi,rax
    edd1:	e8 d9 76 ff ff       	call   64af <stbi__get8(stbi__context*)>
    edd6:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
    eddc:	48 63 d2             	movsxd rdx,edx
    eddf:	48 8d 0d 50 b7 02 00 	lea    rcx,[rip+0x2b750]        # 3a536 <stbi__process_marker(stbi__jpeg*, int)::tag>
    ede6:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
    edea:	38 d0                	cmp    al,dl
    edec:	0f 95 c0             	setne  al
    edef:	84 c0                	test   al,al
    edf1:	74 0a                	je     edfd <stbi__process_marker(stbi__jpeg*, int)+0x57a>
    edf3:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
    edfd:	83 85 70 ff ff ff 01 	add    DWORD PTR [rbp-0x90],0x1
    ee04:	eb b5                	jmp    edbb <stbi__process_marker(stbi__jpeg*, int)+0x538>
    ee06:	83 ad 5c ff ff ff 05 	sub    DWORD PTR [rbp-0xa4],0x5
    ee0d:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
    ee14:	0f 84 03 01 00 00    	je     ef1d <stbi__process_marker(stbi__jpeg*, int)+0x69a>
    ee1a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ee21:	c7 80 48 48 00 00 01 00 00 00 	mov    DWORD PTR [rax+0x4848],0x1
    ee2b:	e9 ed 00 00 00       	jmp    ef1d <stbi__process_marker(stbi__jpeg*, int)+0x69a>
    ee30:	81 bd 44 ff ff ff ee 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xee
    ee3a:	0f 85 de 00 00 00    	jne    ef1e <stbi__process_marker(stbi__jpeg*, int)+0x69b>
    ee40:	83 bd 5c ff ff ff 0b 	cmp    DWORD PTR [rbp-0xa4],0xb
    ee47:	0f 8e d1 00 00 00    	jle    ef1e <stbi__process_marker(stbi__jpeg*, int)+0x69b>
    ee4d:	c7 85 74 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x1
    ee57:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
    ee61:	83 bd 78 ff ff ff 05 	cmp    DWORD PTR [rbp-0x88],0x5
    ee68:	7f 42                	jg     eeac <stbi__process_marker(stbi__jpeg*, int)+0x629>
    ee6a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ee71:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ee74:	48 89 c7             	mov    rdi,rax
    ee77:	e8 33 76 ff ff       	call   64af <stbi__get8(stbi__context*)>
    ee7c:	8b 95 78 ff ff ff    	mov    edx,DWORD PTR [rbp-0x88]
    ee82:	48 63 d2             	movsxd rdx,edx
    ee85:	48 8d 0d af b6 02 00 	lea    rcx,[rip+0x2b6af]        # 3a53b <stbi__process_marker(stbi__jpeg*, int)::tag>
    ee8c:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
    ee90:	38 d0                	cmp    al,dl
    ee92:	0f 95 c0             	setne  al
    ee95:	84 c0                	test   al,al
    ee97:	74 0a                	je     eea3 <stbi__process_marker(stbi__jpeg*, int)+0x620>
    ee99:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
    eea3:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
    eeaa:	eb b5                	jmp    ee61 <stbi__process_marker(stbi__jpeg*, int)+0x5de>
    eeac:	83 ad 5c ff ff ff 06 	sub    DWORD PTR [rbp-0xa4],0x6
    eeb3:	83 bd 74 ff ff ff 00 	cmp    DWORD PTR [rbp-0x8c],0x0
    eeba:	74 62                	je     ef1e <stbi__process_marker(stbi__jpeg*, int)+0x69b>
    eebc:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eec3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eec6:	48 89 c7             	mov    rdi,rax
    eec9:	e8 e1 75 ff ff       	call   64af <stbi__get8(stbi__context*)>
    eece:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eed5:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eed8:	48 89 c7             	mov    rdi,rax
    eedb:	e8 b2 78 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    eee0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eee7:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eeea:	48 89 c7             	mov    rdi,rax
    eeed:	e8 a0 78 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    eef2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eef9:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eefc:	48 89 c7             	mov    rdi,rax
    eeff:	e8 ab 75 ff ff       	call   64af <stbi__get8(stbi__context*)>
    ef04:	0f b6 d0             	movzx  edx,al
    ef07:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef0e:	89 90 4c 48 00 00    	mov    DWORD PTR [rax+0x484c],edx
    ef14:	83 ad 5c ff ff ff 06 	sub    DWORD PTR [rbp-0xa4],0x6
    ef1b:	eb 01                	jmp    ef1e <stbi__process_marker(stbi__jpeg*, int)+0x69b>
    ef1d:	90                   	nop
    ef1e:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef25:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef28:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
    ef2e:	89 d6                	mov    esi,edx
    ef30:	48 89 c7             	mov    rdi,rax
    ef33:	e8 6b 76 ff ff       	call   65a3 <stbi__skip(stbi__context*, int)>
    ef38:	b8 01 00 00 00       	mov    eax,0x1
    ef3d:	eb 0d                	jmp    ef4c <stbi__process_marker(stbi__jpeg*, int)+0x6c9>
    ef3f:	48 8d 3d 59 b6 02 00 	lea    rdi,[rip+0x2b659]        # 3a59f <stbi__process_marker(stbi__jpeg*, int)::tag+0x64>
    ef46:	e8 f4 5b ff ff       	call   4b3f <stbi__err(char const*)>
    ef4b:	90                   	nop
    ef4c:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
    ef50:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
    ef59:	74 05                	je     ef60 <stbi__process_marker(stbi__jpeg*, int)+0x6dd>
    ef5b:	e8 50 55 ff ff       	call   44b0 <__stack_chk_fail@plt>
    ef60:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    ef64:	c9                   	leave  
    ef65:	c3                   	ret    

000000000000ef66 <stbi__process_scan_header(stbi__jpeg*)>:
    ef66:	55                   	push   rbp
    ef67:	48 89 e5             	mov    rbp,rsp
    ef6a:	48 83 ec 30          	sub    rsp,0x30
    ef6e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    ef72:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ef76:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef79:	48 89 c7             	mov    rdi,rax
    ef7c:	e8 11 78 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    ef81:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    ef84:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ef88:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef8b:	48 89 c7             	mov    rdi,rax
    ef8e:	e8 1c 75 ff ff       	call   64af <stbi__get8(stbi__context*)>
    ef93:	0f b6 d0             	movzx  edx,al
    ef96:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ef9a:	89 90 54 48 00 00    	mov    DWORD PTR [rax+0x4854],edx
    efa0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    efa4:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    efaa:	85 c0                	test   eax,eax
    efac:	7e 27                	jle    efd5 <stbi__process_scan_header(stbi__jpeg*)+0x6f>
    efae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    efb2:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    efb8:	83 f8 04             	cmp    eax,0x4
    efbb:	7f 18                	jg     efd5 <stbi__process_scan_header(stbi__jpeg*)+0x6f>
    efbd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    efc1:	8b 90 54 48 00 00    	mov    edx,DWORD PTR [rax+0x4854]
    efc7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    efcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
    efce:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    efd1:	39 c2                	cmp    edx,eax
    efd3:	7e 11                	jle    efe6 <stbi__process_scan_header(stbi__jpeg*)+0x80>
    efd5:	48 8d 3d d2 b5 02 00 	lea    rdi,[rip+0x2b5d2]        # 3a5ae <stbi__process_marker(stbi__jpeg*, int)::tag+0x73>
    efdc:	e8 5e 5b ff ff       	call   4b3f <stbi__err(char const*)>
    efe1:	e9 e5 02 00 00       	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    efe6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    efea:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    eff0:	83 c0 03             	add    eax,0x3
    eff3:	01 c0                	add    eax,eax
    eff5:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    eff8:	74 11                	je     f00b <stbi__process_scan_header(stbi__jpeg*)+0xa5>
    effa:	48 8d 3d c5 b5 02 00 	lea    rdi,[rip+0x2b5c5]        # 3a5c6 <stbi__process_marker(stbi__jpeg*, int)::tag+0x8b>
    f001:	e8 39 5b ff ff       	call   4b3f <stbi__err(char const*)>
    f006:	e9 c0 02 00 00       	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f00b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    f012:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f016:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    f01c:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    f01f:	0f 8d 6c 01 00 00    	jge    f191 <stbi__process_scan_header(stbi__jpeg*)+0x22b>
    f025:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f029:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f02c:	48 89 c7             	mov    rdi,rax
    f02f:	e8 7b 74 ff ff       	call   64af <stbi__get8(stbi__context*)>
    f034:	0f b6 c0             	movzx  eax,al
    f037:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    f03a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f03e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f041:	48 89 c7             	mov    rdi,rax
    f044:	e8 66 74 ff ff       	call   64af <stbi__get8(stbi__context*)>
    f049:	0f b6 c0             	movzx  eax,al
    f04c:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    f04f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    f056:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f05a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f05d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f060:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    f063:	7d 2e                	jge    f093 <stbi__process_scan_header(stbi__jpeg*)+0x12d>
    f065:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f069:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f06c:	48 63 d0             	movsxd rdx,eax
    f06f:	48 89 d0             	mov    rax,rdx
    f072:	48 01 c0             	add    rax,rax
    f075:	48 01 d0             	add    rax,rdx
    f078:	48 c1 e0 05          	shl    rax,0x5
    f07c:	48 01 c8             	add    rax,rcx
    f07f:	48 05 a0 46 00 00    	add    rax,0x46a0
    f085:	8b 00                	mov    eax,DWORD PTR [rax]
    f087:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    f08a:	74 06                	je     f092 <stbi__process_scan_header(stbi__jpeg*)+0x12c>
    f08c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    f090:	eb c4                	jmp    f056 <stbi__process_scan_header(stbi__jpeg*)+0xf0>
    f092:	90                   	nop
    f093:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f097:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f09a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f09d:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    f0a0:	75 0a                	jne    f0ac <stbi__process_scan_header(stbi__jpeg*)+0x146>
    f0a2:	b8 00 00 00 00       	mov    eax,0x0
    f0a7:	e9 1f 02 00 00       	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f0ac:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    f0af:	c1 f8 04             	sar    eax,0x4
    f0b2:	89 c1                	mov    ecx,eax
    f0b4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    f0b8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f0bb:	48 63 d0             	movsxd rdx,eax
    f0be:	48 89 d0             	mov    rax,rdx
    f0c1:	48 01 c0             	add    rax,rax
    f0c4:	48 01 d0             	add    rax,rdx
    f0c7:	48 c1 e0 05          	shl    rax,0x5
    f0cb:	48 01 f0             	add    rax,rsi
    f0ce:	48 05 b0 46 00 00    	add    rax,0x46b0
    f0d4:	89 08                	mov    DWORD PTR [rax],ecx
    f0d6:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f0da:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f0dd:	48 63 d0             	movsxd rdx,eax
    f0e0:	48 89 d0             	mov    rax,rdx
    f0e3:	48 01 c0             	add    rax,rax
    f0e6:	48 01 d0             	add    rax,rdx
    f0e9:	48 c1 e0 05          	shl    rax,0x5
    f0ed:	48 01 c8             	add    rax,rcx
    f0f0:	48 05 b0 46 00 00    	add    rax,0x46b0
    f0f6:	8b 00                	mov    eax,DWORD PTR [rax]
    f0f8:	83 f8 03             	cmp    eax,0x3
    f0fb:	7e 11                	jle    f10e <stbi__process_scan_header(stbi__jpeg*)+0x1a8>
    f0fd:	48 8d 3d ce b4 02 00 	lea    rdi,[rip+0x2b4ce]        # 3a5d2 <stbi__process_marker(stbi__jpeg*, int)::tag+0x97>
    f104:	e8 36 5a ff ff       	call   4b3f <stbi__err(char const*)>
    f109:	e9 bd 01 00 00       	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f10e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    f111:	83 e0 0f             	and    eax,0xf
    f114:	89 c1                	mov    ecx,eax
    f116:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    f11a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f11d:	48 63 d0             	movsxd rdx,eax
    f120:	48 89 d0             	mov    rax,rdx
    f123:	48 01 c0             	add    rax,rax
    f126:	48 01 d0             	add    rax,rdx
    f129:	48 c1 e0 05          	shl    rax,0x5
    f12d:	48 01 f0             	add    rax,rsi
    f130:	48 05 b4 46 00 00    	add    rax,0x46b4
    f136:	89 08                	mov    DWORD PTR [rax],ecx
    f138:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f13c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f13f:	48 63 d0             	movsxd rdx,eax
    f142:	48 89 d0             	mov    rax,rdx
    f145:	48 01 c0             	add    rax,rax
    f148:	48 01 d0             	add    rax,rdx
    f14b:	48 c1 e0 05          	shl    rax,0x5
    f14f:	48 01 c8             	add    rax,rcx
    f152:	48 05 b4 46 00 00    	add    rax,0x46b4
    f158:	8b 00                	mov    eax,DWORD PTR [rax]
    f15a:	83 f8 03             	cmp    eax,0x3
    f15d:	7e 11                	jle    f170 <stbi__process_scan_header(stbi__jpeg*)+0x20a>
    f15f:	48 8d 3d 78 b4 02 00 	lea    rdi,[rip+0x2b478]        # 3a5de <stbi__process_marker(stbi__jpeg*, int)::tag+0xa3>
    f166:	e8 d4 59 ff ff       	call   4b3f <stbi__err(char const*)>
    f16b:	e9 5b 01 00 00       	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f170:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f174:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f177:	48 63 d2             	movsxd rdx,edx
    f17a:	48 8d 8a 14 12 00 00 	lea    rcx,[rdx+0x1214]
    f181:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    f184:	89 54 88 08          	mov    DWORD PTR [rax+rcx*4+0x8],edx
    f188:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    f18c:	e9 81 fe ff ff       	jmp    f012 <stbi__process_scan_header(stbi__jpeg*)+0xac>
    f191:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f195:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f198:	48 89 c7             	mov    rdi,rax
    f19b:	e8 0f 73 ff ff       	call   64af <stbi__get8(stbi__context*)>
    f1a0:	0f b6 d0             	movzx  edx,al
    f1a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f1a7:	89 90 34 48 00 00    	mov    DWORD PTR [rax+0x4834],edx
    f1ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f1b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f1b4:	48 89 c7             	mov    rdi,rax
    f1b7:	e8 f3 72 ff ff       	call   64af <stbi__get8(stbi__context*)>
    f1bc:	0f b6 d0             	movzx  edx,al
    f1bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f1c3:	89 90 38 48 00 00    	mov    DWORD PTR [rax+0x4838],edx
    f1c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f1cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f1d0:	48 89 c7             	mov    rdi,rax
    f1d3:	e8 d7 72 ff ff       	call   64af <stbi__get8(stbi__context*)>
    f1d8:	0f b6 c0             	movzx  eax,al
    f1db:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    f1de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f1e1:	c1 f8 04             	sar    eax,0x4
    f1e4:	89 c2                	mov    edx,eax
    f1e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f1ea:	89 90 3c 48 00 00    	mov    DWORD PTR [rax+0x483c],edx
    f1f0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f1f3:	83 e0 0f             	and    eax,0xf
    f1f6:	89 c2                	mov    edx,eax
    f1f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f1fc:	89 90 40 48 00 00    	mov    DWORD PTR [rax+0x4840],edx
    f202:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f206:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    f20c:	85 c0                	test   eax,eax
    f20e:	74 62                	je     f272 <stbi__process_scan_header(stbi__jpeg*)+0x30c>
    f210:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f214:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    f21a:	83 f8 3f             	cmp    eax,0x3f
    f21d:	7f 45                	jg     f264 <stbi__process_scan_header(stbi__jpeg*)+0x2fe>
    f21f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f223:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    f229:	83 f8 3f             	cmp    eax,0x3f
    f22c:	7f 36                	jg     f264 <stbi__process_scan_header(stbi__jpeg*)+0x2fe>
    f22e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f232:	8b 90 34 48 00 00    	mov    edx,DWORD PTR [rax+0x4834]
    f238:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f23c:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    f242:	39 c2                	cmp    edx,eax
    f244:	7f 1e                	jg     f264 <stbi__process_scan_header(stbi__jpeg*)+0x2fe>
    f246:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f24a:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    f250:	83 f8 0d             	cmp    eax,0xd
    f253:	7f 0f                	jg     f264 <stbi__process_scan_header(stbi__jpeg*)+0x2fe>
    f255:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f259:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    f25f:	83 f8 0d             	cmp    eax,0xd
    f262:	7e 62                	jle    f2c6 <stbi__process_scan_header(stbi__jpeg*)+0x360>
    f264:	48 8d 3d 7f b3 02 00 	lea    rdi,[rip+0x2b37f]        # 3a5ea <stbi__process_marker(stbi__jpeg*, int)::tag+0xaf>
    f26b:	e8 cf 58 ff ff       	call   4b3f <stbi__err(char const*)>
    f270:	eb 59                	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f272:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f276:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    f27c:	85 c0                	test   eax,eax
    f27e:	74 0e                	je     f28e <stbi__process_scan_header(stbi__jpeg*)+0x328>
    f280:	48 8d 3d 63 b3 02 00 	lea    rdi,[rip+0x2b363]        # 3a5ea <stbi__process_marker(stbi__jpeg*, int)::tag+0xaf>
    f287:	e8 b3 58 ff ff       	call   4b3f <stbi__err(char const*)>
    f28c:	eb 3d                	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f28e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f292:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    f298:	85 c0                	test   eax,eax
    f29a:	75 0e                	jne    f2aa <stbi__process_scan_header(stbi__jpeg*)+0x344>
    f29c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2a0:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    f2a6:	85 c0                	test   eax,eax
    f2a8:	74 0e                	je     f2b8 <stbi__process_scan_header(stbi__jpeg*)+0x352>
    f2aa:	48 8d 3d 39 b3 02 00 	lea    rdi,[rip+0x2b339]        # 3a5ea <stbi__process_marker(stbi__jpeg*, int)::tag+0xaf>
    f2b1:	e8 89 58 ff ff       	call   4b3f <stbi__err(char const*)>
    f2b6:	eb 13                	jmp    f2cb <stbi__process_scan_header(stbi__jpeg*)+0x365>
    f2b8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2bc:	c7 80 38 48 00 00 3f 00 00 00 	mov    DWORD PTR [rax+0x4838],0x3f
    f2c6:	b8 01 00 00 00       	mov    eax,0x1
    f2cb:	c9                   	leave  
    f2cc:	c3                   	ret    

000000000000f2cd <stbi__free_jpeg_components(stbi__jpeg*, int, int)>:
    f2cd:	55                   	push   rbp
    f2ce:	48 89 e5             	mov    rbp,rsp
    f2d1:	48 83 ec 20          	sub    rsp,0x20
    f2d5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    f2d9:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    f2dc:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    f2df:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    f2e6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f2e9:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
    f2ec:	0f 8d c5 01 00 00    	jge    f4b7 <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x1ea>
    f2f2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f2f6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f2f9:	48 63 d0             	movsxd rdx,eax
    f2fc:	48 89 d0             	mov    rax,rdx
    f2ff:	48 01 c0             	add    rax,rax
    f302:	48 01 d0             	add    rax,rdx
    f305:	48 c1 e0 05          	shl    rax,0x5
    f309:	48 01 c8             	add    rax,rcx
    f30c:	48 05 d8 46 00 00    	add    rax,0x46d8
    f312:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f315:	48 85 c0             	test   rax,rax
    f318:	74 79                	je     f393 <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0xc6>
    f31a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f31e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f321:	48 63 d0             	movsxd rdx,eax
    f324:	48 89 d0             	mov    rax,rdx
    f327:	48 01 c0             	add    rax,rax
    f32a:	48 01 d0             	add    rax,rdx
    f32d:	48 c1 e0 05          	shl    rax,0x5
    f331:	48 01 c8             	add    rax,rcx
    f334:	48 05 d8 46 00 00    	add    rax,0x46d8
    f33a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f33d:	48 89 c7             	mov    rdi,rax
    f340:	e8 bb 51 ff ff       	call   4500 <free@plt>
    f345:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f349:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f34c:	48 63 d0             	movsxd rdx,eax
    f34f:	48 89 d0             	mov    rax,rdx
    f352:	48 01 c0             	add    rax,rax
    f355:	48 01 d0             	add    rax,rdx
    f358:	48 c1 e0 05          	shl    rax,0x5
    f35c:	48 01 c8             	add    rax,rcx
    f35f:	48 05 d8 46 00 00    	add    rax,0x46d8
    f365:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f36c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f370:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f373:	48 63 d0             	movsxd rdx,eax
    f376:	48 89 d0             	mov    rax,rdx
    f379:	48 01 c0             	add    rax,rax
    f37c:	48 01 d0             	add    rax,rdx
    f37f:	48 c1 e0 05          	shl    rax,0x5
    f383:	48 01 c8             	add    rax,rcx
    f386:	48 05 d0 46 00 00    	add    rax,0x46d0
    f38c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f393:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f397:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f39a:	48 63 d0             	movsxd rdx,eax
    f39d:	48 89 d0             	mov    rax,rdx
    f3a0:	48 01 c0             	add    rax,rax
    f3a3:	48 01 d0             	add    rax,rdx
    f3a6:	48 c1 e0 05          	shl    rax,0x5
    f3aa:	48 01 c8             	add    rax,rcx
    f3ad:	48 05 e0 46 00 00    	add    rax,0x46e0
    f3b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f3b6:	48 85 c0             	test   rax,rax
    f3b9:	74 79                	je     f434 <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x167>
    f3bb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f3bf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f3c2:	48 63 d0             	movsxd rdx,eax
    f3c5:	48 89 d0             	mov    rax,rdx
    f3c8:	48 01 c0             	add    rax,rax
    f3cb:	48 01 d0             	add    rax,rdx
    f3ce:	48 c1 e0 05          	shl    rax,0x5
    f3d2:	48 01 c8             	add    rax,rcx
    f3d5:	48 05 e0 46 00 00    	add    rax,0x46e0
    f3db:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f3de:	48 89 c7             	mov    rdi,rax
    f3e1:	e8 1a 51 ff ff       	call   4500 <free@plt>
    f3e6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f3ea:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f3ed:	48 63 d0             	movsxd rdx,eax
    f3f0:	48 89 d0             	mov    rax,rdx
    f3f3:	48 01 c0             	add    rax,rax
    f3f6:	48 01 d0             	add    rax,rdx
    f3f9:	48 c1 e0 05          	shl    rax,0x5
    f3fd:	48 01 c8             	add    rax,rcx
    f400:	48 05 e0 46 00 00    	add    rax,0x46e0
    f406:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f40d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f411:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f414:	48 63 d0             	movsxd rdx,eax
    f417:	48 89 d0             	mov    rax,rdx
    f41a:	48 01 c0             	add    rax,rax
    f41d:	48 01 d0             	add    rax,rdx
    f420:	48 c1 e0 05          	shl    rax,0x5
    f424:	48 01 c8             	add    rax,rcx
    f427:	48 05 f0 46 00 00    	add    rax,0x46f0
    f42d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f434:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f438:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f43b:	48 63 d0             	movsxd rdx,eax
    f43e:	48 89 d0             	mov    rax,rdx
    f441:	48 01 c0             	add    rax,rax
    f444:	48 01 d0             	add    rax,rdx
    f447:	48 c1 e0 05          	shl    rax,0x5
    f44b:	48 01 c8             	add    rax,rcx
    f44e:	48 05 e8 46 00 00    	add    rax,0x46e8
    f454:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f457:	48 85 c0             	test   rax,rax
    f45a:	74 52                	je     f4ae <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x1e1>
    f45c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f460:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f463:	48 63 d0             	movsxd rdx,eax
    f466:	48 89 d0             	mov    rax,rdx
    f469:	48 01 c0             	add    rax,rax
    f46c:	48 01 d0             	add    rax,rdx
    f46f:	48 c1 e0 05          	shl    rax,0x5
    f473:	48 01 c8             	add    rax,rcx
    f476:	48 05 e8 46 00 00    	add    rax,0x46e8
    f47c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f47f:	48 89 c7             	mov    rdi,rax
    f482:	e8 79 50 ff ff       	call   4500 <free@plt>
    f487:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f48b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f48e:	48 63 d0             	movsxd rdx,eax
    f491:	48 89 d0             	mov    rax,rdx
    f494:	48 01 c0             	add    rax,rax
    f497:	48 01 d0             	add    rax,rdx
    f49a:	48 c1 e0 05          	shl    rax,0x5
    f49e:	48 01 c8             	add    rax,rcx
    f4a1:	48 05 e8 46 00 00    	add    rax,0x46e8
    f4a7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f4ae:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    f4b2:	e9 2f fe ff ff       	jmp    f2e6 <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x19>
    f4b7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f4ba:	c9                   	leave  
    f4bb:	c3                   	ret    

000000000000f4bc <stbi__process_frame_header(stbi__jpeg*, int)>:
    f4bc:	55                   	push   rbp
    f4bd:	48 89 e5             	mov    rbp,rsp
    f4c0:	48 83 ec 40          	sub    rsp,0x40
    f4c4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    f4c8:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
    f4cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f4cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f4d2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f4d6:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
    f4dd:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x1
    f4e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f4e8:	48 89 c7             	mov    rdi,rax
    f4eb:	e8 a2 72 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    f4f0:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    f4f3:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
    f4f7:	7f 11                	jg     f50a <stbi__process_frame_header(stbi__jpeg*, int)+0x4e>
    f4f9:	48 8d 3d f5 b0 02 00 	lea    rdi,[rip+0x2b0f5]        # 3a5f5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x3>
    f500:	e8 3a 56 ff ff       	call   4b3f <stbi__err(char const*)>
    f505:	e9 41 0a 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f50a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f50e:	48 89 c7             	mov    rdi,rax
    f511:	e8 99 6f ff ff       	call   64af <stbi__get8(stbi__context*)>
    f516:	0f b6 c0             	movzx  eax,al
    f519:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    f51c:	83 7d ec 08          	cmp    DWORD PTR [rbp-0x14],0x8
    f520:	74 11                	je     f533 <stbi__process_frame_header(stbi__jpeg*, int)+0x77>
    f522:	48 8d 3d d8 b0 02 00 	lea    rdi,[rip+0x2b0d8]        # 3a601 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xf>
    f529:	e8 11 56 ff ff       	call   4b3f <stbi__err(char const*)>
    f52e:	e9 18 0a 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f533:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f537:	48 89 c7             	mov    rdi,rax
    f53a:	e8 53 72 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    f53f:	89 c2                	mov    edx,eax
    f541:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f545:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
    f548:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f54c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    f54f:	85 c0                	test   eax,eax
    f551:	75 11                	jne    f564 <stbi__process_frame_header(stbi__jpeg*, int)+0xa8>
    f553:	48 8d 3d b2 b0 02 00 	lea    rdi,[rip+0x2b0b2]        # 3a60c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x1a>
    f55a:	e8 e0 55 ff ff       	call   4b3f <stbi__err(char const*)>
    f55f:	e9 e7 09 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f564:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f568:	48 89 c7             	mov    rdi,rax
    f56b:	e8 22 72 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
    f570:	89 c2                	mov    edx,eax
    f572:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f576:	89 10                	mov    DWORD PTR [rax],edx
    f578:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f57c:	8b 00                	mov    eax,DWORD PTR [rax]
    f57e:	85 c0                	test   eax,eax
    f580:	75 11                	jne    f593 <stbi__process_frame_header(stbi__jpeg*, int)+0xd7>
    f582:	48 8d 3d 94 b0 02 00 	lea    rdi,[rip+0x2b094]        # 3a61d <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x2b>
    f589:	e8 b1 55 ff ff       	call   4b3f <stbi__err(char const*)>
    f58e:	e9 b8 09 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f593:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f597:	48 89 c7             	mov    rdi,rax
    f59a:	e8 10 6f ff ff       	call   64af <stbi__get8(stbi__context*)>
    f59f:	0f b6 c0             	movzx  eax,al
    f5a2:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    f5a5:	83 7d f0 03          	cmp    DWORD PTR [rbp-0x10],0x3
    f5a9:	74 1d                	je     f5c8 <stbi__process_frame_header(stbi__jpeg*, int)+0x10c>
    f5ab:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
    f5af:	74 17                	je     f5c8 <stbi__process_frame_header(stbi__jpeg*, int)+0x10c>
    f5b1:	83 7d f0 04          	cmp    DWORD PTR [rbp-0x10],0x4
    f5b5:	74 11                	je     f5c8 <stbi__process_frame_header(stbi__jpeg*, int)+0x10c>
    f5b7:	48 8d 3d 67 b0 02 00 	lea    rdi,[rip+0x2b067]        # 3a625 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x33>
    f5be:	e8 7c 55 ff ff       	call   4b3f <stbi__err(char const*)>
    f5c3:	e9 83 09 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f5c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f5cc:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    f5cf:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
    f5d2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f5d9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f5dc:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
    f5df:	7d 54                	jge    f635 <stbi__process_frame_header(stbi__jpeg*, int)+0x179>
    f5e1:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f5e5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f5e8:	48 63 d0             	movsxd rdx,eax
    f5eb:	48 89 d0             	mov    rax,rdx
    f5ee:	48 01 c0             	add    rax,rax
    f5f1:	48 01 d0             	add    rax,rdx
    f5f4:	48 c1 e0 05          	shl    rax,0x5
    f5f8:	48 01 c8             	add    rax,rcx
    f5fb:	48 05 d0 46 00 00    	add    rax,0x46d0
    f601:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f608:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f60c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f60f:	48 63 d0             	movsxd rdx,eax
    f612:	48 89 d0             	mov    rax,rdx
    f615:	48 01 c0             	add    rax,rax
    f618:	48 01 d0             	add    rax,rdx
    f61b:	48 c1 e0 05          	shl    rax,0x5
    f61f:	48 01 c8             	add    rax,rcx
    f622:	48 05 e8 46 00 00    	add    rax,0x46e8
    f628:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f62f:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    f633:	eb a4                	jmp    f5d9 <stbi__process_frame_header(stbi__jpeg*, int)+0x11d>
    f635:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f639:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
    f63c:	89 d0                	mov    eax,edx
    f63e:	01 c0                	add    eax,eax
    f640:	01 d0                	add    eax,edx
    f642:	83 c0 08             	add    eax,0x8
    f645:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    f648:	74 11                	je     f65b <stbi__process_frame_header(stbi__jpeg*, int)+0x19f>
    f64a:	48 8d 3d a4 af 02 00 	lea    rdi,[rip+0x2afa4]        # 3a5f5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x3>
    f651:	e8 e9 54 ff ff       	call   4b3f <stbi__err(char const*)>
    f656:	e9 f0 08 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f65b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f65f:	c7 80 50 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4850],0x0
    f669:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f670:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f674:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f677:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    f67a:	0f 8d 21 02 00 00    	jge    f8a1 <stbi__process_frame_header(stbi__jpeg*, int)+0x3e5>
    f680:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f684:	48 89 c7             	mov    rdi,rax
    f687:	e8 23 6e ff ff       	call   64af <stbi__get8(stbi__context*)>
    f68c:	0f b6 d0             	movzx  edx,al
    f68f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f693:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f696:	48 63 c8             	movsxd rcx,eax
    f699:	48 89 c8             	mov    rax,rcx
    f69c:	48 01 c0             	add    rax,rax
    f69f:	48 01 c8             	add    rax,rcx
    f6a2:	48 c1 e0 05          	shl    rax,0x5
    f6a6:	48 01 f0             	add    rax,rsi
    f6a9:	48 05 a0 46 00 00    	add    rax,0x46a0
    f6af:	89 10                	mov    DWORD PTR [rax],edx
    f6b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f6b5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f6b8:	83 f8 03             	cmp    eax,0x3
    f6bb:	75 50                	jne    f70d <stbi__process_frame_header(stbi__jpeg*, int)+0x251>
    f6bd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f6c1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f6c4:	48 63 d0             	movsxd rdx,eax
    f6c7:	48 89 d0             	mov    rax,rdx
    f6ca:	48 01 c0             	add    rax,rax
    f6cd:	48 01 d0             	add    rax,rdx
    f6d0:	48 c1 e0 05          	shl    rax,0x5
    f6d4:	48 01 c8             	add    rax,rcx
    f6d7:	48 05 a0 46 00 00    	add    rax,0x46a0
    f6dd:	8b 10                	mov    edx,DWORD PTR [rax]
    f6df:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f6e2:	48 98                	cdqe   
    f6e4:	48 8d 0d 07 af 02 00 	lea    rcx,[rip+0x2af07]        # 3a5f2 <stbi__process_frame_header(stbi__jpeg*, int)::rgb>
    f6eb:	0f b6 04 08          	movzx  eax,BYTE PTR [rax+rcx*1]
    f6ef:	0f b6 c0             	movzx  eax,al
    f6f2:	39 c2                	cmp    edx,eax
    f6f4:	75 17                	jne    f70d <stbi__process_frame_header(stbi__jpeg*, int)+0x251>
    f6f6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f6fa:	8b 80 50 48 00 00    	mov    eax,DWORD PTR [rax+0x4850]
    f700:	8d 50 01             	lea    edx,[rax+0x1]
    f703:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f707:	89 90 50 48 00 00    	mov    DWORD PTR [rax+0x4850],edx
    f70d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f711:	48 89 c7             	mov    rdi,rax
    f714:	e8 96 6d ff ff       	call   64af <stbi__get8(stbi__context*)>
    f719:	0f b6 c0             	movzx  eax,al
    f71c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    f71f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    f722:	c1 f8 04             	sar    eax,0x4
    f725:	89 c1                	mov    ecx,eax
    f727:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f72b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f72e:	48 63 d0             	movsxd rdx,eax
    f731:	48 89 d0             	mov    rax,rdx
    f734:	48 01 c0             	add    rax,rax
    f737:	48 01 d0             	add    rax,rdx
    f73a:	48 c1 e0 05          	shl    rax,0x5
    f73e:	48 01 f0             	add    rax,rsi
    f741:	48 05 a4 46 00 00    	add    rax,0x46a4
    f747:	89 08                	mov    DWORD PTR [rax],ecx
    f749:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f74d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f750:	48 63 d0             	movsxd rdx,eax
    f753:	48 89 d0             	mov    rax,rdx
    f756:	48 01 c0             	add    rax,rax
    f759:	48 01 d0             	add    rax,rdx
    f75c:	48 c1 e0 05          	shl    rax,0x5
    f760:	48 01 c8             	add    rax,rcx
    f763:	48 05 a4 46 00 00    	add    rax,0x46a4
    f769:	8b 00                	mov    eax,DWORD PTR [rax]
    f76b:	85 c0                	test   eax,eax
    f76d:	74 27                	je     f796 <stbi__process_frame_header(stbi__jpeg*, int)+0x2da>
    f76f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f773:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f776:	48 63 d0             	movsxd rdx,eax
    f779:	48 89 d0             	mov    rax,rdx
    f77c:	48 01 c0             	add    rax,rax
    f77f:	48 01 d0             	add    rax,rdx
    f782:	48 c1 e0 05          	shl    rax,0x5
    f786:	48 01 c8             	add    rax,rcx
    f789:	48 05 a4 46 00 00    	add    rax,0x46a4
    f78f:	8b 00                	mov    eax,DWORD PTR [rax]
    f791:	83 f8 04             	cmp    eax,0x4
    f794:	7e 11                	jle    f7a7 <stbi__process_frame_header(stbi__jpeg*, int)+0x2eb>
    f796:	48 8d 3d 9c ae 02 00 	lea    rdi,[rip+0x2ae9c]        # 3a639 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x47>
    f79d:	e8 9d 53 ff ff       	call   4b3f <stbi__err(char const*)>
    f7a2:	e9 a4 07 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f7a7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    f7aa:	83 e0 0f             	and    eax,0xf
    f7ad:	89 c1                	mov    ecx,eax
    f7af:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f7b3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f7b6:	48 63 d0             	movsxd rdx,eax
    f7b9:	48 89 d0             	mov    rax,rdx
    f7bc:	48 01 c0             	add    rax,rax
    f7bf:	48 01 d0             	add    rax,rdx
    f7c2:	48 c1 e0 05          	shl    rax,0x5
    f7c6:	48 01 f0             	add    rax,rsi
    f7c9:	48 05 a8 46 00 00    	add    rax,0x46a8
    f7cf:	89 08                	mov    DWORD PTR [rax],ecx
    f7d1:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f7d5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f7d8:	48 63 d0             	movsxd rdx,eax
    f7db:	48 89 d0             	mov    rax,rdx
    f7de:	48 01 c0             	add    rax,rax
    f7e1:	48 01 d0             	add    rax,rdx
    f7e4:	48 c1 e0 05          	shl    rax,0x5
    f7e8:	48 01 c8             	add    rax,rcx
    f7eb:	48 05 a8 46 00 00    	add    rax,0x46a8
    f7f1:	8b 00                	mov    eax,DWORD PTR [rax]
    f7f3:	85 c0                	test   eax,eax
    f7f5:	74 27                	je     f81e <stbi__process_frame_header(stbi__jpeg*, int)+0x362>
    f7f7:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f7fb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f7fe:	48 63 d0             	movsxd rdx,eax
    f801:	48 89 d0             	mov    rax,rdx
    f804:	48 01 c0             	add    rax,rax
    f807:	48 01 d0             	add    rax,rdx
    f80a:	48 c1 e0 05          	shl    rax,0x5
    f80e:	48 01 c8             	add    rax,rcx
    f811:	48 05 a8 46 00 00    	add    rax,0x46a8
    f817:	8b 00                	mov    eax,DWORD PTR [rax]
    f819:	83 f8 04             	cmp    eax,0x4
    f81c:	7e 11                	jle    f82f <stbi__process_frame_header(stbi__jpeg*, int)+0x373>
    f81e:	48 8d 3d 1a ae 02 00 	lea    rdi,[rip+0x2ae1a]        # 3a63f <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x4d>
    f825:	e8 15 53 ff ff       	call   4b3f <stbi__err(char const*)>
    f82a:	e9 1c 07 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f82f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f833:	48 89 c7             	mov    rdi,rax
    f836:	e8 74 6c ff ff       	call   64af <stbi__get8(stbi__context*)>
    f83b:	0f b6 d0             	movzx  edx,al
    f83e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f842:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f845:	48 63 c8             	movsxd rcx,eax
    f848:	48 89 c8             	mov    rax,rcx
    f84b:	48 01 c0             	add    rax,rax
    f84e:	48 01 c8             	add    rax,rcx
    f851:	48 c1 e0 05          	shl    rax,0x5
    f855:	48 01 f0             	add    rax,rsi
    f858:	48 05 ac 46 00 00    	add    rax,0x46ac
    f85e:	89 10                	mov    DWORD PTR [rax],edx
    f860:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f864:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f867:	48 63 d0             	movsxd rdx,eax
    f86a:	48 89 d0             	mov    rax,rdx
    f86d:	48 01 c0             	add    rax,rax
    f870:	48 01 d0             	add    rax,rdx
    f873:	48 c1 e0 05          	shl    rax,0x5
    f877:	48 01 c8             	add    rax,rcx
    f87a:	48 05 ac 46 00 00    	add    rax,0x46ac
    f880:	8b 00                	mov    eax,DWORD PTR [rax]
    f882:	83 f8 03             	cmp    eax,0x3
    f885:	7e 11                	jle    f898 <stbi__process_frame_header(stbi__jpeg*, int)+0x3dc>
    f887:	48 8d 3d b7 ad 02 00 	lea    rdi,[rip+0x2adb7]        # 3a645 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x53>
    f88e:	e8 ac 52 ff ff       	call   4b3f <stbi__err(char const*)>
    f893:	e9 b3 06 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f898:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    f89c:	e9 cf fd ff ff       	jmp    f670 <stbi__process_frame_header(stbi__jpeg*, int)+0x1b4>
    f8a1:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
    f8a5:	74 0a                	je     f8b1 <stbi__process_frame_header(stbi__jpeg*, int)+0x3f5>
    f8a7:	b8 01 00 00 00       	mov    eax,0x1
    f8ac:	e9 9a 06 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f8b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f8b5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f8b8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    f8bc:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
    f8bf:	89 d6                	mov    esi,edx
    f8c1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    f8c5:	8b 12                	mov    edx,DWORD PTR [rdx]
    f8c7:	89 d7                	mov    edi,edx
    f8c9:	b9 00 00 00 00       	mov    ecx,0x0
    f8ce:	89 c2                	mov    edx,eax
    f8d0:	e8 54 53 ff ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
    f8d5:	85 c0                	test   eax,eax
    f8d7:	0f 94 c0             	sete   al
    f8da:	84 c0                	test   al,al
    f8dc:	74 11                	je     f8ef <stbi__process_frame_header(stbi__jpeg*, int)+0x433>
    f8de:	48 8d 3d 67 ad 02 00 	lea    rdi,[rip+0x2ad67]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
    f8e5:	e8 55 52 ff ff       	call   4b3f <stbi__err(char const*)>
    f8ea:	e9 5c 06 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    f8ef:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f8f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f8fa:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f8fd:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    f900:	0f 8d a1 00 00 00    	jge    f9a7 <stbi__process_frame_header(stbi__jpeg*, int)+0x4eb>
    f906:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f90a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f90d:	48 63 d0             	movsxd rdx,eax
    f910:	48 89 d0             	mov    rax,rdx
    f913:	48 01 c0             	add    rax,rax
    f916:	48 01 d0             	add    rax,rdx
    f919:	48 c1 e0 05          	shl    rax,0x5
    f91d:	48 01 c8             	add    rax,rcx
    f920:	48 05 a4 46 00 00    	add    rax,0x46a4
    f926:	8b 00                	mov    eax,DWORD PTR [rax]
    f928:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
    f92b:	7d 25                	jge    f952 <stbi__process_frame_header(stbi__jpeg*, int)+0x496>
    f92d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f931:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f934:	48 63 d0             	movsxd rdx,eax
    f937:	48 89 d0             	mov    rax,rdx
    f93a:	48 01 c0             	add    rax,rax
    f93d:	48 01 d0             	add    rax,rdx
    f940:	48 c1 e0 05          	shl    rax,0x5
    f944:	48 01 c8             	add    rax,rcx
    f947:	48 05 a4 46 00 00    	add    rax,0x46a4
    f94d:	8b 00                	mov    eax,DWORD PTR [rax]
    f94f:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    f952:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f956:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f959:	48 63 d0             	movsxd rdx,eax
    f95c:	48 89 d0             	mov    rax,rdx
    f95f:	48 01 c0             	add    rax,rax
    f962:	48 01 d0             	add    rax,rdx
    f965:	48 c1 e0 05          	shl    rax,0x5
    f969:	48 01 c8             	add    rax,rcx
    f96c:	48 05 a8 46 00 00    	add    rax,0x46a8
    f972:	8b 00                	mov    eax,DWORD PTR [rax]
    f974:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    f977:	7d 25                	jge    f99e <stbi__process_frame_header(stbi__jpeg*, int)+0x4e2>
    f979:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f97d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f980:	48 63 d0             	movsxd rdx,eax
    f983:	48 89 d0             	mov    rax,rdx
    f986:	48 01 c0             	add    rax,rax
    f989:	48 01 d0             	add    rax,rdx
    f98c:	48 c1 e0 05          	shl    rax,0x5
    f990:	48 01 c8             	add    rax,rcx
    f993:	48 05 a8 46 00 00    	add    rax,0x46a8
    f999:	8b 00                	mov    eax,DWORD PTR [rax]
    f99b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    f99e:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    f9a2:	e9 4f ff ff ff       	jmp    f8f6 <stbi__process_frame_header(stbi__jpeg*, int)+0x43a>
    f9a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9ab:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    f9ae:	89 90 88 46 00 00    	mov    DWORD PTR [rax+0x4688],edx
    f9b4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9b8:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f9bb:	89 90 8c 46 00 00    	mov    DWORD PTR [rax+0x468c],edx
    f9c1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f9c4:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    f9cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9cf:	89 90 98 46 00 00    	mov    DWORD PTR [rax+0x4698],edx
    f9d5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    f9d8:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    f9df:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9e3:	89 90 9c 46 00 00    	mov    DWORD PTR [rax+0x469c],edx
    f9e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f9ed:	8b 10                	mov    edx,DWORD PTR [rax]
    f9ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9f3:	8b 80 98 46 00 00    	mov    eax,DWORD PTR [rax+0x4698]
    f9f9:	01 d0                	add    eax,edx
    f9fb:	8d 50 ff             	lea    edx,[rax-0x1]
    f9fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa02:	8b 80 98 46 00 00    	mov    eax,DWORD PTR [rax+0x4698]
    fa08:	89 c1                	mov    ecx,eax
    fa0a:	89 d0                	mov    eax,edx
    fa0c:	ba 00 00 00 00       	mov    edx,0x0
    fa11:	f7 f1                	div    ecx
    fa13:	89 c2                	mov    edx,eax
    fa15:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa19:	89 90 90 46 00 00    	mov    DWORD PTR [rax+0x4690],edx
    fa1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa23:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    fa26:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa2a:	8b 80 9c 46 00 00    	mov    eax,DWORD PTR [rax+0x469c]
    fa30:	01 d0                	add    eax,edx
    fa32:	8d 50 ff             	lea    edx,[rax-0x1]
    fa35:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa39:	8b 80 9c 46 00 00    	mov    eax,DWORD PTR [rax+0x469c]
    fa3f:	89 c1                	mov    ecx,eax
    fa41:	89 d0                	mov    eax,edx
    fa43:	ba 00 00 00 00       	mov    edx,0x0
    fa48:	f7 f1                	div    ecx
    fa4a:	89 c2                	mov    edx,eax
    fa4c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa50:	89 90 94 46 00 00    	mov    DWORD PTR [rax+0x4694],edx
    fa56:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    fa5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa61:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    fa64:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    fa67:	0f 8d d9 04 00 00    	jge    ff46 <stbi__process_frame_header(stbi__jpeg*, int)+0xa8a>
    fa6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa71:	8b 08                	mov    ecx,DWORD PTR [rax]
    fa73:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fa77:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fa7a:	48 63 d0             	movsxd rdx,eax
    fa7d:	48 89 d0             	mov    rax,rdx
    fa80:	48 01 c0             	add    rax,rax
    fa83:	48 01 d0             	add    rax,rdx
    fa86:	48 c1 e0 05          	shl    rax,0x5
    fa8a:	48 01 f0             	add    rax,rsi
    fa8d:	48 05 a4 46 00 00    	add    rax,0x46a4
    fa93:	8b 00                	mov    eax,DWORD PTR [rax]
    fa95:	0f af c8             	imul   ecx,eax
    fa98:	89 ca                	mov    edx,ecx
    fa9a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    fa9d:	01 d0                	add    eax,edx
    fa9f:	83 e8 01             	sub    eax,0x1
    faa2:	8b 7d e0             	mov    edi,DWORD PTR [rbp-0x20]
    faa5:	ba 00 00 00 00       	mov    edx,0x0
    faaa:	f7 f7                	div    edi
    faac:	89 c1                	mov    ecx,eax
    faae:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fab2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fab5:	48 63 d0             	movsxd rdx,eax
    fab8:	48 89 d0             	mov    rax,rdx
    fabb:	48 01 c0             	add    rax,rax
    fabe:	48 01 d0             	add    rax,rdx
    fac1:	48 c1 e0 05          	shl    rax,0x5
    fac5:	48 01 f0             	add    rax,rsi
    fac8:	48 05 bc 46 00 00    	add    rax,0x46bc
    face:	89 08                	mov    DWORD PTR [rax],ecx
    fad0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fad4:	8b 48 04             	mov    ecx,DWORD PTR [rax+0x4]
    fad7:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fadb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fade:	48 63 d0             	movsxd rdx,eax
    fae1:	48 89 d0             	mov    rax,rdx
    fae4:	48 01 c0             	add    rax,rax
    fae7:	48 01 d0             	add    rax,rdx
    faea:	48 c1 e0 05          	shl    rax,0x5
    faee:	48 01 f0             	add    rax,rsi
    faf1:	48 05 a8 46 00 00    	add    rax,0x46a8
    faf7:	8b 00                	mov    eax,DWORD PTR [rax]
    faf9:	0f af c8             	imul   ecx,eax
    fafc:	89 ca                	mov    edx,ecx
    fafe:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    fb01:	01 d0                	add    eax,edx
    fb03:	83 e8 01             	sub    eax,0x1
    fb06:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
    fb09:	ba 00 00 00 00       	mov    edx,0x0
    fb0e:	f7 f7                	div    edi
    fb10:	89 c1                	mov    ecx,eax
    fb12:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fb16:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fb19:	48 63 d0             	movsxd rdx,eax
    fb1c:	48 89 d0             	mov    rax,rdx
    fb1f:	48 01 c0             	add    rax,rax
    fb22:	48 01 d0             	add    rax,rdx
    fb25:	48 c1 e0 05          	shl    rax,0x5
    fb29:	48 01 f0             	add    rax,rsi
    fb2c:	48 05 c0 46 00 00    	add    rax,0x46c0
    fb32:	89 08                	mov    DWORD PTR [rax],ecx
    fb34:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fb38:	8b 88 90 46 00 00    	mov    ecx,DWORD PTR [rax+0x4690]
    fb3e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fb42:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fb45:	48 63 d0             	movsxd rdx,eax
    fb48:	48 89 d0             	mov    rax,rdx
    fb4b:	48 01 c0             	add    rax,rax
    fb4e:	48 01 d0             	add    rax,rdx
    fb51:	48 c1 e0 05          	shl    rax,0x5
    fb55:	48 01 f0             	add    rax,rsi
    fb58:	48 05 a4 46 00 00    	add    rax,0x46a4
    fb5e:	8b 00                	mov    eax,DWORD PTR [rax]
    fb60:	0f af c1             	imul   eax,ecx
    fb63:	8d 0c c5 00 00 00 00 	lea    ecx,[rax*8+0x0]
    fb6a:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fb6e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fb71:	48 63 d0             	movsxd rdx,eax
    fb74:	48 89 d0             	mov    rax,rdx
    fb77:	48 01 c0             	add    rax,rax
    fb7a:	48 01 d0             	add    rax,rdx
    fb7d:	48 c1 e0 05          	shl    rax,0x5
    fb81:	48 01 f0             	add    rax,rsi
    fb84:	48 05 c4 46 00 00    	add    rax,0x46c4
    fb8a:	89 08                	mov    DWORD PTR [rax],ecx
    fb8c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fb90:	8b 88 94 46 00 00    	mov    ecx,DWORD PTR [rax+0x4694]
    fb96:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fb9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fb9d:	48 63 d0             	movsxd rdx,eax
    fba0:	48 89 d0             	mov    rax,rdx
    fba3:	48 01 c0             	add    rax,rax
    fba6:	48 01 d0             	add    rax,rdx
    fba9:	48 c1 e0 05          	shl    rax,0x5
    fbad:	48 01 f0             	add    rax,rsi
    fbb0:	48 05 a8 46 00 00    	add    rax,0x46a8
    fbb6:	8b 00                	mov    eax,DWORD PTR [rax]
    fbb8:	0f af c1             	imul   eax,ecx
    fbbb:	8d 0c c5 00 00 00 00 	lea    ecx,[rax*8+0x0]
    fbc2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fbc6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fbc9:	48 63 d0             	movsxd rdx,eax
    fbcc:	48 89 d0             	mov    rax,rdx
    fbcf:	48 01 c0             	add    rax,rax
    fbd2:	48 01 d0             	add    rax,rdx
    fbd5:	48 c1 e0 05          	shl    rax,0x5
    fbd9:	48 01 f0             	add    rax,rsi
    fbdc:	48 05 c8 46 00 00    	add    rax,0x46c8
    fbe2:	89 08                	mov    DWORD PTR [rax],ecx
    fbe4:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fbe8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fbeb:	48 63 d0             	movsxd rdx,eax
    fbee:	48 89 d0             	mov    rax,rdx
    fbf1:	48 01 c0             	add    rax,rax
    fbf4:	48 01 d0             	add    rax,rdx
    fbf7:	48 c1 e0 05          	shl    rax,0x5
    fbfb:	48 01 c8             	add    rax,rcx
    fbfe:	48 05 f0 46 00 00    	add    rax,0x46f0
    fc04:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    fc0b:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fc0f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc12:	48 63 d0             	movsxd rdx,eax
    fc15:	48 89 d0             	mov    rax,rdx
    fc18:	48 01 c0             	add    rax,rax
    fc1b:	48 01 d0             	add    rax,rdx
    fc1e:	48 c1 e0 05          	shl    rax,0x5
    fc22:	48 01 c8             	add    rax,rcx
    fc25:	48 05 e0 46 00 00    	add    rax,0x46e0
    fc2b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    fc32:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fc36:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc39:	48 63 d0             	movsxd rdx,eax
    fc3c:	48 89 d0             	mov    rax,rdx
    fc3f:	48 01 c0             	add    rax,rax
    fc42:	48 01 d0             	add    rax,rdx
    fc45:	48 c1 e0 05          	shl    rax,0x5
    fc49:	48 01 c8             	add    rax,rcx
    fc4c:	48 05 e8 46 00 00    	add    rax,0x46e8
    fc52:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    fc59:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fc5d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc60:	48 63 d0             	movsxd rdx,eax
    fc63:	48 89 d0             	mov    rax,rdx
    fc66:	48 01 c0             	add    rax,rax
    fc69:	48 01 d0             	add    rax,rdx
    fc6c:	48 c1 e0 05          	shl    rax,0x5
    fc70:	48 01 c8             	add    rax,rcx
    fc73:	48 05 c8 46 00 00    	add    rax,0x46c8
    fc79:	8b 08                	mov    ecx,DWORD PTR [rax]
    fc7b:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fc7f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc82:	48 63 d0             	movsxd rdx,eax
    fc85:	48 89 d0             	mov    rax,rdx
    fc88:	48 01 c0             	add    rax,rax
    fc8b:	48 01 d0             	add    rax,rdx
    fc8e:	48 c1 e0 05          	shl    rax,0x5
    fc92:	48 01 f0             	add    rax,rsi
    fc95:	48 05 c4 46 00 00    	add    rax,0x46c4
    fc9b:	8b 00                	mov    eax,DWORD PTR [rax]
    fc9d:	ba 0f 00 00 00       	mov    edx,0xf
    fca2:	89 ce                	mov    esi,ecx
    fca4:	89 c7                	mov    edi,eax
    fca6:	e8 75 50 ff ff       	call   4d20 <stbi__malloc_mad2(int, int, int)>
    fcab:	48 89 c2             	mov    rdx,rax
    fcae:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fcb2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fcb5:	48 63 c8             	movsxd rcx,eax
    fcb8:	48 89 c8             	mov    rax,rcx
    fcbb:	48 01 c0             	add    rax,rax
    fcbe:	48 01 c8             	add    rax,rcx
    fcc1:	48 c1 e0 05          	shl    rax,0x5
    fcc5:	48 01 f0             	add    rax,rsi
    fcc8:	48 05 d8 46 00 00    	add    rax,0x46d8
    fcce:	48 89 10             	mov    QWORD PTR [rax],rdx
    fcd1:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fcd5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fcd8:	48 63 d0             	movsxd rdx,eax
    fcdb:	48 89 d0             	mov    rax,rdx
    fcde:	48 01 c0             	add    rax,rax
    fce1:	48 01 d0             	add    rax,rdx
    fce4:	48 c1 e0 05          	shl    rax,0x5
    fce8:	48 01 c8             	add    rax,rcx
    fceb:	48 05 d8 46 00 00    	add    rax,0x46d8
    fcf1:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fcf4:	48 85 c0             	test   rax,rax
    fcf7:	75 27                	jne    fd20 <stbi__process_frame_header(stbi__jpeg*, int)+0x864>
    fcf9:	48 8d 3d 33 a3 02 00 	lea    rdi,[rip+0x2a333]        # 3a033 <_IO_stdin_used+0x33>
    fd00:	e8 3a 4e ff ff       	call   4b3f <stbi__err(char const*)>
    fd05:	89 c2                	mov    edx,eax
    fd07:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd0a:	8d 48 01             	lea    ecx,[rax+0x1]
    fd0d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fd11:	89 ce                	mov    esi,ecx
    fd13:	48 89 c7             	mov    rdi,rax
    fd16:	e8 b2 f5 ff ff       	call   f2cd <stbi__free_jpeg_components(stbi__jpeg*, int, int)>
    fd1b:	e9 2b 02 00 00       	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    fd20:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fd24:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd27:	48 63 d0             	movsxd rdx,eax
    fd2a:	48 89 d0             	mov    rax,rdx
    fd2d:	48 01 c0             	add    rax,rax
    fd30:	48 01 d0             	add    rax,rdx
    fd33:	48 c1 e0 05          	shl    rax,0x5
    fd37:	48 01 c8             	add    rax,rcx
    fd3a:	48 05 d8 46 00 00    	add    rax,0x46d8
    fd40:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fd43:	48 83 c0 0f          	add    rax,0xf
    fd47:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    fd4b:	48 89 c1             	mov    rcx,rax
    fd4e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fd52:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd55:	48 63 d0             	movsxd rdx,eax
    fd58:	48 89 d0             	mov    rax,rdx
    fd5b:	48 01 c0             	add    rax,rax
    fd5e:	48 01 d0             	add    rax,rdx
    fd61:	48 c1 e0 05          	shl    rax,0x5
    fd65:	48 01 f0             	add    rax,rsi
    fd68:	48 05 d0 46 00 00    	add    rax,0x46d0
    fd6e:	48 89 08             	mov    QWORD PTR [rax],rcx
    fd71:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fd75:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    fd7b:	85 c0                	test   eax,eax
    fd7d:	0f 84 ba 01 00 00    	je     ff3d <stbi__process_frame_header(stbi__jpeg*, int)+0xa81>
    fd83:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fd87:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd8a:	48 63 d0             	movsxd rdx,eax
    fd8d:	48 89 d0             	mov    rax,rdx
    fd90:	48 01 c0             	add    rax,rax
    fd93:	48 01 d0             	add    rax,rdx
    fd96:	48 c1 e0 05          	shl    rax,0x5
    fd9a:	48 01 c8             	add    rax,rcx
    fd9d:	48 05 c4 46 00 00    	add    rax,0x46c4
    fda3:	8b 00                	mov    eax,DWORD PTR [rax]
    fda5:	8d 50 07             	lea    edx,[rax+0x7]
    fda8:	85 c0                	test   eax,eax
    fdaa:	0f 48 c2             	cmovs  eax,edx
    fdad:	c1 f8 03             	sar    eax,0x3
    fdb0:	89 c1                	mov    ecx,eax
    fdb2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fdb6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fdb9:	48 63 d0             	movsxd rdx,eax
    fdbc:	48 89 d0             	mov    rax,rdx
    fdbf:	48 01 c0             	add    rax,rax
    fdc2:	48 01 d0             	add    rax,rdx
    fdc5:	48 c1 e0 05          	shl    rax,0x5
    fdc9:	48 01 f0             	add    rax,rsi
    fdcc:	48 05 f8 46 00 00    	add    rax,0x46f8
    fdd2:	89 08                	mov    DWORD PTR [rax],ecx
    fdd4:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fdd8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fddb:	48 63 d0             	movsxd rdx,eax
    fdde:	48 89 d0             	mov    rax,rdx
    fde1:	48 01 c0             	add    rax,rax
    fde4:	48 01 d0             	add    rax,rdx
    fde7:	48 c1 e0 05          	shl    rax,0x5
    fdeb:	48 01 c8             	add    rax,rcx
    fdee:	48 05 c8 46 00 00    	add    rax,0x46c8
    fdf4:	8b 00                	mov    eax,DWORD PTR [rax]
    fdf6:	8d 50 07             	lea    edx,[rax+0x7]
    fdf9:	85 c0                	test   eax,eax
    fdfb:	0f 48 c2             	cmovs  eax,edx
    fdfe:	c1 f8 03             	sar    eax,0x3
    fe01:	89 c1                	mov    ecx,eax
    fe03:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fe07:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe0a:	48 63 d0             	movsxd rdx,eax
    fe0d:	48 89 d0             	mov    rax,rdx
    fe10:	48 01 c0             	add    rax,rax
    fe13:	48 01 d0             	add    rax,rdx
    fe16:	48 c1 e0 05          	shl    rax,0x5
    fe1a:	48 01 f0             	add    rax,rsi
    fe1d:	48 05 fc 46 00 00    	add    rax,0x46fc
    fe23:	89 08                	mov    DWORD PTR [rax],ecx
    fe25:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fe29:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe2c:	48 63 d0             	movsxd rdx,eax
    fe2f:	48 89 d0             	mov    rax,rdx
    fe32:	48 01 c0             	add    rax,rax
    fe35:	48 01 d0             	add    rax,rdx
    fe38:	48 c1 e0 05          	shl    rax,0x5
    fe3c:	48 01 c8             	add    rax,rcx
    fe3f:	48 05 c8 46 00 00    	add    rax,0x46c8
    fe45:	8b 30                	mov    esi,DWORD PTR [rax]
    fe47:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fe4b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe4e:	48 63 d0             	movsxd rdx,eax
    fe51:	48 89 d0             	mov    rax,rdx
    fe54:	48 01 c0             	add    rax,rax
    fe57:	48 01 d0             	add    rax,rdx
    fe5a:	48 c1 e0 05          	shl    rax,0x5
    fe5e:	48 01 c8             	add    rax,rcx
    fe61:	48 05 c4 46 00 00    	add    rax,0x46c4
    fe67:	8b 00                	mov    eax,DWORD PTR [rax]
    fe69:	b9 0f 00 00 00       	mov    ecx,0xf
    fe6e:	ba 02 00 00 00       	mov    edx,0x2
    fe73:	89 c7                	mov    edi,eax
    fe75:	e8 f4 4e ff ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
    fe7a:	48 89 c2             	mov    rdx,rax
    fe7d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fe81:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe84:	48 63 c8             	movsxd rcx,eax
    fe87:	48 89 c8             	mov    rax,rcx
    fe8a:	48 01 c0             	add    rax,rax
    fe8d:	48 01 c8             	add    rax,rcx
    fe90:	48 c1 e0 05          	shl    rax,0x5
    fe94:	48 01 f0             	add    rax,rsi
    fe97:	48 05 e0 46 00 00    	add    rax,0x46e0
    fe9d:	48 89 10             	mov    QWORD PTR [rax],rdx
    fea0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fea4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fea7:	48 63 d0             	movsxd rdx,eax
    feaa:	48 89 d0             	mov    rax,rdx
    fead:	48 01 c0             	add    rax,rax
    feb0:	48 01 d0             	add    rax,rdx
    feb3:	48 c1 e0 05          	shl    rax,0x5
    feb7:	48 01 c8             	add    rax,rcx
    feba:	48 05 e0 46 00 00    	add    rax,0x46e0
    fec0:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fec3:	48 85 c0             	test   rax,rax
    fec6:	75 24                	jne    feec <stbi__process_frame_header(stbi__jpeg*, int)+0xa30>
    fec8:	48 8d 3d 64 a1 02 00 	lea    rdi,[rip+0x2a164]        # 3a033 <_IO_stdin_used+0x33>
    fecf:	e8 6b 4c ff ff       	call   4b3f <stbi__err(char const*)>
    fed4:	89 c2                	mov    edx,eax
    fed6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fed9:	8d 48 01             	lea    ecx,[rax+0x1]
    fedc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fee0:	89 ce                	mov    esi,ecx
    fee2:	48 89 c7             	mov    rdi,rax
    fee5:	e8 e3 f3 ff ff       	call   f2cd <stbi__free_jpeg_components(stbi__jpeg*, int, int)>
    feea:	eb 5f                	jmp    ff4b <stbi__process_frame_header(stbi__jpeg*, int)+0xa8f>
    feec:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fef0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fef3:	48 63 d0             	movsxd rdx,eax
    fef6:	48 89 d0             	mov    rax,rdx
    fef9:	48 01 c0             	add    rax,rax
    fefc:	48 01 d0             	add    rax,rdx
    feff:	48 c1 e0 05          	shl    rax,0x5
    ff03:	48 01 c8             	add    rax,rcx
    ff06:	48 05 e0 46 00 00    	add    rax,0x46e0
    ff0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ff0f:	48 83 c0 0f          	add    rax,0xf
    ff13:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    ff17:	48 89 c1             	mov    rcx,rax
    ff1a:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    ff1e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ff21:	48 63 d0             	movsxd rdx,eax
    ff24:	48 89 d0             	mov    rax,rdx
    ff27:	48 01 c0             	add    rax,rax
    ff2a:	48 01 d0             	add    rax,rdx
    ff2d:	48 c1 e0 05          	shl    rax,0x5
    ff31:	48 01 f0             	add    rax,rsi
    ff34:	48 05 f0 46 00 00    	add    rax,0x46f0
    ff3a:	48 89 08             	mov    QWORD PTR [rax],rcx
    ff3d:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    ff41:	e9 17 fb ff ff       	jmp    fa5d <stbi__process_frame_header(stbi__jpeg*, int)+0x5a1>
    ff46:	b8 01 00 00 00       	mov    eax,0x1
    ff4b:	c9                   	leave  
    ff4c:	c3                   	ret    

000000000000ff4d <stbi__decode_jpeg_header(stbi__jpeg*, int)>:
    ff4d:	55                   	push   rbp
    ff4e:	48 89 e5             	mov    rbp,rsp
    ff51:	48 83 ec 20          	sub    rsp,0x20
    ff55:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    ff59:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    ff5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    ff60:	c7 80 48 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4848],0x0
    ff6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    ff6e:	c7 80 4c 48 00 00 ff ff ff ff 	mov    DWORD PTR [rax+0x484c],0xffffffff
    ff78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    ff7c:	c6 80 28 48 00 00 ff 	mov    BYTE PTR [rax+0x4828],0xff
    ff83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    ff87:	48 89 c7             	mov    rdi,rax
    ff8a:	e8 fb d6 ff ff       	call   d68a <stbi__get_marker(stbi__jpeg*)>
    ff8f:	0f b6 c0             	movzx  eax,al
    ff92:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    ff95:	81 7d fc d8 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xd8
    ff9c:	74 11                	je     ffaf <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x62>
    ff9e:	48 8d 3d b1 a6 02 00 	lea    rdi,[rip+0x2a6b1]        # 3a656 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x64>
    ffa5:	e8 95 4b ff ff       	call   4b3f <stbi__err(char const*)>
    ffaa:	e9 fb 00 00 00       	jmp    100aa <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x15d>
    ffaf:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
    ffb3:	75 0a                	jne    ffbf <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x72>
    ffb5:	b8 01 00 00 00       	mov    eax,0x1
    ffba:	e9 eb 00 00 00       	jmp    100aa <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x15d>
    ffbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    ffc3:	48 89 c7             	mov    rdi,rax
    ffc6:	e8 bf d6 ff ff       	call   d68a <stbi__get_marker(stbi__jpeg*)>
    ffcb:	0f b6 c0             	movzx  eax,al
    ffce:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    ffd1:	81 7d fc c0 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc0
    ffd8:	0f 84 8f 00 00 00    	je     1006d <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x120>
    ffde:	81 7d fc c1 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc1
    ffe5:	0f 84 82 00 00 00    	je     1006d <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x120>
    ffeb:	81 7d fc c2 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc2
    fff2:	74 79                	je     1006d <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x120>
    fff4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
    fff7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    fffb:	89 d6                	mov    esi,edx
    fffd:	48 89 c7             	mov    rdi,rax
   10000:	e8 7e e8 ff ff       	call   e883 <stbi__process_marker(stbi__jpeg*, int)>
   10005:	85 c0                	test   eax,eax
   10007:	0f 94 c0             	sete   al
   1000a:	84 c0                	test   al,al
   1000c:	74 0a                	je     10018 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0xcb>
   1000e:	b8 00 00 00 00       	mov    eax,0x0
   10013:	e9 92 00 00 00       	jmp    100aa <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x15d>
   10018:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1001c:	48 89 c7             	mov    rdi,rax
   1001f:	e8 66 d6 ff ff       	call   d68a <stbi__get_marker(stbi__jpeg*)>
   10024:	0f b6 c0             	movzx  eax,al
   10027:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1002a:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
   10031:	75 9e                	jne    ffd1 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x84>
   10033:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10037:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1003a:	48 89 c7             	mov    rdi,rax
   1003d:	e8 f0 64 ff ff       	call   6532 <stbi__at_eof(stbi__context*)>
   10042:	85 c0                	test   eax,eax
   10044:	0f 95 c0             	setne  al
   10047:	84 c0                	test   al,al
   10049:	74 0e                	je     10059 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x10c>
   1004b:	48 8d 3d 0b a6 02 00 	lea    rdi,[rip+0x2a60b]        # 3a65d <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x6b>
   10052:	e8 e8 4a ff ff       	call   4b3f <stbi__err(char const*)>
   10057:	eb 51                	jmp    100aa <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x15d>
   10059:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1005d:	48 89 c7             	mov    rdi,rax
   10060:	e8 25 d6 ff ff       	call   d68a <stbi__get_marker(stbi__jpeg*)>
   10065:	0f b6 c0             	movzx  eax,al
   10068:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1006b:	eb bd                	jmp    1002a <stbi__decode_jpeg_header(stbi__jpeg*, int)+0xdd>
   1006d:	81 7d fc c2 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc2
   10074:	0f 94 c0             	sete   al
   10077:	0f b6 d0             	movzx  edx,al
   1007a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1007e:	89 90 30 48 00 00    	mov    DWORD PTR [rax+0x4830],edx
   10084:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   10087:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1008b:	89 d6                	mov    esi,edx
   1008d:	48 89 c7             	mov    rdi,rax
   10090:	e8 27 f4 ff ff       	call   f4bc <stbi__process_frame_header(stbi__jpeg*, int)>
   10095:	85 c0                	test   eax,eax
   10097:	0f 94 c0             	sete   al
   1009a:	84 c0                	test   al,al
   1009c:	74 07                	je     100a5 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x158>
   1009e:	b8 00 00 00 00       	mov    eax,0x0
   100a3:	eb 05                	jmp    100aa <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x15d>
   100a5:	b8 01 00 00 00       	mov    eax,0x1
   100aa:	c9                   	leave  
   100ab:	c3                   	ret    

00000000000100ac <stbi__decode_jpeg_image(stbi__jpeg*)>:
   100ac:	55                   	push   rbp
   100ad:	48 89 e5             	mov    rbp,rsp
   100b0:	48 83 ec 20          	sub    rsp,0x20
   100b4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   100b8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   100bf:	83 7d f0 03          	cmp    DWORD PTR [rbp-0x10],0x3
   100c3:	7f 54                	jg     10119 <stbi__decode_jpeg_image(stbi__jpeg*)+0x6d>
   100c5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   100c9:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   100cc:	48 63 d0             	movsxd rdx,eax
   100cf:	48 89 d0             	mov    rax,rdx
   100d2:	48 01 c0             	add    rax,rax
   100d5:	48 01 d0             	add    rax,rdx
   100d8:	48 c1 e0 05          	shl    rax,0x5
   100dc:	48 01 c8             	add    rax,rcx
   100df:	48 05 d8 46 00 00    	add    rax,0x46d8
   100e5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   100ec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   100f0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   100f3:	48 63 d0             	movsxd rdx,eax
   100f6:	48 89 d0             	mov    rax,rdx
   100f9:	48 01 c0             	add    rax,rax
   100fc:	48 01 d0             	add    rax,rdx
   100ff:	48 c1 e0 05          	shl    rax,0x5
   10103:	48 01 c8             	add    rax,rcx
   10106:	48 05 e0 46 00 00    	add    rax,0x46e0
   1010c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   10113:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   10117:	eb a6                	jmp    100bf <stbi__decode_jpeg_image(stbi__jpeg*)+0x13>
   10119:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1011d:	c7 80 68 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4868],0x0
   10127:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1012b:	be 00 00 00 00       	mov    esi,0x0
   10130:	48 89 c7             	mov    rdi,rax
   10133:	e8 15 fe ff ff       	call   ff4d <stbi__decode_jpeg_header(stbi__jpeg*, int)>
   10138:	85 c0                	test   eax,eax
   1013a:	0f 94 c0             	sete   al
   1013d:	84 c0                	test   al,al
   1013f:	74 0a                	je     1014b <stbi__decode_jpeg_image(stbi__jpeg*)+0x9f>
   10141:	b8 00 00 00 00       	mov    eax,0x0
   10146:	e9 87 01 00 00       	jmp    102d2 <stbi__decode_jpeg_image(stbi__jpeg*)+0x226>
   1014b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1014f:	48 89 c7             	mov    rdi,rax
   10152:	e8 33 d5 ff ff       	call   d68a <stbi__get_marker(stbi__jpeg*)>
   10157:	0f b6 c0             	movzx  eax,al
   1015a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1015d:	81 7d f0 d9 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xd9
   10164:	0f 84 49 01 00 00    	je     102b3 <stbi__decode_jpeg_image(stbi__jpeg*)+0x207>
   1016a:	81 7d f0 da 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xda
   10171:	0f 85 a6 00 00 00    	jne    1021d <stbi__decode_jpeg_image(stbi__jpeg*)+0x171>
   10177:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1017b:	48 89 c7             	mov    rdi,rax
   1017e:	e8 e3 ed ff ff       	call   ef66 <stbi__process_scan_header(stbi__jpeg*)>
   10183:	85 c0                	test   eax,eax
   10185:	0f 94 c0             	sete   al
   10188:	84 c0                	test   al,al
   1018a:	74 0a                	je     10196 <stbi__decode_jpeg_image(stbi__jpeg*)+0xea>
   1018c:	b8 00 00 00 00       	mov    eax,0x0
   10191:	e9 3c 01 00 00       	jmp    102d2 <stbi__decode_jpeg_image(stbi__jpeg*)+0x226>
   10196:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1019a:	48 89 c7             	mov    rdi,rax
   1019d:	e8 22 d6 ff ff       	call   d7c4 <stbi__parse_entropy_coded_data(stbi__jpeg*)>
   101a2:	85 c0                	test   eax,eax
   101a4:	0f 94 c0             	sete   al
   101a7:	84 c0                	test   al,al
   101a9:	74 0a                	je     101b5 <stbi__decode_jpeg_image(stbi__jpeg*)+0x109>
   101ab:	b8 00 00 00 00       	mov    eax,0x0
   101b0:	e9 1d 01 00 00       	jmp    102d2 <stbi__decode_jpeg_image(stbi__jpeg*)+0x226>
   101b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   101b9:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
   101c0:	3c ff                	cmp    al,0xff
   101c2:	0f 85 d4 00 00 00    	jne    1029c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f0>
   101c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   101cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   101cf:	48 89 c7             	mov    rdi,rax
   101d2:	e8 5b 63 ff ff       	call   6532 <stbi__at_eof(stbi__context*)>
   101d7:	85 c0                	test   eax,eax
   101d9:	0f 94 c0             	sete   al
   101dc:	84 c0                	test   al,al
   101de:	0f 84 b8 00 00 00    	je     1029c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f0>
   101e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   101e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   101eb:	48 89 c7             	mov    rdi,rax
   101ee:	e8 bc 62 ff ff       	call   64af <stbi__get8(stbi__context*)>
   101f3:	0f b6 c0             	movzx  eax,al
   101f6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   101f9:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
   10200:	75 c6                	jne    101c8 <stbi__decode_jpeg_image(stbi__jpeg*)+0x11c>
   10202:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10206:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10209:	48 89 c7             	mov    rdi,rax
   1020c:	e8 9e 62 ff ff       	call   64af <stbi__get8(stbi__context*)>
   10211:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   10215:	88 82 28 48 00 00    	mov    BYTE PTR [rdx+0x4828],al
   1021b:	eb 7f                	jmp    1029c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f0>
   1021d:	81 7d f0 dc 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xdc
   10224:	75 55                	jne    1027b <stbi__decode_jpeg_image(stbi__jpeg*)+0x1cf>
   10226:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1022a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1022d:	48 89 c7             	mov    rdi,rax
   10230:	e8 5d 65 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
   10235:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   10238:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1023c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1023f:	48 89 c7             	mov    rdi,rax
   10242:	e8 4b 65 ff ff       	call   6792 <stbi__get16be(stbi__context*)>
   10247:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1024a:	83 7d f4 04          	cmp    DWORD PTR [rbp-0xc],0x4
   1024e:	74 0e                	je     1025e <stbi__decode_jpeg_image(stbi__jpeg*)+0x1b2>
   10250:	48 8d 3d 0d a4 02 00 	lea    rdi,[rip+0x2a40d]        # 3a664 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x72>
   10257:	e8 e3 48 ff ff       	call   4b3f <stbi__err(char const*)>
   1025c:	eb 74                	jmp    102d2 <stbi__decode_jpeg_image(stbi__jpeg*)+0x226>
   1025e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10262:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10265:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   10268:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   1026b:	74 2f                	je     1029c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f0>
   1026d:	48 8d 3d fc a3 02 00 	lea    rdi,[rip+0x2a3fc]        # 3a670 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x7e>
   10274:	e8 c6 48 ff ff       	call   4b3f <stbi__err(char const*)>
   10279:	eb 57                	jmp    102d2 <stbi__decode_jpeg_image(stbi__jpeg*)+0x226>
   1027b:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   1027e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10282:	89 d6                	mov    esi,edx
   10284:	48 89 c7             	mov    rdi,rax
   10287:	e8 f7 e5 ff ff       	call   e883 <stbi__process_marker(stbi__jpeg*, int)>
   1028c:	85 c0                	test   eax,eax
   1028e:	0f 94 c0             	sete   al
   10291:	84 c0                	test   al,al
   10293:	74 07                	je     1029c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f0>
   10295:	b8 00 00 00 00       	mov    eax,0x0
   1029a:	eb 36                	jmp    102d2 <stbi__decode_jpeg_image(stbi__jpeg*)+0x226>
   1029c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   102a0:	48 89 c7             	mov    rdi,rax
   102a3:	e8 e2 d3 ff ff       	call   d68a <stbi__get_marker(stbi__jpeg*)>
   102a8:	0f b6 c0             	movzx  eax,al
   102ab:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   102ae:	e9 aa fe ff ff       	jmp    1015d <stbi__decode_jpeg_image(stbi__jpeg*)+0xb1>
   102b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   102b7:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
   102bd:	85 c0                	test   eax,eax
   102bf:	74 0c                	je     102cd <stbi__decode_jpeg_image(stbi__jpeg*)+0x221>
   102c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   102c5:	48 89 c7             	mov    rdi,rax
   102c8:	e8 a5 e3 ff ff       	call   e672 <stbi__jpeg_finish(stbi__jpeg*)>
   102cd:	b8 01 00 00 00       	mov    eax,0x1
   102d2:	c9                   	leave  
   102d3:	c3                   	ret    

00000000000102d4 <resample_row_1(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   102d4:	55                   	push   rbp
   102d5:	48 89 e5             	mov    rbp,rsp
   102d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   102dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   102e0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   102e4:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
   102e7:	44 89 45 e0          	mov    DWORD PTR [rbp-0x20],r8d
   102eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   102ef:	5d                   	pop    rbp
   102f0:	c3                   	ret    

00000000000102f1 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   102f1:	55                   	push   rbp
   102f2:	48 89 e5             	mov    rbp,rsp
   102f5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   102f9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   102fd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   10301:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   10304:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   10308:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1030f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10312:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
   10315:	7d 4e                	jge    10365 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x74>
   10317:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1031a:	48 63 d0             	movsxd rdx,eax
   1031d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   10321:	48 01 d0             	add    rax,rdx
   10324:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10327:	0f b6 d0             	movzx  edx,al
   1032a:	89 d0                	mov    eax,edx
   1032c:	01 c0                	add    eax,eax
   1032e:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   10331:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10334:	48 63 d0             	movsxd rdx,eax
   10337:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1033b:	48 01 d0             	add    rax,rdx
   1033e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10341:	0f b6 c0             	movzx  eax,al
   10344:	01 c8                	add    eax,ecx
   10346:	83 c0 02             	add    eax,0x2
   10349:	c1 f8 02             	sar    eax,0x2
   1034c:	89 c1                	mov    ecx,eax
   1034e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10351:	48 63 d0             	movsxd rdx,eax
   10354:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10358:	48 01 d0             	add    rax,rdx
   1035b:	89 ca                	mov    edx,ecx
   1035d:	88 10                	mov    BYTE PTR [rax],dl
   1035f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   10363:	eb aa                	jmp    1030f <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x1e>
   10365:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10369:	5d                   	pop    rbp
   1036a:	c3                   	ret    

000000000001036b <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   1036b:	55                   	push   rbp
   1036c:	48 89 e5             	mov    rbp,rsp
   1036f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   10373:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   10377:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1037b:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   1037e:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   10382:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   10386:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1038a:	83 7d d4 01          	cmp    DWORD PTR [rbp-0x2c],0x1
   1038e:	75 23                	jne    103b3 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x48>
   10390:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10394:	48 83 c0 01          	add    rax,0x1
   10398:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1039c:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   1039f:	88 10                	mov    BYTE PTR [rax],dl
   103a1:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   103a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   103a8:	88 10                	mov    BYTE PTR [rax],dl
   103aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   103ae:	e9 5f 01 00 00       	jmp    10512 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x1a7>
   103b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   103b7:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   103ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   103be:	88 10                	mov    BYTE PTR [rax],dl
   103c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   103c4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   103c7:	0f b6 d0             	movzx  edx,al
   103ca:	89 d0                	mov    eax,edx
   103cc:	01 c0                	add    eax,eax
   103ce:	01 c2                	add    edx,eax
   103d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   103d4:	48 83 c0 01          	add    rax,0x1
   103d8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   103db:	0f b6 c0             	movzx  eax,al
   103de:	01 d0                	add    eax,edx
   103e0:	83 c0 02             	add    eax,0x2
   103e3:	c1 f8 02             	sar    eax,0x2
   103e6:	89 c2                	mov    edx,eax
   103e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   103ec:	48 83 c0 01          	add    rax,0x1
   103f0:	88 10                	mov    BYTE PTR [rax],dl
   103f2:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [rbp-0x10],0x1
   103f9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   103fc:	83 e8 01             	sub    eax,0x1
   103ff:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   10402:	0f 8d 8f 00 00 00    	jge    10497 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x12c>
   10408:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1040b:	48 63 d0             	movsxd rdx,eax
   1040e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10412:	48 01 d0             	add    rax,rdx
   10415:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10418:	0f b6 d0             	movzx  edx,al
   1041b:	89 d0                	mov    eax,edx
   1041d:	01 c0                	add    eax,eax
   1041f:	01 d0                	add    eax,edx
   10421:	83 c0 02             	add    eax,0x2
   10424:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   10427:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1042a:	48 98                	cdqe   
   1042c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   10430:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10434:	48 01 d0             	add    rax,rdx
   10437:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1043a:	0f b6 d0             	movzx  edx,al
   1043d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   10440:	01 d0                	add    eax,edx
   10442:	c1 f8 02             	sar    eax,0x2
   10445:	89 c1                	mov    ecx,eax
   10447:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1044a:	01 c0                	add    eax,eax
   1044c:	48 63 d0             	movsxd rdx,eax
   1044f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10453:	48 01 d0             	add    rax,rdx
   10456:	89 ca                	mov    edx,ecx
   10458:	88 10                	mov    BYTE PTR [rax],dl
   1045a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1045d:	48 98                	cdqe   
   1045f:	48 8d 50 01          	lea    rdx,[rax+0x1]
   10463:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10467:	48 01 d0             	add    rax,rdx
   1046a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1046d:	0f b6 d0             	movzx  edx,al
   10470:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   10473:	01 d0                	add    eax,edx
   10475:	c1 f8 02             	sar    eax,0x2
   10478:	89 c2                	mov    edx,eax
   1047a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1047d:	01 c0                	add    eax,eax
   1047f:	48 98                	cdqe   
   10481:	48 8d 48 01          	lea    rcx,[rax+0x1]
   10485:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10489:	48 01 c8             	add    rax,rcx
   1048c:	88 10                	mov    BYTE PTR [rax],dl
   1048e:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   10492:	e9 62 ff ff ff       	jmp    103f9 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8e>
   10497:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1049a:	48 98                	cdqe   
   1049c:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   104a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   104a4:	48 01 d0             	add    rax,rdx
   104a7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   104aa:	0f b6 d0             	movzx  edx,al
   104ad:	89 d0                	mov    eax,edx
   104af:	01 c0                	add    eax,eax
   104b1:	01 c2                	add    edx,eax
   104b3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   104b6:	48 98                	cdqe   
   104b8:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   104bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   104c0:	48 01 c8             	add    rax,rcx
   104c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   104c6:	0f b6 c0             	movzx  eax,al
   104c9:	01 d0                	add    eax,edx
   104cb:	83 c0 02             	add    eax,0x2
   104ce:	c1 f8 02             	sar    eax,0x2
   104d1:	89 c1                	mov    ecx,eax
   104d3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   104d6:	01 c0                	add    eax,eax
   104d8:	48 63 d0             	movsxd rdx,eax
   104db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   104df:	48 01 d0             	add    rax,rdx
   104e2:	89 ca                	mov    edx,ecx
   104e4:	88 10                	mov    BYTE PTR [rax],dl
   104e6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   104e9:	48 98                	cdqe   
   104eb:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   104ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   104f3:	48 01 d0             	add    rax,rdx
   104f6:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   104f9:	01 d2                	add    edx,edx
   104fb:	48 63 d2             	movsxd rdx,edx
   104fe:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
   10502:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   10506:	48 01 ca             	add    rdx,rcx
   10509:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1050c:	88 02                	mov    BYTE PTR [rdx],al
   1050e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10512:	5d                   	pop    rbp
   10513:	c3                   	ret    

0000000000010514 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   10514:	55                   	push   rbp
   10515:	48 89 e5             	mov    rbp,rsp
   10518:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1051c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   10520:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   10524:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   10527:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   1052b:	83 7d d4 01          	cmp    DWORD PTR [rbp-0x2c],0x1
   1052f:	75 40                	jne    10571 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x5d>
   10531:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   10535:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10538:	0f b6 d0             	movzx  edx,al
   1053b:	89 d0                	mov    eax,edx
   1053d:	01 c0                	add    eax,eax
   1053f:	01 c2                	add    edx,eax
   10541:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   10545:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10548:	0f b6 c0             	movzx  eax,al
   1054b:	01 d0                	add    eax,edx
   1054d:	83 c0 02             	add    eax,0x2
   10550:	c1 f8 02             	sar    eax,0x2
   10553:	89 c2                	mov    edx,eax
   10555:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10559:	48 83 c0 01          	add    rax,0x1
   1055d:	88 10                	mov    BYTE PTR [rax],dl
   1055f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   10562:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10566:	88 10                	mov    BYTE PTR [rax],dl
   10568:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1056c:	e9 fa 00 00 00       	jmp    1066b <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x157>
   10571:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   10575:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10578:	0f b6 d0             	movzx  edx,al
   1057b:	89 d0                	mov    eax,edx
   1057d:	01 c0                	add    eax,eax
   1057f:	01 c2                	add    edx,eax
   10581:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   10585:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10588:	0f b6 c0             	movzx  eax,al
   1058b:	01 d0                	add    eax,edx
   1058d:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   10590:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   10593:	83 c0 02             	add    eax,0x2
   10596:	c1 f8 02             	sar    eax,0x2
   10599:	89 c2                	mov    edx,eax
   1059b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1059f:	88 10                	mov    BYTE PTR [rax],dl
   105a1:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   105a8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   105ab:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
   105ae:	0f 8d 94 00 00 00    	jge    10648 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x134>
   105b4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   105b7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   105ba:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   105bd:	48 63 d0             	movsxd rdx,eax
   105c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   105c4:	48 01 d0             	add    rax,rdx
   105c7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   105ca:	0f b6 d0             	movzx  edx,al
   105cd:	89 d0                	mov    eax,edx
   105cf:	01 c0                	add    eax,eax
   105d1:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   105d4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   105d7:	48 63 d0             	movsxd rdx,eax
   105da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   105de:	48 01 d0             	add    rax,rdx
   105e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   105e4:	0f b6 c0             	movzx  eax,al
   105e7:	01 c8                	add    eax,ecx
   105e9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   105ec:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   105ef:	89 d0                	mov    eax,edx
   105f1:	01 c0                	add    eax,eax
   105f3:	01 c2                	add    edx,eax
   105f5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   105f8:	01 d0                	add    eax,edx
   105fa:	83 c0 08             	add    eax,0x8
   105fd:	c1 f8 04             	sar    eax,0x4
   10600:	89 c2                	mov    edx,eax
   10602:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   10605:	01 c0                	add    eax,eax
   10607:	48 98                	cdqe   
   10609:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   1060d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10611:	48 01 c8             	add    rax,rcx
   10614:	88 10                	mov    BYTE PTR [rax],dl
   10616:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   10619:	89 d0                	mov    eax,edx
   1061b:	01 c0                	add    eax,eax
   1061d:	01 c2                	add    edx,eax
   1061f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10622:	01 d0                	add    eax,edx
   10624:	83 c0 08             	add    eax,0x8
   10627:	c1 f8 04             	sar    eax,0x4
   1062a:	89 c1                	mov    ecx,eax
   1062c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1062f:	01 c0                	add    eax,eax
   10631:	48 63 d0             	movsxd rdx,eax
   10634:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10638:	48 01 d0             	add    rax,rdx
   1063b:	89 ca                	mov    edx,ecx
   1063d:	88 10                	mov    BYTE PTR [rax],dl
   1063f:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   10643:	e9 60 ff ff ff       	jmp    105a8 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x94>
   10648:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1064b:	83 c0 02             	add    eax,0x2
   1064e:	c1 f8 02             	sar    eax,0x2
   10651:	89 c2                	mov    edx,eax
   10653:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   10656:	01 c0                	add    eax,eax
   10658:	48 98                	cdqe   
   1065a:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   1065e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10662:	48 01 c8             	add    rax,rcx
   10665:	88 10                	mov    BYTE PTR [rax],dl
   10667:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1066b:	5d                   	pop    rbp
   1066c:	c3                   	ret    

000000000001066d <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   1066d:	55                   	push   rbp
   1066e:	48 89 e5             	mov    rbp,rsp
   10671:	48 81 ec 88 03 00 00 	sub    rsp,0x388
   10678:	48 89 bd 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],rdi
   1067f:	48 89 b5 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rsi
   10686:	48 89 95 08 fc ff ff 	mov    QWORD PTR [rbp-0x3f8],rdx
   1068d:	89 8d 04 fc ff ff    	mov    DWORD PTR [rbp-0x3fc],ecx
   10693:	44 89 85 00 fc ff ff 	mov    DWORD PTR [rbp-0x400],r8d
   1069a:	c7 85 3c fc ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x3c4],0x0
   106a4:	83 bd 04 fc ff ff 01 	cmp    DWORD PTR [rbp-0x3fc],0x1
   106ab:	75 4f                	jne    106fc <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8f>
   106ad:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   106b4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   106b7:	0f b6 d0             	movzx  edx,al
   106ba:	89 d0                	mov    eax,edx
   106bc:	01 c0                	add    eax,eax
   106be:	01 c2                	add    edx,eax
   106c0:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   106c7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   106ca:	0f b6 c0             	movzx  eax,al
   106cd:	01 d0                	add    eax,edx
   106cf:	83 c0 02             	add    eax,0x2
   106d2:	c1 f8 02             	sar    eax,0x2
   106d5:	89 c2                	mov    edx,eax
   106d7:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   106de:	48 83 c0 01          	add    rax,0x1
   106e2:	88 10                	mov    BYTE PTR [rax],dl
   106e4:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   106e7:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   106ee:	88 10                	mov    BYTE PTR [rax],dl
   106f0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   106f7:	e9 60 08 00 00       	jmp    10f5c <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8ef>
   106fc:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10703:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10706:	0f b6 d0             	movzx  edx,al
   10709:	89 d0                	mov    eax,edx
   1070b:	01 c0                	add    eax,eax
   1070d:	01 c2                	add    edx,eax
   1070f:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10716:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10719:	0f b6 c0             	movzx  eax,al
   1071c:	01 d0                	add    eax,edx
   1071e:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10724:	8b 85 04 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3fc]
   1072a:	83 e8 01             	sub    eax,0x1
   1072d:	83 e0 f8             	and    eax,0xfffffff8
   10730:	39 85 3c fc ff ff    	cmp    DWORD PTR [rbp-0x3c4],eax
   10736:	0f 8d 92 06 00 00    	jge    10dce <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x761>
   1073c:	66 0f ef c0          	pxor   xmm0,xmm0
   10740:	0f 29 85 b0 fc ff ff 	movaps XMMWORD PTR [rbp-0x350],xmm0
   10747:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   1074d:	48 63 d0             	movsxd rdx,eax
   10750:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10757:	48 01 d0             	add    rax,rdx
   1075a:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
   10761:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
   10768:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1076b:	ba 00 00 00 00       	mov    edx,0x0
   10770:	48 89 95 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],rdx
   10777:	48 89 85 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rax
   1077e:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
   10785:	48 8b 95 90 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x370]
   1078c:	48 89 95 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rdx
   10793:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
   1079a:	48 8b 95 a0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x360]
   107a1:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
   107a8:	66 48 0f 6e c0       	movq   xmm0,rax
   107ad:	66 48 0f 6e ea       	movq   xmm5,rdx
   107b2:	66 0f 6c c5          	punpcklqdq xmm0,xmm5
   107b6:	90                   	nop
   107b7:	90                   	nop
   107b8:	0f 29 85 c0 fc ff ff 	movaps XMMWORD PTR [rbp-0x340],xmm0
   107bf:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   107c5:	48 63 d0             	movsxd rdx,eax
   107c8:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   107cf:	48 01 d0             	add    rax,rdx
   107d2:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
   107d9:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
   107e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   107e3:	ba 00 00 00 00       	mov    edx,0x0
   107e8:	48 89 95 68 fc ff ff 	mov    QWORD PTR [rbp-0x398],rdx
   107ef:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
   107f6:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
   107fd:	48 8b 95 68 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x398]
   10804:	48 89 95 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rdx
   1080b:	48 89 85 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rax
   10812:	48 8b 95 78 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x388]
   10819:	48 8b 85 80 fc ff ff 	mov    rax,QWORD PTR [rbp-0x380]
   10820:	66 48 0f 6e c0       	movq   xmm0,rax
   10825:	66 48 0f 6e f2       	movq   xmm6,rdx
   1082a:	66 0f 6c c6          	punpcklqdq xmm0,xmm6
   1082e:	90                   	nop
   1082f:	90                   	nop
   10830:	0f 29 85 d0 fc ff ff 	movaps XMMWORD PTR [rbp-0x330],xmm0
   10837:	66 0f 6f 85 c0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x340]
   1083f:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
   10843:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   1084b:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
   1084f:	66 0f 6f 4d f0       	movdqa xmm1,XMMWORD PTR [rbp-0x10]
   10854:	66 0f 6f 45 e0       	movdqa xmm0,XMMWORD PTR [rbp-0x20]
   10859:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   1085d:	0f 29 85 e0 fc ff ff 	movaps XMMWORD PTR [rbp-0x320],xmm0
   10864:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
   1086c:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
   10870:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   10878:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
   1087c:	66 0f 6f 4d d0       	movdqa xmm1,XMMWORD PTR [rbp-0x30]
   10881:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
   10886:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   1088a:	0f 29 85 f0 fc ff ff 	movaps XMMWORD PTR [rbp-0x310],xmm0
   10891:	66 0f 6f 85 e0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x320]
   10899:	0f 29 45 a0          	movaps XMMWORD PTR [rbp-0x60],xmm0
   1089d:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
   108a5:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
   108a9:	66 0f 6f 45 a0       	movdqa xmm0,XMMWORD PTR [rbp-0x60]
   108ae:	66 0f 6f 4d b0       	movdqa xmm1,XMMWORD PTR [rbp-0x50]
   108b3:	66 0f f9 c1          	psubw  xmm0,xmm1
   108b7:	0f 29 85 00 fd ff ff 	movaps XMMWORD PTR [rbp-0x300],xmm0
   108be:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
   108c6:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
   108ca:	c7 85 54 fc ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x3ac],0x2
   108d4:	66 0f 6f 4d 90       	movdqa xmm1,XMMWORD PTR [rbp-0x70]
   108d9:	66 0f 6e 85 54 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3ac]
   108e1:	66 0f f1 c8          	psllw  xmm1,xmm0
   108e5:	66 0f 6f c1          	movdqa xmm0,xmm1
   108e9:	0f 29 85 10 fd ff ff 	movaps XMMWORD PTR [rbp-0x2f0],xmm0
   108f0:	66 0f 6f 85 10 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2f0]
   108f8:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
   108ff:	66 0f 6f 85 00 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x300]
   10907:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   1090b:	66 0f 6f 8d 70 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x90]
   10913:	66 0f 6f 45 80       	movdqa xmm0,XMMWORD PTR [rbp-0x80]
   10918:	66 0f fd c1          	paddw  xmm0,xmm1
   1091c:	0f 29 85 20 fd ff ff 	movaps XMMWORD PTR [rbp-0x2e0],xmm0
   10923:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   1092b:	66 0f 73 f8 02       	pslldq xmm0,0x2
   10930:	0f 29 85 30 fd ff ff 	movaps XMMWORD PTR [rbp-0x2d0],xmm0
   10937:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   1093f:	66 0f 73 d8 02       	psrldq xmm0,0x2
   10944:	0f 29 85 40 fd ff ff 	movaps XMMWORD PTR [rbp-0x2c0],xmm0
   1094b:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10951:	98                   	cwde   
   10952:	66 0f 6f 85 30 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2d0]
   1095a:	66 0f c4 c0 00       	pinsrw xmm0,eax,0x0
   1095f:	0f 29 85 50 fd ff ff 	movaps XMMWORD PTR [rbp-0x2b0],xmm0
   10966:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   1096c:	48 98                	cdqe   
   1096e:	48 8d 50 08          	lea    rdx,[rax+0x8]
   10972:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10979:	48 01 d0             	add    rax,rdx
   1097c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1097f:	0f b6 d0             	movzx  edx,al
   10982:	89 d0                	mov    eax,edx
   10984:	01 c0                	add    eax,eax
   10986:	01 c2                	add    edx,eax
   10988:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   1098e:	48 98                	cdqe   
   10990:	48 8d 48 08          	lea    rcx,[rax+0x8]
   10994:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   1099b:	48 01 c8             	add    rax,rcx
   1099e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   109a1:	0f b6 c0             	movzx  eax,al
   109a4:	01 d0                	add    eax,edx
   109a6:	98                   	cwde   
   109a7:	66 0f 6f 85 40 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2c0]
   109af:	66 0f c4 c0 07       	pinsrw xmm0,eax,0x7
   109b4:	0f 29 85 60 fd ff ff 	movaps XMMWORD PTR [rbp-0x2a0],xmm0
   109bb:	66 c7 85 2a fc ff ff 08 00 	mov    WORD PTR [rbp-0x3d6],0x8
   109c4:	0f bf 85 2a fc ff ff 	movsx  eax,WORD PTR [rbp-0x3d6]
   109cb:	0f bf 95 2a fc ff ff 	movsx  edx,WORD PTR [rbp-0x3d6]
   109d2:	0f bf 8d 2a fc ff ff 	movsx  ecx,WORD PTR [rbp-0x3d6]
   109d9:	0f bf b5 2a fc ff ff 	movsx  esi,WORD PTR [rbp-0x3d6]
   109e0:	0f bf bd 2a fc ff ff 	movsx  edi,WORD PTR [rbp-0x3d6]
   109e7:	44 0f bf 85 2a fc ff ff 	movsx  r8d,WORD PTR [rbp-0x3d6]
   109ef:	44 0f bf 8d 2a fc ff ff 	movsx  r9d,WORD PTR [rbp-0x3d6]
   109f7:	44 0f bf 95 2a fc ff ff 	movsx  r10d,WORD PTR [rbp-0x3d6]
   109ff:	66 44 89 95 2c fc ff ff 	mov    WORD PTR [rbp-0x3d4],r10w
   10a07:	66 44 89 8d 2e fc ff ff 	mov    WORD PTR [rbp-0x3d2],r9w
   10a0f:	66 44 89 85 30 fc ff ff 	mov    WORD PTR [rbp-0x3d0],r8w
   10a17:	66 89 bd 32 fc ff ff 	mov    WORD PTR [rbp-0x3ce],di
   10a1e:	66 89 b5 34 fc ff ff 	mov    WORD PTR [rbp-0x3cc],si
   10a25:	66 89 8d 36 fc ff ff 	mov    WORD PTR [rbp-0x3ca],cx
   10a2c:	66 89 95 38 fc ff ff 	mov    WORD PTR [rbp-0x3c8],dx
   10a33:	66 89 85 3a fc ff ff 	mov    WORD PTR [rbp-0x3c6],ax
   10a3a:	0f b7 85 3a fc ff ff 	movzx  eax,WORD PTR [rbp-0x3c6]
   10a41:	66 0f 6e c0          	movd   xmm0,eax
   10a45:	0f b7 85 38 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3c8]
   10a4c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10a51:	66 0f 6f c8          	movdqa xmm1,xmm0
   10a55:	0f b7 85 36 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3ca]
   10a5c:	66 0f 6e c0          	movd   xmm0,eax
   10a60:	0f b7 85 34 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3cc]
   10a67:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10a6c:	66 0f 6f e0          	movdqa xmm4,xmm0
   10a70:	0f b7 85 32 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3ce]
   10a77:	66 0f 6e c0          	movd   xmm0,eax
   10a7b:	0f b7 85 30 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3d0]
   10a82:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10a87:	66 0f 6f d0          	movdqa xmm2,xmm0
   10a8b:	0f b7 85 2e fc ff ff 	movzx  eax,WORD PTR [rbp-0x3d2]
   10a92:	66 0f 6e c0          	movd   xmm0,eax
   10a96:	0f b7 85 2c fc ff ff 	movzx  eax,WORD PTR [rbp-0x3d4]
   10a9d:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10aa2:	66 0f 6f d8          	movdqa xmm3,xmm0
   10aa6:	66 0f 62 cc          	punpckldq xmm1,xmm4
   10aaa:	66 0f 6f c1          	movdqa xmm0,xmm1
   10aae:	66 0f 6f c8          	movdqa xmm1,xmm0
   10ab2:	66 0f 62 d3          	punpckldq xmm2,xmm3
   10ab6:	66 0f 6f c2          	movdqa xmm0,xmm2
   10aba:	66 0f 6f d0          	movdqa xmm2,xmm0
   10abe:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   10ac2:	66 0f 6f c1          	movdqa xmm0,xmm1
   10ac6:	90                   	nop
   10ac7:	0f 29 85 70 fd ff ff 	movaps XMMWORD PTR [rbp-0x290],xmm0
   10ace:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10ad6:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
   10add:	c7 85 50 fc ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x3b0],0x2
   10ae7:	66 0f 6f 8d 60 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa0]
   10aef:	66 0f 6e 85 50 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3b0]
   10af7:	66 0f f1 c8          	psllw  xmm1,xmm0
   10afb:	66 0f 6f c1          	movdqa xmm0,xmm1
   10aff:	0f 29 85 80 fd ff ff 	movaps XMMWORD PTR [rbp-0x280],xmm0
   10b06:	66 0f 6f 85 50 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2b0]
   10b0e:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
   10b15:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10b1d:	0f 29 85 50 ff ff ff 	movaps XMMWORD PTR [rbp-0xb0],xmm0
   10b24:	66 0f 6f 85 40 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc0]
   10b2c:	66 0f 6f 8d 50 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb0]
   10b34:	66 0f f9 c1          	psubw  xmm0,xmm1
   10b38:	0f 29 85 90 fd ff ff 	movaps XMMWORD PTR [rbp-0x270],xmm0
   10b3f:	66 0f 6f 85 60 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2a0]
   10b47:	0f 29 85 20 ff ff ff 	movaps XMMWORD PTR [rbp-0xe0],xmm0
   10b4e:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10b56:	0f 29 85 30 ff ff ff 	movaps XMMWORD PTR [rbp-0xd0],xmm0
   10b5d:	66 0f 6f 85 20 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe0]
   10b65:	66 0f 6f 8d 30 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd0]
   10b6d:	66 0f f9 c1          	psubw  xmm0,xmm1
   10b71:	0f 29 85 a0 fd ff ff 	movaps XMMWORD PTR [rbp-0x260],xmm0
   10b78:	66 0f 6f 85 80 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x280]
   10b80:	0f 29 85 00 ff ff ff 	movaps XMMWORD PTR [rbp-0x100],xmm0
   10b87:	66 0f 6f 85 70 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x290]
   10b8f:	0f 29 85 10 ff ff ff 	movaps XMMWORD PTR [rbp-0xf0],xmm0
   10b96:	66 0f 6f 8d 00 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x100]
   10b9e:	66 0f 6f 85 10 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf0]
   10ba6:	66 0f fd c1          	paddw  xmm0,xmm1
   10baa:	0f 29 85 b0 fd ff ff 	movaps XMMWORD PTR [rbp-0x250],xmm0
   10bb1:	66 0f 6f 85 90 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x270]
   10bb9:	0f 29 85 e0 fe ff ff 	movaps XMMWORD PTR [rbp-0x120],xmm0
   10bc0:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
   10bc8:	0f 29 85 f0 fe ff ff 	movaps XMMWORD PTR [rbp-0x110],xmm0
   10bcf:	66 0f 6f 8d e0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x120]
   10bd7:	66 0f 6f 85 f0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x110]
   10bdf:	66 0f fd c1          	paddw  xmm0,xmm1
   10be3:	0f 29 85 c0 fd ff ff 	movaps XMMWORD PTR [rbp-0x240],xmm0
   10bea:	66 0f 6f 85 a0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x260]
   10bf2:	0f 29 85 c0 fe ff ff 	movaps XMMWORD PTR [rbp-0x140],xmm0
   10bf9:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
   10c01:	0f 29 85 d0 fe ff ff 	movaps XMMWORD PTR [rbp-0x130],xmm0
   10c08:	66 0f 6f 8d c0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x140]
   10c10:	66 0f 6f 85 d0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x130]
   10c18:	66 0f fd c1          	paddw  xmm0,xmm1
   10c1c:	0f 29 85 d0 fd ff ff 	movaps XMMWORD PTR [rbp-0x230],xmm0
   10c23:	66 0f 6f 85 c0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x240]
   10c2b:	0f 29 85 a0 fe ff ff 	movaps XMMWORD PTR [rbp-0x160],xmm0
   10c32:	66 0f 6f 85 d0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x230]
   10c3a:	0f 29 85 b0 fe ff ff 	movaps XMMWORD PTR [rbp-0x150],xmm0
   10c41:	66 0f 6f 8d b0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x150]
   10c49:	66 0f 6f 85 a0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x160]
   10c51:	66 0f 61 c1          	punpcklwd xmm0,xmm1
   10c55:	0f 29 85 e0 fd ff ff 	movaps XMMWORD PTR [rbp-0x220],xmm0
   10c5c:	66 0f 6f 85 c0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x240]
   10c64:	0f 29 85 80 fe ff ff 	movaps XMMWORD PTR [rbp-0x180],xmm0
   10c6b:	66 0f 6f 85 d0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x230]
   10c73:	0f 29 85 90 fe ff ff 	movaps XMMWORD PTR [rbp-0x170],xmm0
   10c7a:	66 0f 6f 8d 90 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x170]
   10c82:	66 0f 6f 85 80 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x180]
   10c8a:	66 0f 69 c1          	punpckhwd xmm0,xmm1
   10c8e:	0f 29 85 f0 fd ff ff 	movaps XMMWORD PTR [rbp-0x210],xmm0
   10c95:	66 0f 6f 85 e0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x220]
   10c9d:	0f 29 85 70 fe ff ff 	movaps XMMWORD PTR [rbp-0x190],xmm0
   10ca4:	c7 85 4c fc ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x3b4],0x4
   10cae:	66 0f 6f 8d 70 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x190]
   10cb6:	66 0f 6e 85 4c fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3b4]
   10cbe:	66 0f d1 c8          	psrlw  xmm1,xmm0
   10cc2:	66 0f 6f c1          	movdqa xmm0,xmm1
   10cc6:	0f 29 85 00 fe ff ff 	movaps XMMWORD PTR [rbp-0x200],xmm0
   10ccd:	66 0f 6f 85 f0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x210]
   10cd5:	0f 29 85 60 fe ff ff 	movaps XMMWORD PTR [rbp-0x1a0],xmm0
   10cdc:	c7 85 48 fc ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x3b8],0x4
   10ce6:	66 0f 6f 8d 60 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a0]
   10cee:	66 0f 6e 85 48 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3b8]
   10cf6:	66 0f d1 c8          	psrlw  xmm1,xmm0
   10cfa:	66 0f 6f c1          	movdqa xmm0,xmm1
   10cfe:	0f 29 85 10 fe ff ff 	movaps XMMWORD PTR [rbp-0x1f0],xmm0
   10d05:	66 0f 6f 85 00 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x200]
   10d0d:	0f 29 85 40 fe ff ff 	movaps XMMWORD PTR [rbp-0x1c0],xmm0
   10d14:	66 0f 6f 85 10 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f0]
   10d1c:	0f 29 85 50 fe ff ff 	movaps XMMWORD PTR [rbp-0x1b0],xmm0
   10d23:	66 0f 6f 8d 50 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b0]
   10d2b:	66 0f 6f 85 40 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c0]
   10d33:	66 0f 67 c1          	packuswb xmm0,xmm1
   10d37:	0f 29 85 20 fe ff ff 	movaps XMMWORD PTR [rbp-0x1e0],xmm0
   10d3e:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10d44:	01 c0                	add    eax,eax
   10d46:	48 63 d0             	movsxd rdx,eax
   10d49:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10d50:	48 01 d0             	add    rax,rdx
   10d53:	48 89 85 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],rax
   10d5a:	66 0f 6f 85 20 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e0]
   10d62:	0f 29 85 30 fe ff ff 	movaps XMMWORD PTR [rbp-0x1d0],xmm0
   10d69:	66 0f 6f 85 30 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d0]
   10d71:	48 8b 85 58 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a8]
   10d78:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
   10d7b:	90                   	nop
   10d7c:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10d82:	48 98                	cdqe   
   10d84:	48 8d 50 07          	lea    rdx,[rax+0x7]
   10d88:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10d8f:	48 01 d0             	add    rax,rdx
   10d92:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10d95:	0f b6 d0             	movzx  edx,al
   10d98:	89 d0                	mov    eax,edx
   10d9a:	01 c0                	add    eax,eax
   10d9c:	01 c2                	add    edx,eax
   10d9e:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10da4:	48 98                	cdqe   
   10da6:	48 8d 48 07          	lea    rcx,[rax+0x7]
   10daa:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10db1:	48 01 c8             	add    rax,rcx
   10db4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10db7:	0f b6 c0             	movzx  eax,al
   10dba:	01 d0                	add    eax,edx
   10dbc:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10dc2:	83 85 3c fc ff ff 08 	add    DWORD PTR [rbp-0x3c4],0x8
   10dc9:	e9 56 f9 ff ff       	jmp    10724 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0xb7>
   10dce:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10dd4:	89 85 44 fc ff ff    	mov    DWORD PTR [rbp-0x3bc],eax
   10dda:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10de0:	48 63 d0             	movsxd rdx,eax
   10de3:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10dea:	48 01 d0             	add    rax,rdx
   10ded:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10df0:	0f b6 d0             	movzx  edx,al
   10df3:	89 d0                	mov    eax,edx
   10df5:	01 c0                	add    eax,eax
   10df7:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   10dfa:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e00:	48 63 d0             	movsxd rdx,eax
   10e03:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10e0a:	48 01 d0             	add    rax,rdx
   10e0d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10e10:	0f b6 c0             	movzx  eax,al
   10e13:	01 c8                	add    eax,ecx
   10e15:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10e1b:	8b 95 40 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3c0]
   10e21:	89 d0                	mov    eax,edx
   10e23:	01 c0                	add    eax,eax
   10e25:	01 c2                	add    edx,eax
   10e27:	8b 85 44 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3bc]
   10e2d:	01 d0                	add    eax,edx
   10e2f:	83 c0 08             	add    eax,0x8
   10e32:	c1 f8 04             	sar    eax,0x4
   10e35:	89 c1                	mov    ecx,eax
   10e37:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e3d:	01 c0                	add    eax,eax
   10e3f:	48 63 d0             	movsxd rdx,eax
   10e42:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10e49:	48 01 d0             	add    rax,rdx
   10e4c:	89 ca                	mov    edx,ecx
   10e4e:	88 10                	mov    BYTE PTR [rax],dl
   10e50:	83 85 3c fc ff ff 01 	add    DWORD PTR [rbp-0x3c4],0x1
   10e57:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e5d:	3b 85 04 fc ff ff    	cmp    eax,DWORD PTR [rbp-0x3fc]
   10e63:	0f 8d c4 00 00 00    	jge    10f2d <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8c0>
   10e69:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10e6f:	89 85 44 fc ff ff    	mov    DWORD PTR [rbp-0x3bc],eax
   10e75:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e7b:	48 63 d0             	movsxd rdx,eax
   10e7e:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10e85:	48 01 d0             	add    rax,rdx
   10e88:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10e8b:	0f b6 d0             	movzx  edx,al
   10e8e:	89 d0                	mov    eax,edx
   10e90:	01 c0                	add    eax,eax
   10e92:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   10e95:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e9b:	48 63 d0             	movsxd rdx,eax
   10e9e:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10ea5:	48 01 d0             	add    rax,rdx
   10ea8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10eab:	0f b6 c0             	movzx  eax,al
   10eae:	01 c8                	add    eax,ecx
   10eb0:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10eb6:	8b 95 44 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3bc]
   10ebc:	89 d0                	mov    eax,edx
   10ebe:	01 c0                	add    eax,eax
   10ec0:	01 c2                	add    edx,eax
   10ec2:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10ec8:	01 d0                	add    eax,edx
   10eca:	83 c0 08             	add    eax,0x8
   10ecd:	c1 f8 04             	sar    eax,0x4
   10ed0:	89 c2                	mov    edx,eax
   10ed2:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10ed8:	01 c0                	add    eax,eax
   10eda:	48 98                	cdqe   
   10edc:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   10ee0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10ee7:	48 01 c8             	add    rax,rcx
   10eea:	88 10                	mov    BYTE PTR [rax],dl
   10eec:	8b 95 40 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3c0]
   10ef2:	89 d0                	mov    eax,edx
   10ef4:	01 c0                	add    eax,eax
   10ef6:	01 c2                	add    edx,eax
   10ef8:	8b 85 44 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3bc]
   10efe:	01 d0                	add    eax,edx
   10f00:	83 c0 08             	add    eax,0x8
   10f03:	c1 f8 04             	sar    eax,0x4
   10f06:	89 c1                	mov    ecx,eax
   10f08:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10f0e:	01 c0                	add    eax,eax
   10f10:	48 63 d0             	movsxd rdx,eax
   10f13:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10f1a:	48 01 d0             	add    rax,rdx
   10f1d:	89 ca                	mov    edx,ecx
   10f1f:	88 10                	mov    BYTE PTR [rax],dl
   10f21:	83 85 3c fc ff ff 01 	add    DWORD PTR [rbp-0x3c4],0x1
   10f28:	e9 2a ff ff ff       	jmp    10e57 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x7ea>
   10f2d:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10f33:	83 c0 02             	add    eax,0x2
   10f36:	c1 f8 02             	sar    eax,0x2
   10f39:	89 c2                	mov    edx,eax
   10f3b:	8b 85 04 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3fc]
   10f41:	01 c0                	add    eax,eax
   10f43:	48 98                	cdqe   
   10f45:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   10f49:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10f50:	48 01 c8             	add    rax,rcx
   10f53:	88 10                	mov    BYTE PTR [rax],dl
   10f55:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10f5c:	c9                   	leave  
   10f5d:	c3                   	ret    

0000000000010f5e <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   10f5e:	55                   	push   rbp
   10f5f:	48 89 e5             	mov    rbp,rsp
   10f62:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   10f66:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   10f6a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   10f6e:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   10f71:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   10f75:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   10f7c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   10f7f:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
   10f82:	7d 46                	jge    10fca <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x6c>
   10f84:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   10f8b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10f8e:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
   10f91:	7d 31                	jge    10fc4 <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x66>
   10f93:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   10f96:	48 63 d0             	movsxd rdx,eax
   10f99:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   10f9d:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   10fa1:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   10fa4:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
   10fa8:	89 c2                	mov    edx,eax
   10faa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10fad:	01 d0                	add    eax,edx
   10faf:	48 63 d0             	movsxd rdx,eax
   10fb2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10fb6:	48 01 c2             	add    rdx,rax
   10fb9:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   10fbc:	88 02                	mov    BYTE PTR [rdx],al
   10fbe:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   10fc2:	eb c7                	jmp    10f8b <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x2d>
   10fc4:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   10fc8:	eb b2                	jmp    10f7c <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x1e>
   10fca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10fce:	5d                   	pop    rbp
   10fcf:	c3                   	ret    

0000000000010fd0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>:
   10fd0:	55                   	push   rbp
   10fd1:	48 89 e5             	mov    rbp,rsp
   10fd4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   10fd8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   10fdc:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   10fe0:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   10fe4:	44 89 45 bc          	mov    DWORD PTR [rbp-0x44],r8d
   10fe8:	44 89 4d b8          	mov    DWORD PTR [rbp-0x48],r9d
   10fec:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   10ff3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   10ff6:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
   10ff9:	0f 8d 42 01 00 00    	jge    11141 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x171>
   10fff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   11002:	48 63 d0             	movsxd rdx,eax
   11005:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   11009:	48 01 d0             	add    rax,rdx
   1100c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1100f:	0f b6 c0             	movzx  eax,al
   11012:	c1 e0 14             	shl    eax,0x14
   11015:	05 00 00 08 00       	add    eax,0x80000
   1101a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1101d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   11020:	48 63 d0             	movsxd rdx,eax
   11023:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   11027:	48 01 d0             	add    rax,rdx
   1102a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1102d:	0f b6 c0             	movzx  eax,al
   11030:	83 c0 80             	add    eax,0xffffff80
   11033:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   11036:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   11039:	48 63 d0             	movsxd rdx,eax
   1103c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   11040:	48 01 d0             	add    rax,rdx
   11043:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   11046:	0f b6 c0             	movzx  eax,al
   11049:	83 c0 80             	add    eax,0xffffff80
   1104c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1104f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   11052:	69 d0 00 6f 16 00    	imul   edx,eax,0x166f00
   11058:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1105b:	01 d0                	add    eax,edx
   1105d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11060:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   11063:	69 d0 00 93 f4 ff    	imul   edx,eax,0xfff49300
   11069:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1106c:	01 d0                	add    eax,edx
   1106e:	89 c2                	mov    edx,eax
   11070:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   11073:	69 c0 00 7e fa ff    	imul   eax,eax,0xfffa7e00
   11079:	66 b8 00 00          	mov    ax,0x0
   1107d:	01 d0                	add    eax,edx
   1107f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   11082:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   11085:	69 d0 00 5a 1c 00    	imul   edx,eax,0x1c5a00
   1108b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1108e:	01 d0                	add    eax,edx
   11090:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   11093:	c1 7d e8 14          	sar    DWORD PTR [rbp-0x18],0x14
   11097:	c1 7d ec 14          	sar    DWORD PTR [rbp-0x14],0x14
   1109b:	c1 7d f0 14          	sar    DWORD PTR [rbp-0x10],0x14
   1109f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   110a2:	3d ff 00 00 00       	cmp    eax,0xff
   110a7:	76 16                	jbe    110bf <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0xef>
   110a9:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   110ad:	79 09                	jns    110b8 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0xe8>
   110af:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   110b6:	eb 07                	jmp    110bf <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0xef>
   110b8:	c7 45 e8 ff 00 00 00 	mov    DWORD PTR [rbp-0x18],0xff
   110bf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   110c2:	3d ff 00 00 00       	cmp    eax,0xff
   110c7:	76 16                	jbe    110df <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x10f>
   110c9:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   110cd:	79 09                	jns    110d8 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x108>
   110cf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   110d6:	eb 07                	jmp    110df <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x10f>
   110d8:	c7 45 ec ff 00 00 00 	mov    DWORD PTR [rbp-0x14],0xff
   110df:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   110e2:	3d ff 00 00 00       	cmp    eax,0xff
   110e7:	76 16                	jbe    110ff <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x12f>
   110e9:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   110ed:	79 09                	jns    110f8 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x128>
   110ef:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   110f6:	eb 07                	jmp    110ff <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x12f>
   110f8:	c7 45 f0 ff 00 00 00 	mov    DWORD PTR [rbp-0x10],0xff
   110ff:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   11102:	89 c2                	mov    edx,eax
   11104:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11108:	88 10                	mov    BYTE PTR [rax],dl
   1110a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1110e:	48 83 c0 01          	add    rax,0x1
   11112:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   11115:	88 10                	mov    BYTE PTR [rax],dl
   11117:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1111b:	48 83 c0 02          	add    rax,0x2
   1111f:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   11122:	88 10                	mov    BYTE PTR [rax],dl
   11124:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11128:	48 83 c0 03          	add    rax,0x3
   1112c:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1112f:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   11132:	48 98                	cdqe   
   11134:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
   11138:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   1113c:	e9 b2 fe ff ff       	jmp    10ff3 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x23>
   11141:	90                   	nop
   11142:	5d                   	pop    rbp
   11143:	c3                   	ret    

0000000000011144 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>:
   11144:	55                   	push   rbp
   11145:	48 89 e5             	mov    rbp,rsp
   11148:	41 57                	push   r15
   1114a:	41 56                	push   r14
   1114c:	41 55                	push   r13
   1114e:	41 54                	push   r12
   11150:	53                   	push   rbx
   11151:	48 81 ec d0 05 00 00 	sub    rsp,0x5d0
   11158:	48 89 bd c8 f9 ff ff 	mov    QWORD PTR [rbp-0x638],rdi
   1115f:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
   11166:	48 89 95 b8 f9 ff ff 	mov    QWORD PTR [rbp-0x648],rdx
   1116d:	48 89 8d b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rcx
   11174:	44 89 85 ac f9 ff ff 	mov    DWORD PTR [rbp-0x654],r8d
   1117b:	44 89 8d a8 f9 ff ff 	mov    DWORD PTR [rbp-0x658],r9d
   11182:	c7 85 4c fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5b4],0x0
   1118c:	83 bd a8 f9 ff ff 04 	cmp    DWORD PTR [rbp-0x658],0x4
   11193:	0f 85 2f 10 00 00    	jne    121c8 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x1084>
   11199:	c6 85 e1 f9 ff ff 80 	mov    BYTE PTR [rbp-0x61f],0x80
   111a0:	0f be 95 e1 f9 ff ff 	movsx  edx,BYTE PTR [rbp-0x61f]
   111a7:	0f be 8d e1 f9 ff ff 	movsx  ecx,BYTE PTR [rbp-0x61f]
   111ae:	0f be b5 e1 f9 ff ff 	movsx  esi,BYTE PTR [rbp-0x61f]
   111b5:	0f be bd e1 f9 ff ff 	movsx  edi,BYTE PTR [rbp-0x61f]
   111bc:	44 0f be 85 e1 f9 ff ff 	movsx  r8d,BYTE PTR [rbp-0x61f]
   111c4:	44 0f be 8d e1 f9 ff ff 	movsx  r9d,BYTE PTR [rbp-0x61f]
   111cc:	44 0f be 95 e1 f9 ff ff 	movsx  r10d,BYTE PTR [rbp-0x61f]
   111d4:	44 0f be 9d e1 f9 ff ff 	movsx  r11d,BYTE PTR [rbp-0x61f]
   111dc:	0f be 9d e1 f9 ff ff 	movsx  ebx,BYTE PTR [rbp-0x61f]
   111e3:	44 0f be a5 e1 f9 ff ff 	movsx  r12d,BYTE PTR [rbp-0x61f]
   111eb:	44 0f be ad e1 f9 ff ff 	movsx  r13d,BYTE PTR [rbp-0x61f]
   111f3:	44 0f be b5 e1 f9 ff ff 	movsx  r14d,BYTE PTR [rbp-0x61f]
   111fb:	44 0f be bd e1 f9 ff ff 	movsx  r15d,BYTE PTR [rbp-0x61f]
   11203:	0f be 85 e1 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x61f]
   1120a:	89 85 90 f9 ff ff    	mov    DWORD PTR [rbp-0x670],eax
   11210:	0f be 85 e1 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x61f]
   11217:	89 85 a4 f9 ff ff    	mov    DWORD PTR [rbp-0x65c],eax
   1121d:	0f be 85 e1 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x61f]
   11224:	88 85 e2 f9 ff ff    	mov    BYTE PTR [rbp-0x61e],al
   1122a:	0f b6 85 a4 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x65c]
   11231:	88 85 e3 f9 ff ff    	mov    BYTE PTR [rbp-0x61d],al
   11237:	0f b6 85 90 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x670]
   1123e:	88 85 e4 f9 ff ff    	mov    BYTE PTR [rbp-0x61c],al
   11244:	44 88 bd e5 f9 ff ff 	mov    BYTE PTR [rbp-0x61b],r15b
   1124b:	44 88 b5 e6 f9 ff ff 	mov    BYTE PTR [rbp-0x61a],r14b
   11252:	44 88 ad e7 f9 ff ff 	mov    BYTE PTR [rbp-0x619],r13b
   11259:	44 88 a5 e8 f9 ff ff 	mov    BYTE PTR [rbp-0x618],r12b
   11260:	88 9d e9 f9 ff ff    	mov    BYTE PTR [rbp-0x617],bl
   11266:	44 88 9d ea f9 ff ff 	mov    BYTE PTR [rbp-0x616],r11b
   1126d:	44 88 95 eb f9 ff ff 	mov    BYTE PTR [rbp-0x615],r10b
   11274:	44 88 8d ec f9 ff ff 	mov    BYTE PTR [rbp-0x614],r9b
   1127b:	44 88 85 ed f9 ff ff 	mov    BYTE PTR [rbp-0x613],r8b
   11282:	40 88 bd ee f9 ff ff 	mov    BYTE PTR [rbp-0x612],dil
   11289:	40 88 b5 ef f9 ff ff 	mov    BYTE PTR [rbp-0x611],sil
   11290:	88 8d f0 f9 ff ff    	mov    BYTE PTR [rbp-0x610],cl
   11296:	88 95 f1 f9 ff ff    	mov    BYTE PTR [rbp-0x60f],dl
   1129c:	0f b6 95 ea f9 ff ff 	movzx  edx,BYTE PTR [rbp-0x616]
   112a3:	0f b6 85 eb f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x615]
   112aa:	48 c1 e2 08          	shl    rdx,0x8
   112ae:	48 09 c2             	or     rdx,rax
   112b1:	0f b6 85 ec f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x614]
   112b8:	48 c1 e2 08          	shl    rdx,0x8
   112bc:	48 09 c2             	or     rdx,rax
   112bf:	0f b6 85 ed f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x613]
   112c6:	48 c1 e2 08          	shl    rdx,0x8
   112ca:	48 09 c2             	or     rdx,rax
   112cd:	0f b6 85 ee f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x612]
   112d4:	48 c1 e2 08          	shl    rdx,0x8
   112d8:	48 09 c2             	or     rdx,rax
   112db:	0f b6 85 ef f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x611]
   112e2:	48 c1 e2 08          	shl    rdx,0x8
   112e6:	48 09 c2             	or     rdx,rax
   112e9:	0f b6 85 f0 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x610]
   112f0:	48 c1 e2 08          	shl    rdx,0x8
   112f4:	48 09 c2             	or     rdx,rax
   112f7:	0f b6 85 f1 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x60f]
   112fe:	48 c1 e2 08          	shl    rdx,0x8
   11302:	48 09 c2             	or     rdx,rax
   11305:	0f b6 85 e2 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x61e]
   1130c:	0f b6 8d e3 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61d]
   11313:	48 c1 e0 08          	shl    rax,0x8
   11317:	48 09 c8             	or     rax,rcx
   1131a:	0f b6 8d e4 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61c]
   11321:	48 c1 e0 08          	shl    rax,0x8
   11325:	48 09 c8             	or     rax,rcx
   11328:	0f b6 8d e5 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61b]
   1132f:	48 c1 e0 08          	shl    rax,0x8
   11333:	48 09 c8             	or     rax,rcx
   11336:	0f b6 8d e6 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61a]
   1133d:	48 c1 e0 08          	shl    rax,0x8
   11341:	48 09 c8             	or     rax,rcx
   11344:	0f b6 8d e7 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x619]
   1134b:	48 c1 e0 08          	shl    rax,0x8
   1134f:	48 09 c8             	or     rax,rcx
   11352:	0f b6 8d e8 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x618]
   11359:	48 c1 e0 08          	shl    rax,0x8
   1135d:	48 09 c8             	or     rax,rcx
   11360:	0f b6 8d e9 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x617]
   11367:	48 c1 e0 08          	shl    rax,0x8
   1136b:	48 09 c8             	or     rax,rcx
   1136e:	48 89 95 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rdx
   11375:	48 89 85 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],rax
   1137c:	66 0f 6f 85 90 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x670]
   11384:	90                   	nop
   11385:	0f 29 85 00 fb ff ff 	movaps XMMWORD PTR [rbp-0x500],xmm0
   1138c:	66 c7 85 3a fa ff ff 6f 16 	mov    WORD PTR [rbp-0x5c6],0x166f
   11395:	0f bf 85 3a fa ff ff 	movsx  eax,WORD PTR [rbp-0x5c6]
   1139c:	0f bf 95 3a fa ff ff 	movsx  edx,WORD PTR [rbp-0x5c6]
   113a3:	0f bf 8d 3a fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5c6]
   113aa:	0f bf b5 3a fa ff ff 	movsx  esi,WORD PTR [rbp-0x5c6]
   113b1:	0f bf bd 3a fa ff ff 	movsx  edi,WORD PTR [rbp-0x5c6]
   113b8:	44 0f bf 85 3a fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5c6]
   113c0:	44 0f bf 8d 3a fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5c6]
   113c8:	44 0f bf 95 3a fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5c6]
   113d0:	66 44 89 95 3c fa ff ff 	mov    WORD PTR [rbp-0x5c4],r10w
   113d8:	66 44 89 8d 3e fa ff ff 	mov    WORD PTR [rbp-0x5c2],r9w
   113e0:	66 44 89 85 40 fa ff ff 	mov    WORD PTR [rbp-0x5c0],r8w
   113e8:	66 89 bd 42 fa ff ff 	mov    WORD PTR [rbp-0x5be],di
   113ef:	66 89 b5 44 fa ff ff 	mov    WORD PTR [rbp-0x5bc],si
   113f6:	66 89 8d 46 fa ff ff 	mov    WORD PTR [rbp-0x5ba],cx
   113fd:	66 89 95 48 fa ff ff 	mov    WORD PTR [rbp-0x5b8],dx
   11404:	66 89 85 4a fa ff ff 	mov    WORD PTR [rbp-0x5b6],ax
   1140b:	0f b7 85 4a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5b6]
   11412:	66 0f 6e c0          	movd   xmm0,eax
   11416:	0f b7 85 48 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5b8]
   1141d:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11422:	66 0f 6f c8          	movdqa xmm1,xmm0
   11426:	0f b7 85 46 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ba]
   1142d:	66 0f 6e c0          	movd   xmm0,eax
   11431:	0f b7 85 44 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5bc]
   11438:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1143d:	66 0f 6f e0          	movdqa xmm4,xmm0
   11441:	0f b7 85 42 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5be]
   11448:	66 0f 6e c0          	movd   xmm0,eax
   1144c:	0f b7 85 40 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c0]
   11453:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11458:	66 0f 6f d0          	movdqa xmm2,xmm0
   1145c:	0f b7 85 3e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c2]
   11463:	66 0f 6e c0          	movd   xmm0,eax
   11467:	0f b7 85 3c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c4]
   1146e:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11473:	66 0f 6f d8          	movdqa xmm3,xmm0
   11477:	66 0f 62 cc          	punpckldq xmm1,xmm4
   1147b:	66 0f 6f c1          	movdqa xmm0,xmm1
   1147f:	66 0f 6f c8          	movdqa xmm1,xmm0
   11483:	66 0f 62 d3          	punpckldq xmm2,xmm3
   11487:	66 0f 6f c2          	movdqa xmm0,xmm2
   1148b:	66 0f 6f d0          	movdqa xmm2,xmm0
   1148f:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   11493:	66 0f 6f c1          	movdqa xmm0,xmm1
   11497:	90                   	nop
   11498:	0f 29 85 10 fb ff ff 	movaps XMMWORD PTR [rbp-0x4f0],xmm0
   1149f:	66 c7 85 28 fa ff ff 93 f4 	mov    WORD PTR [rbp-0x5d8],0xf493
   114a8:	0f bf 85 28 fa ff ff 	movsx  eax,WORD PTR [rbp-0x5d8]
   114af:	0f bf 95 28 fa ff ff 	movsx  edx,WORD PTR [rbp-0x5d8]
   114b6:	0f bf 8d 28 fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5d8]
   114bd:	0f bf b5 28 fa ff ff 	movsx  esi,WORD PTR [rbp-0x5d8]
   114c4:	0f bf bd 28 fa ff ff 	movsx  edi,WORD PTR [rbp-0x5d8]
   114cb:	44 0f bf 85 28 fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5d8]
   114d3:	44 0f bf 8d 28 fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5d8]
   114db:	44 0f bf 95 28 fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5d8]
   114e3:	66 44 89 95 2a fa ff ff 	mov    WORD PTR [rbp-0x5d6],r10w
   114eb:	66 44 89 8d 2c fa ff ff 	mov    WORD PTR [rbp-0x5d4],r9w
   114f3:	66 44 89 85 2e fa ff ff 	mov    WORD PTR [rbp-0x5d2],r8w
   114fb:	66 89 bd 30 fa ff ff 	mov    WORD PTR [rbp-0x5d0],di
   11502:	66 89 b5 32 fa ff ff 	mov    WORD PTR [rbp-0x5ce],si
   11509:	66 89 8d 34 fa ff ff 	mov    WORD PTR [rbp-0x5cc],cx
   11510:	66 89 95 36 fa ff ff 	mov    WORD PTR [rbp-0x5ca],dx
   11517:	66 89 85 38 fa ff ff 	mov    WORD PTR [rbp-0x5c8],ax
   1151e:	0f b7 85 38 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c8]
   11525:	66 0f 6e c0          	movd   xmm0,eax
   11529:	0f b7 85 36 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ca]
   11530:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11535:	66 0f 6f c8          	movdqa xmm1,xmm0
   11539:	0f b7 85 34 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5cc]
   11540:	66 0f 6e c0          	movd   xmm0,eax
   11544:	0f b7 85 32 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ce]
   1154b:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11550:	66 0f 6f e0          	movdqa xmm4,xmm0
   11554:	0f b7 85 30 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d0]
   1155b:	66 0f 6e c0          	movd   xmm0,eax
   1155f:	0f b7 85 2e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d2]
   11566:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1156b:	66 0f 6f d0          	movdqa xmm2,xmm0
   1156f:	0f b7 85 2c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d4]
   11576:	66 0f 6e c0          	movd   xmm0,eax
   1157a:	0f b7 85 2a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d6]
   11581:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11586:	66 0f 6f d8          	movdqa xmm3,xmm0
   1158a:	66 0f 62 cc          	punpckldq xmm1,xmm4
   1158e:	66 0f 6f c1          	movdqa xmm0,xmm1
   11592:	66 0f 6f c8          	movdqa xmm1,xmm0
   11596:	66 0f 62 d3          	punpckldq xmm2,xmm3
   1159a:	66 0f 6f c2          	movdqa xmm0,xmm2
   1159e:	66 0f 6f d0          	movdqa xmm2,xmm0
   115a2:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   115a6:	66 0f 6f c1          	movdqa xmm0,xmm1
   115aa:	90                   	nop
   115ab:	0f 29 85 20 fb ff ff 	movaps XMMWORD PTR [rbp-0x4e0],xmm0
   115b2:	66 c7 85 16 fa ff ff 7e fa 	mov    WORD PTR [rbp-0x5ea],0xfa7e
   115bb:	0f bf 85 16 fa ff ff 	movsx  eax,WORD PTR [rbp-0x5ea]
   115c2:	0f bf 95 16 fa ff ff 	movsx  edx,WORD PTR [rbp-0x5ea]
   115c9:	0f bf 8d 16 fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5ea]
   115d0:	0f bf b5 16 fa ff ff 	movsx  esi,WORD PTR [rbp-0x5ea]
   115d7:	0f bf bd 16 fa ff ff 	movsx  edi,WORD PTR [rbp-0x5ea]
   115de:	44 0f bf 85 16 fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5ea]
   115e6:	44 0f bf 8d 16 fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5ea]
   115ee:	44 0f bf 95 16 fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5ea]
   115f6:	66 44 89 95 18 fa ff ff 	mov    WORD PTR [rbp-0x5e8],r10w
   115fe:	66 44 89 8d 1a fa ff ff 	mov    WORD PTR [rbp-0x5e6],r9w
   11606:	66 44 89 85 1c fa ff ff 	mov    WORD PTR [rbp-0x5e4],r8w
   1160e:	66 89 bd 1e fa ff ff 	mov    WORD PTR [rbp-0x5e2],di
   11615:	66 89 b5 20 fa ff ff 	mov    WORD PTR [rbp-0x5e0],si
   1161c:	66 89 8d 22 fa ff ff 	mov    WORD PTR [rbp-0x5de],cx
   11623:	66 89 95 24 fa ff ff 	mov    WORD PTR [rbp-0x5dc],dx
   1162a:	66 89 85 26 fa ff ff 	mov    WORD PTR [rbp-0x5da],ax
   11631:	0f b7 85 26 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5da]
   11638:	66 0f 6e c0          	movd   xmm0,eax
   1163c:	0f b7 85 24 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5dc]
   11643:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11648:	66 0f 6f c8          	movdqa xmm1,xmm0
   1164c:	0f b7 85 22 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5de]
   11653:	66 0f 6e c0          	movd   xmm0,eax
   11657:	0f b7 85 20 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e0]
   1165e:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11663:	66 0f 6f e0          	movdqa xmm4,xmm0
   11667:	0f b7 85 1e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e2]
   1166e:	66 0f 6e c0          	movd   xmm0,eax
   11672:	0f b7 85 1c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e4]
   11679:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1167e:	66 0f 6f d0          	movdqa xmm2,xmm0
   11682:	0f b7 85 1a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e6]
   11689:	66 0f 6e c0          	movd   xmm0,eax
   1168d:	0f b7 85 18 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e8]
   11694:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11699:	66 0f 6f d8          	movdqa xmm3,xmm0
   1169d:	66 0f 62 cc          	punpckldq xmm1,xmm4
   116a1:	66 0f 6f c1          	movdqa xmm0,xmm1
   116a5:	66 0f 6f c8          	movdqa xmm1,xmm0
   116a9:	66 0f 62 d3          	punpckldq xmm2,xmm3
   116ad:	66 0f 6f c2          	movdqa xmm0,xmm2
   116b1:	66 0f 6f d0          	movdqa xmm2,xmm0
   116b5:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   116b9:	66 0f 6f c1          	movdqa xmm0,xmm1
   116bd:	90                   	nop
   116be:	0f 29 85 30 fb ff ff 	movaps XMMWORD PTR [rbp-0x4d0],xmm0
   116c5:	66 c7 85 04 fa ff ff 5a 1c 	mov    WORD PTR [rbp-0x5fc],0x1c5a
   116ce:	0f bf 85 04 fa ff ff 	movsx  eax,WORD PTR [rbp-0x5fc]
   116d5:	0f bf 95 04 fa ff ff 	movsx  edx,WORD PTR [rbp-0x5fc]
   116dc:	0f bf 8d 04 fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5fc]
   116e3:	0f bf b5 04 fa ff ff 	movsx  esi,WORD PTR [rbp-0x5fc]
   116ea:	0f bf bd 04 fa ff ff 	movsx  edi,WORD PTR [rbp-0x5fc]
   116f1:	44 0f bf 85 04 fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5fc]
   116f9:	44 0f bf 8d 04 fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5fc]
   11701:	44 0f bf 95 04 fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5fc]
   11709:	66 44 89 95 06 fa ff ff 	mov    WORD PTR [rbp-0x5fa],r10w
   11711:	66 44 89 8d 08 fa ff ff 	mov    WORD PTR [rbp-0x5f8],r9w
   11719:	66 44 89 85 0a fa ff ff 	mov    WORD PTR [rbp-0x5f6],r8w
   11721:	66 89 bd 0c fa ff ff 	mov    WORD PTR [rbp-0x5f4],di
   11728:	66 89 b5 0e fa ff ff 	mov    WORD PTR [rbp-0x5f2],si
   1172f:	66 89 8d 10 fa ff ff 	mov    WORD PTR [rbp-0x5f0],cx
   11736:	66 89 95 12 fa ff ff 	mov    WORD PTR [rbp-0x5ee],dx
   1173d:	66 89 85 14 fa ff ff 	mov    WORD PTR [rbp-0x5ec],ax
   11744:	0f b7 85 14 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ec]
   1174b:	66 0f 6e c0          	movd   xmm0,eax
   1174f:	0f b7 85 12 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ee]
   11756:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1175b:	66 0f 6f c8          	movdqa xmm1,xmm0
   1175f:	0f b7 85 10 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f0]
   11766:	66 0f 6e c0          	movd   xmm0,eax
   1176a:	0f b7 85 0e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f2]
   11771:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11776:	66 0f 6f e0          	movdqa xmm4,xmm0
   1177a:	0f b7 85 0c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f4]
   11781:	66 0f 6e c0          	movd   xmm0,eax
   11785:	0f b7 85 0a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f6]
   1178c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11791:	66 0f 6f d0          	movdqa xmm2,xmm0
   11795:	0f b7 85 08 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f8]
   1179c:	66 0f 6e c0          	movd   xmm0,eax
   117a0:	0f b7 85 06 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5fa]
   117a7:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   117ac:	66 0f 6f d8          	movdqa xmm3,xmm0
   117b0:	66 0f 62 cc          	punpckldq xmm1,xmm4
   117b4:	66 0f 6f c1          	movdqa xmm0,xmm1
   117b8:	66 0f 6f c8          	movdqa xmm1,xmm0
   117bc:	66 0f 62 d3          	punpckldq xmm2,xmm3
   117c0:	66 0f 6f c2          	movdqa xmm0,xmm2
   117c4:	66 0f 6f d0          	movdqa xmm2,xmm0
   117c8:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   117cc:	66 0f 6f c1          	movdqa xmm0,xmm1
   117d0:	90                   	nop
   117d1:	0f 29 85 40 fb ff ff 	movaps XMMWORD PTR [rbp-0x4c0],xmm0
   117d8:	c6 85 d0 f9 ff ff 80 	mov    BYTE PTR [rbp-0x630],0x80
   117df:	0f be 95 d0 f9 ff ff 	movsx  edx,BYTE PTR [rbp-0x630]
   117e6:	0f be 8d d0 f9 ff ff 	movsx  ecx,BYTE PTR [rbp-0x630]
   117ed:	0f be b5 d0 f9 ff ff 	movsx  esi,BYTE PTR [rbp-0x630]
   117f4:	0f be bd d0 f9 ff ff 	movsx  edi,BYTE PTR [rbp-0x630]
   117fb:	44 0f be 85 d0 f9 ff ff 	movsx  r8d,BYTE PTR [rbp-0x630]
   11803:	44 0f be 8d d0 f9 ff ff 	movsx  r9d,BYTE PTR [rbp-0x630]
   1180b:	44 0f be 95 d0 f9 ff ff 	movsx  r10d,BYTE PTR [rbp-0x630]
   11813:	44 0f be 9d d0 f9 ff ff 	movsx  r11d,BYTE PTR [rbp-0x630]
   1181b:	0f be 9d d0 f9 ff ff 	movsx  ebx,BYTE PTR [rbp-0x630]
   11822:	44 0f be a5 d0 f9 ff ff 	movsx  r12d,BYTE PTR [rbp-0x630]
   1182a:	44 0f be ad d0 f9 ff ff 	movsx  r13d,BYTE PTR [rbp-0x630]
   11832:	44 0f be b5 d0 f9 ff ff 	movsx  r14d,BYTE PTR [rbp-0x630]
   1183a:	44 0f be bd d0 f9 ff ff 	movsx  r15d,BYTE PTR [rbp-0x630]
   11842:	0f be 85 d0 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x630]
   11849:	89 85 90 f9 ff ff    	mov    DWORD PTR [rbp-0x670],eax
   1184f:	0f be 85 d0 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x630]
   11856:	89 85 a4 f9 ff ff    	mov    DWORD PTR [rbp-0x65c],eax
   1185c:	0f be 85 d0 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x630]
   11863:	88 85 d1 f9 ff ff    	mov    BYTE PTR [rbp-0x62f],al
   11869:	0f b6 85 a4 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x65c]
   11870:	88 85 d2 f9 ff ff    	mov    BYTE PTR [rbp-0x62e],al
   11876:	0f b6 85 90 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x670]
   1187d:	88 85 d3 f9 ff ff    	mov    BYTE PTR [rbp-0x62d],al
   11883:	44 88 bd d4 f9 ff ff 	mov    BYTE PTR [rbp-0x62c],r15b
   1188a:	44 88 b5 d5 f9 ff ff 	mov    BYTE PTR [rbp-0x62b],r14b
   11891:	44 88 ad d6 f9 ff ff 	mov    BYTE PTR [rbp-0x62a],r13b
   11898:	44 88 a5 d7 f9 ff ff 	mov    BYTE PTR [rbp-0x629],r12b
   1189f:	88 9d d8 f9 ff ff    	mov    BYTE PTR [rbp-0x628],bl
   118a5:	44 88 9d d9 f9 ff ff 	mov    BYTE PTR [rbp-0x627],r11b
   118ac:	44 88 95 da f9 ff ff 	mov    BYTE PTR [rbp-0x626],r10b
   118b3:	44 88 8d db f9 ff ff 	mov    BYTE PTR [rbp-0x625],r9b
   118ba:	44 88 85 dc f9 ff ff 	mov    BYTE PTR [rbp-0x624],r8b
   118c1:	40 88 bd dd f9 ff ff 	mov    BYTE PTR [rbp-0x623],dil
   118c8:	40 88 b5 de f9 ff ff 	mov    BYTE PTR [rbp-0x622],sil
   118cf:	88 8d df f9 ff ff    	mov    BYTE PTR [rbp-0x621],cl
   118d5:	88 95 e0 f9 ff ff    	mov    BYTE PTR [rbp-0x620],dl
   118db:	0f b6 95 d9 f9 ff ff 	movzx  edx,BYTE PTR [rbp-0x627]
   118e2:	0f b6 85 da f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x626]
   118e9:	48 c1 e2 08          	shl    rdx,0x8
   118ed:	48 09 c2             	or     rdx,rax
   118f0:	0f b6 85 db f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x625]
   118f7:	48 c1 e2 08          	shl    rdx,0x8
   118fb:	48 09 c2             	or     rdx,rax
   118fe:	0f b6 85 dc f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x624]
   11905:	48 c1 e2 08          	shl    rdx,0x8
   11909:	48 09 c2             	or     rdx,rax
   1190c:	0f b6 85 dd f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x623]
   11913:	48 c1 e2 08          	shl    rdx,0x8
   11917:	48 09 c2             	or     rdx,rax
   1191a:	0f b6 85 de f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x622]
   11921:	48 c1 e2 08          	shl    rdx,0x8
   11925:	48 09 c2             	or     rdx,rax
   11928:	0f b6 85 df f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x621]
   1192f:	48 c1 e2 08          	shl    rdx,0x8
   11933:	48 09 c2             	or     rdx,rax
   11936:	0f b6 85 e0 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x620]
   1193d:	48 c1 e2 08          	shl    rdx,0x8
   11941:	48 09 c2             	or     rdx,rax
   11944:	0f b6 85 d1 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x62f]
   1194b:	0f b6 8d d2 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62e]
   11952:	48 c1 e0 08          	shl    rax,0x8
   11956:	48 09 c8             	or     rax,rcx
   11959:	0f b6 8d d3 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62d]
   11960:	48 c1 e0 08          	shl    rax,0x8
   11964:	48 09 c8             	or     rax,rcx
   11967:	0f b6 8d d4 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62c]
   1196e:	48 c1 e0 08          	shl    rax,0x8
   11972:	48 09 c8             	or     rax,rcx
   11975:	0f b6 8d d5 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62b]
   1197c:	48 c1 e0 08          	shl    rax,0x8
   11980:	48 09 c8             	or     rax,rcx
   11983:	0f b6 8d d6 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62a]
   1198a:	48 c1 e0 08          	shl    rax,0x8
   1198e:	48 09 c8             	or     rax,rcx
   11991:	0f b6 8d d7 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x629]
   11998:	48 c1 e0 08          	shl    rax,0x8
   1199c:	48 09 c8             	or     rax,rcx
   1199f:	0f b6 8d d8 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x628]
   119a6:	48 c1 e0 08          	shl    rax,0x8
   119aa:	48 09 c8             	or     rax,rcx
   119ad:	48 89 95 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rdx
   119b4:	48 89 85 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],rax
   119bb:	66 0f 6f 85 90 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x670]
   119c3:	90                   	nop
   119c4:	0f 29 85 50 fb ff ff 	movaps XMMWORD PTR [rbp-0x4b0],xmm0
   119cb:	66 c7 85 f2 f9 ff ff ff 00 	mov    WORD PTR [rbp-0x60e],0xff
   119d4:	0f bf 85 f2 f9 ff ff 	movsx  eax,WORD PTR [rbp-0x60e]
   119db:	0f bf 95 f2 f9 ff ff 	movsx  edx,WORD PTR [rbp-0x60e]
   119e2:	0f bf 8d f2 f9 ff ff 	movsx  ecx,WORD PTR [rbp-0x60e]
   119e9:	0f bf b5 f2 f9 ff ff 	movsx  esi,WORD PTR [rbp-0x60e]
   119f0:	0f bf bd f2 f9 ff ff 	movsx  edi,WORD PTR [rbp-0x60e]
   119f7:	44 0f bf 85 f2 f9 ff ff 	movsx  r8d,WORD PTR [rbp-0x60e]
   119ff:	44 0f bf 8d f2 f9 ff ff 	movsx  r9d,WORD PTR [rbp-0x60e]
   11a07:	44 0f bf 95 f2 f9 ff ff 	movsx  r10d,WORD PTR [rbp-0x60e]
   11a0f:	66 44 89 95 f4 f9 ff ff 	mov    WORD PTR [rbp-0x60c],r10w
   11a17:	66 44 89 8d f6 f9 ff ff 	mov    WORD PTR [rbp-0x60a],r9w
   11a1f:	66 44 89 85 f8 f9 ff ff 	mov    WORD PTR [rbp-0x608],r8w
   11a27:	66 89 bd fa f9 ff ff 	mov    WORD PTR [rbp-0x606],di
   11a2e:	66 89 b5 fc f9 ff ff 	mov    WORD PTR [rbp-0x604],si
   11a35:	66 89 8d fe f9 ff ff 	mov    WORD PTR [rbp-0x602],cx
   11a3c:	66 89 95 00 fa ff ff 	mov    WORD PTR [rbp-0x600],dx
   11a43:	66 89 85 02 fa ff ff 	mov    WORD PTR [rbp-0x5fe],ax
   11a4a:	0f b7 85 02 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5fe]
   11a51:	66 0f 6e c0          	movd   xmm0,eax
   11a55:	0f b7 85 00 fa ff ff 	movzx  eax,WORD PTR [rbp-0x600]
   11a5c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11a61:	66 0f 6f c8          	movdqa xmm1,xmm0
   11a65:	0f b7 85 fe f9 ff ff 	movzx  eax,WORD PTR [rbp-0x602]
   11a6c:	66 0f 6e c0          	movd   xmm0,eax
   11a70:	0f b7 85 fc f9 ff ff 	movzx  eax,WORD PTR [rbp-0x604]
   11a77:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11a7c:	66 0f 6f e0          	movdqa xmm4,xmm0
   11a80:	0f b7 85 fa f9 ff ff 	movzx  eax,WORD PTR [rbp-0x606]
   11a87:	66 0f 6e c0          	movd   xmm0,eax
   11a8b:	0f b7 85 f8 f9 ff ff 	movzx  eax,WORD PTR [rbp-0x608]
   11a92:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11a97:	66 0f 6f d0          	movdqa xmm2,xmm0
   11a9b:	0f b7 85 f6 f9 ff ff 	movzx  eax,WORD PTR [rbp-0x60a]
   11aa2:	66 0f 6e c0          	movd   xmm0,eax
   11aa6:	0f b7 85 f4 f9 ff ff 	movzx  eax,WORD PTR [rbp-0x60c]
   11aad:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11ab2:	66 0f 6f d8          	movdqa xmm3,xmm0
   11ab6:	66 0f 62 cc          	punpckldq xmm1,xmm4
   11aba:	66 0f 6f c1          	movdqa xmm0,xmm1
   11abe:	66 0f 6f c8          	movdqa xmm1,xmm0
   11ac2:	66 0f 62 d3          	punpckldq xmm2,xmm3
   11ac6:	66 0f 6f c2          	movdqa xmm0,xmm2
   11aca:	66 0f 6f d0          	movdqa xmm2,xmm0
   11ace:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   11ad2:	66 0f 6f c1          	movdqa xmm0,xmm1
   11ad6:	90                   	nop
   11ad7:	0f 29 85 60 fb ff ff 	movaps XMMWORD PTR [rbp-0x4a0],xmm0
   11ade:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11ae4:	83 c0 07             	add    eax,0x7
   11ae7:	39 85 ac f9 ff ff    	cmp    DWORD PTR [rbp-0x654],eax
   11aed:	0f 8e d5 06 00 00    	jle    121c8 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x1084>
   11af3:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11af9:	48 63 d0             	movsxd rdx,eax
   11afc:	48 8b 85 c0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x640]
   11b03:	48 01 d0             	add    rax,rdx
   11b06:	48 89 85 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],rax
   11b0d:	48 8b 85 d8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x528]
   11b14:	48 8b 00             	mov    rax,QWORD PTR [rax]
   11b17:	ba 00 00 00 00       	mov    edx,0x0
   11b1c:	48 89 95 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],rdx
   11b23:	48 89 85 e8 fa ff ff 	mov    QWORD PTR [rbp-0x518],rax
   11b2a:	48 8b 85 e8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x518]
   11b31:	48 8b 95 e0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x520]
   11b38:	48 89 95 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rdx
   11b3f:	48 89 85 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rax
   11b46:	48 8b 95 f0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x510]
   11b4d:	48 8b 85 f8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x508]
   11b54:	66 48 0f 6e c0       	movq   xmm0,rax
   11b59:	66 48 0f 6e ea       	movq   xmm5,rdx
   11b5e:	66 0f 6c c5          	punpcklqdq xmm0,xmm5
   11b62:	90                   	nop
   11b63:	90                   	nop
   11b64:	0f 29 85 70 fb ff ff 	movaps XMMWORD PTR [rbp-0x490],xmm0
   11b6b:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11b71:	48 63 d0             	movsxd rdx,eax
   11b74:	48 8b 85 b0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x650]
   11b7b:	48 01 d0             	add    rax,rdx
   11b7e:	48 89 85 b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rax
   11b85:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
   11b8c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   11b8f:	ba 00 00 00 00       	mov    edx,0x0
   11b94:	48 89 95 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],rdx
   11b9b:	48 89 85 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rax
   11ba2:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   11ba9:	48 8b 95 b8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x548]
   11bb0:	48 89 95 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],rdx
   11bb7:	48 89 85 d0 fa ff ff 	mov    QWORD PTR [rbp-0x530],rax
   11bbe:	48 8b 95 c8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x538]
   11bc5:	48 8b 85 d0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x530]
   11bcc:	66 48 0f 6e c0       	movq   xmm0,rax
   11bd1:	66 48 0f 6e f2       	movq   xmm6,rdx
   11bd6:	66 0f 6c c6          	punpcklqdq xmm0,xmm6
   11bda:	90                   	nop
   11bdb:	90                   	nop
   11bdc:	0f 29 85 80 fb ff ff 	movaps XMMWORD PTR [rbp-0x480],xmm0
   11be3:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11be9:	48 63 d0             	movsxd rdx,eax
   11bec:	48 8b 85 b8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x648]
   11bf3:	48 01 d0             	add    rax,rdx
   11bf6:	48 89 85 88 fa ff ff 	mov    QWORD PTR [rbp-0x578],rax
   11bfd:	48 8b 85 88 fa ff ff 	mov    rax,QWORD PTR [rbp-0x578]
   11c04:	48 8b 00             	mov    rax,QWORD PTR [rax]
   11c07:	ba 00 00 00 00       	mov    edx,0x0
   11c0c:	48 89 95 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rdx
   11c13:	48 89 85 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rax
   11c1a:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   11c21:	48 8b 95 90 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x570]
   11c28:	48 89 95 a0 fa ff ff 	mov    QWORD PTR [rbp-0x560],rdx
   11c2f:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
   11c36:	48 8b 95 a0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x560]
   11c3d:	48 8b 85 a8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x558]
   11c44:	66 48 0f 6e c0       	movq   xmm0,rax
   11c49:	66 48 0f 6e fa       	movq   xmm7,rdx
   11c4e:	66 0f 6c c7          	punpcklqdq xmm0,xmm7
   11c52:	90                   	nop
   11c53:	90                   	nop
   11c54:	0f 29 85 90 fb ff ff 	movaps XMMWORD PTR [rbp-0x470],xmm0
   11c5b:	66 0f 6f 85 80 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x480]
   11c63:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
   11c67:	66 0f 6f 85 00 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x500]
   11c6f:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
   11c73:	66 0f 6f 4d b0       	movdqa xmm1,XMMWORD PTR [rbp-0x50]
   11c78:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
   11c7d:	66 0f ef c1          	pxor   xmm0,xmm1
   11c81:	0f 29 85 a0 fb ff ff 	movaps XMMWORD PTR [rbp-0x460],xmm0
   11c88:	66 0f 6f 85 90 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x470]
   11c90:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
   11c94:	66 0f 6f 85 00 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x500]
   11c9c:	0f 29 45 a0          	movaps XMMWORD PTR [rbp-0x60],xmm0
   11ca0:	66 0f 6f 4d 90       	movdqa xmm1,XMMWORD PTR [rbp-0x70]
   11ca5:	66 0f 6f 45 a0       	movdqa xmm0,XMMWORD PTR [rbp-0x60]
   11caa:	66 0f ef c1          	pxor   xmm0,xmm1
   11cae:	0f 29 85 b0 fb ff ff 	movaps XMMWORD PTR [rbp-0x450],xmm0
   11cb5:	66 0f 6f 85 50 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4b0]
   11cbd:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
   11cc4:	66 0f 6f 85 70 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x490]
   11ccc:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   11cd0:	66 0f 6f 4d 80       	movdqa xmm1,XMMWORD PTR [rbp-0x80]
   11cd5:	66 0f 6f 85 70 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x90]
   11cdd:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   11ce1:	0f 29 85 c0 fb ff ff 	movaps XMMWORD PTR [rbp-0x440],xmm0
   11ce8:	66 0f ef c0          	pxor   xmm0,xmm0
   11cec:	0f 29 85 50 ff ff ff 	movaps XMMWORD PTR [rbp-0xb0],xmm0
   11cf3:	66 0f 6f 85 a0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x460]
   11cfb:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
   11d02:	66 0f 6f 8d 60 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa0]
   11d0a:	66 0f 6f 85 50 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb0]
   11d12:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   11d16:	0f 29 85 d0 fb ff ff 	movaps XMMWORD PTR [rbp-0x430],xmm0
   11d1d:	66 0f ef c0          	pxor   xmm0,xmm0
   11d21:	0f 29 85 30 ff ff ff 	movaps XMMWORD PTR [rbp-0xd0],xmm0
   11d28:	66 0f 6f 85 b0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x450]
   11d30:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
   11d37:	66 0f 6f 8d 40 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc0]
   11d3f:	66 0f 6f 85 30 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd0]
   11d47:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   11d4b:	0f 29 85 e0 fb ff ff 	movaps XMMWORD PTR [rbp-0x420],xmm0
   11d52:	66 0f 6f 85 c0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x440]
   11d5a:	0f 29 85 20 ff ff ff 	movaps XMMWORD PTR [rbp-0xe0],xmm0
   11d61:	c7 85 74 fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x58c],0x4
   11d6b:	66 0f 6f 8d 20 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe0]
   11d73:	66 0f 6e 85 74 fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x58c]
   11d7b:	66 0f d1 c8          	psrlw  xmm1,xmm0
   11d7f:	66 0f 6f c1          	movdqa xmm0,xmm1
   11d83:	0f 29 85 f0 fb ff ff 	movaps XMMWORD PTR [rbp-0x410],xmm0
   11d8a:	66 0f 6f 85 10 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4f0]
   11d92:	0f 29 85 00 ff ff ff 	movaps XMMWORD PTR [rbp-0x100],xmm0
   11d99:	66 0f 6f 85 d0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x430]
   11da1:	0f 29 85 10 ff ff ff 	movaps XMMWORD PTR [rbp-0xf0],xmm0
   11da8:	66 0f 6f 85 10 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf0]
   11db0:	66 0f 6f 8d 00 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x100]
   11db8:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11dbc:	0f 29 85 00 fc ff ff 	movaps XMMWORD PTR [rbp-0x400],xmm0
   11dc3:	66 0f 6f 85 30 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4d0]
   11dcb:	0f 29 85 e0 fe ff ff 	movaps XMMWORD PTR [rbp-0x120],xmm0
   11dd2:	66 0f 6f 85 e0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x420]
   11dda:	0f 29 85 f0 fe ff ff 	movaps XMMWORD PTR [rbp-0x110],xmm0
   11de1:	66 0f 6f 85 f0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x110]
   11de9:	66 0f 6f 8d e0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x120]
   11df1:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11df5:	0f 29 85 10 fc ff ff 	movaps XMMWORD PTR [rbp-0x3f0],xmm0
   11dfc:	66 0f 6f 85 e0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x420]
   11e04:	0f 29 85 c0 fe ff ff 	movaps XMMWORD PTR [rbp-0x140],xmm0
   11e0b:	66 0f 6f 85 40 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4c0]
   11e13:	0f 29 85 d0 fe ff ff 	movaps XMMWORD PTR [rbp-0x130],xmm0
   11e1a:	66 0f 6f 85 d0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x130]
   11e22:	66 0f 6f 8d c0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x140]
   11e2a:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11e2e:	0f 29 85 20 fc ff ff 	movaps XMMWORD PTR [rbp-0x3e0],xmm0
   11e35:	66 0f 6f 85 d0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x430]
   11e3d:	0f 29 85 a0 fe ff ff 	movaps XMMWORD PTR [rbp-0x160],xmm0
   11e44:	66 0f 6f 85 20 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4e0]
   11e4c:	0f 29 85 b0 fe ff ff 	movaps XMMWORD PTR [rbp-0x150],xmm0
   11e53:	66 0f 6f 85 b0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x150]
   11e5b:	66 0f 6f 8d a0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x160]
   11e63:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11e67:	0f 29 85 30 fc ff ff 	movaps XMMWORD PTR [rbp-0x3d0],xmm0
   11e6e:	66 0f 6f 85 00 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x400]
   11e76:	0f 29 85 80 fe ff ff 	movaps XMMWORD PTR [rbp-0x180],xmm0
   11e7d:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
   11e85:	0f 29 85 90 fe ff ff 	movaps XMMWORD PTR [rbp-0x170],xmm0
   11e8c:	66 0f 6f 8d 80 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x180]
   11e94:	66 0f 6f 85 90 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x170]
   11e9c:	66 0f fd c1          	paddw  xmm0,xmm1
   11ea0:	0f 29 85 40 fc ff ff 	movaps XMMWORD PTR [rbp-0x3c0],xmm0
   11ea7:	66 0f 6f 85 10 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3f0]
   11eaf:	0f 29 85 60 fe ff ff 	movaps XMMWORD PTR [rbp-0x1a0],xmm0
   11eb6:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
   11ebe:	0f 29 85 70 fe ff ff 	movaps XMMWORD PTR [rbp-0x190],xmm0
   11ec5:	66 0f 6f 8d 60 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a0]
   11ecd:	66 0f 6f 85 70 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x190]
   11ed5:	66 0f fd c1          	paddw  xmm0,xmm1
   11ed9:	0f 29 85 50 fc ff ff 	movaps XMMWORD PTR [rbp-0x3b0],xmm0
   11ee0:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
   11ee8:	0f 29 85 40 fe ff ff 	movaps XMMWORD PTR [rbp-0x1c0],xmm0
   11eef:	66 0f 6f 85 20 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3e0]
   11ef7:	0f 29 85 50 fe ff ff 	movaps XMMWORD PTR [rbp-0x1b0],xmm0
   11efe:	66 0f 6f 8d 40 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1c0]
   11f06:	66 0f 6f 85 50 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b0]
   11f0e:	66 0f fd c1          	paddw  xmm0,xmm1
   11f12:	0f 29 85 60 fc ff ff 	movaps XMMWORD PTR [rbp-0x3a0],xmm0
   11f19:	66 0f 6f 85 50 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3b0]
   11f21:	0f 29 85 20 fe ff ff 	movaps XMMWORD PTR [rbp-0x1e0],xmm0
   11f28:	66 0f 6f 85 30 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3d0]
   11f30:	0f 29 85 30 fe ff ff 	movaps XMMWORD PTR [rbp-0x1d0],xmm0
   11f37:	66 0f 6f 8d 20 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1e0]
   11f3f:	66 0f 6f 85 30 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d0]
   11f47:	66 0f fd c1          	paddw  xmm0,xmm1
   11f4b:	0f 29 85 70 fc ff ff 	movaps XMMWORD PTR [rbp-0x390],xmm0
   11f52:	66 0f 6f 85 40 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3c0]
   11f5a:	0f 29 85 10 fe ff ff 	movaps XMMWORD PTR [rbp-0x1f0],xmm0
   11f61:	c7 85 70 fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x590],0x4
   11f6b:	66 0f 6f 8d 10 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1f0]
   11f73:	66 0f 6e 85 70 fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x590]
   11f7b:	66 0f e1 c8          	psraw  xmm1,xmm0
   11f7f:	66 0f 6f c1          	movdqa xmm0,xmm1
   11f83:	0f 29 85 80 fc ff ff 	movaps XMMWORD PTR [rbp-0x380],xmm0
   11f8a:	66 0f 6f 85 60 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3a0]
   11f92:	0f 29 85 00 fe ff ff 	movaps XMMWORD PTR [rbp-0x200],xmm0
   11f99:	c7 85 6c fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x594],0x4
   11fa3:	66 0f 6f 8d 00 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x200]
   11fab:	66 0f 6e 85 6c fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x594]
   11fb3:	66 0f e1 c8          	psraw  xmm1,xmm0
   11fb7:	66 0f 6f c1          	movdqa xmm0,xmm1
   11fbb:	0f 29 85 90 fc ff ff 	movaps XMMWORD PTR [rbp-0x370],xmm0
   11fc2:	66 0f 6f 85 70 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x390]
   11fca:	0f 29 85 f0 fd ff ff 	movaps XMMWORD PTR [rbp-0x210],xmm0
   11fd1:	c7 85 68 fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x598],0x4
   11fdb:	66 0f 6f 8d f0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x210]
   11fe3:	66 0f 6e 85 68 fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x598]
   11feb:	66 0f e1 c8          	psraw  xmm1,xmm0
   11fef:	66 0f 6f c1          	movdqa xmm0,xmm1
   11ff3:	0f 29 85 a0 fc ff ff 	movaps XMMWORD PTR [rbp-0x360],xmm0
   11ffa:	66 0f 6f 85 80 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x380]
   12002:	0f 29 85 d0 fd ff ff 	movaps XMMWORD PTR [rbp-0x230],xmm0
   12009:	66 0f 6f 85 90 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x370]
   12011:	0f 29 85 e0 fd ff ff 	movaps XMMWORD PTR [rbp-0x220],xmm0
   12018:	66 0f 6f 8d e0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x220]
   12020:	66 0f 6f 85 d0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x230]
   12028:	66 0f 67 c1          	packuswb xmm0,xmm1
   1202c:	0f 29 85 b0 fc ff ff 	movaps XMMWORD PTR [rbp-0x350],xmm0
   12033:	66 0f 6f 85 a0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x360]
   1203b:	0f 29 85 b0 fd ff ff 	movaps XMMWORD PTR [rbp-0x250],xmm0
   12042:	66 0f 6f 85 60 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4a0]
   1204a:	0f 29 85 c0 fd ff ff 	movaps XMMWORD PTR [rbp-0x240],xmm0
   12051:	66 0f 6f 8d c0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x240]
   12059:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
   12061:	66 0f 67 c1          	packuswb xmm0,xmm1
   12065:	0f 29 85 c0 fc ff ff 	movaps XMMWORD PTR [rbp-0x340],xmm0
   1206c:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   12074:	0f 29 85 90 fd ff ff 	movaps XMMWORD PTR [rbp-0x270],xmm0
   1207b:	66 0f 6f 85 c0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x340]
   12083:	0f 29 85 a0 fd ff ff 	movaps XMMWORD PTR [rbp-0x260],xmm0
   1208a:	66 0f 6f 8d a0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x260]
   12092:	66 0f 6f 85 90 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x270]
   1209a:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   1209e:	0f 29 85 d0 fc ff ff 	movaps XMMWORD PTR [rbp-0x330],xmm0
   120a5:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   120ad:	0f 29 85 70 fd ff ff 	movaps XMMWORD PTR [rbp-0x290],xmm0
   120b4:	66 0f 6f 85 c0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x340]
   120bc:	0f 29 85 80 fd ff ff 	movaps XMMWORD PTR [rbp-0x280],xmm0
   120c3:	66 0f 6f 8d 80 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x280]
   120cb:	66 0f 6f 85 70 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x290]
   120d3:	66 0f 68 c1          	punpckhbw xmm0,xmm1
   120d7:	0f 29 85 e0 fc ff ff 	movaps XMMWORD PTR [rbp-0x320],xmm0
   120de:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
   120e6:	0f 29 85 50 fd ff ff 	movaps XMMWORD PTR [rbp-0x2b0],xmm0
   120ed:	66 0f 6f 85 e0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x320]
   120f5:	0f 29 85 60 fd ff ff 	movaps XMMWORD PTR [rbp-0x2a0],xmm0
   120fc:	66 0f 6f 8d 60 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2a0]
   12104:	66 0f 6f 85 50 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2b0]
   1210c:	66 0f 61 c1          	punpcklwd xmm0,xmm1
   12110:	0f 29 85 f0 fc ff ff 	movaps XMMWORD PTR [rbp-0x310],xmm0
   12117:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
   1211f:	0f 29 85 30 fd ff ff 	movaps XMMWORD PTR [rbp-0x2d0],xmm0
   12126:	66 0f 6f 85 e0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x320]
   1212e:	0f 29 85 40 fd ff ff 	movaps XMMWORD PTR [rbp-0x2c0],xmm0
   12135:	66 0f 6f 8d 40 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2c0]
   1213d:	66 0f 6f 85 30 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2d0]
   12145:	66 0f 69 c1          	punpckhwd xmm0,xmm1
   12149:	0f 29 85 00 fd ff ff 	movaps XMMWORD PTR [rbp-0x300],xmm0
   12150:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12157:	48 89 85 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rax
   1215e:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
   12166:	0f 29 85 20 fd ff ff 	movaps XMMWORD PTR [rbp-0x2e0],xmm0
   1216d:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   12175:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   1217c:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
   1217f:	90                   	nop
   12180:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12187:	48 83 c0 10          	add    rax,0x10
   1218b:	48 89 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rax
   12192:	66 0f 6f 85 00 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x300]
   1219a:	0f 29 85 10 fd ff ff 	movaps XMMWORD PTR [rbp-0x2f0],xmm0
   121a1:	66 0f 6f 85 10 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2f0]
   121a9:	48 8b 85 78 fa ff ff 	mov    rax,QWORD PTR [rbp-0x588]
   121b0:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
   121b3:	90                   	nop
   121b4:	48 83 85 c8 f9 ff ff 20 	add    QWORD PTR [rbp-0x638],0x20
   121bc:	83 85 4c fa ff ff 08 	add    DWORD PTR [rbp-0x5b4],0x8
   121c3:	e9 16 f9 ff ff       	jmp    11ade <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x99a>
   121c8:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   121ce:	3b 85 ac f9 ff ff    	cmp    eax,DWORD PTR [rbp-0x654]
   121d4:	0f 8d c6 01 00 00    	jge    123a0 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x125c>
   121da:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   121e0:	48 63 d0             	movsxd rdx,eax
   121e3:	48 8b 85 c0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x640]
   121ea:	48 01 d0             	add    rax,rdx
   121ed:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   121f0:	0f b6 c0             	movzx  eax,al
   121f3:	c1 e0 14             	shl    eax,0x14
   121f6:	05 00 00 08 00       	add    eax,0x80000
   121fb:	89 85 5c fa ff ff    	mov    DWORD PTR [rbp-0x5a4],eax
   12201:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   12207:	48 63 d0             	movsxd rdx,eax
   1220a:	48 8b 85 b0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x650]
   12211:	48 01 d0             	add    rax,rdx
   12214:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12217:	0f b6 c0             	movzx  eax,al
   1221a:	83 c0 80             	add    eax,0xffffff80
   1221d:	89 85 60 fa ff ff    	mov    DWORD PTR [rbp-0x5a0],eax
   12223:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   12229:	48 63 d0             	movsxd rdx,eax
   1222c:	48 8b 85 b8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x648]
   12233:	48 01 d0             	add    rax,rdx
   12236:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12239:	0f b6 c0             	movzx  eax,al
   1223c:	83 c0 80             	add    eax,0xffffff80
   1223f:	89 85 64 fa ff ff    	mov    DWORD PTR [rbp-0x59c],eax
   12245:	8b 85 60 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a0]
   1224b:	69 d0 00 6f 16 00    	imul   edx,eax,0x166f00
   12251:	8b 85 5c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a4]
   12257:	01 d0                	add    eax,edx
   12259:	89 85 50 fa ff ff    	mov    DWORD PTR [rbp-0x5b0],eax
   1225f:	8b 85 60 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a0]
   12265:	69 d0 00 93 f4 ff    	imul   edx,eax,0xfff49300
   1226b:	8b 85 5c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a4]
   12271:	01 d0                	add    eax,edx
   12273:	89 c2                	mov    edx,eax
   12275:	8b 85 64 fa ff ff    	mov    eax,DWORD PTR [rbp-0x59c]
   1227b:	69 c0 00 7e fa ff    	imul   eax,eax,0xfffa7e00
   12281:	66 b8 00 00          	mov    ax,0x0
   12285:	01 d0                	add    eax,edx
   12287:	89 85 54 fa ff ff    	mov    DWORD PTR [rbp-0x5ac],eax
   1228d:	8b 85 64 fa ff ff    	mov    eax,DWORD PTR [rbp-0x59c]
   12293:	69 d0 00 5a 1c 00    	imul   edx,eax,0x1c5a00
   12299:	8b 85 5c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a4]
   1229f:	01 d0                	add    eax,edx
   122a1:	89 85 58 fa ff ff    	mov    DWORD PTR [rbp-0x5a8],eax
   122a7:	c1 bd 50 fa ff ff 14 	sar    DWORD PTR [rbp-0x5b0],0x14
   122ae:	c1 bd 54 fa ff ff 14 	sar    DWORD PTR [rbp-0x5ac],0x14
   122b5:	c1 bd 58 fa ff ff 14 	sar    DWORD PTR [rbp-0x5a8],0x14
   122bc:	8b 85 50 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b0]
   122c2:	3d ff 00 00 00       	cmp    eax,0xff
   122c7:	76 1f                	jbe    122e8 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11a4>
   122c9:	83 bd 50 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5b0],0x0
   122d0:	79 0c                	jns    122de <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x119a>
   122d2:	c7 85 50 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5b0],0x0
   122dc:	eb 0a                	jmp    122e8 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11a4>
   122de:	c7 85 50 fa ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x5b0],0xff
   122e8:	8b 85 54 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5ac]
   122ee:	3d ff 00 00 00       	cmp    eax,0xff
   122f3:	76 1f                	jbe    12314 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11d0>
   122f5:	83 bd 54 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5ac],0x0
   122fc:	79 0c                	jns    1230a <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11c6>
   122fe:	c7 85 54 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5ac],0x0
   12308:	eb 0a                	jmp    12314 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11d0>
   1230a:	c7 85 54 fa ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x5ac],0xff
   12314:	8b 85 58 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a8]
   1231a:	3d ff 00 00 00       	cmp    eax,0xff
   1231f:	76 1f                	jbe    12340 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11fc>
   12321:	83 bd 58 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5a8],0x0
   12328:	79 0c                	jns    12336 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11f2>
   1232a:	c7 85 58 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5a8],0x0
   12334:	eb 0a                	jmp    12340 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11fc>
   12336:	c7 85 58 fa ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x5a8],0xff
   12340:	8b 85 50 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b0]
   12346:	89 c2                	mov    edx,eax
   12348:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   1234f:	88 10                	mov    BYTE PTR [rax],dl
   12351:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12358:	48 83 c0 01          	add    rax,0x1
   1235c:	8b 95 54 fa ff ff    	mov    edx,DWORD PTR [rbp-0x5ac]
   12362:	88 10                	mov    BYTE PTR [rax],dl
   12364:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   1236b:	48 83 c0 02          	add    rax,0x2
   1236f:	8b 95 58 fa ff ff    	mov    edx,DWORD PTR [rbp-0x5a8]
   12375:	88 10                	mov    BYTE PTR [rax],dl
   12377:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   1237e:	48 83 c0 03          	add    rax,0x3
   12382:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   12385:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [rbp-0x658]
   1238b:	48 98                	cdqe   
   1238d:	48 01 85 c8 f9 ff ff 	add    QWORD PTR [rbp-0x638],rax
   12394:	83 85 4c fa ff ff 01 	add    DWORD PTR [rbp-0x5b4],0x1
   1239b:	e9 28 fe ff ff       	jmp    121c8 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x1084>
   123a0:	90                   	nop
   123a1:	48 81 c4 d0 05 00 00 	add    rsp,0x5d0
   123a8:	5b                   	pop    rbx
   123a9:	41 5c                	pop    r12
   123ab:	41 5d                	pop    r13
   123ad:	41 5e                	pop    r14
   123af:	41 5f                	pop    r15
   123b1:	5d                   	pop    rbp
   123b2:	c3                   	ret    

00000000000123b3 <stbi__setup_jpeg(stbi__jpeg*)>:
   123b3:	55                   	push   rbp
   123b4:	48 89 e5             	mov    rbp,rsp
   123b7:	48 83 ec 08          	sub    rsp,0x8
   123bb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   123bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   123c3:	48 8d 15 60 66 ff ff 	lea    rdx,[rip+0xffffffffffff6660]        # 8a2a <stbi__idct_block(unsigned char*, int, short*)>
   123ca:	48 89 90 70 48 00 00 	mov    QWORD PTR [rax+0x4870],rdx
   123d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   123d5:	48 8d 15 f4 eb ff ff 	lea    rdx,[rip+0xffffffffffffebf4]        # 10fd0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>
   123dc:	48 89 90 78 48 00 00 	mov    QWORD PTR [rax+0x4878],rdx
   123e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   123e7:	48 8d 15 26 e1 ff ff 	lea    rdx,[rip+0xffffffffffffe126]        # 10514 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)>
   123ee:	48 89 90 80 48 00 00 	mov    QWORD PTR [rax+0x4880],rdx
   123f5:	e8 4b 25 ff ff       	call   4945 <stbi__sse2_available()>
   123fa:	85 c0                	test   eax,eax
   123fc:	0f 95 c0             	setne  al
   123ff:	84 c0                	test   al,al
   12401:	74 36                	je     12439 <stbi__setup_jpeg(stbi__jpeg*)+0x86>
   12403:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12407:	48 8d 15 07 70 ff ff 	lea    rdx,[rip+0xffffffffffff7007]        # 9415 <stbi__idct_simd(unsigned char*, int, short*)>
   1240e:	48 89 90 70 48 00 00 	mov    QWORD PTR [rax+0x4870],rdx
   12415:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12419:	48 8d 15 24 ed ff ff 	lea    rdx,[rip+0xffffffffffffed24]        # 11144 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>
   12420:	48 89 90 78 48 00 00 	mov    QWORD PTR [rax+0x4878],rdx
   12427:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1242b:	48 8d 15 3b e2 ff ff 	lea    rdx,[rip+0xffffffffffffe23b]        # 1066d <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)>
   12432:	48 89 90 80 48 00 00 	mov    QWORD PTR [rax+0x4880],rdx
   12439:	90                   	nop
   1243a:	c9                   	leave  
   1243b:	c3                   	ret    

000000000001243c <stbi__cleanup_jpeg(stbi__jpeg*)>:
   1243c:	55                   	push   rbp
   1243d:	48 89 e5             	mov    rbp,rsp
   12440:	48 83 ec 10          	sub    rsp,0x10
   12444:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   12448:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1244c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1244f:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
   12452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12456:	ba 00 00 00 00       	mov    edx,0x0
   1245b:	89 ce                	mov    esi,ecx
   1245d:	48 89 c7             	mov    rdi,rax
   12460:	e8 68 ce ff ff       	call   f2cd <stbi__free_jpeg_components(stbi__jpeg*, int, int)>
   12465:	90                   	nop
   12466:	c9                   	leave  
   12467:	c3                   	ret    

0000000000012468 <stbi__blinn_8x8(unsigned char, unsigned char)>:
   12468:	55                   	push   rbp
   12469:	48 89 e5             	mov    rbp,rsp
   1246c:	89 fa                	mov    edx,edi
   1246e:	89 f0                	mov    eax,esi
   12470:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
   12473:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
   12476:	0f b6 55 ec          	movzx  edx,BYTE PTR [rbp-0x14]
   1247a:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
   1247e:	0f af c2             	imul   eax,edx
   12481:	83 e8 80             	sub    eax,0xffffff80
   12484:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   12487:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1248a:	c1 e8 08             	shr    eax,0x8
   1248d:	89 c2                	mov    edx,eax
   1248f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   12492:	01 d0                	add    eax,edx
   12494:	c1 e8 08             	shr    eax,0x8
   12497:	5d                   	pop    rbp
   12498:	c3                   	ret    

0000000000012499 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)>:
   12499:	55                   	push   rbp
   1249a:	48 89 e5             	mov    rbp,rsp
   1249d:	53                   	push   rbx
   1249e:	48 81 ec 88 01 00 00 	sub    rsp,0x188
   124a5:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
   124ac:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
   124b3:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
   124ba:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
   124c1:	44 89 85 7c fe ff ff 	mov    DWORD PTR [rbp-0x184],r8d
   124c8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   124d1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   124d5:	31 c0                	xor    eax,eax
   124d7:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   124de:	48 8b 00             	mov    rax,QWORD PTR [rax]
   124e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
   124e8:	83 bd 7c fe ff ff 00 	cmp    DWORD PTR [rbp-0x184],0x0
   124ef:	78 09                	js     124fa <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x61>
   124f1:	83 bd 7c fe ff ff 04 	cmp    DWORD PTR [rbp-0x184],0x4
   124f8:	7e 16                	jle    12510 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x77>
   124fa:	48 8d 3d 7e 81 02 00 	lea    rdi,[rip+0x2817e]        # 3a67f <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x8d>
   12501:	e8 39 26 ff ff       	call   4b3f <stbi__err(char const*)>
   12506:	b8 00 00 00 00       	mov    eax,0x0
   1250b:	e9 cd 0f 00 00       	jmp    134dd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1044>
   12510:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12517:	48 89 c7             	mov    rdi,rax
   1251a:	e8 8d db ff ff       	call   100ac <stbi__decode_jpeg_image(stbi__jpeg*)>
   1251f:	85 c0                	test   eax,eax
   12521:	0f 94 c0             	sete   al
   12524:	84 c0                	test   al,al
   12526:	74 19                	je     12541 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xa8>
   12528:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1252f:	48 89 c7             	mov    rdi,rax
   12532:	e8 05 ff ff ff       	call   1243c <stbi__cleanup_jpeg(stbi__jpeg*)>
   12537:	b8 00 00 00 00       	mov    eax,0x0
   1253c:	e9 9c 0f 00 00       	jmp    134dd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1044>
   12541:	83 bd 7c fe ff ff 00 	cmp    DWORD PTR [rbp-0x184],0x0
   12548:	75 20                	jne    1256a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd1>
   1254a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12551:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12554:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12557:	83 f8 02             	cmp    eax,0x2
   1255a:	7e 07                	jle    12563 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xca>
   1255c:	b8 03 00 00 00       	mov    eax,0x3
   12561:	eb 0d                	jmp    12570 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd7>
   12563:	b8 01 00 00 00       	mov    eax,0x1
   12568:	eb 06                	jmp    12570 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd7>
   1256a:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
   12570:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
   12576:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1257d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12580:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12583:	83 f8 03             	cmp    eax,0x3
   12586:	75 3b                	jne    125c3 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12a>
   12588:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1258f:	8b 80 50 48 00 00    	mov    eax,DWORD PTR [rax+0x4850]
   12595:	83 f8 03             	cmp    eax,0x3
   12598:	74 22                	je     125bc <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x123>
   1259a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   125a1:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   125a7:	85 c0                	test   eax,eax
   125a9:	75 18                	jne    125c3 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12a>
   125ab:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   125b2:	8b 80 48 48 00 00    	mov    eax,DWORD PTR [rax+0x4848]
   125b8:	85 c0                	test   eax,eax
   125ba:	75 07                	jne    125c3 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12a>
   125bc:	b8 01 00 00 00       	mov    eax,0x1
   125c1:	eb 05                	jmp    125c8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12f>
   125c3:	b8 00 00 00 00       	mov    eax,0x0
   125c8:	0f b6 c0             	movzx  eax,al
   125cb:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
   125d1:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   125d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   125db:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   125de:	83 f8 03             	cmp    eax,0x3
   125e1:	75 1e                	jne    12601 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x168>
   125e3:	83 bd c4 fe ff ff 02 	cmp    DWORD PTR [rbp-0x13c],0x2
   125ea:	7f 15                	jg     12601 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x168>
   125ec:	83 bd c8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x138],0x0
   125f3:	75 0c                	jne    12601 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x168>
   125f5:	c7 85 b4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x14c],0x1
   125ff:	eb 13                	jmp    12614 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x17b>
   12601:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12608:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1260b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1260e:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
   12614:	48 c7 85 00 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x100],0x0
   1261f:	48 c7 85 08 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xf8],0x0
   1262a:	48 c7 85 10 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xf0],0x0
   12635:	48 c7 85 18 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xe8],0x0
   12640:	c7 85 b8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x148],0x0
   1264a:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12650:	3b 85 b4 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x14c]
   12656:	0f 8d e2 02 00 00    	jge    1293e <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x4a5>
   1265c:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
   12663:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12669:	48 63 d0             	movsxd rdx,eax
   1266c:	48 89 d0             	mov    rax,rdx
   1266f:	48 01 c0             	add    rax,rax
   12672:	48 01 d0             	add    rax,rdx
   12675:	48 c1 e0 04          	shl    rax,0x4
   12679:	48 01 c8             	add    rax,rcx
   1267c:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
   12683:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1268a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1268d:	8b 00                	mov    eax,DWORD PTR [rax]
   1268f:	83 c0 03             	add    eax,0x3
   12692:	89 c0                	mov    eax,eax
   12694:	48 89 c7             	mov    rdi,rax
   12697:	e8 bf 24 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
   1269c:	48 89 c2             	mov    rdx,rax
   1269f:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   126a6:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   126ac:	48 63 c8             	movsxd rcx,eax
   126af:	48 89 c8             	mov    rax,rcx
   126b2:	48 01 c0             	add    rax,rax
   126b5:	48 01 c8             	add    rax,rcx
   126b8:	48 c1 e0 05          	shl    rax,0x5
   126bc:	48 01 f0             	add    rax,rsi
   126bf:	48 05 e8 46 00 00    	add    rax,0x46e8
   126c5:	48 89 10             	mov    QWORD PTR [rax],rdx
   126c8:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   126cf:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   126d5:	48 63 d0             	movsxd rdx,eax
   126d8:	48 89 d0             	mov    rax,rdx
   126db:	48 01 c0             	add    rax,rax
   126de:	48 01 d0             	add    rax,rdx
   126e1:	48 c1 e0 05          	shl    rax,0x5
   126e5:	48 01 c8             	add    rax,rcx
   126e8:	48 05 e8 46 00 00    	add    rax,0x46e8
   126ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
   126f1:	48 85 c0             	test   rax,rax
   126f4:	75 25                	jne    1271b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x282>
   126f6:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   126fd:	48 89 c7             	mov    rdi,rax
   12700:	e8 37 fd ff ff       	call   1243c <stbi__cleanup_jpeg(stbi__jpeg*)>
   12705:	48 8d 3d 27 79 02 00 	lea    rdi,[rip+0x27927]        # 3a033 <_IO_stdin_used+0x33>
   1270c:	e8 2e 24 ff ff       	call   4b3f <stbi__err(char const*)>
   12711:	b8 00 00 00 00       	mov    eax,0x0
   12716:	e9 c2 0d 00 00       	jmp    134dd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1044>
   1271b:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12722:	8b 90 88 46 00 00    	mov    edx,DWORD PTR [rax+0x4688]
   12728:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   1272f:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12735:	48 63 c8             	movsxd rcx,eax
   12738:	48 89 c8             	mov    rax,rcx
   1273b:	48 01 c0             	add    rax,rax
   1273e:	48 01 c8             	add    rax,rcx
   12741:	48 c1 e0 05          	shl    rax,0x5
   12745:	48 01 f0             	add    rax,rsi
   12748:	48 05 a4 46 00 00    	add    rax,0x46a4
   1274e:	8b 08                	mov    ecx,DWORD PTR [rax]
   12750:	89 d0                	mov    eax,edx
   12752:	99                   	cdq    
   12753:	f7 f9                	idiv   ecx
   12755:	89 c2                	mov    edx,eax
   12757:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   1275e:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
   12761:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12768:	8b 90 8c 46 00 00    	mov    edx,DWORD PTR [rax+0x468c]
   1276e:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12775:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   1277b:	48 63 c8             	movsxd rcx,eax
   1277e:	48 89 c8             	mov    rax,rcx
   12781:	48 01 c0             	add    rax,rax
   12784:	48 01 c8             	add    rax,rcx
   12787:	48 c1 e0 05          	shl    rax,0x5
   1278b:	48 01 f0             	add    rax,rsi
   1278e:	48 05 a8 46 00 00    	add    rax,0x46a8
   12794:	8b 08                	mov    ecx,DWORD PTR [rax]
   12796:	89 d0                	mov    eax,edx
   12798:	99                   	cdq    
   12799:	f7 f9                	idiv   ecx
   1279b:	89 c2                	mov    edx,eax
   1279d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   127a4:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
   127a7:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   127ae:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   127b1:	d1 f8                	sar    eax,1
   127b3:	89 c2                	mov    edx,eax
   127b5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   127bc:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   127bf:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   127c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   127c9:	8b 10                	mov    edx,DWORD PTR [rax]
   127cb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   127d2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   127d5:	01 d0                	add    eax,edx
   127d7:	8d 50 ff             	lea    edx,[rax-0x1]
   127da:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   127e1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   127e4:	89 c1                	mov    ecx,eax
   127e6:	89 d0                	mov    eax,edx
   127e8:	ba 00 00 00 00       	mov    edx,0x0
   127ed:	f7 f1                	div    ecx
   127ef:	89 c2                	mov    edx,eax
   127f1:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   127f8:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   127fb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12802:	c7 40 28 00 00 00 00 	mov    DWORD PTR [rax+0x28],0x0
   12809:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   12810:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12816:	48 63 d0             	movsxd rdx,eax
   12819:	48 89 d0             	mov    rax,rdx
   1281c:	48 01 c0             	add    rax,rax
   1281f:	48 01 d0             	add    rax,rdx
   12822:	48 c1 e0 05          	shl    rax,0x5
   12826:	48 01 c8             	add    rax,rcx
   12829:	48 05 d0 46 00 00    	add    rax,0x46d0
   1282f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   12832:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12839:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   1283d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12844:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   12848:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   1284f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   12853:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   1285a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   1285d:	83 f8 01             	cmp    eax,0x1
   12860:	75 25                	jne    12887 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x3ee>
   12862:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12869:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   1286c:	83 f8 01             	cmp    eax,0x1
   1286f:	75 16                	jne    12887 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x3ee>
   12871:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12878:	48 8d 15 55 da ff ff 	lea    rdx,[rip+0xffffffffffffda55]        # 102d4 <resample_row_1(unsigned char*, unsigned char*, unsigned char*, int, int)>
   1287f:	48 89 10             	mov    QWORD PTR [rax],rdx
   12882:	e9 ab 00 00 00       	jmp    12932 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x499>
   12887:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   1288e:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   12891:	83 f8 01             	cmp    eax,0x1
   12894:	75 22                	jne    128b8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x41f>
   12896:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   1289d:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   128a0:	83 f8 02             	cmp    eax,0x2
   128a3:	75 13                	jne    128b8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x41f>
   128a5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   128ac:	48 8d 15 3e da ff ff 	lea    rdx,[rip+0xffffffffffffda3e]        # 102f1 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)>
   128b3:	48 89 10             	mov    QWORD PTR [rax],rdx
   128b6:	eb 7a                	jmp    12932 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x499>
   128b8:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   128bf:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   128c2:	83 f8 02             	cmp    eax,0x2
   128c5:	75 22                	jne    128e9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x450>
   128c7:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   128ce:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   128d1:	83 f8 01             	cmp    eax,0x1
   128d4:	75 13                	jne    128e9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x450>
   128d6:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   128dd:	48 8d 15 87 da ff ff 	lea    rdx,[rip+0xffffffffffffda87]        # 1036b <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)>
   128e4:	48 89 10             	mov    QWORD PTR [rax],rdx
   128e7:	eb 49                	jmp    12932 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x499>
   128e9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   128f0:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   128f3:	83 f8 02             	cmp    eax,0x2
   128f6:	75 29                	jne    12921 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x488>
   128f8:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   128ff:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12902:	83 f8 02             	cmp    eax,0x2
   12905:	75 1a                	jne    12921 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x488>
   12907:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1290e:	48 8b 90 80 48 00 00 	mov    rdx,QWORD PTR [rax+0x4880]
   12915:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   1291c:	48 89 10             	mov    QWORD PTR [rax],rdx
   1291f:	eb 11                	jmp    12932 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x499>
   12921:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12928:	48 8d 15 2f e6 ff ff 	lea    rdx,[rip+0xffffffffffffe62f]        # 10f5e <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)>
   1292f:	48 89 10             	mov    QWORD PTR [rax],rdx
   12932:	83 85 b8 fe ff ff 01 	add    DWORD PTR [rbp-0x148],0x1
   12939:	e9 0c fd ff ff       	jmp    1264a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1b1>
   1293e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12945:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12948:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1294b:	89 c2                	mov    edx,eax
   1294d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12954:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12957:	8b 00                	mov    eax,DWORD PTR [rax]
   12959:	89 c6                	mov    esi,eax
   1295b:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12961:	b9 01 00 00 00       	mov    ecx,0x1
   12966:	89 c7                	mov    edi,eax
   12968:	e8 01 24 ff ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   1296d:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
   12974:	48 83 bd e0 fe ff ff 00 	cmp    QWORD PTR [rbp-0x120],0x0
   1297c:	75 25                	jne    129a3 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x50a>
   1297e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12985:	48 89 c7             	mov    rdi,rax
   12988:	e8 af fa ff ff       	call   1243c <stbi__cleanup_jpeg(stbi__jpeg*)>
   1298d:	48 8d 3d 9f 76 02 00 	lea    rdi,[rip+0x2769f]        # 3a033 <_IO_stdin_used+0x33>
   12994:	e8 a6 21 ff ff       	call   4b3f <stbi__err(char const*)>
   12999:	b8 00 00 00 00       	mov    eax,0x0
   1299e:	e9 3a 0b 00 00       	jmp    134dd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1044>
   129a3:	c7 85 c0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x140],0x0
   129ad:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   129b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   129b7:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   129ba:	39 85 c0 fe ff ff    	cmp    DWORD PTR [rbp-0x140],eax
   129c0:	0f 83 a1 0a 00 00    	jae    13467 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfce>
   129c6:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   129cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   129d0:	8b 10                	mov    edx,DWORD PTR [rax]
   129d2:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   129d8:	0f af c2             	imul   eax,edx
   129db:	0f af 85 c0 fe ff ff 	imul   eax,DWORD PTR [rbp-0x140]
   129e2:	89 c2                	mov    edx,eax
   129e4:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   129eb:	48 01 d0             	add    rax,rdx
   129ee:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
   129f5:	c7 85 b8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x148],0x0
   129ff:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12a05:	3b 85 b4 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x14c]
   12a0b:	0f 8d ea 01 00 00    	jge    12bfb <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x762>
   12a11:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
   12a18:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12a1e:	48 63 d0             	movsxd rdx,eax
   12a21:	48 89 d0             	mov    rax,rdx
   12a24:	48 01 c0             	add    rax,rax
   12a27:	48 01 d0             	add    rax,rdx
   12a2a:	48 c1 e0 04          	shl    rax,0x4
   12a2e:	48 01 c8             	add    rax,rcx
   12a31:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
   12a38:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a3f:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
   12a42:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a49:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12a4c:	d1 f8                	sar    eax,1
   12a4e:	39 c2                	cmp    edx,eax
   12a50:	0f 9d c0             	setge  al
   12a53:	0f b6 c0             	movzx  eax,al
   12a56:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
   12a5c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a63:	4c 8b 08             	mov    r9,QWORD PTR [rax]
   12a66:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a6d:	44 8b 40 18          	mov    r8d,DWORD PTR [rax+0x18]
   12a71:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a78:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
   12a7b:	83 bd cc fe ff ff 00 	cmp    DWORD PTR [rbp-0x134],0x0
   12a82:	74 0d                	je     12a91 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x5f8>
   12a84:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a8b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   12a8f:	eb 0b                	jmp    12a9c <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x603>
   12a91:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12a98:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   12a9c:	83 bd cc fe ff ff 00 	cmp    DWORD PTR [rbp-0x134],0x0
   12aa3:	74 0d                	je     12ab2 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x619>
   12aa5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12aac:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
   12ab0:	eb 0b                	jmp    12abd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x624>
   12ab2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12ab9:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
   12abd:	4c 8b 95 98 fe ff ff 	mov    r10,QWORD PTR [rbp-0x168]
   12ac4:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12aca:	48 63 f8             	movsxd rdi,eax
   12acd:	48 89 f8             	mov    rax,rdi
   12ad0:	48 01 c0             	add    rax,rax
   12ad3:	48 01 f8             	add    rax,rdi
   12ad6:	48 c1 e0 05          	shl    rax,0x5
   12ada:	4c 01 d0             	add    rax,r10
   12add:	48 05 e8 46 00 00    	add    rax,0x46e8
   12ae3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12ae6:	48 89 c7             	mov    rdi,rax
   12ae9:	41 ff d1             	call   r9
   12aec:	8b 95 b8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x148]
   12af2:	48 63 d2             	movsxd rdx,edx
   12af5:	48 89 84 d5 00 ff ff ff 	mov    QWORD PTR [rbp+rdx*8-0x100],rax
   12afd:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b04:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   12b07:	8d 50 01             	lea    edx,[rax+0x1]
   12b0a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b11:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   12b14:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b1b:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
   12b1e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b25:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12b28:	39 c2                	cmp    edx,eax
   12b2a:	0f 9d c0             	setge  al
   12b2d:	84 c0                	test   al,al
   12b2f:	0f 84 ba 00 00 00    	je     12bef <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x756>
   12b35:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b3c:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
   12b43:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b4a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   12b4e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b55:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   12b59:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b60:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
   12b63:	8d 50 01             	lea    edx,[rax+0x1]
   12b66:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b6d:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   12b70:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12b77:	8b 48 28             	mov    ecx,DWORD PTR [rax+0x28]
   12b7a:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12b81:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12b87:	48 63 d0             	movsxd rdx,eax
   12b8a:	48 89 d0             	mov    rax,rdx
   12b8d:	48 01 c0             	add    rax,rax
   12b90:	48 01 d0             	add    rax,rdx
   12b93:	48 c1 e0 05          	shl    rax,0x5
   12b97:	48 01 f0             	add    rax,rsi
   12b9a:	48 05 c0 46 00 00    	add    rax,0x46c0
   12ba0:	8b 00                	mov    eax,DWORD PTR [rax]
   12ba2:	39 c1                	cmp    ecx,eax
   12ba4:	0f 9c c0             	setl   al
   12ba7:	84 c0                	test   al,al
   12ba9:	74 44                	je     12bef <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x756>
   12bab:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12bb2:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
   12bb6:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12bbd:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12bc3:	48 63 d0             	movsxd rdx,eax
   12bc6:	48 89 d0             	mov    rax,rdx
   12bc9:	48 01 c0             	add    rax,rax
   12bcc:	48 01 d0             	add    rax,rdx
   12bcf:	48 c1 e0 05          	shl    rax,0x5
   12bd3:	48 01 f0             	add    rax,rsi
   12bd6:	48 05 c4 46 00 00    	add    rax,0x46c4
   12bdc:	8b 00                	mov    eax,DWORD PTR [rax]
   12bde:	48 98                	cdqe   
   12be0:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   12be4:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12beb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   12bef:	83 85 b8 fe ff ff 01 	add    DWORD PTR [rbp-0x148],0x1
   12bf6:	e9 04 fe ff ff       	jmp    129ff <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x566>
   12bfb:	83 bd c4 fe ff ff 02 	cmp    DWORD PTR [rbp-0x13c],0x2
   12c02:	0f 8e 56 04 00 00    	jle    1305e <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xbc5>
   12c08:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   12c0f:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
   12c16:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12c1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12c20:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12c23:	83 f8 03             	cmp    eax,0x3
   12c26:	0f 85 01 01 00 00    	jne    12d2d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x894>
   12c2c:	83 bd c8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x138],0x0
   12c33:	0f 84 a7 00 00 00    	je     12ce0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x847>
   12c39:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12c43:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12c4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12c4d:	8b 00                	mov    eax,DWORD PTR [rax]
   12c4f:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   12c55:	0f 83 00 08 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   12c5b:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   12c61:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12c68:	48 01 d0             	add    rax,rdx
   12c6b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   12c6e:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12c75:	88 10                	mov    BYTE PTR [rax],dl
   12c77:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12c7e:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12c84:	48 01 d0             	add    rax,rdx
   12c87:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12c8e:	48 83 c2 01          	add    rdx,0x1
   12c92:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12c95:	88 02                	mov    BYTE PTR [rdx],al
   12c97:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   12c9e:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12ca4:	48 01 d0             	add    rax,rdx
   12ca7:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12cae:	48 83 c2 02          	add    rdx,0x2
   12cb2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12cb5:	88 02                	mov    BYTE PTR [rdx],al
   12cb7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12cbe:	48 83 c0 03          	add    rax,0x3
   12cc2:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   12cc5:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12ccb:	48 98                	cdqe   
   12ccd:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   12cd4:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   12cdb:	e9 63 ff ff ff       	jmp    12c43 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x7aa>
   12ce0:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12ce7:	4c 8b 90 78 48 00 00 	mov    r10,QWORD PTR [rax+0x4878]
   12cee:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12cf5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12cf8:	8b 00                	mov    eax,DWORD PTR [rax]
   12cfa:	41 89 c0             	mov    r8d,eax
   12cfd:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12d04:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12d0b:	8b bd c4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x13c]
   12d11:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
   12d18:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12d1f:	41 89 f9             	mov    r9d,edi
   12d22:	48 89 c7             	mov    rdi,rax
   12d25:	41 ff d2             	call   r10
   12d28:	e9 2e 07 00 00       	jmp    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   12d2d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12d34:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12d37:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12d3a:	83 f8 04             	cmp    eax,0x4
   12d3d:	0f 85 97 02 00 00    	jne    12fda <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xb41>
   12d43:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12d4a:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   12d50:	85 c0                	test   eax,eax
   12d52:	0f 85 f9 00 00 00    	jne    12e51 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x9b8>
   12d58:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12d62:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12d69:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12d6c:	8b 00                	mov    eax,DWORD PTR [rax]
   12d6e:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   12d74:	0f 83 e1 06 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   12d7a:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   12d81:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12d87:	48 01 d0             	add    rax,rdx
   12d8a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12d8d:	88 85 b3 fe ff ff    	mov    BYTE PTR [rbp-0x14d],al
   12d93:	0f b6 95 b3 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14d]
   12d9a:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
   12da1:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12da7:	48 01 c8             	add    rax,rcx
   12daa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12dad:	0f b6 c0             	movzx  eax,al
   12db0:	89 d6                	mov    esi,edx
   12db2:	89 c7                	mov    edi,eax
   12db4:	e8 af f6 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12db9:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12dc0:	88 02                	mov    BYTE PTR [rdx],al
   12dc2:	0f b6 95 b3 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14d]
   12dc9:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   12dd0:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12dd6:	48 01 c8             	add    rax,rcx
   12dd9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12ddc:	0f b6 c0             	movzx  eax,al
   12ddf:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   12de6:	48 8d 59 01          	lea    rbx,[rcx+0x1]
   12dea:	89 d6                	mov    esi,edx
   12dec:	89 c7                	mov    edi,eax
   12dee:	e8 75 f6 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12df3:	88 03                	mov    BYTE PTR [rbx],al
   12df5:	0f b6 95 b3 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14d]
   12dfc:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12e03:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12e09:	48 01 c8             	add    rax,rcx
   12e0c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12e0f:	0f b6 c0             	movzx  eax,al
   12e12:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   12e19:	48 8d 59 02          	lea    rbx,[rcx+0x2]
   12e1d:	89 d6                	mov    esi,edx
   12e1f:	89 c7                	mov    edi,eax
   12e21:	e8 42 f6 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12e26:	88 03                	mov    BYTE PTR [rbx],al
   12e28:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12e2f:	48 83 c0 03          	add    rax,0x3
   12e33:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   12e36:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12e3c:	48 98                	cdqe   
   12e3e:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   12e45:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   12e4c:	e9 11 ff ff ff       	jmp    12d62 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x8c9>
   12e51:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12e58:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   12e5e:	83 f8 02             	cmp    eax,0x2
   12e61:	0f 85 26 01 00 00    	jne    12f8d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xaf4>
   12e67:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12e6e:	4c 8b 90 78 48 00 00 	mov    r10,QWORD PTR [rax+0x4878]
   12e75:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12e7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12e7f:	8b 00                	mov    eax,DWORD PTR [rax]
   12e81:	41 89 c0             	mov    r8d,eax
   12e84:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12e8b:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12e92:	8b bd c4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x13c]
   12e98:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
   12e9f:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12ea6:	41 89 f9             	mov    r9d,edi
   12ea9:	48 89 c7             	mov    rdi,rax
   12eac:	41 ff d2             	call   r10
   12eaf:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12eb9:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12ec0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12ec3:	8b 00                	mov    eax,DWORD PTR [rax]
   12ec5:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   12ecb:	0f 83 8a 05 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   12ed1:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   12ed8:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12ede:	48 01 d0             	add    rax,rdx
   12ee1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12ee4:	88 85 b2 fe ff ff    	mov    BYTE PTR [rbp-0x14e],al
   12eea:	0f b6 95 b2 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14e]
   12ef1:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12ef8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12efb:	f7 d0                	not    eax
   12efd:	0f b6 c0             	movzx  eax,al
   12f00:	89 d6                	mov    esi,edx
   12f02:	89 c7                	mov    edi,eax
   12f04:	e8 5f f5 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12f09:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12f10:	88 02                	mov    BYTE PTR [rdx],al
   12f12:	0f b6 95 b2 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14e]
   12f19:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12f20:	48 83 c0 01          	add    rax,0x1
   12f24:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12f27:	f7 d0                	not    eax
   12f29:	0f b6 c0             	movzx  eax,al
   12f2c:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   12f33:	48 8d 59 01          	lea    rbx,[rcx+0x1]
   12f37:	89 d6                	mov    esi,edx
   12f39:	89 c7                	mov    edi,eax
   12f3b:	e8 28 f5 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12f40:	88 03                	mov    BYTE PTR [rbx],al
   12f42:	0f b6 95 b2 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14e]
   12f49:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12f50:	48 83 c0 02          	add    rax,0x2
   12f54:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12f57:	f7 d0                	not    eax
   12f59:	0f b6 c0             	movzx  eax,al
   12f5c:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   12f63:	48 8d 59 02          	lea    rbx,[rcx+0x2]
   12f67:	89 d6                	mov    esi,edx
   12f69:	89 c7                	mov    edi,eax
   12f6b:	e8 f8 f4 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12f70:	88 03                	mov    BYTE PTR [rbx],al
   12f72:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12f78:	48 98                	cdqe   
   12f7a:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   12f81:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   12f88:	e9 2c ff ff ff       	jmp    12eb9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xa20>
   12f8d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12f94:	4c 8b 90 78 48 00 00 	mov    r10,QWORD PTR [rax+0x4878]
   12f9b:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12fa2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12fa5:	8b 00                	mov    eax,DWORD PTR [rax]
   12fa7:	41 89 c0             	mov    r8d,eax
   12faa:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12fb1:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12fb8:	8b bd c4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x13c]
   12fbe:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
   12fc5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12fcc:	41 89 f9             	mov    r9d,edi
   12fcf:	48 89 c7             	mov    rdi,rax
   12fd2:	41 ff d2             	call   r10
   12fd5:	e9 81 04 00 00       	jmp    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   12fda:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12fe4:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12feb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12fee:	8b 00                	mov    eax,DWORD PTR [rax]
   12ff0:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   12ff6:	0f 83 5f 04 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   12ffc:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   13002:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   13009:	48 01 d0             	add    rax,rdx
   1300c:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   13013:	48 83 c2 02          	add    rdx,0x2
   13017:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1301a:	88 02                	mov    BYTE PTR [rdx],al
   1301c:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13023:	48 83 c0 01          	add    rax,0x1
   13027:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   1302a:	88 10                	mov    BYTE PTR [rax],dl
   1302c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1302f:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13036:	88 10                	mov    BYTE PTR [rax],dl
   13038:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1303f:	48 83 c0 03          	add    rax,0x3
   13043:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   13046:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   1304c:	48 98                	cdqe   
   1304e:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   13055:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   1305c:	eb 86                	jmp    12fe4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xb4b>
   1305e:	83 bd c8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x138],0x0
   13065:	0f 84 34 01 00 00    	je     1319f <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd06>
   1306b:	83 bd c4 fe ff ff 01 	cmp    DWORD PTR [rbp-0x13c],0x1
   13072:	0f 85 8f 00 00 00    	jne    13107 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xc6e>
   13078:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   13082:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13089:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1308c:	8b 00                	mov    eax,DWORD PTR [rax]
   1308e:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13094:	0f 83 c1 03 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   1309a:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   130a1:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   130a7:	48 01 d0             	add    rax,rdx
   130aa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   130ad:	0f b6 d0             	movzx  edx,al
   130b0:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   130b7:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   130bd:	48 01 c8             	add    rax,rcx
   130c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   130c3:	0f b6 c8             	movzx  ecx,al
   130c6:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
   130cd:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   130d3:	48 01 f0             	add    rax,rsi
   130d6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   130d9:	0f b6 c0             	movzx  eax,al
   130dc:	89 ce                	mov    esi,ecx
   130de:	89 c7                	mov    edi,eax
   130e0:	e8 8f 37 ff ff       	call   6874 <stbi__compute_y(int, int, int)>
   130e5:	89 c2                	mov    edx,eax
   130e7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   130ee:	48 8d 48 01          	lea    rcx,[rax+0x1]
   130f2:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
   130f9:	88 10                	mov    BYTE PTR [rax],dl
   130fb:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13102:	e9 7b ff ff ff       	jmp    13082 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xbe9>
   13107:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   13111:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13118:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1311b:	8b 00                	mov    eax,DWORD PTR [rax]
   1311d:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13123:	0f 83 32 03 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   13129:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   13130:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13136:	48 01 d0             	add    rax,rdx
   13139:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1313c:	0f b6 d0             	movzx  edx,al
   1313f:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   13146:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   1314c:	48 01 c8             	add    rax,rcx
   1314f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13152:	0f b6 c8             	movzx  ecx,al
   13155:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
   1315c:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13162:	48 01 f0             	add    rax,rsi
   13165:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13168:	0f b6 c0             	movzx  eax,al
   1316b:	89 ce                	mov    esi,ecx
   1316d:	89 c7                	mov    edi,eax
   1316f:	e8 00 37 ff ff       	call   6874 <stbi__compute_y(int, int, int)>
   13174:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   1317b:	88 02                	mov    BYTE PTR [rdx],al
   1317d:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13184:	48 83 c0 01          	add    rax,0x1
   13188:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1318b:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13192:	48 83 85 d0 fe ff ff 02 	add    QWORD PTR [rbp-0x130],0x2
   1319a:	e9 72 ff ff ff       	jmp    13111 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xc78>
   1319f:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   131a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   131a9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   131ac:	83 f8 04             	cmp    eax,0x4
   131af:	0f 85 24 01 00 00    	jne    132d9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe40>
   131b5:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   131bc:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   131c2:	85 c0                	test   eax,eax
   131c4:	0f 85 0f 01 00 00    	jne    132d9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe40>
   131ca:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   131d4:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   131db:	48 8b 00             	mov    rax,QWORD PTR [rax]
   131de:	8b 00                	mov    eax,DWORD PTR [rax]
   131e0:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   131e6:	0f 83 6b 02 00 00    	jae    13457 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfbe>
   131ec:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   131f3:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   131f9:	48 01 d0             	add    rax,rdx
   131fc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   131ff:	88 85 ae fe ff ff    	mov    BYTE PTR [rbp-0x152],al
   13205:	0f b6 95 ae fe ff ff 	movzx  edx,BYTE PTR [rbp-0x152]
   1320c:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
   13213:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13219:	48 01 c8             	add    rax,rcx
   1321c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1321f:	0f b6 c0             	movzx  eax,al
   13222:	89 d6                	mov    esi,edx
   13224:	89 c7                	mov    edi,eax
   13226:	e8 3d f2 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   1322b:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
   13231:	0f b6 95 ae fe ff ff 	movzx  edx,BYTE PTR [rbp-0x152]
   13238:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   1323f:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13245:	48 01 c8             	add    rax,rcx
   13248:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1324b:	0f b6 c0             	movzx  eax,al
   1324e:	89 d6                	mov    esi,edx
   13250:	89 c7                	mov    edi,eax
   13252:	e8 11 f2 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   13257:	88 85 b0 fe ff ff    	mov    BYTE PTR [rbp-0x150],al
   1325d:	0f b6 95 ae fe ff ff 	movzx  edx,BYTE PTR [rbp-0x152]
   13264:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   1326b:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13271:	48 01 c8             	add    rax,rcx
   13274:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13277:	0f b6 c0             	movzx  eax,al
   1327a:	89 d6                	mov    esi,edx
   1327c:	89 c7                	mov    edi,eax
   1327e:	e8 e5 f1 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   13283:	88 85 b1 fe ff ff    	mov    BYTE PTR [rbp-0x14f],al
   13289:	0f b6 95 b1 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14f]
   13290:	0f b6 8d b0 fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x150]
   13297:	0f b6 85 af fe ff ff 	movzx  eax,BYTE PTR [rbp-0x151]
   1329e:	89 ce                	mov    esi,ecx
   132a0:	89 c7                	mov    edi,eax
   132a2:	e8 cd 35 ff ff       	call   6874 <stbi__compute_y(int, int, int)>
   132a7:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   132ae:	88 02                	mov    BYTE PTR [rdx],al
   132b0:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   132b7:	48 83 c0 01          	add    rax,0x1
   132bb:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   132be:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   132c4:	48 98                	cdqe   
   132c6:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   132cd:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   132d4:	e9 fb fe ff ff       	jmp    131d4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd3b>
   132d9:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   132e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   132e3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   132e6:	83 f8 04             	cmp    eax,0x4
   132e9:	0f 85 9e 00 00 00    	jne    1338d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xef4>
   132ef:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   132f6:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   132fc:	83 f8 02             	cmp    eax,0x2
   132ff:	0f 85 88 00 00 00    	jne    1338d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xef4>
   13305:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   1330f:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13316:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13319:	8b 00                	mov    eax,DWORD PTR [rax]
   1331b:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13321:	0f 83 33 01 00 00    	jae    1345a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc1>
   13327:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   1332e:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13334:	48 01 d0             	add    rax,rdx
   13337:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1333a:	0f b6 d0             	movzx  edx,al
   1333d:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
   13344:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   1334a:	48 01 c8             	add    rax,rcx
   1334d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13350:	f7 d0                	not    eax
   13352:	0f b6 c0             	movzx  eax,al
   13355:	89 d6                	mov    esi,edx
   13357:	89 c7                	mov    edi,eax
   13359:	e8 0a f1 ff ff       	call   12468 <stbi__blinn_8x8(unsigned char, unsigned char)>
   1335e:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   13365:	88 02                	mov    BYTE PTR [rdx],al
   13367:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1336e:	48 83 c0 01          	add    rax,0x1
   13372:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   13375:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   1337b:	48 98                	cdqe   
   1337d:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   13384:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   1338b:	eb 82                	jmp    1330f <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe76>
   1338d:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   13394:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
   1339b:	83 bd c4 fe ff ff 01 	cmp    DWORD PTR [rbp-0x13c],0x1
   133a2:	75 50                	jne    133f4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf5b>
   133a4:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   133ae:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   133b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   133b8:	8b 00                	mov    eax,DWORD PTR [rax]
   133ba:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   133c0:	0f 83 95 00 00 00    	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   133c6:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   133cc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   133d3:	48 01 d0             	add    rax,rdx
   133d6:	8b 8d bc fe ff ff    	mov    ecx,DWORD PTR [rbp-0x144]
   133dc:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   133e3:	48 01 ca             	add    rdx,rcx
   133e6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   133e9:	88 02                	mov    BYTE PTR [rdx],al
   133eb:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   133f2:	eb ba                	jmp    133ae <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf15>
   133f4:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   133fe:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13405:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13408:	8b 00                	mov    eax,DWORD PTR [rax]
   1340a:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13410:	73 49                	jae    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   13412:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   13418:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   1341f:	48 01 d0             	add    rax,rdx
   13422:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   13425:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1342c:	48 8d 48 01          	lea    rcx,[rax+0x1]
   13430:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
   13437:	88 10                	mov    BYTE PTR [rax],dl
   13439:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13440:	48 8d 50 01          	lea    rdx,[rax+0x1]
   13444:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
   1344b:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1344e:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13455:	eb a7                	jmp    133fe <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf65>
   13457:	90                   	nop
   13458:	eb 01                	jmp    1345b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc2>
   1345a:	90                   	nop
   1345b:	83 85 c0 fe ff ff 01 	add    DWORD PTR [rbp-0x140],0x1
   13462:	e9 46 f5 ff ff       	jmp    129ad <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x514>
   13467:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1346e:	48 89 c7             	mov    rdi,rax
   13471:	e8 c6 ef ff ff       	call   1243c <stbi__cleanup_jpeg(stbi__jpeg*)>
   13476:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1347d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13480:	8b 00                	mov    eax,DWORD PTR [rax]
   13482:	89 c2                	mov    edx,eax
   13484:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   1348b:	89 10                	mov    DWORD PTR [rax],edx
   1348d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13494:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13497:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1349a:	89 c2                	mov    edx,eax
   1349c:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
   134a3:	89 10                	mov    DWORD PTR [rax],edx
   134a5:	48 83 bd 80 fe ff ff 00 	cmp    QWORD PTR [rbp-0x180],0x0
   134ad:	74 27                	je     134d6 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x103d>
   134af:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   134b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   134b9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   134bc:	83 f8 02             	cmp    eax,0x2
   134bf:	7e 07                	jle    134c8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x102f>
   134c1:	ba 03 00 00 00       	mov    edx,0x3
   134c6:	eb 05                	jmp    134cd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1034>
   134c8:	ba 01 00 00 00       	mov    edx,0x1
   134cd:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
   134d4:	89 10                	mov    DWORD PTR [rax],edx
   134d6:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   134dd:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   134e1:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   134ea:	74 05                	je     134f1 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1058>
   134ec:	e8 bf 0f ff ff       	call   44b0 <__stack_chk_fail@plt>
   134f1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   134f5:	c9                   	leave  
   134f6:	c3                   	ret    

00000000000134f7 <stbi__jpeg_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   134f7:	55                   	push   rbp
   134f8:	48 89 e5             	mov    rbp,rsp
   134fb:	48 83 ec 40          	sub    rsp,0x40
   134ff:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13503:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   13507:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1350b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1350f:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
   13513:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   13517:	bf 88 48 00 00       	mov    edi,0x4888
   1351c:	e8 3a 16 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
   13521:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   13525:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13529:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1352d:	48 89 10             	mov    QWORD PTR [rax],rdx
   13530:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13534:	48 89 c7             	mov    rdi,rax
   13537:	e8 77 ee ff ff       	call   123b3 <stbi__setup_jpeg(stbi__jpeg*)>
   1353c:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
   1353f:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   13543:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   13547:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   1354b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1354f:	41 89 f8             	mov    r8d,edi
   13552:	48 89 c7             	mov    rdi,rax
   13555:	e8 3f ef ff ff       	call   12499 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)>
   1355a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1355e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13562:	48 89 c7             	mov    rdi,rax
   13565:	e8 96 0f ff ff       	call   4500 <free@plt>
   1356a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1356e:	c9                   	leave  
   1356f:	c3                   	ret    

0000000000013570 <stbi__jpeg_test(stbi__context*)>:
   13570:	55                   	push   rbp
   13571:	48 89 e5             	mov    rbp,rsp
   13574:	48 83 ec 20          	sub    rsp,0x20
   13578:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1357c:	bf 88 48 00 00       	mov    edi,0x4888
   13581:	e8 d5 15 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
   13586:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1358a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1358e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   13592:	48 89 10             	mov    QWORD PTR [rax],rdx
   13595:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13599:	48 89 c7             	mov    rdi,rax
   1359c:	e8 12 ee ff ff       	call   123b3 <stbi__setup_jpeg(stbi__jpeg*)>
   135a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   135a5:	be 01 00 00 00       	mov    esi,0x1
   135aa:	48 89 c7             	mov    rdi,rax
   135ad:	e8 9b c9 ff ff       	call   ff4d <stbi__decode_jpeg_header(stbi__jpeg*, int)>
   135b2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   135b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   135b9:	48 89 c7             	mov    rdi,rax
   135bc:	e8 38 15 ff ff       	call   4af9 <stbi__rewind(stbi__context*)>
   135c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   135c5:	48 89 c7             	mov    rdi,rax
   135c8:	e8 33 0f ff ff       	call   4500 <free@plt>
   135cd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   135d0:	c9                   	leave  
   135d1:	c3                   	ret    

00000000000135d2 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)>:
   135d2:	55                   	push   rbp
   135d3:	48 89 e5             	mov    rbp,rsp
   135d6:	48 83 ec 20          	sub    rsp,0x20
   135da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   135de:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   135e2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   135e6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   135ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   135ee:	be 02 00 00 00       	mov    esi,0x2
   135f3:	48 89 c7             	mov    rdi,rax
   135f6:	e8 52 c9 ff ff       	call   ff4d <stbi__decode_jpeg_header(stbi__jpeg*, int)>
   135fb:	85 c0                	test   eax,eax
   135fd:	0f 94 c0             	sete   al
   13600:	84 c0                	test   al,al
   13602:	74 16                	je     1361a <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x48>
   13604:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13608:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1360b:	48 89 c7             	mov    rdi,rax
   1360e:	e8 e6 14 ff ff       	call   4af9 <stbi__rewind(stbi__context*)>
   13613:	b8 00 00 00 00       	mov    eax,0x0
   13618:	eb 5e                	jmp    13678 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0xa6>
   1361a:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   1361f:	74 11                	je     13632 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x60>
   13621:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13625:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13628:	8b 00                	mov    eax,DWORD PTR [rax]
   1362a:	89 c2                	mov    edx,eax
   1362c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13630:	89 10                	mov    DWORD PTR [rax],edx
   13632:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   13637:	74 12                	je     1364b <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x79>
   13639:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1363d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13640:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   13643:	89 c2                	mov    edx,eax
   13645:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13649:	89 10                	mov    DWORD PTR [rax],edx
   1364b:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   13650:	74 21                	je     13673 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0xa1>
   13652:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13656:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13659:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1365c:	83 f8 02             	cmp    eax,0x2
   1365f:	7e 07                	jle    13668 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x96>
   13661:	ba 03 00 00 00       	mov    edx,0x3
   13666:	eb 05                	jmp    1366d <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x9b>
   13668:	ba 01 00 00 00       	mov    edx,0x1
   1366d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13671:	89 10                	mov    DWORD PTR [rax],edx
   13673:	b8 01 00 00 00       	mov    eax,0x1
   13678:	c9                   	leave  
   13679:	c3                   	ret    

000000000001367a <stbi__jpeg_info(stbi__context*, int*, int*, int*)>:
   1367a:	55                   	push   rbp
   1367b:	48 89 e5             	mov    rbp,rsp
   1367e:	48 83 ec 30          	sub    rsp,0x30
   13682:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13686:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1368a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1368e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   13692:	bf 88 48 00 00       	mov    edi,0x4888
   13697:	e8 bf 14 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
   1369c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   136a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   136a4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   136a8:	48 89 10             	mov    QWORD PTR [rax],rdx
   136ab:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   136af:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   136b3:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   136b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   136bb:	48 89 c7             	mov    rdi,rax
   136be:	e8 0f ff ff ff       	call   135d2 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)>
   136c3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   136c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   136ca:	48 89 c7             	mov    rdi,rax
   136cd:	e8 2e 0e ff ff       	call   4500 <free@plt>
   136d2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   136d5:	c9                   	leave  
   136d6:	c3                   	ret    

00000000000136d7 <stbi__bitreverse16(int)>:
   136d7:	55                   	push   rbp
   136d8:	48 89 e5             	mov    rbp,rsp
   136db:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   136de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   136e1:	d1 f8                	sar    eax,1
   136e3:	25 55 55 00 00       	and    eax,0x5555
   136e8:	89 c2                	mov    edx,eax
   136ea:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   136ed:	01 c0                	add    eax,eax
   136ef:	25 aa aa 00 00       	and    eax,0xaaaa
   136f4:	09 d0                	or     eax,edx
   136f6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   136f9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   136fc:	c1 f8 02             	sar    eax,0x2
   136ff:	25 33 33 00 00       	and    eax,0x3333
   13704:	89 c2                	mov    edx,eax
   13706:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13709:	c1 e0 02             	shl    eax,0x2
   1370c:	25 cc cc 00 00       	and    eax,0xcccc
   13711:	09 d0                	or     eax,edx
   13713:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13716:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13719:	c1 f8 04             	sar    eax,0x4
   1371c:	25 0f 0f 00 00       	and    eax,0xf0f
   13721:	89 c2                	mov    edx,eax
   13723:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13726:	c1 e0 04             	shl    eax,0x4
   13729:	25 f0 f0 00 00       	and    eax,0xf0f0
   1372e:	09 d0                	or     eax,edx
   13730:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13733:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13736:	c1 f8 08             	sar    eax,0x8
   13739:	0f b6 d0             	movzx  edx,al
   1373c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1373f:	c1 e0 08             	shl    eax,0x8
   13742:	0f b7 c0             	movzx  eax,ax
   13745:	09 d0                	or     eax,edx
   13747:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1374a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1374d:	5d                   	pop    rbp
   1374e:	c3                   	ret    

000000000001374f <stbi__bit_reverse(int, int)>:
   1374f:	55                   	push   rbp
   13750:	48 89 e5             	mov    rbp,rsp
   13753:	48 83 ec 10          	sub    rsp,0x10
   13757:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   1375a:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   1375d:	83 7d f8 10          	cmp    DWORD PTR [rbp-0x8],0x10
   13761:	7e 1f                	jle    13782 <stbi__bit_reverse(int, int)+0x33>
   13763:	48 8d 0d 26 6f 02 00 	lea    rcx,[rip+0x26f26]        # 3a690 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x9e>
   1376a:	ba 7b 0f 00 00       	mov    edx,0xf7b
   1376f:	48 8d 35 22 69 02 00 	lea    rsi,[rip+0x26922]        # 3a098 <_IO_stdin_used+0x98>
   13776:	48 8d 3d 33 6f 02 00 	lea    rdi,[rip+0x26f33]        # 3a6b0 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xbe>
   1377d:	e8 fe 0a ff ff       	call   4280 <__assert_fail@plt>
   13782:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13785:	89 c7                	mov    edi,eax
   13787:	e8 4b ff ff ff       	call   136d7 <stbi__bitreverse16(int)>
   1378c:	89 c2                	mov    edx,eax
   1378e:	b8 10 00 00 00       	mov    eax,0x10
   13793:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
   13796:	89 c1                	mov    ecx,eax
   13798:	d3 fa                	sar    edx,cl
   1379a:	89 d0                	mov    eax,edx
   1379c:	c9                   	leave  
   1379d:	c3                   	ret    

000000000001379e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>:
   1379e:	55                   	push   rbp
   1379f:	48 89 e5             	mov    rbp,rsp
   137a2:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
   137a9:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
   137b0:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
   137b7:	89 95 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],edx
   137bd:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   137c6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   137ca:	31 c0                	xor    eax,eax
   137cc:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   137d6:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   137da:	ba 44 00 00 00       	mov    edx,0x44
   137df:	be 00 00 00 00       	mov    esi,0x0
   137e4:	48 89 c7             	mov    rdi,rax
   137e7:	e8 f4 09 ff ff       	call   41e0 <memset@plt>
   137ec:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   137f3:	ba 00 04 00 00       	mov    edx,0x400
   137f8:	be 00 00 00 00       	mov    esi,0x0
   137fd:	48 89 c7             	mov    rdi,rax
   13800:	e8 db 09 ff ff       	call   41e0 <memset@plt>
   13805:	c7 85 58 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x0
   1380f:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13815:	3b 85 3c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xc4]
   1381b:	7d 32                	jge    1384f <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0xb1>
   1381d:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13823:	48 63 d0             	movsxd rdx,eax
   13826:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   1382d:	48 01 d0             	add    rax,rdx
   13830:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13833:	0f b6 c0             	movzx  eax,al
   13836:	48 63 d0             	movsxd rdx,eax
   13839:	8b 54 95 b0          	mov    edx,DWORD PTR [rbp+rdx*4-0x50]
   1383d:	83 c2 01             	add    edx,0x1
   13840:	48 98                	cdqe   
   13842:	89 54 85 b0          	mov    DWORD PTR [rbp+rax*4-0x50],edx
   13846:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   1384d:	eb c0                	jmp    1380f <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x71>
   1384f:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   13856:	c7 85 58 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x1
   13860:	83 bd 58 ff ff ff 0f 	cmp    DWORD PTR [rbp-0xa8],0xf
   13867:	7f 3b                	jg     138a4 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x106>
   13869:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   1386f:	48 98                	cdqe   
   13871:	8b 54 85 b0          	mov    edx,DWORD PTR [rbp+rax*4-0x50]
   13875:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   1387b:	be 01 00 00 00       	mov    esi,0x1
   13880:	89 c1                	mov    ecx,eax
   13882:	d3 e6                	shl    esi,cl
   13884:	89 f0                	mov    eax,esi
   13886:	39 c2                	cmp    edx,eax
   13888:	7e 11                	jle    1389b <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0xfd>
   1388a:	48 8d 3d 2a 6e 02 00 	lea    rdi,[rip+0x26e2a]        # 3a6bb <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xc9>
   13891:	e8 a9 12 ff ff       	call   4b3f <stbi__err(char const*)>
   13896:	e9 d3 02 00 00       	jmp    13b6e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3d0>
   1389b:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   138a2:	eb bc                	jmp    13860 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0xc2>
   138a4:	c7 85 60 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa0],0x0
   138ae:	c7 85 58 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x1
   138b8:	83 bd 58 ff ff ff 0f 	cmp    DWORD PTR [rbp-0xa8],0xf
   138bf:	0f 8f fd 00 00 00    	jg     139c2 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x224>
   138c5:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   138cb:	48 98                	cdqe   
   138cd:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   138d3:	89 94 85 70 ff ff ff 	mov    DWORD PTR [rbp+rax*4-0x90],edx
   138da:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   138e0:	89 c1                	mov    ecx,eax
   138e2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   138e9:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   138ef:	48 63 d2             	movsxd rdx,edx
   138f2:	48 81 c2 00 02 00 00 	add    rdx,0x200
   138f9:	66 89 0c 50          	mov    WORD PTR [rax+rdx*2],cx
   138fd:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   13903:	89 c1                	mov    ecx,eax
   13905:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   1390c:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   13912:	48 63 d2             	movsxd rdx,edx
   13915:	48 81 c2 30 02 00 00 	add    rdx,0x230
   1391c:	66 89 4c 50 04       	mov    WORD PTR [rax+rdx*2+0x4],cx
   13921:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13927:	48 98                	cdqe   
   13929:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   1392d:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   13933:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13939:	48 98                	cdqe   
   1393b:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   1393f:	85 c0                	test   eax,eax
   13941:	74 2a                	je     1396d <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x1cf>
   13943:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13949:	ba 01 00 00 00       	mov    edx,0x1
   1394e:	89 c1                	mov    ecx,eax
   13950:	d3 e2                	shl    edx,cl
   13952:	89 d0                	mov    eax,edx
   13954:	39 85 60 ff ff ff    	cmp    DWORD PTR [rbp-0xa0],eax
   1395a:	7e 11                	jle    1396d <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x1cf>
   1395c:	48 8d 3d 62 6d 02 00 	lea    rdi,[rip+0x26d62]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   13963:	e8 d7 11 ff ff       	call   4b3f <stbi__err(char const*)>
   13968:	e9 01 02 00 00       	jmp    13b6e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3d0>
   1396d:	b8 10 00 00 00       	mov    eax,0x10
   13972:	2b 85 58 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa8]
   13978:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   1397e:	89 c1                	mov    ecx,eax
   13980:	d3 e2                	shl    edx,cl
   13982:	89 d1                	mov    ecx,edx
   13984:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   1398b:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   13991:	48 63 d2             	movsxd rdx,edx
   13994:	48 81 c2 08 01 00 00 	add    rdx,0x108
   1399b:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
   1399e:	d1 a5 60 ff ff ff    	shl    DWORD PTR [rbp-0xa0],1
   139a4:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   139aa:	48 98                	cdqe   
   139ac:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   139b0:	01 85 5c ff ff ff    	add    DWORD PTR [rbp-0xa4],eax
   139b6:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   139bd:	e9 f6 fe ff ff       	jmp    138b8 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x11a>
   139c2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   139c9:	c7 80 60 04 00 00 00 00 01 00 	mov    DWORD PTR [rax+0x460],0x10000
   139d3:	c7 85 58 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x0
   139dd:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   139e3:	3b 85 3c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xc4]
   139e9:	0f 8d 7a 01 00 00    	jge    13b69 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3cb>
   139ef:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   139f5:	48 63 d0             	movsxd rdx,eax
   139f8:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   139ff:	48 01 d0             	add    rax,rdx
   13a02:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13a05:	0f b6 c0             	movzx  eax,al
   13a08:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   13a0e:	83 bd 68 ff ff ff 00 	cmp    DWORD PTR [rbp-0x98],0x0
   13a15:	0f 84 42 01 00 00    	je     13b5d <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3bf>
   13a1b:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13a21:	48 98                	cdqe   
   13a23:	8b 94 85 70 ff ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x90]
   13a2a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a31:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
   13a37:	48 63 c9             	movsxd rcx,ecx
   13a3a:	48 81 c1 00 02 00 00 	add    rcx,0x200
   13a41:	0f b7 04 48          	movzx  eax,WORD PTR [rax+rcx*2]
   13a45:	0f b7 c0             	movzx  eax,ax
   13a48:	89 d1                	mov    ecx,edx
   13a4a:	29 c1                	sub    ecx,eax
   13a4c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a53:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   13a59:	48 63 d2             	movsxd rdx,edx
   13a5c:	48 81 c2 30 02 00 00 	add    rdx,0x230
   13a63:	0f b7 44 50 04       	movzx  eax,WORD PTR [rax+rdx*2+0x4]
   13a68:	0f b7 c0             	movzx  eax,ax
   13a6b:	01 c8                	add    eax,ecx
   13a6d:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   13a73:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13a79:	c1 e0 09             	shl    eax,0x9
   13a7c:	89 c2                	mov    edx,eax
   13a7e:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13a84:	09 d0                	or     eax,edx
   13a86:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
   13a8d:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13a93:	89 c1                	mov    ecx,eax
   13a95:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   13a9c:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13aa2:	48 98                	cdqe   
   13aa4:	88 8c 02 84 04 00 00 	mov    BYTE PTR [rdx+rax*1+0x484],cl
   13aab:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13ab1:	89 c1                	mov    ecx,eax
   13ab3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13aba:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   13ac0:	48 63 d2             	movsxd rdx,edx
   13ac3:	48 81 c2 d0 02 00 00 	add    rdx,0x2d0
   13aca:	66 89 4c 50 04       	mov    WORD PTR [rax+rdx*2+0x4],cx
   13acf:	83 bd 68 ff ff ff 09 	cmp    DWORD PTR [rbp-0x98],0x9
   13ad6:	7f 64                	jg     13b3c <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x39e>
   13ad8:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13ade:	48 98                	cdqe   
   13ae0:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   13ae7:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   13aed:	89 d6                	mov    esi,edx
   13aef:	89 c7                	mov    edi,eax
   13af1:	e8 59 fc ff ff       	call   1374f <stbi__bit_reverse(int, int)>
   13af6:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   13afc:	81 bd 64 ff ff ff ff 01 00 00 	cmp    DWORD PTR [rbp-0x9c],0x1ff
   13b06:	7f 34                	jg     13b3c <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x39e>
   13b08:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13b0f:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13b15:	48 63 d2             	movsxd rdx,edx
   13b18:	0f b7 8d 56 ff ff ff 	movzx  ecx,WORD PTR [rbp-0xaa]
   13b1f:	66 89 0c 50          	mov    WORD PTR [rax+rdx*2],cx
   13b23:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13b29:	ba 01 00 00 00       	mov    edx,0x1
   13b2e:	89 c1                	mov    ecx,eax
   13b30:	d3 e2                	shl    edx,cl
   13b32:	89 d0                	mov    eax,edx
   13b34:	01 85 64 ff ff ff    	add    DWORD PTR [rbp-0x9c],eax
   13b3a:	eb c0                	jmp    13afc <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x35e>
   13b3c:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13b42:	48 98                	cdqe   
   13b44:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   13b4b:	8d 50 01             	lea    edx,[rax+0x1]
   13b4e:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13b54:	48 98                	cdqe   
   13b56:	89 94 85 70 ff ff ff 	mov    DWORD PTR [rbp+rax*4-0x90],edx
   13b5d:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   13b64:	e9 74 fe ff ff       	jmp    139dd <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x23f>
   13b69:	b8 01 00 00 00       	mov    eax,0x1
   13b6e:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   13b72:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   13b7b:	74 05                	je     13b82 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3e4>
   13b7d:	e8 2e 09 ff ff       	call   44b0 <__stack_chk_fail@plt>
   13b82:	c9                   	leave  
   13b83:	c3                   	ret    

0000000000013b84 <stbi__zget8(stbi__zbuf*)>:
   13b84:	55                   	push   rbp
   13b85:	48 89 e5             	mov    rbp,rsp
   13b88:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   13b8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13b90:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   13b93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13b97:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   13b9b:	48 39 c2             	cmp    rdx,rax
   13b9e:	72 07                	jb     13ba7 <stbi__zget8(stbi__zbuf*)+0x23>
   13ba0:	b8 00 00 00 00       	mov    eax,0x0
   13ba5:	eb 15                	jmp    13bbc <stbi__zget8(stbi__zbuf*)+0x38>
   13ba7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13bab:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13bae:	48 8d 48 01          	lea    rcx,[rax+0x1]
   13bb2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   13bb6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
   13bb9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13bbc:	5d                   	pop    rbp
   13bbd:	c3                   	ret    

0000000000013bbe <stbi__fill_bits(stbi__zbuf*)>:
   13bbe:	55                   	push   rbp
   13bbf:	48 89 e5             	mov    rbp,rsp
   13bc2:	48 83 ec 10          	sub    rsp,0x10
   13bc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   13bca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13bce:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13bd1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13bd5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13bd8:	89 c1                	mov    ecx,eax
   13bda:	d3 ea                	shr    edx,cl
   13bdc:	89 d0                	mov    eax,edx
   13bde:	85 c0                	test   eax,eax
   13be0:	74 1f                	je     13c01 <stbi__fill_bits(stbi__zbuf*)+0x43>
   13be2:	48 8d 0d ef 6a 02 00 	lea    rcx,[rip+0x26aef]        # 3a6d8 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xe6>
   13be9:	ba cd 0f 00 00       	mov    edx,0xfcd
   13bee:	48 8d 35 a3 64 02 00 	lea    rsi,[rip+0x264a3]        # 3a098 <_IO_stdin_used+0x98>
   13bf5:	48 8d 3d 04 6b 02 00 	lea    rdi,[rip+0x26b04]        # 3a700 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x10e>
   13bfc:	e8 7f 06 ff ff       	call   4280 <__assert_fail@plt>
   13c01:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c05:	48 89 c7             	mov    rdi,rax
   13c08:	e8 77 ff ff ff       	call   13b84 <stbi__zget8(stbi__zbuf*)>
   13c0d:	0f b6 d0             	movzx  edx,al
   13c10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c14:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13c17:	89 c1                	mov    ecx,eax
   13c19:	d3 e2                	shl    edx,cl
   13c1b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c1f:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   13c22:	09 c2                	or     edx,eax
   13c24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c28:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13c2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c2f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13c32:	8d 50 08             	lea    edx,[rax+0x8]
   13c35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c39:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13c3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13c40:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13c43:	83 f8 18             	cmp    eax,0x18
   13c46:	7f 02                	jg     13c4a <stbi__fill_bits(stbi__zbuf*)+0x8c>
   13c48:	eb 80                	jmp    13bca <stbi__fill_bits(stbi__zbuf*)+0xc>
   13c4a:	90                   	nop
   13c4b:	c9                   	leave  
   13c4c:	c3                   	ret    

0000000000013c4d <stbi__zreceive(stbi__zbuf*, int)>:
   13c4d:	55                   	push   rbp
   13c4e:	48 89 e5             	mov    rbp,rsp
   13c51:	48 83 ec 20          	sub    rsp,0x20
   13c55:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13c59:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   13c5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13c60:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13c63:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
   13c66:	7e 0c                	jle    13c74 <stbi__zreceive(stbi__zbuf*, int)+0x27>
   13c68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13c6c:	48 89 c7             	mov    rdi,rax
   13c6f:	e8 4a ff ff ff       	call   13bbe <stbi__fill_bits(stbi__zbuf*)>
   13c74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13c78:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13c7b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   13c7e:	be 01 00 00 00       	mov    esi,0x1
   13c83:	89 c1                	mov    ecx,eax
   13c85:	d3 e6                	shl    esi,cl
   13c87:	89 f0                	mov    eax,esi
   13c89:	83 e8 01             	sub    eax,0x1
   13c8c:	21 d0                	and    eax,edx
   13c8e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13c91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13c95:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13c98:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   13c9b:	89 c1                	mov    ecx,eax
   13c9d:	d3 ea                	shr    edx,cl
   13c9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13ca3:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13ca6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13caa:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13cad:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   13cb0:	89 c2                	mov    edx,eax
   13cb2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13cb6:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13cb9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13cbc:	c9                   	leave  
   13cbd:	c3                   	ret    

0000000000013cbe <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)>:
   13cbe:	55                   	push   rbp
   13cbf:	48 89 e5             	mov    rbp,rsp
   13cc2:	48 83 ec 20          	sub    rsp,0x20
   13cc6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13cca:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   13cce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13cd2:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   13cd5:	be 10 00 00 00       	mov    esi,0x10
   13cda:	89 c7                	mov    edi,eax
   13cdc:	e8 6e fa ff ff       	call   1374f <stbi__bit_reverse(int, int)>
   13ce1:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   13ce4:	c7 45 f4 0a 00 00 00 	mov    DWORD PTR [rbp-0xc],0xa
   13ceb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13cef:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   13cf2:	48 63 d2             	movsxd rdx,edx
   13cf5:	48 81 c2 08 01 00 00 	add    rdx,0x108
   13cfc:	8b 04 90             	mov    eax,DWORD PTR [rax+rdx*4]
   13cff:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   13d02:	7c 06                	jl     13d0a <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x4c>
   13d04:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   13d08:	eb e1                	jmp    13ceb <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x2d>
   13d0a:	90                   	nop
   13d0b:	83 7d f4 10          	cmp    DWORD PTR [rbp-0xc],0x10
   13d0f:	75 0a                	jne    13d1b <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x5d>
   13d11:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13d16:	e9 c2 00 00 00       	jmp    13ddd <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x11f>
   13d1b:	b8 10 00 00 00       	mov    eax,0x10
   13d20:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   13d23:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   13d26:	89 c1                	mov    ecx,eax
   13d28:	d3 fa                	sar    edx,cl
   13d2a:	89 d1                	mov    ecx,edx
   13d2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13d30:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   13d33:	48 63 d2             	movsxd rdx,edx
   13d36:	48 81 c2 00 02 00 00 	add    rdx,0x200
   13d3d:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
   13d41:	0f b7 c0             	movzx  eax,ax
   13d44:	29 c1                	sub    ecx,eax
   13d46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13d4a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   13d4d:	48 63 d2             	movsxd rdx,edx
   13d50:	48 81 c2 30 02 00 00 	add    rdx,0x230
   13d57:	0f b7 44 50 04       	movzx  eax,WORD PTR [rax+rdx*2+0x4]
   13d5c:	0f b7 c0             	movzx  eax,ax
   13d5f:	01 c8                	add    eax,ecx
   13d61:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13d64:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   13d68:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13d6b:	48 98                	cdqe   
   13d6d:	0f b6 84 02 84 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x484]
   13d75:	0f b6 c0             	movzx  eax,al
   13d78:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   13d7b:	74 1f                	je     13d9c <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0xde>
   13d7d:	48 8d 0d a4 69 02 00 	lea    rcx,[rip+0x269a4]        # 3a728 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x136>
   13d84:	ba e9 0f 00 00       	mov    edx,0xfe9
   13d89:	48 8d 35 08 63 02 00 	lea    rsi,[rip+0x26308]        # 3a098 <_IO_stdin_used+0x98>
   13d90:	48 8d 3d d2 69 02 00 	lea    rdi,[rip+0x269d2]        # 3a769 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x177>
   13d97:	e8 e4 04 ff ff       	call   4280 <__assert_fail@plt>
   13d9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13da0:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13da3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   13da6:	89 c1                	mov    ecx,eax
   13da8:	d3 ea                	shr    edx,cl
   13daa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13dae:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13db1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13db5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13db8:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   13dbb:	89 c2                	mov    edx,eax
   13dbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13dc1:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13dc4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13dc8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   13dcb:	48 63 d2             	movsxd rdx,edx
   13dce:	48 81 c2 d0 02 00 00 	add    rdx,0x2d0
   13dd5:	0f b7 44 50 04       	movzx  eax,WORD PTR [rax+rdx*2+0x4]
   13dda:	0f b7 c0             	movzx  eax,ax
   13ddd:	c9                   	leave  
   13dde:	c3                   	ret    

0000000000013ddf <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>:
   13ddf:	55                   	push   rbp
   13de0:	48 89 e5             	mov    rbp,rsp
   13de3:	48 83 ec 20          	sub    rsp,0x20
   13de7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13deb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   13def:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13df3:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13df6:	83 f8 0f             	cmp    eax,0xf
   13df9:	7f 0c                	jg     13e07 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)+0x28>
   13dfb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13dff:	48 89 c7             	mov    rdi,rax
   13e02:	e8 b7 fd ff ff       	call   13bbe <stbi__fill_bits(stbi__zbuf*)>
   13e07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13e0b:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   13e0e:	25 ff 01 00 00       	and    eax,0x1ff
   13e13:	89 c2                	mov    edx,eax
   13e15:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13e19:	89 d2                	mov    edx,edx
   13e1b:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
   13e1f:	0f b7 c0             	movzx  eax,ax
   13e22:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   13e25:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   13e29:	74 3b                	je     13e66 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)+0x87>
   13e2b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   13e2e:	c1 f8 09             	sar    eax,0x9
   13e31:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13e34:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13e38:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13e3b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13e3e:	89 c1                	mov    ecx,eax
   13e40:	d3 ea                	shr    edx,cl
   13e42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13e46:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13e49:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13e4d:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13e50:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
   13e53:	89 c2                	mov    edx,eax
   13e55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13e59:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13e5c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   13e5f:	25 ff 01 00 00       	and    eax,0x1ff
   13e64:	eb 14                	jmp    13e7a <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)+0x9b>
   13e66:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   13e6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13e6e:	48 89 d6             	mov    rsi,rdx
   13e71:	48 89 c7             	mov    rdi,rax
   13e74:	e8 45 fe ff ff       	call   13cbe <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)>
   13e79:	90                   	nop
   13e7a:	c9                   	leave  
   13e7b:	c3                   	ret    

0000000000013e7c <stbi__zexpand(stbi__zbuf*, char*, int)>:
   13e7c:	55                   	push   rbp
   13e7d:	48 89 e5             	mov    rbp,rsp
   13e80:	48 83 ec 40          	sub    rsp,0x40
   13e84:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   13e88:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   13e8c:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   13e8f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13e93:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   13e97:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   13e9b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13e9f:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   13ea2:	85 c0                	test   eax,eax
   13ea4:	75 11                	jne    13eb7 <stbi__zexpand(stbi__zbuf*, char*, int)+0x3b>
   13ea6:	48 8d 3d cc 68 02 00 	lea    rdi,[rip+0x268cc]        # 3a779 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x187>
   13ead:	e8 8d 0c ff ff       	call   4b3f <stbi__err(char const*)>
   13eb2:	e9 b7 00 00 00       	jmp    13f6e <stbi__zexpand(stbi__zbuf*, char*, int)+0xf2>
   13eb7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13ebb:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   13ebf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13ec3:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
   13ec7:	48 89 d0             	mov    rax,rdx
   13eca:	48 29 c8             	sub    rax,rcx
   13ecd:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   13ed0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13ed4:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
   13ed8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13edc:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
   13ee0:	48 89 d0             	mov    rax,rdx
   13ee3:	48 29 c8             	sub    rax,rcx
   13ee6:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   13ee9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   13eec:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   13eef:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   13ef2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   13ef5:	01 d0                	add    eax,edx
   13ef7:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   13efa:	7d 05                	jge    13f01 <stbi__zexpand(stbi__zbuf*, char*, int)+0x85>
   13efc:	d1 65 ec             	shl    DWORD PTR [rbp-0x14],1
   13eff:	eb ee                	jmp    13eef <stbi__zexpand(stbi__zbuf*, char*, int)+0x73>
   13f01:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   13f04:	48 63 d0             	movsxd rdx,eax
   13f07:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f0b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   13f0f:	48 89 d6             	mov    rsi,rdx
   13f12:	48 89 c7             	mov    rdi,rax
   13f15:	e8 d6 07 ff ff       	call   46f0 <realloc@plt>
   13f1a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   13f1e:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   13f23:	75 0e                	jne    13f33 <stbi__zexpand(stbi__zbuf*, char*, int)+0xb7>
   13f25:	48 8d 3d 07 61 02 00 	lea    rdi,[rip+0x26107]        # 3a033 <_IO_stdin_used+0x33>
   13f2c:	e8 0e 0c ff ff       	call   4b3f <stbi__err(char const*)>
   13f31:	eb 3b                	jmp    13f6e <stbi__zexpand(stbi__zbuf*, char*, int)+0xf2>
   13f33:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f37:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   13f3b:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
   13f3f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   13f42:	48 63 d0             	movsxd rdx,eax
   13f45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13f49:	48 01 c2             	add    rdx,rax
   13f4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f50:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   13f54:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   13f57:	48 63 d0             	movsxd rdx,eax
   13f5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13f5e:	48 01 c2             	add    rdx,rax
   13f61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f65:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
   13f69:	b8 01 00 00 00       	mov    eax,0x1
   13f6e:	c9                   	leave  
   13f6f:	c3                   	ret    

0000000000013f70 <stbi__parse_huffman_block(stbi__zbuf*)>:
   13f70:	55                   	push   rbp
   13f71:	48 89 e5             	mov    rbp,rsp
   13f74:	48 83 ec 30          	sub    rsp,0x30
   13f78:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   13f7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f80:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   13f84:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   13f88:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f8c:	48 8d 50 34          	lea    rdx,[rax+0x34]
   13f90:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13f94:	48 89 d6             	mov    rsi,rdx
   13f97:	48 89 c7             	mov    rdi,rax
   13f9a:	e8 40 fe ff ff       	call   13ddf <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>
   13f9f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   13fa2:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
   13fa9:	7f 74                	jg     1401f <stbi__parse_huffman_block(stbi__zbuf*)+0xaf>
   13fab:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   13faf:	79 11                	jns    13fc2 <stbi__parse_huffman_block(stbi__zbuf*)+0x52>
   13fb1:	48 8d 3d 57 65 02 00 	lea    rdi,[rip+0x26557]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
   13fb8:	e8 82 0b ff ff       	call   4b3f <stbi__err(char const*)>
   13fbd:	e9 8c 02 00 00       	jmp    1424e <stbi__parse_huffman_block(stbi__zbuf*)+0x2de>
   13fc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fc6:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   13fca:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   13fce:	72 37                	jb     14007 <stbi__parse_huffman_block(stbi__zbuf*)+0x97>
   13fd0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   13fd4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fd8:	ba 01 00 00 00       	mov    edx,0x1
   13fdd:	48 89 ce             	mov    rsi,rcx
   13fe0:	48 89 c7             	mov    rdi,rax
   13fe3:	e8 94 fe ff ff       	call   13e7c <stbi__zexpand(stbi__zbuf*, char*, int)>
   13fe8:	85 c0                	test   eax,eax
   13fea:	0f 94 c0             	sete   al
   13fed:	84 c0                	test   al,al
   13fef:	74 0a                	je     13ffb <stbi__parse_huffman_block(stbi__zbuf*)+0x8b>
   13ff1:	b8 00 00 00 00       	mov    eax,0x0
   13ff6:	e9 53 02 00 00       	jmp    1424e <stbi__parse_huffman_block(stbi__zbuf*)+0x2de>
   13ffb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fff:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   14003:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   14007:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1400a:	89 c1                	mov    ecx,eax
   1400c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14010:	48 8d 50 01          	lea    rdx,[rax+0x1]
   14014:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
   14018:	88 08                	mov    BYTE PTR [rax],cl
   1401a:	e9 69 ff ff ff       	jmp    13f88 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1401f:	81 7d ec 00 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x100
   14026:	75 16                	jne    1403e <stbi__parse_huffman_block(stbi__zbuf*)+0xce>
   14028:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1402c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   14030:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   14034:	b8 01 00 00 00       	mov    eax,0x1
   14039:	e9 10 02 00 00       	jmp    1424e <stbi__parse_huffman_block(stbi__zbuf*)+0x2de>
   1403e:	81 6d ec 01 01 00 00 	sub    DWORD PTR [rbp-0x14],0x101
   14045:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14048:	48 98                	cdqe   
   1404a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14052:	48 8d 05 47 67 02 00 	lea    rax,[rip+0x26747]        # 3a7a0 <stbi__zlength_base>
   14059:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1405c:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1405f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14062:	48 98                	cdqe   
   14064:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1406c:	48 8d 05 ad 67 02 00 	lea    rax,[rip+0x267ad]        # 3a820 <stbi__zlength_extra>
   14073:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   14076:	85 c0                	test   eax,eax
   14078:	74 2d                	je     140a7 <stbi__parse_huffman_block(stbi__zbuf*)+0x137>
   1407a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1407d:	48 98                	cdqe   
   1407f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14087:	48 8d 05 92 67 02 00 	lea    rax,[rip+0x26792]        # 3a820 <stbi__zlength_extra>
   1408e:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   14091:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14095:	89 d6                	mov    esi,edx
   14097:	48 89 c7             	mov    rdi,rax
   1409a:	e8 ae fb ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   1409f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   140a2:	01 d0                	add    eax,edx
   140a4:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   140a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   140ab:	48 8d 90 18 08 00 00 	lea    rdx,[rax+0x818]
   140b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   140b6:	48 89 d6             	mov    rsi,rdx
   140b9:	48 89 c7             	mov    rdi,rax
   140bc:	e8 1e fd ff ff       	call   13ddf <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>
   140c1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   140c4:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   140c8:	79 11                	jns    140db <stbi__parse_huffman_block(stbi__zbuf*)+0x16b>
   140ca:	48 8d 3d 3e 64 02 00 	lea    rdi,[rip+0x2643e]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
   140d1:	e8 69 0a ff ff       	call   4b3f <stbi__err(char const*)>
   140d6:	e9 73 01 00 00       	jmp    1424e <stbi__parse_huffman_block(stbi__zbuf*)+0x2de>
   140db:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   140de:	48 98                	cdqe   
   140e0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   140e8:	48 8d 05 b1 67 02 00 	lea    rax,[rip+0x267b1]        # 3a8a0 <stbi__zdist_base>
   140ef:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   140f2:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   140f5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   140f8:	48 98                	cdqe   
   140fa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14102:	48 8d 05 17 68 02 00 	lea    rax,[rip+0x26817]        # 3a920 <stbi__zdist_extra>
   14109:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1410c:	85 c0                	test   eax,eax
   1410e:	74 2d                	je     1413d <stbi__parse_huffman_block(stbi__zbuf*)+0x1cd>
   14110:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14113:	48 98                	cdqe   
   14115:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1411d:	48 8d 05 fc 67 02 00 	lea    rax,[rip+0x267fc]        # 3a920 <stbi__zdist_extra>
   14124:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   14127:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1412b:	89 d6                	mov    esi,edx
   1412d:	48 89 c7             	mov    rdi,rax
   14130:	e8 18 fb ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14135:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   14138:	01 d0                	add    eax,edx
   1413a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   1413d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14141:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
   14145:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14149:	48 29 c8             	sub    rax,rcx
   1414c:	48 89 c2             	mov    rdx,rax
   1414f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   14152:	48 98                	cdqe   
   14154:	48 39 c2             	cmp    rdx,rax
   14157:	7d 11                	jge    1416a <stbi__parse_huffman_block(stbi__zbuf*)+0x1fa>
   14159:	48 8d 3d 40 68 02 00 	lea    rdi,[rip+0x26840]        # 3a9a0 <stbi__zdist_extra+0x80>
   14160:	e8 da 09 ff ff       	call   4b3f <stbi__err(char const*)>
   14165:	e9 e4 00 00 00       	jmp    1424e <stbi__parse_huffman_block(stbi__zbuf*)+0x2de>
   1416a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1416d:	48 63 d0             	movsxd rdx,eax
   14170:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14174:	48 01 c2             	add    rdx,rax
   14177:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1417b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   1417f:	48 39 c2             	cmp    rdx,rax
   14182:	76 35                	jbe    141b9 <stbi__parse_huffman_block(stbi__zbuf*)+0x249>
   14184:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   14187:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   1418b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1418f:	48 89 ce             	mov    rsi,rcx
   14192:	48 89 c7             	mov    rdi,rax
   14195:	e8 e2 fc ff ff       	call   13e7c <stbi__zexpand(stbi__zbuf*, char*, int)>
   1419a:	85 c0                	test   eax,eax
   1419c:	0f 94 c0             	sete   al
   1419f:	84 c0                	test   al,al
   141a1:	74 0a                	je     141ad <stbi__parse_huffman_block(stbi__zbuf*)+0x23d>
   141a3:	b8 00 00 00 00       	mov    eax,0x0
   141a8:	e9 a1 00 00 00       	jmp    1424e <stbi__parse_huffman_block(stbi__zbuf*)+0x2de>
   141ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   141b1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   141b5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   141b9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   141bc:	48 98                	cdqe   
   141be:	48 f7 d8             	neg    rax
   141c1:	48 89 c2             	mov    rdx,rax
   141c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   141c8:	48 01 d0             	add    rax,rdx
   141cb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   141cf:	83 7d e8 01          	cmp    DWORD PTR [rbp-0x18],0x1
   141d3:	75 3b                	jne    14210 <stbi__parse_huffman_block(stbi__zbuf*)+0x2a0>
   141d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   141d9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   141dc:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
   141df:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   141e3:	0f 84 9f fd ff ff    	je     13f88 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   141e9:	0f b6 55 e3          	movzx  edx,BYTE PTR [rbp-0x1d]
   141ed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   141f1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   141f5:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
   141f9:	88 10                	mov    BYTE PTR [rax],dl
   141fb:	83 6d e4 01          	sub    DWORD PTR [rbp-0x1c],0x1
   141ff:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14203:	0f 95 c0             	setne  al
   14206:	84 c0                	test   al,al
   14208:	0f 84 7a fd ff ff    	je     13f88 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1420e:	eb d9                	jmp    141e9 <stbi__parse_huffman_block(stbi__zbuf*)+0x279>
   14210:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14214:	0f 84 6e fd ff ff    	je     13f88 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1421a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1421e:	48 8d 50 01          	lea    rdx,[rax+0x1]
   14222:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
   14226:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   14229:	89 c1                	mov    ecx,eax
   1422b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1422f:	48 8d 50 01          	lea    rdx,[rax+0x1]
   14233:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
   14237:	88 08                	mov    BYTE PTR [rax],cl
   14239:	83 6d e4 01          	sub    DWORD PTR [rbp-0x1c],0x1
   1423d:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14241:	0f 95 c0             	setne  al
   14244:	84 c0                	test   al,al
   14246:	0f 84 3c fd ff ff    	je     13f88 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1424c:	eb cc                	jmp    1421a <stbi__parse_huffman_block(stbi__zbuf*)+0x2aa>
   1424e:	c9                   	leave  
   1424f:	c3                   	ret    

0000000000014250 <stbi__compute_huffman_codes(stbi__zbuf*)>:
   14250:	55                   	push   rbp
   14251:	48 89 e5             	mov    rbp,rsp
   14254:	48 81 ec 20 0a 00 00 	sub    rsp,0xa20
   1425b:	48 89 bd e8 f5 ff ff 	mov    QWORD PTR [rbp-0xa18],rdi
   14262:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1426b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1426f:	31 c0                	xor    eax,eax
   14271:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14278:	be 05 00 00 00       	mov    esi,0x5
   1427d:	48 89 c7             	mov    rdi,rax
   14280:	e8 c8 f9 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14285:	05 01 01 00 00       	add    eax,0x101
   1428a:	89 85 0c f6 ff ff    	mov    DWORD PTR [rbp-0x9f4],eax
   14290:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14297:	be 05 00 00 00       	mov    esi,0x5
   1429c:	48 89 c7             	mov    rdi,rax
   1429f:	e8 a9 f9 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   142a4:	83 c0 01             	add    eax,0x1
   142a7:	89 85 10 f6 ff ff    	mov    DWORD PTR [rbp-0x9f0],eax
   142ad:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   142b4:	be 04 00 00 00       	mov    esi,0x4
   142b9:	48 89 c7             	mov    rdi,rax
   142bc:	e8 8c f9 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   142c1:	83 c0 04             	add    eax,0x4
   142c4:	89 85 14 f6 ff ff    	mov    DWORD PTR [rbp-0x9ec],eax
   142ca:	8b 95 0c f6 ff ff    	mov    edx,DWORD PTR [rbp-0x9f4]
   142d0:	8b 85 10 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f0]
   142d6:	01 d0                	add    eax,edx
   142d8:	89 85 18 f6 ff ff    	mov    DWORD PTR [rbp-0x9e8],eax
   142de:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   142e5:	ba 13 00 00 00       	mov    edx,0x13
   142ea:	be 00 00 00 00       	mov    esi,0x0
   142ef:	48 89 c7             	mov    rdi,rax
   142f2:	e8 e9 fe fe ff       	call   41e0 <memset@plt>
   142f7:	c7 85 00 f6 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa00],0x0
   14301:	8b 85 00 f6 ff ff    	mov    eax,DWORD PTR [rbp-0xa00]
   14307:	3b 85 14 f6 ff ff    	cmp    eax,DWORD PTR [rbp-0x9ec]
   1430d:	7d 48                	jge    14357 <stbi__compute_huffman_codes(stbi__zbuf*)+0x107>
   1430f:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14316:	be 03 00 00 00       	mov    esi,0x3
   1431b:	48 89 c7             	mov    rdi,rax
   1431e:	e8 2a f9 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14323:	89 85 1c f6 ff ff    	mov    DWORD PTR [rbp-0x9e4],eax
   14329:	8b 85 00 f6 ff ff    	mov    eax,DWORD PTR [rbp-0xa00]
   1432f:	48 98                	cdqe   
   14331:	48 8d 15 78 66 02 00 	lea    rdx,[rip+0x26678]        # 3a9b0 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag>
   14338:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   1433c:	0f b6 c0             	movzx  eax,al
   1433f:	8b 95 1c f6 ff ff    	mov    edx,DWORD PTR [rbp-0x9e4]
   14345:	48 98                	cdqe   
   14347:	88 94 05 10 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x1f0],dl
   1434e:	83 85 00 f6 ff ff 01 	add    DWORD PTR [rbp-0xa00],0x1
   14355:	eb aa                	jmp    14301 <stbi__compute_huffman_codes(stbi__zbuf*)+0xb1>
   14357:	48 8d 8d 10 fe ff ff 	lea    rcx,[rbp-0x1f0]
   1435e:	48 8d 85 20 f6 ff ff 	lea    rax,[rbp-0x9e0]
   14365:	ba 13 00 00 00       	mov    edx,0x13
   1436a:	48 89 ce             	mov    rsi,rcx
   1436d:	48 89 c7             	mov    rdi,rax
   14370:	e8 29 f4 ff ff       	call   1379e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   14375:	85 c0                	test   eax,eax
   14377:	0f 94 c0             	sete   al
   1437a:	84 c0                	test   al,al
   1437c:	74 0a                	je     14388 <stbi__compute_huffman_codes(stbi__zbuf*)+0x138>
   1437e:	b8 00 00 00 00       	mov    eax,0x0
   14383:	e9 50 02 00 00       	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   14388:	c7 85 04 f6 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9fc],0x0
   14392:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   14398:	3b 85 18 f6 ff ff    	cmp    eax,DWORD PTR [rbp-0x9e8]
   1439e:	0f 8d 9f 01 00 00    	jge    14543 <stbi__compute_huffman_codes(stbi__zbuf*)+0x2f3>
   143a4:	48 8d 95 20 f6 ff ff 	lea    rdx,[rbp-0x9e0]
   143ab:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   143b2:	48 89 d6             	mov    rsi,rdx
   143b5:	48 89 c7             	mov    rdi,rax
   143b8:	e8 22 fa ff ff       	call   13ddf <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>
   143bd:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   143c3:	83 bd 08 f6 ff ff 00 	cmp    DWORD PTR [rbp-0x9f8],0x0
   143ca:	78 09                	js     143d5 <stbi__compute_huffman_codes(stbi__zbuf*)+0x185>
   143cc:	83 bd 08 f6 ff ff 12 	cmp    DWORD PTR [rbp-0x9f8],0x12
   143d3:	7e 11                	jle    143e6 <stbi__compute_huffman_codes(stbi__zbuf*)+0x196>
   143d5:	48 8d 3d e9 62 02 00 	lea    rdi,[rip+0x262e9]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   143dc:	e8 5e 07 ff ff       	call   4b3f <stbi__err(char const*)>
   143e1:	e9 f2 01 00 00       	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   143e6:	83 bd 08 f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x9f8],0xf
   143ed:	7f 22                	jg     14411 <stbi__compute_huffman_codes(stbi__zbuf*)+0x1c1>
   143ef:	8b 85 08 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f8]
   143f5:	89 c1                	mov    ecx,eax
   143f7:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   143fd:	8d 50 01             	lea    edx,[rax+0x1]
   14400:	89 95 04 f6 ff ff    	mov    DWORD PTR [rbp-0x9fc],edx
   14406:	48 98                	cdqe   
   14408:	88 8c 05 30 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x1d0],cl
   1440f:	eb 81                	jmp    14392 <stbi__compute_huffman_codes(stbi__zbuf*)+0x142>
   14411:	c6 85 ff f5 ff ff 00 	mov    BYTE PTR [rbp-0xa01],0x0
   14418:	83 bd 08 f6 ff ff 10 	cmp    DWORD PTR [rbp-0x9f8],0x10
   1441f:	75 52                	jne    14473 <stbi__compute_huffman_codes(stbi__zbuf*)+0x223>
   14421:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14428:	be 02 00 00 00       	mov    esi,0x2
   1442d:	48 89 c7             	mov    rdi,rax
   14430:	e8 18 f8 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14435:	83 c0 03             	add    eax,0x3
   14438:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   1443e:	83 bd 04 f6 ff ff 00 	cmp    DWORD PTR [rbp-0x9fc],0x0
   14445:	75 11                	jne    14458 <stbi__compute_huffman_codes(stbi__zbuf*)+0x208>
   14447:	48 8d 3d 77 62 02 00 	lea    rdi,[rip+0x26277]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   1444e:	e8 ec 06 ff ff       	call   4b3f <stbi__err(char const*)>
   14453:	e9 80 01 00 00       	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   14458:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   1445e:	83 e8 01             	sub    eax,0x1
   14461:	48 98                	cdqe   
   14463:	0f b6 84 05 30 fe ff ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x1d0]
   1446b:	88 85 ff f5 ff ff    	mov    BYTE PTR [rbp-0xa01],al
   14471:	eb 6d                	jmp    144e0 <stbi__compute_huffman_codes(stbi__zbuf*)+0x290>
   14473:	83 bd 08 f6 ff ff 11 	cmp    DWORD PTR [rbp-0x9f8],0x11
   1447a:	75 1f                	jne    1449b <stbi__compute_huffman_codes(stbi__zbuf*)+0x24b>
   1447c:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14483:	be 03 00 00 00       	mov    esi,0x3
   14488:	48 89 c7             	mov    rdi,rax
   1448b:	e8 bd f7 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14490:	83 c0 03             	add    eax,0x3
   14493:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   14499:	eb 45                	jmp    144e0 <stbi__compute_huffman_codes(stbi__zbuf*)+0x290>
   1449b:	83 bd 08 f6 ff ff 12 	cmp    DWORD PTR [rbp-0x9f8],0x12
   144a2:	74 1f                	je     144c3 <stbi__compute_huffman_codes(stbi__zbuf*)+0x273>
   144a4:	48 8d 0d 1d 65 02 00 	lea    rcx,[rip+0x2651d]        # 3a9c8 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x18>
   144ab:	ba 6b 10 00 00       	mov    edx,0x106b
   144b0:	48 8d 35 e1 5b 02 00 	lea    rsi,[rip+0x25be1]        # 3a098 <_IO_stdin_used+0x98>
   144b7:	48 8d 3d 37 65 02 00 	lea    rdi,[rip+0x26537]        # 3a9f5 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x45>
   144be:	e8 bd fd fe ff       	call   4280 <__assert_fail@plt>
   144c3:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   144ca:	be 07 00 00 00       	mov    esi,0x7
   144cf:	48 89 c7             	mov    rdi,rax
   144d2:	e8 76 f7 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   144d7:	83 c0 0b             	add    eax,0xb
   144da:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   144e0:	8b 85 18 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9e8]
   144e6:	2b 85 04 f6 ff ff    	sub    eax,DWORD PTR [rbp-0x9fc]
   144ec:	39 85 08 f6 ff ff    	cmp    DWORD PTR [rbp-0x9f8],eax
   144f2:	7e 11                	jle    14505 <stbi__compute_huffman_codes(stbi__zbuf*)+0x2b5>
   144f4:	48 8d 3d ca 61 02 00 	lea    rdi,[rip+0x261ca]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   144fb:	e8 3f 06 ff ff       	call   4b3f <stbi__err(char const*)>
   14500:	e9 d3 00 00 00       	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   14505:	8b 85 08 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f8]
   1450b:	48 63 d0             	movsxd rdx,eax
   1450e:	0f b6 85 ff f5 ff ff 	movzx  eax,BYTE PTR [rbp-0xa01]
   14515:	8b 8d 04 f6 ff ff    	mov    ecx,DWORD PTR [rbp-0x9fc]
   1451b:	48 63 c9             	movsxd rcx,ecx
   1451e:	48 8d b5 30 fe ff ff 	lea    rsi,[rbp-0x1d0]
   14525:	48 01 f1             	add    rcx,rsi
   14528:	89 c6                	mov    esi,eax
   1452a:	48 89 cf             	mov    rdi,rcx
   1452d:	e8 ae fc fe ff       	call   41e0 <memset@plt>
   14532:	8b 85 08 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f8]
   14538:	01 85 04 f6 ff ff    	add    DWORD PTR [rbp-0x9fc],eax
   1453e:	e9 4f fe ff ff       	jmp    14392 <stbi__compute_huffman_codes(stbi__zbuf*)+0x142>
   14543:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   14549:	3b 85 18 f6 ff ff    	cmp    eax,DWORD PTR [rbp-0x9e8]
   1454f:	74 0e                	je     1455f <stbi__compute_huffman_codes(stbi__zbuf*)+0x30f>
   14551:	48 8d 3d 6d 61 02 00 	lea    rdi,[rip+0x2616d]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   14558:	e8 e2 05 ff ff       	call   4b3f <stbi__err(char const*)>
   1455d:	eb 79                	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   1455f:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14566:	48 8d 48 34          	lea    rcx,[rax+0x34]
   1456a:	8b 95 0c f6 ff ff    	mov    edx,DWORD PTR [rbp-0x9f4]
   14570:	48 8d 85 30 fe ff ff 	lea    rax,[rbp-0x1d0]
   14577:	48 89 c6             	mov    rsi,rax
   1457a:	48 89 cf             	mov    rdi,rcx
   1457d:	e8 1c f2 ff ff       	call   1379e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   14582:	85 c0                	test   eax,eax
   14584:	0f 94 c0             	sete   al
   14587:	84 c0                	test   al,al
   14589:	74 07                	je     14592 <stbi__compute_huffman_codes(stbi__zbuf*)+0x342>
   1458b:	b8 00 00 00 00       	mov    eax,0x0
   14590:	eb 46                	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   14592:	8b 85 0c f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f4]
   14598:	48 98                	cdqe   
   1459a:	48 8d 95 30 fe ff ff 	lea    rdx,[rbp-0x1d0]
   145a1:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   145a5:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   145ac:	48 8d 88 18 08 00 00 	lea    rcx,[rax+0x818]
   145b3:	8b 85 10 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f0]
   145b9:	89 c2                	mov    edx,eax
   145bb:	48 89 cf             	mov    rdi,rcx
   145be:	e8 db f1 ff ff       	call   1379e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   145c3:	85 c0                	test   eax,eax
   145c5:	0f 94 c0             	sete   al
   145c8:	84 c0                	test   al,al
   145ca:	74 07                	je     145d3 <stbi__compute_huffman_codes(stbi__zbuf*)+0x383>
   145cc:	b8 00 00 00 00       	mov    eax,0x0
   145d1:	eb 05                	jmp    145d8 <stbi__compute_huffman_codes(stbi__zbuf*)+0x388>
   145d3:	b8 01 00 00 00       	mov    eax,0x1
   145d8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   145dc:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   145e5:	74 05                	je     145ec <stbi__compute_huffman_codes(stbi__zbuf*)+0x39c>
   145e7:	e8 c4 fe fe ff       	call   44b0 <__stack_chk_fail@plt>
   145ec:	c9                   	leave  
   145ed:	c3                   	ret    

00000000000145ee <stbi__parse_uncompressed_block(stbi__zbuf*)>:
   145ee:	55                   	push   rbp
   145ef:	48 89 e5             	mov    rbp,rsp
   145f2:	48 83 ec 30          	sub    rsp,0x30
   145f6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   145fa:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14603:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14607:	31 c0                	xor    eax,eax
   14609:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1460d:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   14610:	83 e0 07             	and    eax,0x7
   14613:	85 c0                	test   eax,eax
   14615:	74 1a                	je     14631 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x43>
   14617:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1461b:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   1461e:	83 e0 07             	and    eax,0x7
   14621:	89 c2                	mov    edx,eax
   14623:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14627:	89 d6                	mov    esi,edx
   14629:	48 89 c7             	mov    rdi,rax
   1462c:	e8 1c f6 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14631:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   14638:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1463c:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   1463f:	85 c0                	test   eax,eax
   14641:	7e 3e                	jle    14681 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x93>
   14643:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14647:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   1464a:	89 c1                	mov    ecx,eax
   1464c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1464f:	8d 50 01             	lea    edx,[rax+0x1]
   14652:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
   14655:	48 98                	cdqe   
   14657:	88 4c 05 f4          	mov    BYTE PTR [rbp+rax*1-0xc],cl
   1465b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1465f:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   14662:	c1 e8 08             	shr    eax,0x8
   14665:	89 c2                	mov    edx,eax
   14667:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1466b:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   1466e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14672:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   14675:	8d 50 f8             	lea    edx,[rax-0x8]
   14678:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1467c:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   1467f:	eb b7                	jmp    14638 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x4a>
   14681:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14685:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   14688:	85 c0                	test   eax,eax
   1468a:	74 1f                	je     146ab <stbi__parse_uncompressed_block(stbi__zbuf*)+0xbd>
   1468c:	48 8d 0d 6d 63 02 00 	lea    rcx,[rip+0x2636d]        # 3aa00 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x50>
   14693:	ba 86 10 00 00       	mov    edx,0x1086
   14698:	48 8d 35 f9 59 02 00 	lea    rsi,[rip+0x259f9]        # 3a098 <_IO_stdin_used+0x98>
   1469f:	48 8d 3d 8a 63 02 00 	lea    rdi,[rip+0x2638a]        # 3aa30 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x80>
   146a6:	e8 d5 fb fe ff       	call   4280 <__assert_fail@plt>
   146ab:	83 7d e8 03          	cmp    DWORD PTR [rbp-0x18],0x3
   146af:	7f 1f                	jg     146d0 <stbi__parse_uncompressed_block(stbi__zbuf*)+0xe2>
   146b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   146b5:	48 89 c7             	mov    rdi,rax
   146b8:	e8 c7 f4 ff ff       	call   13b84 <stbi__zget8(stbi__zbuf*)>
   146bd:	89 c2                	mov    edx,eax
   146bf:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   146c2:	8d 48 01             	lea    ecx,[rax+0x1]
   146c5:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   146c8:	48 98                	cdqe   
   146ca:	88 54 05 f4          	mov    BYTE PTR [rbp+rax*1-0xc],dl
   146ce:	eb db                	jmp    146ab <stbi__parse_uncompressed_block(stbi__zbuf*)+0xbd>
   146d0:	0f b6 45 f5          	movzx  eax,BYTE PTR [rbp-0xb]
   146d4:	0f b6 c0             	movzx  eax,al
   146d7:	c1 e0 08             	shl    eax,0x8
   146da:	89 c2                	mov    edx,eax
   146dc:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
   146e0:	0f b6 c0             	movzx  eax,al
   146e3:	01 d0                	add    eax,edx
   146e5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   146e8:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
   146ec:	0f b6 c0             	movzx  eax,al
   146ef:	c1 e0 08             	shl    eax,0x8
   146f2:	89 c2                	mov    edx,eax
   146f4:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
   146f8:	0f b6 c0             	movzx  eax,al
   146fb:	01 d0                	add    eax,edx
   146fd:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   14700:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14703:	35 ff ff 00 00       	xor    eax,0xffff
   14708:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   1470b:	74 11                	je     1471e <stbi__parse_uncompressed_block(stbi__zbuf*)+0x130>
   1470d:	48 8d 3d 2d 63 02 00 	lea    rdi,[rip+0x2632d]        # 3aa41 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x91>
   14714:	e8 26 04 ff ff       	call   4b3f <stbi__err(char const*)>
   14719:	e9 c7 00 00 00       	jmp    147e5 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1f7>
   1471e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14722:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   14725:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14728:	48 98                	cdqe   
   1472a:	48 01 c2             	add    rdx,rax
   1472d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14731:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   14735:	48 39 c2             	cmp    rdx,rax
   14738:	76 11                	jbe    1474b <stbi__parse_uncompressed_block(stbi__zbuf*)+0x15d>
   1473a:	48 8d 3d 0d 63 02 00 	lea    rdi,[rip+0x2630d]        # 3aa4e <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x9e>
   14741:	e8 f9 03 ff ff       	call   4b3f <stbi__err(char const*)>
   14746:	e9 9a 00 00 00       	jmp    147e5 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1f7>
   1474b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1474f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   14753:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14756:	48 98                	cdqe   
   14758:	48 01 c2             	add    rdx,rax
   1475b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1475f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   14763:	48 39 c2             	cmp    rdx,rax
   14766:	76 2a                	jbe    14792 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1a4>
   14768:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1476c:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   14770:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   14773:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14777:	48 89 ce             	mov    rsi,rcx
   1477a:	48 89 c7             	mov    rdi,rax
   1477d:	e8 fa f6 ff ff       	call   13e7c <stbi__zexpand(stbi__zbuf*, char*, int)>
   14782:	85 c0                	test   eax,eax
   14784:	0f 94 c0             	sete   al
   14787:	84 c0                	test   al,al
   14789:	74 07                	je     14792 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1a4>
   1478b:	b8 00 00 00 00       	mov    eax,0x0
   14790:	eb 53                	jmp    147e5 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1f7>
   14792:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14795:	48 63 d0             	movsxd rdx,eax
   14798:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1479c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   1479f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147a3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   147a7:	48 89 ce             	mov    rsi,rcx
   147aa:	48 89 c7             	mov    rdi,rax
   147ad:	e8 9e fb fe ff       	call   4350 <memcpy@plt>
   147b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147b6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   147b9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   147bc:	48 98                	cdqe   
   147be:	48 01 c2             	add    rdx,rax
   147c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147c5:	48 89 10             	mov    QWORD PTR [rax],rdx
   147c8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147cc:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   147d0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   147d3:	48 98                	cdqe   
   147d5:	48 01 c2             	add    rdx,rax
   147d8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147dc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   147e0:	b8 01 00 00 00       	mov    eax,0x1
   147e5:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   147e9:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
   147f2:	74 05                	je     147f9 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x20b>
   147f4:	e8 b7 fc fe ff       	call   44b0 <__stack_chk_fail@plt>
   147f9:	c9                   	leave  
   147fa:	c3                   	ret    

00000000000147fb <stbi__parse_zlib_header(stbi__zbuf*)>:
   147fb:	55                   	push   rbp
   147fc:	48 89 e5             	mov    rbp,rsp
   147ff:	48 83 ec 18          	sub    rsp,0x18
   14803:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   14807:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1480b:	48 89 c7             	mov    rdi,rax
   1480e:	e8 71 f3 ff ff       	call   13b84 <stbi__zget8(stbi__zbuf*)>
   14813:	0f b6 c0             	movzx  eax,al
   14816:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   14819:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1481c:	83 e0 0f             	and    eax,0xf
   1481f:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   14822:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14826:	48 89 c7             	mov    rdi,rax
   14829:	e8 56 f3 ff ff       	call   13b84 <stbi__zget8(stbi__zbuf*)>
   1482e:	0f b6 c0             	movzx  eax,al
   14831:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   14834:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   14837:	c1 e0 08             	shl    eax,0x8
   1483a:	89 c2                	mov    edx,eax
   1483c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1483f:	01 c2                	add    edx,eax
   14841:	48 63 c2             	movsxd rax,edx
   14844:	48 69 c0 43 08 21 84 	imul   rax,rax,0xffffffff84210843
   1484b:	48 c1 e8 20          	shr    rax,0x20
   1484f:	01 d0                	add    eax,edx
   14851:	c1 f8 04             	sar    eax,0x4
   14854:	89 d1                	mov    ecx,edx
   14856:	c1 f9 1f             	sar    ecx,0x1f
   14859:	29 c8                	sub    eax,ecx
   1485b:	89 c1                	mov    ecx,eax
   1485d:	c1 e1 05             	shl    ecx,0x5
   14860:	29 c1                	sub    ecx,eax
   14862:	89 d0                	mov    eax,edx
   14864:	29 c8                	sub    eax,ecx
   14866:	85 c0                	test   eax,eax
   14868:	74 0e                	je     14878 <stbi__parse_zlib_header(stbi__zbuf*)+0x7d>
   1486a:	48 8d 3d ee 61 02 00 	lea    rdi,[rip+0x261ee]        # 3aa5f <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xaf>
   14871:	e8 c9 02 ff ff       	call   4b3f <stbi__err(char const*)>
   14876:	eb 31                	jmp    148a9 <stbi__parse_zlib_header(stbi__zbuf*)+0xae>
   14878:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1487b:	83 e0 20             	and    eax,0x20
   1487e:	85 c0                	test   eax,eax
   14880:	74 0e                	je     14890 <stbi__parse_zlib_header(stbi__zbuf*)+0x95>
   14882:	48 8d 3d e6 61 02 00 	lea    rdi,[rip+0x261e6]        # 3aa6f <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xbf>
   14889:	e8 b1 02 ff ff       	call   4b3f <stbi__err(char const*)>
   1488e:	eb 19                	jmp    148a9 <stbi__parse_zlib_header(stbi__zbuf*)+0xae>
   14890:	83 7d f8 08          	cmp    DWORD PTR [rbp-0x8],0x8
   14894:	74 0e                	je     148a4 <stbi__parse_zlib_header(stbi__zbuf*)+0xa9>
   14896:	48 8d 3d e1 61 02 00 	lea    rdi,[rip+0x261e1]        # 3aa7e <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xce>
   1489d:	e8 9d 02 ff ff       	call   4b3f <stbi__err(char const*)>
   148a2:	eb 05                	jmp    148a9 <stbi__parse_zlib_header(stbi__zbuf*)+0xae>
   148a4:	b8 01 00 00 00       	mov    eax,0x1
   148a9:	c9                   	leave  
   148aa:	c3                   	ret    

00000000000148ab <stbi__parse_zlib(stbi__zbuf*, int)>:
   148ab:	55                   	push   rbp
   148ac:	48 89 e5             	mov    rbp,rsp
   148af:	48 83 ec 20          	sub    rsp,0x20
   148b3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   148b7:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   148ba:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   148be:	74 1f                	je     148df <stbi__parse_zlib(stbi__zbuf*, int)+0x34>
   148c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   148c4:	48 89 c7             	mov    rdi,rax
   148c7:	e8 2f ff ff ff       	call   147fb <stbi__parse_zlib_header(stbi__zbuf*)>
   148cc:	85 c0                	test   eax,eax
   148ce:	0f 94 c0             	sete   al
   148d1:	84 c0                	test   al,al
   148d3:	74 0a                	je     148df <stbi__parse_zlib(stbi__zbuf*, int)+0x34>
   148d5:	b8 00 00 00 00       	mov    eax,0x0
   148da:	e9 1f 01 00 00       	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   148df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   148e3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
   148ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   148ee:	c7 40 14 00 00 00 00 	mov    DWORD PTR [rax+0x14],0x0
   148f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   148f9:	be 01 00 00 00       	mov    esi,0x1
   148fe:	48 89 c7             	mov    rdi,rax
   14901:	e8 47 f3 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   14906:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   14909:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1490d:	be 02 00 00 00       	mov    esi,0x2
   14912:	48 89 c7             	mov    rdi,rax
   14915:	e8 33 f3 ff ff       	call   13c4d <stbi__zreceive(stbi__zbuf*, int)>
   1491a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1491d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   14921:	75 23                	jne    14946 <stbi__parse_zlib(stbi__zbuf*, int)+0x9b>
   14923:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14927:	48 89 c7             	mov    rdi,rax
   1492a:	e8 bf fc ff ff       	call   145ee <stbi__parse_uncompressed_block(stbi__zbuf*)>
   1492f:	85 c0                	test   eax,eax
   14931:	0f 94 c0             	sete   al
   14934:	84 c0                	test   al,al
   14936:	0f 84 b2 00 00 00    	je     149ee <stbi__parse_zlib(stbi__zbuf*, int)+0x143>
   1493c:	b8 00 00 00 00       	mov    eax,0x0
   14941:	e9 b8 00 00 00       	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   14946:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   1494a:	75 0a                	jne    14956 <stbi__parse_zlib(stbi__zbuf*, int)+0xab>
   1494c:	b8 00 00 00 00       	mov    eax,0x0
   14951:	e9 a8 00 00 00       	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   14956:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   1495a:	75 5a                	jne    149b6 <stbi__parse_zlib(stbi__zbuf*, int)+0x10b>
   1495c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14960:	48 83 c0 34          	add    rax,0x34
   14964:	ba 20 01 00 00       	mov    edx,0x120
   14969:	48 8d 35 30 61 02 00 	lea    rsi,[rip+0x26130]        # 3aaa0 <stbi__zdefault_length>
   14970:	48 89 c7             	mov    rdi,rax
   14973:	e8 26 ee ff ff       	call   1379e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   14978:	85 c0                	test   eax,eax
   1497a:	0f 94 c0             	sete   al
   1497d:	84 c0                	test   al,al
   1497f:	74 07                	je     14988 <stbi__parse_zlib(stbi__zbuf*, int)+0xdd>
   14981:	b8 00 00 00 00       	mov    eax,0x0
   14986:	eb 76                	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   14988:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1498c:	48 05 18 08 00 00    	add    rax,0x818
   14992:	ba 20 00 00 00       	mov    edx,0x20
   14997:	48 8d 35 22 62 02 00 	lea    rsi,[rip+0x26222]        # 3abc0 <stbi__zdefault_distance>
   1499e:	48 89 c7             	mov    rdi,rax
   149a1:	e8 f8 ed ff ff       	call   1379e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   149a6:	85 c0                	test   eax,eax
   149a8:	0f 94 c0             	sete   al
   149ab:	84 c0                	test   al,al
   149ad:	74 23                	je     149d2 <stbi__parse_zlib(stbi__zbuf*, int)+0x127>
   149af:	b8 00 00 00 00       	mov    eax,0x0
   149b4:	eb 48                	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   149b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   149ba:	48 89 c7             	mov    rdi,rax
   149bd:	e8 8e f8 ff ff       	call   14250 <stbi__compute_huffman_codes(stbi__zbuf*)>
   149c2:	85 c0                	test   eax,eax
   149c4:	0f 94 c0             	sete   al
   149c7:	84 c0                	test   al,al
   149c9:	74 07                	je     149d2 <stbi__parse_zlib(stbi__zbuf*, int)+0x127>
   149cb:	b8 00 00 00 00       	mov    eax,0x0
   149d0:	eb 2c                	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   149d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   149d6:	48 89 c7             	mov    rdi,rax
   149d9:	e8 92 f5 ff ff       	call   13f70 <stbi__parse_huffman_block(stbi__zbuf*)>
   149de:	85 c0                	test   eax,eax
   149e0:	0f 94 c0             	sete   al
   149e3:	84 c0                	test   al,al
   149e5:	74 07                	je     149ee <stbi__parse_zlib(stbi__zbuf*, int)+0x143>
   149e7:	b8 00 00 00 00       	mov    eax,0x0
   149ec:	eb 10                	jmp    149fe <stbi__parse_zlib(stbi__zbuf*, int)+0x153>
   149ee:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   149f2:	75 05                	jne    149f9 <stbi__parse_zlib(stbi__zbuf*, int)+0x14e>
   149f4:	e9 fc fe ff ff       	jmp    148f5 <stbi__parse_zlib(stbi__zbuf*, int)+0x4a>
   149f9:	b8 01 00 00 00       	mov    eax,0x1
   149fe:	c9                   	leave  
   149ff:	c3                   	ret    

0000000000014a00 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>:
   14a00:	55                   	push   rbp
   14a01:	48 89 e5             	mov    rbp,rsp
   14a04:	48 83 ec 20          	sub    rsp,0x20
   14a08:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   14a0c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   14a10:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   14a13:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   14a16:	44 89 45 e4          	mov    DWORD PTR [rbp-0x1c],r8d
   14a1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14a1e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   14a22:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
   14a26:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14a2a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   14a2e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   14a32:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14a35:	48 63 d0             	movsxd rdx,eax
   14a38:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14a3c:	48 01 c2             	add    rdx,rax
   14a3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14a43:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
   14a47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14a4b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   14a4e:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   14a51:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   14a54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14a58:	89 d6                	mov    esi,edx
   14a5a:	48 89 c7             	mov    rdi,rax
   14a5d:	e8 49 fe ff ff       	call   148ab <stbi__parse_zlib(stbi__zbuf*, int)>
   14a62:	c9                   	leave  
   14a63:	c3                   	ret    

0000000000014a64 <stbi_zlib_decode_malloc_guesssize>:
   14a64:	55                   	push   rbp
   14a65:	48 89 e5             	mov    rbp,rsp
   14a68:	48 81 ec 40 10 00 00 	sub    rsp,0x1040
   14a6f:	48 89 bd d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdi
   14a76:	89 b5 d4 ef ff ff    	mov    DWORD PTR [rbp-0x102c],esi
   14a7c:	89 95 d0 ef ff ff    	mov    DWORD PTR [rbp-0x1030],edx
   14a82:	48 89 8d c8 ef ff ff 	mov    QWORD PTR [rbp-0x1038],rcx
   14a89:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14a92:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14a96:	31 c0                	xor    eax,eax
   14a98:	8b 85 d0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1030]
   14a9e:	48 98                	cdqe   
   14aa0:	48 89 c7             	mov    rdi,rax
   14aa3:	e8 b3 00 ff ff       	call   4b5b <stbi__malloc(unsigned long)>
   14aa8:	48 89 85 e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rax
   14aaf:	48 83 bd e8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1018],0x0
   14ab7:	75 0a                	jne    14ac3 <stbi_zlib_decode_malloc_guesssize+0x5f>
   14ab9:	b8 00 00 00 00       	mov    eax,0x0
   14abe:	e9 9b 00 00 00       	jmp    14b5e <stbi_zlib_decode_malloc_guesssize+0xfa>
   14ac3:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14aca:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14ad1:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [rbp-0x102c]
   14ad7:	48 63 d0             	movsxd rdx,eax
   14ada:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14ae1:	48 01 d0             	add    rax,rdx
   14ae4:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14aeb:	8b 95 d0 ef ff ff    	mov    edx,DWORD PTR [rbp-0x1030]
   14af1:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14af8:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14aff:	41 b8 01 00 00 00    	mov    r8d,0x1
   14b05:	b9 01 00 00 00       	mov    ecx,0x1
   14b0a:	48 89 c7             	mov    rdi,rax
   14b0d:	e8 ee fe ff ff       	call   14a00 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14b12:	85 c0                	test   eax,eax
   14b14:	0f 95 c0             	setne  al
   14b17:	84 c0                	test   al,al
   14b19:	74 2f                	je     14b4a <stbi_zlib_decode_malloc_guesssize+0xe6>
   14b1b:	48 83 bd c8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1038],0x0
   14b23:	74 1c                	je     14b41 <stbi_zlib_decode_malloc_guesssize+0xdd>
   14b25:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14b2c:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14b33:	48 29 d0             	sub    rax,rdx
   14b36:	89 c2                	mov    edx,eax
   14b38:	48 8b 85 c8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1038]
   14b3f:	89 10                	mov    DWORD PTR [rax],edx
   14b41:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14b48:	eb 14                	jmp    14b5e <stbi_zlib_decode_malloc_guesssize+0xfa>
   14b4a:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14b51:	48 89 c7             	mov    rdi,rax
   14b54:	e8 a7 f9 fe ff       	call   4500 <free@plt>
   14b59:	b8 00 00 00 00       	mov    eax,0x0
   14b5e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   14b62:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   14b6b:	74 05                	je     14b72 <stbi_zlib_decode_malloc_guesssize+0x10e>
   14b6d:	e8 3e f9 fe ff       	call   44b0 <__stack_chk_fail@plt>
   14b72:	c9                   	leave  
   14b73:	c3                   	ret    

0000000000014b74 <stbi_zlib_decode_malloc>:
   14b74:	55                   	push   rbp
   14b75:	48 89 e5             	mov    rbp,rsp
   14b78:	48 83 ec 20          	sub    rsp,0x20
   14b7c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   14b80:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   14b83:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   14b87:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   14b8b:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
   14b8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14b92:	48 89 d1             	mov    rcx,rdx
   14b95:	ba 00 40 00 00       	mov    edx,0x4000
   14b9a:	48 89 c7             	mov    rdi,rax
   14b9d:	e8 c2 fe ff ff       	call   14a64 <stbi_zlib_decode_malloc_guesssize>
   14ba2:	c9                   	leave  
   14ba3:	c3                   	ret    

0000000000014ba4 <stbi_zlib_decode_malloc_guesssize_headerflag>:
   14ba4:	55                   	push   rbp
   14ba5:	48 89 e5             	mov    rbp,rsp
   14ba8:	48 81 ec 40 10 00 00 	sub    rsp,0x1040
   14baf:	48 89 bd d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdi
   14bb6:	89 b5 d4 ef ff ff    	mov    DWORD PTR [rbp-0x102c],esi
   14bbc:	89 95 d0 ef ff ff    	mov    DWORD PTR [rbp-0x1030],edx
   14bc2:	48 89 8d c8 ef ff ff 	mov    QWORD PTR [rbp-0x1038],rcx
   14bc9:	44 89 85 c4 ef ff ff 	mov    DWORD PTR [rbp-0x103c],r8d
   14bd0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14bd9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14bdd:	31 c0                	xor    eax,eax
   14bdf:	8b 85 d0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1030]
   14be5:	48 98                	cdqe   
   14be7:	48 89 c7             	mov    rdi,rax
   14bea:	e8 6c ff fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   14bef:	48 89 85 e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rax
   14bf6:	48 83 bd e8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1018],0x0
   14bfe:	75 0a                	jne    14c0a <stbi_zlib_decode_malloc_guesssize_headerflag+0x66>
   14c00:	b8 00 00 00 00       	mov    eax,0x0
   14c05:	e9 9e 00 00 00       	jmp    14ca8 <stbi_zlib_decode_malloc_guesssize_headerflag+0x104>
   14c0a:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14c11:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14c18:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [rbp-0x102c]
   14c1e:	48 63 d0             	movsxd rdx,eax
   14c21:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14c28:	48 01 d0             	add    rax,rdx
   14c2b:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14c32:	8b 8d c4 ef ff ff    	mov    ecx,DWORD PTR [rbp-0x103c]
   14c38:	8b 95 d0 ef ff ff    	mov    edx,DWORD PTR [rbp-0x1030]
   14c3e:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14c45:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14c4c:	41 89 c8             	mov    r8d,ecx
   14c4f:	b9 01 00 00 00       	mov    ecx,0x1
   14c54:	48 89 c7             	mov    rdi,rax
   14c57:	e8 a4 fd ff ff       	call   14a00 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14c5c:	85 c0                	test   eax,eax
   14c5e:	0f 95 c0             	setne  al
   14c61:	84 c0                	test   al,al
   14c63:	74 2f                	je     14c94 <stbi_zlib_decode_malloc_guesssize_headerflag+0xf0>
   14c65:	48 83 bd c8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1038],0x0
   14c6d:	74 1c                	je     14c8b <stbi_zlib_decode_malloc_guesssize_headerflag+0xe7>
   14c6f:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14c76:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14c7d:	48 29 d0             	sub    rax,rdx
   14c80:	89 c2                	mov    edx,eax
   14c82:	48 8b 85 c8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1038]
   14c89:	89 10                	mov    DWORD PTR [rax],edx
   14c8b:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14c92:	eb 14                	jmp    14ca8 <stbi_zlib_decode_malloc_guesssize_headerflag+0x104>
   14c94:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14c9b:	48 89 c7             	mov    rdi,rax
   14c9e:	e8 5d f8 fe ff       	call   4500 <free@plt>
   14ca3:	b8 00 00 00 00       	mov    eax,0x0
   14ca8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   14cac:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   14cb5:	74 05                	je     14cbc <stbi_zlib_decode_malloc_guesssize_headerflag+0x118>
   14cb7:	e8 f4 f7 fe ff       	call   44b0 <__stack_chk_fail@plt>
   14cbc:	c9                   	leave  
   14cbd:	c3                   	ret    

0000000000014cbe <stbi_zlib_decode_buffer>:
   14cbe:	55                   	push   rbp
   14cbf:	48 89 e5             	mov    rbp,rsp
   14cc2:	48 81 ec 30 10 00 00 	sub    rsp,0x1030
   14cc9:	48 89 bd e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rdi
   14cd0:	89 b5 e4 ef ff ff    	mov    DWORD PTR [rbp-0x101c],esi
   14cd6:	48 89 95 d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdx
   14cdd:	89 8d e0 ef ff ff    	mov    DWORD PTR [rbp-0x1020],ecx
   14ce3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14cec:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14cf0:	31 c0                	xor    eax,eax
   14cf2:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14cf9:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14d00:	8b 85 e0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1020]
   14d06:	48 63 d0             	movsxd rdx,eax
   14d09:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14d10:	48 01 d0             	add    rax,rdx
   14d13:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14d1a:	8b 95 e4 ef ff ff    	mov    edx,DWORD PTR [rbp-0x101c]
   14d20:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14d27:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14d2e:	41 b8 01 00 00 00    	mov    r8d,0x1
   14d34:	b9 00 00 00 00       	mov    ecx,0x0
   14d39:	48 89 c7             	mov    rdi,rax
   14d3c:	e8 bf fc ff ff       	call   14a00 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14d41:	85 c0                	test   eax,eax
   14d43:	0f 95 c0             	setne  al
   14d46:	84 c0                	test   al,al
   14d48:	74 13                	je     14d5d <stbi_zlib_decode_buffer+0x9f>
   14d4a:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14d51:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14d58:	48 29 d0             	sub    rax,rdx
   14d5b:	eb 05                	jmp    14d62 <stbi_zlib_decode_buffer+0xa4>
   14d5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   14d62:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   14d66:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   14d6f:	74 05                	je     14d76 <stbi_zlib_decode_buffer+0xb8>
   14d71:	e8 3a f7 fe ff       	call   44b0 <__stack_chk_fail@plt>
   14d76:	c9                   	leave  
   14d77:	c3                   	ret    

0000000000014d78 <stbi_zlib_decode_noheader_malloc>:
   14d78:	55                   	push   rbp
   14d79:	48 89 e5             	mov    rbp,rsp
   14d7c:	48 81 ec 40 10 00 00 	sub    rsp,0x1040
   14d83:	48 89 bd d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdi
   14d8a:	89 b5 d4 ef ff ff    	mov    DWORD PTR [rbp-0x102c],esi
   14d90:	48 89 95 c8 ef ff ff 	mov    QWORD PTR [rbp-0x1038],rdx
   14d97:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14da0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14da4:	31 c0                	xor    eax,eax
   14da6:	bf 00 40 00 00       	mov    edi,0x4000
   14dab:	e8 ab fd fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   14db0:	48 89 85 e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rax
   14db7:	48 83 bd e8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1018],0x0
   14dbf:	75 0a                	jne    14dcb <stbi_zlib_decode_noheader_malloc+0x53>
   14dc1:	b8 00 00 00 00       	mov    eax,0x0
   14dc6:	e9 9a 00 00 00       	jmp    14e65 <stbi_zlib_decode_noheader_malloc+0xed>
   14dcb:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14dd2:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14dd9:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [rbp-0x102c]
   14ddf:	48 63 d0             	movsxd rdx,eax
   14de2:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14de9:	48 01 d0             	add    rax,rdx
   14dec:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14df3:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14dfa:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14e01:	41 b8 00 00 00 00    	mov    r8d,0x0
   14e07:	b9 01 00 00 00       	mov    ecx,0x1
   14e0c:	ba 00 40 00 00       	mov    edx,0x4000
   14e11:	48 89 c7             	mov    rdi,rax
   14e14:	e8 e7 fb ff ff       	call   14a00 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14e19:	85 c0                	test   eax,eax
   14e1b:	0f 95 c0             	setne  al
   14e1e:	84 c0                	test   al,al
   14e20:	74 2f                	je     14e51 <stbi_zlib_decode_noheader_malloc+0xd9>
   14e22:	48 83 bd c8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1038],0x0
   14e2a:	74 1c                	je     14e48 <stbi_zlib_decode_noheader_malloc+0xd0>
   14e2c:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14e33:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14e3a:	48 29 d0             	sub    rax,rdx
   14e3d:	89 c2                	mov    edx,eax
   14e3f:	48 8b 85 c8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1038]
   14e46:	89 10                	mov    DWORD PTR [rax],edx
   14e48:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14e4f:	eb 14                	jmp    14e65 <stbi_zlib_decode_noheader_malloc+0xed>
   14e51:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14e58:	48 89 c7             	mov    rdi,rax
   14e5b:	e8 a0 f6 fe ff       	call   4500 <free@plt>
   14e60:	b8 00 00 00 00       	mov    eax,0x0
   14e65:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   14e69:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   14e72:	74 05                	je     14e79 <stbi_zlib_decode_noheader_malloc+0x101>
   14e74:	e8 37 f6 fe ff       	call   44b0 <__stack_chk_fail@plt>
   14e79:	c9                   	leave  
   14e7a:	c3                   	ret    

0000000000014e7b <stbi_zlib_decode_noheader_buffer>:
   14e7b:	55                   	push   rbp
   14e7c:	48 89 e5             	mov    rbp,rsp
   14e7f:	48 81 ec 30 10 00 00 	sub    rsp,0x1030
   14e86:	48 89 bd e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rdi
   14e8d:	89 b5 e4 ef ff ff    	mov    DWORD PTR [rbp-0x101c],esi
   14e93:	48 89 95 d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdx
   14e9a:	89 8d e0 ef ff ff    	mov    DWORD PTR [rbp-0x1020],ecx
   14ea0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14ea9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14ead:	31 c0                	xor    eax,eax
   14eaf:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14eb6:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14ebd:	8b 85 e0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1020]
   14ec3:	48 63 d0             	movsxd rdx,eax
   14ec6:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14ecd:	48 01 d0             	add    rax,rdx
   14ed0:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14ed7:	8b 95 e4 ef ff ff    	mov    edx,DWORD PTR [rbp-0x101c]
   14edd:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14ee4:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14eeb:	41 b8 00 00 00 00    	mov    r8d,0x0
   14ef1:	b9 00 00 00 00       	mov    ecx,0x0
   14ef6:	48 89 c7             	mov    rdi,rax
   14ef9:	e8 02 fb ff ff       	call   14a00 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14efe:	85 c0                	test   eax,eax
   14f00:	0f 95 c0             	setne  al
   14f03:	84 c0                	test   al,al
   14f05:	74 13                	je     14f1a <stbi_zlib_decode_noheader_buffer+0x9f>
   14f07:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14f0e:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14f15:	48 29 d0             	sub    rax,rdx
   14f18:	eb 05                	jmp    14f1f <stbi_zlib_decode_noheader_buffer+0xa4>
   14f1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   14f1f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   14f23:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   14f2c:	74 05                	je     14f33 <stbi_zlib_decode_noheader_buffer+0xb8>
   14f2e:	e8 7d f5 fe ff       	call   44b0 <__stack_chk_fail@plt>
   14f33:	c9                   	leave  
   14f34:	c3                   	ret    

0000000000014f35 <stbi__get_chunk_header(stbi__context*)>:
   14f35:	55                   	push   rbp
   14f36:	48 89 e5             	mov    rbp,rsp
   14f39:	48 83 ec 20          	sub    rsp,0x20
   14f3d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   14f41:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14f4a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14f4e:	31 c0                	xor    eax,eax
   14f50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14f54:	48 89 c7             	mov    rdi,rax
   14f57:	e8 74 18 ff ff       	call   67d0 <stbi__get32be(stbi__context*)>
   14f5c:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   14f5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14f63:	48 89 c7             	mov    rdi,rax
   14f66:	e8 65 18 ff ff       	call   67d0 <stbi__get32be(stbi__context*)>
   14f6b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   14f6e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14f72:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14f76:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   14f7f:	74 05                	je     14f86 <stbi__get_chunk_header(stbi__context*)+0x51>
   14f81:	e8 2a f5 fe ff       	call   44b0 <__stack_chk_fail@plt>
   14f86:	c9                   	leave  
   14f87:	c3                   	ret    

0000000000014f88 <stbi__check_png_header(stbi__context*)>:
   14f88:	55                   	push   rbp
   14f89:	48 89 e5             	mov    rbp,rsp
   14f8c:	48 83 ec 20          	sub    rsp,0x20
   14f90:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   14f94:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   14f9b:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
   14f9f:	7f 3a                	jg     14fdb <stbi__check_png_header(stbi__context*)+0x53>
   14fa1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14fa5:	48 89 c7             	mov    rdi,rax
   14fa8:	e8 02 15 ff ff       	call   64af <stbi__get8(stbi__context*)>
   14fad:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   14fb0:	48 63 d2             	movsxd rdx,edx
   14fb3:	48 8d 0d 26 5c 02 00 	lea    rcx,[rip+0x25c26]        # 3abe0 <stbi__check_png_header(stbi__context*)::png_sig>
   14fba:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
   14fbe:	38 d0                	cmp    al,dl
   14fc0:	0f 95 c0             	setne  al
   14fc3:	84 c0                	test   al,al
   14fc5:	74 0e                	je     14fd5 <stbi__check_png_header(stbi__context*)+0x4d>
   14fc7:	48 8d 3d 1a 5c 02 00 	lea    rdi,[rip+0x25c1a]        # 3abe8 <stbi__check_png_header(stbi__context*)::png_sig+0x8>
   14fce:	e8 6c fb fe ff       	call   4b3f <stbi__err(char const*)>
   14fd3:	eb 0b                	jmp    14fe0 <stbi__check_png_header(stbi__context*)+0x58>
   14fd5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   14fd9:	eb c0                	jmp    14f9b <stbi__check_png_header(stbi__context*)+0x13>
   14fdb:	b8 01 00 00 00       	mov    eax,0x1
   14fe0:	c9                   	leave  
   14fe1:	c3                   	ret    

0000000000014fe2 <stbi__paeth(int, int, int)>:
   14fe2:	55                   	push   rbp
   14fe3:	48 89 e5             	mov    rbp,rsp
   14fe6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   14fe9:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   14fec:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   14fef:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   14ff2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   14ff5:	01 d0                	add    eax,edx
   14ff7:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   14ffa:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   14ffd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   15000:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
   15003:	99                   	cdq    
   15004:	31 d0                	xor    eax,edx
   15006:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   15009:	29 55 f4             	sub    DWORD PTR [rbp-0xc],edx
   1500c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1500f:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
   15012:	99                   	cdq    
   15013:	31 d0                	xor    eax,edx
   15015:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   15018:	29 55 f8             	sub    DWORD PTR [rbp-0x8],edx
   1501b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1501e:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   15021:	99                   	cdq    
   15022:	31 d0                	xor    eax,edx
   15024:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   15027:	29 55 fc             	sub    DWORD PTR [rbp-0x4],edx
   1502a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1502d:	3b 45 f8             	cmp    eax,DWORD PTR [rbp-0x8]
   15030:	7f 0d                	jg     1503f <stbi__paeth(int, int, int)+0x5d>
   15032:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   15035:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   15038:	7f 05                	jg     1503f <stbi__paeth(int, int, int)+0x5d>
   1503a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1503d:	eb 10                	jmp    1504f <stbi__paeth(int, int, int)+0x6d>
   1503f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   15042:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   15045:	7f 05                	jg     1504c <stbi__paeth(int, int, int)+0x6a>
   15047:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1504a:	eb 03                	jmp    1504f <stbi__paeth(int, int, int)+0x6d>
   1504c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1504f:	5d                   	pop    rbp
   15050:	c3                   	ret    

0000000000015051 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)>:
   15051:	55                   	push   rbp
   15052:	48 89 e5             	mov    rbp,rsp
   15055:	53                   	push   rbx
   15056:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
   1505d:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
   15064:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
   1506b:	89 95 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],edx
   15071:	89 8d 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],ecx
   15077:	44 89 85 54 ff ff ff 	mov    DWORD PTR [rbp-0xac],r8d
   1507e:	44 89 8d 50 ff ff ff 	mov    DWORD PTR [rbp-0xb0],r9d
   15085:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   15089:	75 07                	jne    15092 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x41>
   1508b:	b8 02 00 00 00       	mov    eax,0x2
   15090:	eb 05                	jmp    15097 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x46>
   15092:	b8 01 00 00 00       	mov    eax,0x1
   15097:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   1509a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   150a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   150a4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   150a8:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   150ae:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   150b5:	89 c2                	mov    edx,eax
   150b7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
   150ba:	0f af c2             	imul   eax,edx
   150bd:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   150c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   150c4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   150c7:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   150ca:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   150d0:	0f af 45 9c          	imul   eax,DWORD PTR [rbp-0x64]
   150d4:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   150d7:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   150da:	0f af 45 9c          	imul   eax,DWORD PTR [rbp-0x64]
   150de:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   150e1:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   150e7:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   150ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   150ee:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   150f1:	39 85 58 ff ff ff    	cmp    DWORD PTR [rbp-0xa8],eax
   150f7:	74 31                	je     1512a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd9>
   150f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   150fd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   15100:	83 c0 01             	add    eax,0x1
   15103:	39 85 58 ff ff ff    	cmp    DWORD PTR [rbp-0xa8],eax
   15109:	74 1f                	je     1512a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd9>
   1510b:	48 8d 0d f6 5a 02 00 	lea    rcx,[rip+0x25af6]        # 3ac08 <stbi__depth_scale_table+0x10>
   15112:	ba 8b 11 00 00       	mov    edx,0x118b
   15117:	48 8d 35 7a 4f 02 00 	lea    rsi,[rip+0x24f7a]        # 3a098 <_IO_stdin_used+0x98>
   1511e:	48 8d 3d 53 5b 02 00 	lea    rdi,[rip+0x25b53]        # 3ac78 <stbi__depth_scale_table+0x80>
   15125:	e8 56 f1 fe ff       	call   4280 <__assert_fail@plt>
   1512a:	8b b5 50 ff ff ff    	mov    esi,DWORD PTR [rbp-0xb0]
   15130:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15136:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   15139:	b9 00 00 00 00       	mov    ecx,0x0
   1513e:	89 c7                	mov    edi,eax
   15140:	e8 29 fc fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   15145:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
   1514c:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
   15150:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15157:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1515b:	48 85 c0             	test   rax,rax
   1515e:	75 11                	jne    15171 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x120>
   15160:	48 8d 3d cc 4e 02 00 	lea    rdi,[rip+0x24ecc]        # 3a033 <_IO_stdin_used+0x33>
   15167:	e8 d3 f9 fe ff       	call   4b3f <stbi__err(char const*)>
   1516c:	e9 7d 12 00 00       	jmp    163ee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x139d>
   15171:	8b b5 54 ff ff ff    	mov    esi,DWORD PTR [rbp-0xac]
   15177:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1517a:	b9 07 00 00 00       	mov    ecx,0x7
   1517f:	8b 55 10             	mov    edx,DWORD PTR [rbp+0x10]
   15182:	89 c7                	mov    edi,eax
   15184:	e8 a0 fa fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   15189:	85 c0                	test   eax,eax
   1518b:	0f 94 c0             	sete   al
   1518e:	84 c0                	test   al,al
   15190:	74 11                	je     151a3 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x152>
   15192:	48 8d 3d b3 54 02 00 	lea    rdi,[rip+0x254b3]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   15199:	e8 a1 f9 fe ff       	call   4b3f <stbi__err(char const*)>
   1519e:	e9 4b 12 00 00       	jmp    163ee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x139d>
   151a3:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   151a6:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   151ad:	89 c2                	mov    edx,eax
   151af:	8b 45 10             	mov    eax,DWORD PTR [rbp+0x10]
   151b2:	0f af c2             	imul   eax,edx
   151b5:	83 c0 07             	add    eax,0x7
   151b8:	c1 e8 03             	shr    eax,0x3
   151bb:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   151be:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   151c1:	8d 50 01             	lea    edx,[rax+0x1]
   151c4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   151ca:	0f af c2             	imul   eax,edx
   151cd:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   151d0:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   151d6:	3b 45 b0             	cmp    eax,DWORD PTR [rbp-0x50]
   151d9:	73 11                	jae    151ec <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x19b>
   151db:	48 8d 3d bf 5a 02 00 	lea    rdi,[rip+0x25abf]        # 3aca1 <stbi__depth_scale_table+0xa9>
   151e2:	e8 58 f9 fe ff       	call   4b3f <stbi__err(char const*)>
   151e7:	e9 02 12 00 00       	jmp    163ee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x139d>
   151ec:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   151f3:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   151f6:	3b 85 50 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xb0]
   151fc:	0f 83 4a 0b 00 00    	jae    15d4c <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcfb>
   15202:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15209:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1520d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15210:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15214:	89 c0                	mov    eax,eax
   15216:	48 01 d0             	add    rax,rdx
   15219:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   1521d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15224:	48 8d 50 01          	lea    rdx,[rax+0x1]
   15228:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   1522f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15232:	0f b6 c0             	movzx  eax,al
   15235:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   15238:	83 7d 94 04          	cmp    DWORD PTR [rbp-0x6c],0x4
   1523c:	7e 11                	jle    1524f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1fe>
   1523e:	48 8d 3d 6e 5a 02 00 	lea    rdi,[rip+0x25a6e]        # 3acb3 <stbi__depth_scale_table+0xbb>
   15245:	e8 f5 f8 fe ff       	call   4b3f <stbi__err(char const*)>
   1524a:	e9 9f 11 00 00       	jmp    163ee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x139d>
   1524f:	83 7d 10 07          	cmp    DWORD PTR [rbp+0x10],0x7
   15253:	7f 4d                	jg     152a2 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x251>
   15255:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   15258:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
   1525e:	76 1f                	jbe    1527f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x22e>
   15260:	48 8d 0d a1 59 02 00 	lea    rcx,[rip+0x259a1]        # 3ac08 <stbi__depth_scale_table+0x10>
   15267:	ba a1 11 00 00       	mov    edx,0x11a1
   1526c:	48 8d 35 25 4e 02 00 	lea    rsi,[rip+0x24e25]        # 3a098 <_IO_stdin_used+0x98>
   15273:	48 8d 3d 48 5a 02 00 	lea    rdi,[rip+0x25a48]        # 3acc2 <stbi__depth_scale_table+0xca>
   1527a:	e8 01 f0 fe ff       	call   4280 <__assert_fail@plt>
   1527f:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   15285:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   1528c:	2b 45 ac             	sub    eax,DWORD PTR [rbp-0x54]
   1528f:	89 c0                	mov    eax,eax
   15291:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15295:	c7 45 8c 01 00 00 00 	mov    DWORD PTR [rbp-0x74],0x1
   1529c:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1529f:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   152a2:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   152a5:	48 f7 d8             	neg    rax
   152a8:	48 89 c2             	mov    rdx,rax
   152ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   152af:	48 01 d0             	add    rax,rdx
   152b2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   152b6:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
   152ba:	75 16                	jne    152d2 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x281>
   152bc:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   152bf:	48 98                	cdqe   
   152c1:	48 8d 15 68 61 03 00 	lea    rdx,[rip+0x36168]        # 4b430 <first_row_filter>
   152c8:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   152cc:	0f b6 c0             	movzx  eax,al
   152cf:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   152d2:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   152d9:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   152dc:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   152df:	0f 8d 8e 01 00 00    	jge    15473 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x422>
   152e5:	83 7d 94 06          	cmp    DWORD PTR [rbp-0x6c],0x6
   152e9:	0f 87 7b 01 00 00    	ja     1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   152ef:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   152f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   152fa:	48 8d 05 f3 59 02 00 	lea    rax,[rip+0x259f3]        # 3acf4 <stbi__depth_scale_table+0xfc>
   15301:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   15304:	48 98                	cdqe   
   15306:	48 8d 15 e7 59 02 00 	lea    rdx,[rip+0x259e7]        # 3acf4 <stbi__depth_scale_table+0xfc>
   1530d:	48 01 d0             	add    rax,rdx
   15310:	ff e0                	jmp    rax
   15312:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15315:	48 63 d0             	movsxd rdx,eax
   15318:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1531f:	48 01 d0             	add    rax,rdx
   15322:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   15325:	48 63 ca             	movsxd rcx,edx
   15328:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1532c:	48 01 ca             	add    rdx,rcx
   1532f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15332:	88 02                	mov    BYTE PTR [rdx],al
   15334:	e9 31 01 00 00       	jmp    1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   15339:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1533c:	48 63 d0             	movsxd rdx,eax
   1533f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15346:	48 01 d0             	add    rax,rdx
   15349:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   1534c:	48 63 ca             	movsxd rcx,edx
   1534f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   15353:	48 01 ca             	add    rdx,rcx
   15356:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15359:	88 02                	mov    BYTE PTR [rdx],al
   1535b:	e9 0a 01 00 00       	jmp    1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   15360:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15363:	48 63 d0             	movsxd rdx,eax
   15366:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1536d:	48 01 d0             	add    rax,rdx
   15370:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   15373:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15376:	48 63 d0             	movsxd rdx,eax
   15379:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1537d:	48 01 d0             	add    rax,rdx
   15380:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15383:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15386:	48 63 f0             	movsxd rsi,eax
   15389:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1538d:	48 01 f0             	add    rax,rsi
   15390:	01 ca                	add    edx,ecx
   15392:	88 10                	mov    BYTE PTR [rax],dl
   15394:	e9 d1 00 00 00       	jmp    1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   15399:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1539c:	48 63 d0             	movsxd rdx,eax
   1539f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   153a6:	48 01 d0             	add    rax,rdx
   153a9:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   153ac:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   153af:	48 63 c8             	movsxd rcx,eax
   153b2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   153b6:	48 01 c8             	add    rax,rcx
   153b9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   153bc:	d0 e8                	shr    al,1
   153be:	89 c6                	mov    esi,eax
   153c0:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   153c3:	48 63 c8             	movsxd rcx,eax
   153c6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   153ca:	48 01 c8             	add    rax,rcx
   153cd:	01 f2                	add    edx,esi
   153cf:	88 10                	mov    BYTE PTR [rax],dl
   153d1:	e9 94 00 00 00       	jmp    1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   153d6:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   153d9:	48 63 d0             	movsxd rdx,eax
   153dc:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   153e3:	48 01 d0             	add    rax,rdx
   153e6:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   153e9:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   153ec:	48 63 d0             	movsxd rdx,eax
   153ef:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   153f3:	48 01 d0             	add    rax,rdx
   153f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   153f9:	0f b6 c0             	movzx  eax,al
   153fc:	ba 00 00 00 00       	mov    edx,0x0
   15401:	89 c6                	mov    esi,eax
   15403:	bf 00 00 00 00       	mov    edi,0x0
   15408:	e8 d5 fb ff ff       	call   14fe2 <stbi__paeth(int, int, int)>
   1540d:	89 c1                	mov    ecx,eax
   1540f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15412:	48 63 d0             	movsxd rdx,eax
   15415:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15419:	48 01 d0             	add    rax,rdx
   1541c:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   1541f:	88 10                	mov    BYTE PTR [rax],dl
   15421:	eb 47                	jmp    1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   15423:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15426:	48 63 d0             	movsxd rdx,eax
   15429:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15430:	48 01 d0             	add    rax,rdx
   15433:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   15436:	48 63 ca             	movsxd rcx,edx
   15439:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1543d:	48 01 ca             	add    rdx,rcx
   15440:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15443:	88 02                	mov    BYTE PTR [rdx],al
   15445:	eb 23                	jmp    1546a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x419>
   15447:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1544a:	48 63 d0             	movsxd rdx,eax
   1544d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15454:	48 01 d0             	add    rax,rdx
   15457:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   1545a:	48 63 ca             	movsxd rcx,edx
   1545d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   15461:	48 01 ca             	add    rdx,rcx
   15464:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15467:	88 02                	mov    BYTE PTR [rdx],al
   15469:	90                   	nop
   1546a:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1546e:	e9 66 fe ff ff       	jmp    152d9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x288>
   15473:	83 7d 10 08          	cmp    DWORD PTR [rbp+0x10],0x8
   15477:	75 41                	jne    154ba <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x469>
   15479:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1547c:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   15482:	74 10                	je     15494 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x443>
   15484:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15487:	48 63 d0             	movsxd rdx,eax
   1548a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1548e:	48 01 d0             	add    rax,rdx
   15491:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15494:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15497:	48 98                	cdqe   
   15499:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   154a0:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   154a6:	48 98                	cdqe   
   154a8:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   154ac:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   154b2:	48 98                	cdqe   
   154b4:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   154b8:	eb 66                	jmp    15520 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4cf>
   154ba:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   154be:	75 4e                	jne    1550e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4bd>
   154c0:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   154c3:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   154c9:	74 23                	je     154ee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x49d>
   154cb:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   154ce:	48 63 d0             	movsxd rdx,eax
   154d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   154d5:	48 01 d0             	add    rax,rdx
   154d8:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   154db:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   154de:	48 98                	cdqe   
   154e0:	48 8d 50 01          	lea    rdx,[rax+0x1]
   154e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   154e8:	48 01 d0             	add    rax,rdx
   154eb:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   154ee:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   154f1:	48 98                	cdqe   
   154f3:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   154fa:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   154fd:	48 98                	cdqe   
   154ff:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15503:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15506:	48 98                	cdqe   
   15508:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   1550c:	eb 12                	jmp    15520 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4cf>
   1550e:	48 83 85 60 ff ff ff 01 	add    QWORD PTR [rbp-0xa0],0x1
   15516:	48 83 45 b8 01       	add    QWORD PTR [rbp-0x48],0x1
   1551b:	48 83 45 c0 01       	add    QWORD PTR [rbp-0x40],0x1
   15520:	83 7d 10 07          	cmp    DWORD PTR [rbp+0x10],0x7
   15524:	7e 0f                	jle    15535 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4e4>
   15526:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15529:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   1552f:	0f 85 c9 02 00 00    	jne    157fe <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7ad>
   15535:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   15538:	8d 50 ff             	lea    edx,[rax-0x1]
   1553b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1553e:	0f af c2             	imul   eax,edx
   15541:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   15544:	83 7d 94 06          	cmp    DWORD PTR [rbp-0x6c],0x6
   15548:	0f 87 9f 02 00 00    	ja     157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   1554e:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   15551:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15559:	48 8d 05 b0 57 02 00 	lea    rax,[rip+0x257b0]        # 3ad10 <stbi__depth_scale_table+0x118>
   15560:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   15563:	48 98                	cdqe   
   15565:	48 8d 15 a4 57 02 00 	lea    rdx,[rip+0x257a4]        # 3ad10 <stbi__depth_scale_table+0x118>
   1556c:	48 01 d0             	add    rax,rdx
   1556f:	ff e0                	jmp    rax
   15571:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   15574:	48 63 d0             	movsxd rdx,eax
   15577:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
   1557e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15582:	48 89 ce             	mov    rsi,rcx
   15585:	48 89 c7             	mov    rdi,rax
   15588:	e8 c3 ed fe ff       	call   4350 <memcpy@plt>
   1558d:	e9 5b 02 00 00       	jmp    157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   15592:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15599:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1559c:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   1559f:	0f 8d 38 02 00 00    	jge    157dd <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x78c>
   155a5:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155a8:	48 63 d0             	movsxd rdx,eax
   155ab:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   155b2:	48 01 d0             	add    rax,rdx
   155b5:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   155b8:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155bb:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   155be:	48 63 d0             	movsxd rdx,eax
   155c1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   155c5:	48 01 d0             	add    rax,rdx
   155c8:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   155cb:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155ce:	48 63 f0             	movsxd rsi,eax
   155d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   155d5:	48 01 f0             	add    rax,rsi
   155d8:	01 ca                	add    edx,ecx
   155da:	88 10                	mov    BYTE PTR [rax],dl
   155dc:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   155e0:	eb b7                	jmp    15599 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x548>
   155e2:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   155e9:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155ec:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   155ef:	0f 8d eb 01 00 00    	jge    157e0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x78f>
   155f5:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155f8:	48 63 d0             	movsxd rdx,eax
   155fb:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15602:	48 01 d0             	add    rax,rdx
   15605:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   15608:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1560b:	48 63 d0             	movsxd rdx,eax
   1560e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15612:	48 01 d0             	add    rax,rdx
   15615:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15618:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1561b:	48 63 f0             	movsxd rsi,eax
   1561e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15622:	48 01 f0             	add    rax,rsi
   15625:	01 ca                	add    edx,ecx
   15627:	88 10                	mov    BYTE PTR [rax],dl
   15629:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1562d:	eb ba                	jmp    155e9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x598>
   1562f:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15636:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15639:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   1563c:	0f 8d a1 01 00 00    	jge    157e3 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x792>
   15642:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15645:	48 63 d0             	movsxd rdx,eax
   15648:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1564f:	48 01 d0             	add    rax,rdx
   15652:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15655:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15658:	48 63 c8             	movsxd rcx,eax
   1565b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1565f:	48 01 c8             	add    rax,rcx
   15662:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15665:	0f b6 c8             	movzx  ecx,al
   15668:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1566b:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   1566e:	48 63 f0             	movsxd rsi,eax
   15671:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15675:	48 01 f0             	add    rax,rsi
   15678:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1567b:	0f b6 c0             	movzx  eax,al
   1567e:	01 c8                	add    eax,ecx
   15680:	d1 f8                	sar    eax,1
   15682:	89 c6                	mov    esi,eax
   15684:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15687:	48 63 c8             	movsxd rcx,eax
   1568a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1568e:	48 01 c8             	add    rax,rcx
   15691:	01 f2                	add    edx,esi
   15693:	88 10                	mov    BYTE PTR [rax],dl
   15695:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15699:	eb 9b                	jmp    15636 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x5e5>
   1569b:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   156a2:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   156a5:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   156a8:	0f 8d 38 01 00 00    	jge    157e6 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x795>
   156ae:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   156b1:	48 63 d0             	movsxd rdx,eax
   156b4:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   156bb:	48 01 d0             	add    rax,rdx
   156be:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   156c1:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   156c4:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   156c7:	48 63 d0             	movsxd rdx,eax
   156ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   156ce:	48 01 d0             	add    rax,rdx
   156d1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   156d4:	0f b6 d0             	movzx  edx,al
   156d7:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   156da:	48 63 c8             	movsxd rcx,eax
   156dd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   156e1:	48 01 c8             	add    rax,rcx
   156e4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   156e7:	0f b6 c8             	movzx  ecx,al
   156ea:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   156ed:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   156f0:	48 63 f0             	movsxd rsi,eax
   156f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   156f7:	48 01 f0             	add    rax,rsi
   156fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   156fd:	0f b6 c0             	movzx  eax,al
   15700:	89 ce                	mov    esi,ecx
   15702:	89 c7                	mov    edi,eax
   15704:	e8 d9 f8 ff ff       	call   14fe2 <stbi__paeth(int, int, int)>
   15709:	89 c1                	mov    ecx,eax
   1570b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1570e:	48 63 d0             	movsxd rdx,eax
   15711:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15715:	48 01 d0             	add    rax,rdx
   15718:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   1571b:	88 10                	mov    BYTE PTR [rax],dl
   1571d:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15721:	e9 7c ff ff ff       	jmp    156a2 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x651>
   15726:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1572d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15730:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   15733:	0f 8d b0 00 00 00    	jge    157e9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x798>
   15739:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1573c:	48 63 d0             	movsxd rdx,eax
   1573f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15746:	48 01 d0             	add    rax,rdx
   15749:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1574c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1574f:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   15752:	48 63 c8             	movsxd rcx,eax
   15755:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15759:	48 01 c8             	add    rax,rcx
   1575c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1575f:	d0 e8                	shr    al,1
   15761:	89 c6                	mov    esi,eax
   15763:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15766:	48 63 c8             	movsxd rcx,eax
   15769:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1576d:	48 01 c8             	add    rax,rcx
   15770:	01 f2                	add    edx,esi
   15772:	88 10                	mov    BYTE PTR [rax],dl
   15774:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15778:	eb b3                	jmp    1572d <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x6dc>
   1577a:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15781:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15784:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   15787:	7d 63                	jge    157ec <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79b>
   15789:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1578c:	48 63 d0             	movsxd rdx,eax
   1578f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15796:	48 01 d0             	add    rax,rdx
   15799:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   1579c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1579f:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   157a2:	48 63 d0             	movsxd rdx,eax
   157a5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   157a9:	48 01 d0             	add    rax,rdx
   157ac:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   157af:	0f b6 c0             	movzx  eax,al
   157b2:	ba 00 00 00 00       	mov    edx,0x0
   157b7:	be 00 00 00 00       	mov    esi,0x0
   157bc:	89 c7                	mov    edi,eax
   157be:	e8 1f f8 ff ff       	call   14fe2 <stbi__paeth(int, int, int)>
   157c3:	89 c1                	mov    ecx,eax
   157c5:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   157c8:	48 63 d0             	movsxd rdx,eax
   157cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   157cf:	48 01 d0             	add    rax,rdx
   157d2:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   157d5:	88 10                	mov    BYTE PTR [rax],dl
   157d7:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   157db:	eb a4                	jmp    15781 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x730>
   157dd:	90                   	nop
   157de:	eb 0d                	jmp    157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   157e0:	90                   	nop
   157e1:	eb 0a                	jmp    157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   157e3:	90                   	nop
   157e4:	eb 07                	jmp    157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   157e6:	90                   	nop
   157e7:	eb 04                	jmp    157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   157e9:	90                   	nop
   157ea:	eb 01                	jmp    157ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x79c>
   157ec:	90                   	nop
   157ed:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   157f0:	48 98                	cdqe   
   157f2:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   157f9:	e9 45 05 00 00       	jmp    15d43 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcf2>
   157fe:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15801:	83 c0 01             	add    eax,0x1
   15804:	39 85 58 ff ff ff    	cmp    DWORD PTR [rbp-0xa8],eax
   1580a:	74 1f                	je     1582b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7da>
   1580c:	48 8d 0d f5 53 02 00 	lea    rcx,[rip+0x253f5]        # 3ac08 <stbi__depth_scale_table+0x10>
   15813:	ba df 11 00 00       	mov    edx,0x11df
   15818:	48 8d 35 79 48 02 00 	lea    rsi,[rip+0x24879]        # 3a098 <_IO_stdin_used+0x98>
   1581f:	48 8d 3d b1 54 02 00 	lea    rdi,[rip+0x254b1]        # 3acd7 <stbi__depth_scale_table+0xdf>
   15826:	e8 55 ea fe ff       	call   4280 <__assert_fail@plt>
   1582b:	83 7d 94 06          	cmp    DWORD PTR [rbp-0x6c],0x6
   1582f:	0f 87 b9 04 00 00    	ja     15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15835:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   15838:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15840:	48 8d 05 e5 54 02 00 	lea    rax,[rip+0x254e5]        # 3ad2c <stbi__depth_scale_table+0x134>
   15847:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1584a:	48 98                	cdqe   
   1584c:	48 8d 15 d9 54 02 00 	lea    rdx,[rip+0x254d9]        # 3ad2c <stbi__depth_scale_table+0x134>
   15853:	48 01 d0             	add    rax,rdx
   15856:	ff e0                	jmp    rax
   15858:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1585e:	83 e8 01             	sub    eax,0x1
   15861:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15864:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15868:	0f 84 6d 04 00 00    	je     15cdb <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc8a>
   1586e:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15875:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15878:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   1587b:	7d 28                	jge    158a5 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x854>
   1587d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15880:	48 63 d0             	movsxd rdx,eax
   15883:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1588a:	48 01 d0             	add    rax,rdx
   1588d:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   15890:	48 63 ca             	movsxd rcx,edx
   15893:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   15897:	48 01 ca             	add    rdx,rcx
   1589a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1589d:	88 02                	mov    BYTE PTR [rdx],al
   1589f:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   158a3:	eb d0                	jmp    15875 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x824>
   158a5:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   158a9:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   158ac:	48 63 d0             	movsxd rdx,eax
   158af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   158b3:	48 01 d0             	add    rax,rdx
   158b6:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   158b9:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   158bc:	48 98                	cdqe   
   158be:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   158c5:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   158c8:	48 98                	cdqe   
   158ca:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   158ce:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   158d1:	48 98                	cdqe   
   158d3:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   158d7:	eb 8b                	jmp    15864 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x813>
   158d9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   158df:	83 e8 01             	sub    eax,0x1
   158e2:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   158e5:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   158e9:	0f 84 ef 03 00 00    	je     15cde <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc8d>
   158ef:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   158f6:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   158f9:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   158fc:	7d 3d                	jge    1593b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x8ea>
   158fe:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15901:	48 63 d0             	movsxd rdx,eax
   15904:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1590b:	48 01 d0             	add    rax,rdx
   1590e:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   15911:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15914:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15917:	48 63 d0             	movsxd rdx,eax
   1591a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1591e:	48 01 d0             	add    rax,rdx
   15921:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15924:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15927:	48 63 f0             	movsxd rsi,eax
   1592a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1592e:	48 01 f0             	add    rax,rsi
   15931:	01 ca                	add    edx,ecx
   15933:	88 10                	mov    BYTE PTR [rax],dl
   15935:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15939:	eb bb                	jmp    158f6 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x8a5>
   1593b:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   1593f:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15942:	48 63 d0             	movsxd rdx,eax
   15945:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15949:	48 01 d0             	add    rax,rdx
   1594c:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1594f:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15952:	48 98                	cdqe   
   15954:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   1595b:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   1595e:	48 98                	cdqe   
   15960:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15964:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15967:	48 98                	cdqe   
   15969:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   1596d:	e9 73 ff ff ff       	jmp    158e5 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x894>
   15972:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15978:	83 e8 01             	sub    eax,0x1
   1597b:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   1597e:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15982:	0f 84 59 03 00 00    	je     15ce1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc90>
   15988:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1598f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15992:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15995:	7d 3a                	jge    159d1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x980>
   15997:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1599a:	48 63 d0             	movsxd rdx,eax
   1599d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   159a4:	48 01 d0             	add    rax,rdx
   159a7:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   159aa:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   159ad:	48 63 d0             	movsxd rdx,eax
   159b0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   159b4:	48 01 d0             	add    rax,rdx
   159b7:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   159ba:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   159bd:	48 63 f0             	movsxd rsi,eax
   159c0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   159c4:	48 01 f0             	add    rax,rsi
   159c7:	01 ca                	add    edx,ecx
   159c9:	88 10                	mov    BYTE PTR [rax],dl
   159cb:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   159cf:	eb be                	jmp    1598f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x93e>
   159d1:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   159d5:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   159d8:	48 63 d0             	movsxd rdx,eax
   159db:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   159df:	48 01 d0             	add    rax,rdx
   159e2:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   159e5:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   159e8:	48 98                	cdqe   
   159ea:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   159f1:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   159f4:	48 98                	cdqe   
   159f6:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   159fa:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   159fd:	48 98                	cdqe   
   159ff:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15a03:	e9 76 ff ff ff       	jmp    1597e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x92d>
   15a08:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15a0e:	83 e8 01             	sub    eax,0x1
   15a11:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15a14:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15a18:	0f 84 c6 02 00 00    	je     15ce4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc93>
   15a1e:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15a25:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a28:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15a2b:	7d 59                	jge    15a86 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa35>
   15a2d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a30:	48 63 d0             	movsxd rdx,eax
   15a33:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15a3a:	48 01 d0             	add    rax,rdx
   15a3d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15a40:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a43:	48 63 c8             	movsxd rcx,eax
   15a46:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15a4a:	48 01 c8             	add    rax,rcx
   15a4d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15a50:	0f b6 c8             	movzx  ecx,al
   15a53:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a56:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15a59:	48 63 f0             	movsxd rsi,eax
   15a5c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15a60:	48 01 f0             	add    rax,rsi
   15a63:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15a66:	0f b6 c0             	movzx  eax,al
   15a69:	01 c8                	add    eax,ecx
   15a6b:	d1 f8                	sar    eax,1
   15a6d:	89 c6                	mov    esi,eax
   15a6f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a72:	48 63 c8             	movsxd rcx,eax
   15a75:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15a79:	48 01 c8             	add    rax,rcx
   15a7c:	01 f2                	add    edx,esi
   15a7e:	88 10                	mov    BYTE PTR [rax],dl
   15a80:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15a84:	eb 9f                	jmp    15a25 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x9d4>
   15a86:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15a8a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15a8d:	48 63 d0             	movsxd rdx,eax
   15a90:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15a94:	48 01 d0             	add    rax,rdx
   15a97:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15a9a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15a9d:	48 98                	cdqe   
   15a9f:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15aa6:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15aa9:	48 98                	cdqe   
   15aab:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15aaf:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15ab2:	48 98                	cdqe   
   15ab4:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15ab8:	e9 57 ff ff ff       	jmp    15a14 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x9c3>
   15abd:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15ac3:	83 e8 01             	sub    eax,0x1
   15ac6:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15ac9:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15acd:	0f 84 14 02 00 00    	je     15ce7 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc96>
   15ad3:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15ada:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15add:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15ae0:	7d 75                	jge    15b57 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb06>
   15ae2:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15ae5:	48 63 d0             	movsxd rdx,eax
   15ae8:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15aef:	48 01 d0             	add    rax,rdx
   15af2:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   15af5:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15af8:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15afb:	48 63 d0             	movsxd rdx,eax
   15afe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15b02:	48 01 d0             	add    rax,rdx
   15b05:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15b08:	0f b6 d0             	movzx  edx,al
   15b0b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b0e:	48 63 c8             	movsxd rcx,eax
   15b11:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15b15:	48 01 c8             	add    rax,rcx
   15b18:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15b1b:	0f b6 c8             	movzx  ecx,al
   15b1e:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b21:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15b24:	48 63 f0             	movsxd rsi,eax
   15b27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15b2b:	48 01 f0             	add    rax,rsi
   15b2e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15b31:	0f b6 c0             	movzx  eax,al
   15b34:	89 ce                	mov    esi,ecx
   15b36:	89 c7                	mov    edi,eax
   15b38:	e8 a5 f4 ff ff       	call   14fe2 <stbi__paeth(int, int, int)>
   15b3d:	89 c1                	mov    ecx,eax
   15b3f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b42:	48 63 d0             	movsxd rdx,eax
   15b45:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15b49:	48 01 d0             	add    rax,rdx
   15b4c:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   15b4f:	88 10                	mov    BYTE PTR [rax],dl
   15b51:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15b55:	eb 83                	jmp    15ada <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa89>
   15b57:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15b5b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15b5e:	48 63 d0             	movsxd rdx,eax
   15b61:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15b65:	48 01 d0             	add    rax,rdx
   15b68:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15b6b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15b6e:	48 98                	cdqe   
   15b70:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15b77:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15b7a:	48 98                	cdqe   
   15b7c:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15b80:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15b83:	48 98                	cdqe   
   15b85:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15b89:	e9 3b ff ff ff       	jmp    15ac9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa78>
   15b8e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15b94:	83 e8 01             	sub    eax,0x1
   15b97:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15b9a:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15b9e:	0f 84 46 01 00 00    	je     15cea <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc99>
   15ba4:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15bab:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15bae:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15bb1:	7d 41                	jge    15bf4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xba3>
   15bb3:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15bb6:	48 63 d0             	movsxd rdx,eax
   15bb9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15bc0:	48 01 d0             	add    rax,rdx
   15bc3:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15bc6:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15bc9:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15bcc:	48 63 c8             	movsxd rcx,eax
   15bcf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15bd3:	48 01 c8             	add    rax,rcx
   15bd6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15bd9:	d0 e8                	shr    al,1
   15bdb:	89 c6                	mov    esi,eax
   15bdd:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15be0:	48 63 c8             	movsxd rcx,eax
   15be3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15be7:	48 01 c8             	add    rax,rcx
   15bea:	01 f2                	add    edx,esi
   15bec:	88 10                	mov    BYTE PTR [rax],dl
   15bee:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15bf2:	eb b7                	jmp    15bab <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb5a>
   15bf4:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15bf8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15bfb:	48 63 d0             	movsxd rdx,eax
   15bfe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15c02:	48 01 d0             	add    rax,rdx
   15c05:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15c08:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15c0b:	48 98                	cdqe   
   15c0d:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15c14:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15c17:	48 98                	cdqe   
   15c19:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15c1d:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15c20:	48 98                	cdqe   
   15c22:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15c26:	e9 6f ff ff ff       	jmp    15b9a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb49>
   15c2b:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15c31:	83 e8 01             	sub    eax,0x1
   15c34:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15c37:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15c3b:	0f 84 ac 00 00 00    	je     15ced <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9c>
   15c41:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15c48:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c4b:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15c4e:	7d 54                	jge    15ca4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc53>
   15c50:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c53:	48 63 d0             	movsxd rdx,eax
   15c56:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15c5d:	48 01 d0             	add    rax,rdx
   15c60:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   15c63:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c66:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15c69:	48 63 d0             	movsxd rdx,eax
   15c6c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15c70:	48 01 d0             	add    rax,rdx
   15c73:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15c76:	0f b6 c0             	movzx  eax,al
   15c79:	ba 00 00 00 00       	mov    edx,0x0
   15c7e:	be 00 00 00 00       	mov    esi,0x0
   15c83:	89 c7                	mov    edi,eax
   15c85:	e8 58 f3 ff ff       	call   14fe2 <stbi__paeth(int, int, int)>
   15c8a:	89 c1                	mov    ecx,eax
   15c8c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c8f:	48 63 d0             	movsxd rdx,eax
   15c92:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15c96:	48 01 d0             	add    rax,rdx
   15c99:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   15c9c:	88 10                	mov    BYTE PTR [rax],dl
   15c9e:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15ca2:	eb a4                	jmp    15c48 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xbf7>
   15ca4:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15ca8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15cab:	48 63 d0             	movsxd rdx,eax
   15cae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15cb2:	48 01 d0             	add    rax,rdx
   15cb5:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15cb8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15cbb:	48 98                	cdqe   
   15cbd:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15cc4:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15cc7:	48 98                	cdqe   
   15cc9:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15ccd:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15cd0:	48 98                	cdqe   
   15cd2:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15cd6:	e9 5c ff ff ff       	jmp    15c37 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xbe6>
   15cdb:	90                   	nop
   15cdc:	eb 10                	jmp    15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15cde:	90                   	nop
   15cdf:	eb 0d                	jmp    15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15ce1:	90                   	nop
   15ce2:	eb 0a                	jmp    15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15ce4:	90                   	nop
   15ce5:	eb 07                	jmp    15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15ce7:	90                   	nop
   15ce8:	eb 04                	jmp    15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15cea:	90                   	nop
   15ceb:	eb 01                	jmp    15cee <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc9d>
   15ced:	90                   	nop
   15cee:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   15cf2:	75 4f                	jne    15d43 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcf2>
   15cf4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15cfb:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15cff:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15d02:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15d06:	89 c0                	mov    eax,eax
   15d08:	48 01 d0             	add    rax,rdx
   15d0b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   15d0f:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   15d16:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   15d19:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
   15d1f:	73 22                	jae    15d43 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcf2>
   15d21:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15d24:	48 98                	cdqe   
   15d26:	48 8d 50 01          	lea    rdx,[rax+0x1]
   15d2a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15d2e:	48 01 d0             	add    rax,rdx
   15d31:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15d34:	83 45 80 01          	add    DWORD PTR [rbp-0x80],0x1
   15d38:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15d3b:	48 98                	cdqe   
   15d3d:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15d41:	eb d3                	jmp    15d16 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcc5>
   15d43:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   15d47:	e9 a7 f4 ff ff       	jmp    151f3 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1a2>
   15d4c:	83 7d 10 07          	cmp    DWORD PTR [rbp+0x10],0x7
   15d50:	0f 8f 1a 06 00 00    	jg     16370 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x131f>
   15d56:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   15d5d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   15d60:	3b 85 50 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xb0]
   15d66:	0f 83 7d 06 00 00    	jae    163e9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1398>
   15d6c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15d73:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15d77:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15d7a:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15d7e:	89 c0                	mov    eax,eax
   15d80:	48 01 d0             	add    rax,rdx
   15d83:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   15d87:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15d8e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15d92:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15d95:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15d99:	89 c1                	mov    ecx,eax
   15d9b:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   15da1:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15da8:	89 c0                	mov    eax,eax
   15daa:	48 01 c8             	add    rax,rcx
   15dad:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   15db0:	48 29 c8             	sub    rax,rcx
   15db3:	48 01 d0             	add    rax,rdx
   15db6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   15dba:	83 7d 18 00          	cmp    DWORD PTR [rbp+0x18],0x0
   15dbe:	75 12                	jne    15dd2 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd81>
   15dc0:	8b 45 10             	mov    eax,DWORD PTR [rbp+0x10]
   15dc3:	48 98                	cdqe   
   15dc5:	48 8d 15 2c 4e 02 00 	lea    rdx,[rip+0x24e2c]        # 3abf8 <stbi__depth_scale_table>
   15dcc:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   15dd0:	eb 05                	jmp    15dd7 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd86>
   15dd2:	b8 01 00 00 00       	mov    eax,0x1
   15dd7:	88 85 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],al
   15ddd:	83 7d 10 04          	cmp    DWORD PTR [rbp+0x10],0x4
   15de1:	0f 85 8d 00 00 00    	jne    15e74 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xe23>
   15de7:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15dea:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15df1:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   15df4:	83 7d 88 01          	cmp    DWORD PTR [rbp-0x78],0x1
   15df8:	7e 4b                	jle    15e45 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xdf4>
   15dfa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15dfe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15e01:	c0 e8 04             	shr    al,0x4
   15e04:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15e0a:	89 c2                	mov    edx,eax
   15e0c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15e10:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15e14:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15e18:	88 10                	mov    BYTE PTR [rax],dl
   15e1a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15e1e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15e21:	83 e0 0f             	and    eax,0xf
   15e24:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15e2a:	89 c2                	mov    edx,eax
   15e2c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15e30:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15e34:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15e38:	88 10                	mov    BYTE PTR [rax],dl
   15e3a:	83 6d 88 02          	sub    DWORD PTR [rbp-0x78],0x2
   15e3e:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
   15e43:	eb af                	jmp    15df4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xda3>
   15e45:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
   15e49:	0f 8e b6 03 00 00    	jle    16205 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11b4>
   15e4f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15e53:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15e56:	c0 e8 04             	shr    al,0x4
   15e59:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15e5f:	89 c2                	mov    edx,eax
   15e61:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15e65:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15e69:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15e6d:	88 10                	mov    BYTE PTR [rax],dl
   15e6f:	e9 91 03 00 00       	jmp    16205 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11b4>
   15e74:	83 7d 10 02          	cmp    DWORD PTR [rbp+0x10],0x2
   15e78:	0f 85 2c 01 00 00    	jne    15faa <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf59>
   15e7e:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15e81:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15e88:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   15e8b:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   15e8f:	0f 8e 94 00 00 00    	jle    15f29 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xed8>
   15e95:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15e99:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15e9c:	c0 e8 06             	shr    al,0x6
   15e9f:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15ea5:	89 c2                	mov    edx,eax
   15ea7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15eab:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15eaf:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15eb3:	88 10                	mov    BYTE PTR [rax],dl
   15eb5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15eb9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15ebc:	c0 e8 04             	shr    al,0x4
   15ebf:	83 e0 03             	and    eax,0x3
   15ec2:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15ec8:	89 c2                	mov    edx,eax
   15eca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15ece:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15ed2:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15ed6:	88 10                	mov    BYTE PTR [rax],dl
   15ed8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15edc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15edf:	c0 e8 02             	shr    al,0x2
   15ee2:	83 e0 03             	and    eax,0x3
   15ee5:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15eeb:	89 c2                	mov    edx,eax
   15eed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15ef1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15ef5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15ef9:	88 10                	mov    BYTE PTR [rax],dl
   15efb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15eff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15f02:	83 e0 03             	and    eax,0x3
   15f05:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15f0b:	89 c2                	mov    edx,eax
   15f0d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15f11:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15f15:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15f19:	88 10                	mov    BYTE PTR [rax],dl
   15f1b:	83 6d 88 04          	sub    DWORD PTR [rbp-0x78],0x4
   15f1f:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
   15f24:	e9 62 ff ff ff       	jmp    15e8b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xe3a>
   15f29:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
   15f2d:	7e 20                	jle    15f4f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xefe>
   15f2f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15f33:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15f36:	c0 e8 06             	shr    al,0x6
   15f39:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15f3f:	89 c2                	mov    edx,eax
   15f41:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15f45:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15f49:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15f4d:	88 10                	mov    BYTE PTR [rax],dl
   15f4f:	83 7d 88 01          	cmp    DWORD PTR [rbp-0x78],0x1
   15f53:	7e 23                	jle    15f78 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf27>
   15f55:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15f59:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15f5c:	c0 e8 04             	shr    al,0x4
   15f5f:	83 e0 03             	and    eax,0x3
   15f62:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15f68:	89 c2                	mov    edx,eax
   15f6a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15f6e:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15f72:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15f76:	88 10                	mov    BYTE PTR [rax],dl
   15f78:	83 7d 88 02          	cmp    DWORD PTR [rbp-0x78],0x2
   15f7c:	0f 8e 83 02 00 00    	jle    16205 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11b4>
   15f82:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15f86:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15f89:	c0 e8 02             	shr    al,0x2
   15f8c:	83 e0 03             	and    eax,0x3
   15f8f:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15f95:	89 c2                	mov    edx,eax
   15f97:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15f9b:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15f9f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15fa3:	88 10                	mov    BYTE PTR [rax],dl
   15fa5:	e9 5b 02 00 00       	jmp    16205 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11b4>
   15faa:	83 7d 10 01          	cmp    DWORD PTR [rbp+0x10],0x1
   15fae:	0f 85 51 02 00 00    	jne    16205 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11b4>
   15fb4:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15fb7:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15fbe:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   15fc1:	83 7d 88 07          	cmp    DWORD PTR [rbp-0x78],0x7
   15fc5:	0f 8e 1f 01 00 00    	jle    160ea <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1099>
   15fcb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15fcf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15fd2:	c0 e8 07             	shr    al,0x7
   15fd5:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15fdb:	89 c2                	mov    edx,eax
   15fdd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15fe1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15fe5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15fe9:	88 10                	mov    BYTE PTR [rax],dl
   15feb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15fef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15ff2:	c0 e8 06             	shr    al,0x6
   15ff5:	83 e0 01             	and    eax,0x1
   15ff8:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15ffe:	89 c2                	mov    edx,eax
   16000:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16004:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16008:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1600c:	88 10                	mov    BYTE PTR [rax],dl
   1600e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16012:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16015:	c0 e8 05             	shr    al,0x5
   16018:	83 e0 01             	and    eax,0x1
   1601b:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16021:	89 c2                	mov    edx,eax
   16023:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16027:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1602b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1602f:	88 10                	mov    BYTE PTR [rax],dl
   16031:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16035:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16038:	c0 e8 04             	shr    al,0x4
   1603b:	83 e0 01             	and    eax,0x1
   1603e:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16044:	89 c2                	mov    edx,eax
   16046:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1604a:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1604e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16052:	88 10                	mov    BYTE PTR [rax],dl
   16054:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16058:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1605b:	c0 e8 03             	shr    al,0x3
   1605e:	83 e0 01             	and    eax,0x1
   16061:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16067:	89 c2                	mov    edx,eax
   16069:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1606d:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16071:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16075:	88 10                	mov    BYTE PTR [rax],dl
   16077:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1607b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1607e:	c0 e8 02             	shr    al,0x2
   16081:	83 e0 01             	and    eax,0x1
   16084:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   1608a:	89 c2                	mov    edx,eax
   1608c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16090:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16094:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16098:	88 10                	mov    BYTE PTR [rax],dl
   1609a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1609e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   160a1:	d0 e8                	shr    al,1
   160a3:	83 e0 01             	and    eax,0x1
   160a6:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   160ac:	89 c2                	mov    edx,eax
   160ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   160b2:	48 8d 48 01          	lea    rcx,[rax+0x1]
   160b6:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   160ba:	88 10                	mov    BYTE PTR [rax],dl
   160bc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   160c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   160c3:	83 e0 01             	and    eax,0x1
   160c6:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   160cc:	89 c2                	mov    edx,eax
   160ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   160d2:	48 8d 48 01          	lea    rcx,[rax+0x1]
   160d6:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   160da:	88 10                	mov    BYTE PTR [rax],dl
   160dc:	83 6d 88 08          	sub    DWORD PTR [rbp-0x78],0x8
   160e0:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
   160e5:	e9 d7 fe ff ff       	jmp    15fc1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf70>
   160ea:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
   160ee:	7e 20                	jle    16110 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x10bf>
   160f0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   160f4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   160f7:	c0 e8 07             	shr    al,0x7
   160fa:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16100:	89 c2                	mov    edx,eax
   16102:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16106:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1610a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1610e:	88 10                	mov    BYTE PTR [rax],dl
   16110:	83 7d 88 01          	cmp    DWORD PTR [rbp-0x78],0x1
   16114:	7e 23                	jle    16139 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x10e8>
   16116:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1611a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1611d:	c0 e8 06             	shr    al,0x6
   16120:	83 e0 01             	and    eax,0x1
   16123:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16129:	89 c2                	mov    edx,eax
   1612b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1612f:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16133:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16137:	88 10                	mov    BYTE PTR [rax],dl
   16139:	83 7d 88 02          	cmp    DWORD PTR [rbp-0x78],0x2
   1613d:	7e 23                	jle    16162 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1111>
   1613f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16143:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16146:	c0 e8 05             	shr    al,0x5
   16149:	83 e0 01             	and    eax,0x1
   1614c:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16152:	89 c2                	mov    edx,eax
   16154:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16158:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1615c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16160:	88 10                	mov    BYTE PTR [rax],dl
   16162:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   16166:	7e 23                	jle    1618b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x113a>
   16168:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1616c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1616f:	c0 e8 04             	shr    al,0x4
   16172:	83 e0 01             	and    eax,0x1
   16175:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   1617b:	89 c2                	mov    edx,eax
   1617d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16181:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16185:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16189:	88 10                	mov    BYTE PTR [rax],dl
   1618b:	83 7d 88 04          	cmp    DWORD PTR [rbp-0x78],0x4
   1618f:	7e 23                	jle    161b4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1163>
   16191:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16195:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16198:	c0 e8 03             	shr    al,0x3
   1619b:	83 e0 01             	and    eax,0x1
   1619e:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   161a4:	89 c2                	mov    edx,eax
   161a6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   161aa:	48 8d 48 01          	lea    rcx,[rax+0x1]
   161ae:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   161b2:	88 10                	mov    BYTE PTR [rax],dl
   161b4:	83 7d 88 05          	cmp    DWORD PTR [rbp-0x78],0x5
   161b8:	7e 23                	jle    161dd <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x118c>
   161ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   161be:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   161c1:	c0 e8 02             	shr    al,0x2
   161c4:	83 e0 01             	and    eax,0x1
   161c7:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   161cd:	89 c2                	mov    edx,eax
   161cf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   161d3:	48 8d 48 01          	lea    rcx,[rax+0x1]
   161d7:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   161db:	88 10                	mov    BYTE PTR [rax],dl
   161dd:	83 7d 88 06          	cmp    DWORD PTR [rbp-0x78],0x6
   161e1:	7e 22                	jle    16205 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11b4>
   161e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   161e7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   161ea:	d0 e8                	shr    al,1
   161ec:	83 e0 01             	and    eax,0x1
   161ef:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   161f5:	89 c2                	mov    edx,eax
   161f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   161fb:	48 8d 48 01          	lea    rcx,[rax+0x1]
   161ff:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16203:	88 10                	mov    BYTE PTR [rax],dl
   16205:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   16208:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   1620e:	0f 84 53 01 00 00    	je     16367 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1316>
   16214:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1621b:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1621f:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   16222:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   16226:	89 c0                	mov    eax,eax
   16228:	48 01 d0             	add    rax,rdx
   1622b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1622f:	83 7d a4 01          	cmp    DWORD PTR [rbp-0x5c],0x1
   16233:	75 52                	jne    16287 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1236>
   16235:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1623b:	83 e8 01             	sub    eax,0x1
   1623e:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   16241:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   16245:	0f 88 1c 01 00 00    	js     16367 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1316>
   1624b:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1624e:	01 c0                	add    eax,eax
   16250:	48 98                	cdqe   
   16252:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16256:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1625a:	48 01 d0             	add    rax,rdx
   1625d:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   16260:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   16263:	48 63 d0             	movsxd rdx,eax
   16266:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1626a:	48 01 d0             	add    rax,rdx
   1626d:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   16270:	01 d2                	add    edx,edx
   16272:	48 63 ca             	movsxd rcx,edx
   16275:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   16279:	48 01 ca             	add    rdx,rcx
   1627c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1627f:	88 02                	mov    BYTE PTR [rdx],al
   16281:	83 6d 98 01          	sub    DWORD PTR [rbp-0x68],0x1
   16285:	eb ba                	jmp    16241 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11f0>
   16287:	83 7d a4 03          	cmp    DWORD PTR [rbp-0x5c],0x3
   1628b:	74 1f                	je     162ac <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x125b>
   1628d:	48 8d 0d 74 49 02 00 	lea    rcx,[rip+0x24974]        # 3ac08 <stbi__depth_scale_table+0x10>
   16294:	ba 38 12 00 00       	mov    edx,0x1238
   16299:	48 8d 35 f8 3d 02 00 	lea    rsi,[rip+0x23df8]        # 3a098 <_IO_stdin_used+0x98>
   162a0:	48 8d 3d 41 4a 02 00 	lea    rdi,[rip+0x24a41]        # 3ace8 <stbi__depth_scale_table+0xf0>
   162a7:	e8 d4 df fe ff       	call   4280 <__assert_fail@plt>
   162ac:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   162b2:	83 e8 01             	sub    eax,0x1
   162b5:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   162b8:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   162bc:	0f 88 a5 00 00 00    	js     16367 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1316>
   162c2:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   162c5:	c1 e0 02             	shl    eax,0x2
   162c8:	48 98                	cdqe   
   162ca:	48 8d 50 03          	lea    rdx,[rax+0x3]
   162ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   162d2:	48 01 d0             	add    rax,rdx
   162d5:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   162d8:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   162db:	89 d0                	mov    eax,edx
   162dd:	01 c0                	add    eax,eax
   162df:	01 d0                	add    eax,edx
   162e1:	48 98                	cdqe   
   162e3:	48 8d 50 02          	lea    rdx,[rax+0x2]
   162e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   162eb:	48 01 d0             	add    rax,rdx
   162ee:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   162f1:	c1 e2 02             	shl    edx,0x2
   162f4:	48 63 d2             	movsxd rdx,edx
   162f7:	48 8d 4a 02          	lea    rcx,[rdx+0x2]
   162fb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   162ff:	48 01 ca             	add    rdx,rcx
   16302:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16305:	88 02                	mov    BYTE PTR [rdx],al
   16307:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   1630a:	89 d0                	mov    eax,edx
   1630c:	01 c0                	add    eax,eax
   1630e:	01 d0                	add    eax,edx
   16310:	48 98                	cdqe   
   16312:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16316:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1631a:	48 01 d0             	add    rax,rdx
   1631d:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   16320:	c1 e2 02             	shl    edx,0x2
   16323:	48 63 d2             	movsxd rdx,edx
   16326:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
   1632a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1632e:	48 01 ca             	add    rdx,rcx
   16331:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16334:	88 02                	mov    BYTE PTR [rdx],al
   16336:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   16339:	89 d0                	mov    eax,edx
   1633b:	01 c0                	add    eax,eax
   1633d:	01 d0                	add    eax,edx
   1633f:	48 63 d0             	movsxd rdx,eax
   16342:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16346:	48 01 d0             	add    rax,rdx
   16349:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   1634c:	c1 e2 02             	shl    edx,0x2
   1634f:	48 63 ca             	movsxd rcx,edx
   16352:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   16356:	48 01 ca             	add    rdx,rcx
   16359:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1635c:	88 02                	mov    BYTE PTR [rdx],al
   1635e:	83 6d 98 01          	sub    DWORD PTR [rbp-0x68],0x1
   16362:	e9 51 ff ff ff       	jmp    162b8 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1267>
   16367:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   1636b:	e9 ed f9 ff ff       	jmp    15d5d <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd0c>
   16370:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   16374:	75 73                	jne    163e9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1398>
   16376:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1637d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16381:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   16385:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16389:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1638d:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   16394:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1639a:	0f af 85 50 ff ff ff 	imul   eax,DWORD PTR [rbp-0xb0]
   163a1:	89 c2                	mov    edx,eax
   163a3:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   163a9:	0f af c2             	imul   eax,edx
   163ac:	39 45 80             	cmp    DWORD PTR [rbp-0x80],eax
   163af:	73 38                	jae    163e9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1398>
   163b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   163b5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   163b8:	0f b6 c0             	movzx  eax,al
   163bb:	c1 e0 08             	shl    eax,0x8
   163be:	89 c2                	mov    edx,eax
   163c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   163c4:	48 83 c0 01          	add    rax,0x1
   163c8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   163cb:	0f b6 c0             	movzx  eax,al
   163ce:	09 d0                	or     eax,edx
   163d0:	89 c2                	mov    edx,eax
   163d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   163d6:	66 89 10             	mov    WORD PTR [rax],dx
   163d9:	83 45 80 01          	add    DWORD PTR [rbp-0x80],0x1
   163dd:	48 83 45 e0 02       	add    QWORD PTR [rbp-0x20],0x2
   163e2:	48 83 45 d8 02       	add    QWORD PTR [rbp-0x28],0x2
   163e7:	eb ab                	jmp    16394 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1343>
   163e9:	b8 01 00 00 00       	mov    eax,0x1
   163ee:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   163f2:	c9                   	leave  
   163f3:	c3                   	ret    

00000000000163f4 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)>:
   163f4:	55                   	push   rbp
   163f5:	48 89 e5             	mov    rbp,rsp
   163f8:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
   163ff:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
   16406:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
   1640d:	89 95 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],edx
   16413:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
   16419:	44 89 85 24 ff ff ff 	mov    DWORD PTR [rbp-0xdc],r8d
   16420:	44 89 8d 20 ff ff ff 	mov    DWORD PTR [rbp-0xe0],r9d
   16427:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   16430:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16434:	31 c0                	xor    eax,eax
   16436:	83 bd 24 ff ff ff 10 	cmp    DWORD PTR [rbp-0xdc],0x10
   1643d:	75 07                	jne    16446 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x52>
   1643f:	b8 02 00 00 00       	mov    eax,0x2
   16444:	eb 05                	jmp    1644b <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x57>
   16446:	b8 01 00 00 00       	mov    eax,0x1
   1644b:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
   16451:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   16457:	0f af 85 4c ff ff ff 	imul   eax,DWORD PTR [rbp-0xb4]
   1645e:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
   16464:	83 7d 10 00          	cmp    DWORD PTR [rbp+0x10],0x0
   16468:	75 54                	jne    164be <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0xca>
   1646a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16471:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16474:	44 8b 48 04          	mov    r9d,DWORD PTR [rax+0x4]
   16478:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1647f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16482:	44 8b 00             	mov    r8d,DWORD PTR [rax]
   16485:	8b 8d 28 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xd8]
   1648b:	8b 95 2c ff ff ff    	mov    edx,DWORD PTR [rbp-0xd4]
   16491:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
   16498:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1649f:	8b bd 20 ff ff ff    	mov    edi,DWORD PTR [rbp-0xe0]
   164a5:	57                   	push   rdi
   164a6:	8b bd 24 ff ff ff    	mov    edi,DWORD PTR [rbp-0xdc]
   164ac:	57                   	push   rdi
   164ad:	48 89 c7             	mov    rdi,rax
   164b0:	e8 9c eb ff ff       	call   15051 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)>
   164b5:	48 83 c4 10          	add    rsp,0x10
   164b9:	e9 d4 03 00 00       	jmp    16892 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x49e>
   164be:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   164c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   164c8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   164cb:	89 c6                	mov    esi,eax
   164cd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   164d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   164d7:	8b 00                	mov    eax,DWORD PTR [rax]
   164d9:	89 c7                	mov    edi,eax
   164db:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   164e1:	b9 00 00 00 00       	mov    ecx,0x0
   164e6:	89 c2                	mov    edx,eax
   164e8:	e8 81 e8 fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   164ed:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
   164f4:	c7 85 40 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xc0],0x0
   164fe:	83 bd 40 ff ff ff 06 	cmp    DWORD PTR [rbp-0xc0],0x6
   16505:	0f 8f 70 03 00 00    	jg     1687b <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x487>
   1650b:	c7 85 70 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x90],0x0
   16515:	c7 85 74 ff ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x4
   1651f:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   16529:	c7 85 7c ff ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x84],0x2
   16533:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   1653a:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   16541:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   16548:	c7 45 90 00 00 00 00 	mov    DWORD PTR [rbp-0x70],0x0
   1654f:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
   16556:	c7 45 98 04 00 00 00 	mov    DWORD PTR [rbp-0x68],0x4
   1655d:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
   16564:	c7 45 a0 02 00 00 00 	mov    DWORD PTR [rbp-0x60],0x2
   1656b:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   16572:	c7 45 a8 01 00 00 00 	mov    DWORD PTR [rbp-0x58],0x1
   16579:	c7 45 b0 08 00 00 00 	mov    DWORD PTR [rbp-0x50],0x8
   16580:	c7 45 b4 08 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x8
   16587:	c7 45 b8 04 00 00 00 	mov    DWORD PTR [rbp-0x48],0x4
   1658e:	c7 45 bc 04 00 00 00 	mov    DWORD PTR [rbp-0x44],0x4
   16595:	c7 45 c0 02 00 00 00 	mov    DWORD PTR [rbp-0x40],0x2
   1659c:	c7 45 c4 02 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x2
   165a3:	c7 45 c8 01 00 00 00 	mov    DWORD PTR [rbp-0x38],0x1
   165aa:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
   165b1:	c7 45 d4 08 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x8
   165b8:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [rbp-0x28],0x8
   165bf:	c7 45 dc 04 00 00 00 	mov    DWORD PTR [rbp-0x24],0x4
   165c6:	c7 45 e0 04 00 00 00 	mov    DWORD PTR [rbp-0x20],0x4
   165cd:	c7 45 e4 02 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x2
   165d4:	c7 45 e8 02 00 00 00 	mov    DWORD PTR [rbp-0x18],0x2
   165db:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   165e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   165e5:	8b 10                	mov    edx,DWORD PTR [rax]
   165e7:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   165ed:	48 98                	cdqe   
   165ef:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   165f6:	29 c2                	sub    edx,eax
   165f8:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   165fe:	48 98                	cdqe   
   16600:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   16604:	01 d0                	add    eax,edx
   16606:	8d 50 ff             	lea    edx,[rax-0x1]
   16609:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   1660f:	48 98                	cdqe   
   16611:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   16615:	89 c1                	mov    ecx,eax
   16617:	89 d0                	mov    eax,edx
   16619:	ba 00 00 00 00       	mov    edx,0x0
   1661e:	f7 f1                	div    ecx
   16620:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
   16626:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1662d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16630:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   16633:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16639:	48 98                	cdqe   
   1663b:	8b 44 85 90          	mov    eax,DWORD PTR [rbp+rax*4-0x70]
   1663f:	29 c2                	sub    edx,eax
   16641:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16647:	48 98                	cdqe   
   16649:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
   1664d:	01 d0                	add    eax,edx
   1664f:	8d 50 ff             	lea    edx,[rax-0x1]
   16652:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16658:	48 98                	cdqe   
   1665a:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
   1665e:	89 c1                	mov    ecx,eax
   16660:	89 d0                	mov    eax,edx
   16662:	ba 00 00 00 00       	mov    edx,0x0
   16667:	f7 f1                	div    ecx
   16669:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   1666f:	83 bd 54 ff ff ff 00 	cmp    DWORD PTR [rbp-0xac],0x0
   16676:	0f 84 f3 01 00 00    	je     1686f <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x47b>
   1667c:	83 bd 58 ff ff ff 00 	cmp    DWORD PTR [rbp-0xa8],0x0
   16683:	0f 84 e6 01 00 00    	je     1686f <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x47b>
   16689:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16690:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16693:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   16696:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   1669d:	0f af 85 24 ff ff ff 	imul   eax,DWORD PTR [rbp-0xdc]
   166a4:	83 c0 07             	add    eax,0x7
   166a7:	c1 f8 03             	sar    eax,0x3
   166aa:	83 c0 01             	add    eax,0x1
   166ad:	0f af 85 58 ff ff ff 	imul   eax,DWORD PTR [rbp-0xa8]
   166b4:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   166ba:	44 8b 8d 58 ff ff ff 	mov    r9d,DWORD PTR [rbp-0xa8]
   166c1:	44 8b 85 54 ff ff ff 	mov    r8d,DWORD PTR [rbp-0xac]
   166c8:	8b 8d 28 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xd8]
   166ce:	8b 95 2c ff ff ff    	mov    edx,DWORD PTR [rbp-0xd4]
   166d4:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
   166db:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   166e2:	8b bd 20 ff ff ff    	mov    edi,DWORD PTR [rbp-0xe0]
   166e8:	57                   	push   rdi
   166e9:	8b bd 24 ff ff ff    	mov    edi,DWORD PTR [rbp-0xdc]
   166ef:	57                   	push   rdi
   166f0:	48 89 c7             	mov    rdi,rax
   166f3:	e8 59 e9 ff ff       	call   15051 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)>
   166f8:	48 83 c4 10          	add    rsp,0x10
   166fc:	85 c0                	test   eax,eax
   166fe:	0f 94 c0             	sete   al
   16701:	84 c0                	test   al,al
   16703:	74 19                	je     1671e <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x32a>
   16705:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1670c:	48 89 c7             	mov    rdi,rax
   1670f:	e8 ec dd fe ff       	call   4500 <free@plt>
   16714:	b8 00 00 00 00       	mov    eax,0x0
   16719:	e9 74 01 00 00       	jmp    16892 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x49e>
   1671e:	c7 85 48 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xb8],0x0
   16728:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
   1672e:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   16734:	0f 8d 09 01 00 00    	jge    16843 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x44f>
   1673a:	c7 85 44 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xbc],0x0
   16744:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   1674a:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
   16750:	0f 8d e1 00 00 00    	jge    16837 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x443>
   16756:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   1675c:	48 98                	cdqe   
   1675e:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
   16762:	0f af 85 48 ff ff ff 	imul   eax,DWORD PTR [rbp-0xb8]
   16769:	89 c2                	mov    edx,eax
   1676b:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16771:	48 98                	cdqe   
   16773:	8b 44 85 90          	mov    eax,DWORD PTR [rbp+rax*4-0x70]
   16777:	01 d0                	add    eax,edx
   16779:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   1677f:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16785:	48 98                	cdqe   
   16787:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   1678b:	0f af 85 44 ff ff ff 	imul   eax,DWORD PTR [rbp-0xbc]
   16792:	89 c2                	mov    edx,eax
   16794:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   1679a:	48 98                	cdqe   
   1679c:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   167a3:	01 d0                	add    eax,edx
   167a5:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   167ab:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   167b1:	48 98                	cdqe   
   167b3:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   167ba:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
   167be:	8b 95 48 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb8]
   167c4:	89 d6                	mov    esi,edx
   167c6:	0f af b5 54 ff ff ff 	imul   esi,DWORD PTR [rbp-0xac]
   167cd:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   167d3:	01 f2                	add    edx,esi
   167d5:	0f af 95 50 ff ff ff 	imul   edx,DWORD PTR [rbp-0xb0]
   167dc:	48 63 d2             	movsxd rdx,edx
   167df:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
   167e3:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   167ea:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   167ed:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   167ef:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   167f5:	0f af ca             	imul   ecx,edx
   167f8:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
   167fe:	0f af d1             	imul   edx,ecx
   16801:	89 d1                	mov    ecx,edx
   16803:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   16809:	0f af 95 50 ff ff ff 	imul   edx,DWORD PTR [rbp-0xb0]
   16810:	48 63 d2             	movsxd rdx,edx
   16813:	48 01 d1             	add    rcx,rdx
   16816:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
   1681d:	48 01 d1             	add    rcx,rdx
   16820:	48 89 c2             	mov    rdx,rax
   16823:	48 89 cf             	mov    rdi,rcx
   16826:	e8 25 db fe ff       	call   4350 <memcpy@plt>
   1682b:	83 85 44 ff ff ff 01 	add    DWORD PTR [rbp-0xbc],0x1
   16832:	e9 0d ff ff ff       	jmp    16744 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x350>
   16837:	83 85 48 ff ff ff 01 	add    DWORD PTR [rbp-0xb8],0x1
   1683e:	e9 e5 fe ff ff       	jmp    16728 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x334>
   16843:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1684a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1684e:	48 89 c7             	mov    rdi,rax
   16851:	e8 aa dc fe ff       	call   4500 <free@plt>
   16856:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1685c:	48 01 85 30 ff ff ff 	add    QWORD PTR [rbp-0xd0],rax
   16863:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   16869:	29 85 2c ff ff ff    	sub    DWORD PTR [rbp-0xd4],eax
   1686f:	83 85 40 ff ff ff 01 	add    DWORD PTR [rbp-0xc0],0x1
   16876:	e9 83 fc ff ff       	jmp    164fe <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x10a>
   1687b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16882:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
   16889:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   1688d:	b8 01 00 00 00       	mov    eax,0x1
   16892:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   16896:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   1689f:	74 05                	je     168a6 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x4b2>
   168a1:	e8 0a dc fe ff       	call   44b0 <__stack_chk_fail@plt>
   168a6:	c9                   	leave  
   168a7:	c3                   	ret    

00000000000168a8 <stbi__compute_transparency(stbi__png*, unsigned char*, int)>:
   168a8:	55                   	push   rbp
   168a9:	48 89 e5             	mov    rbp,rsp
   168ac:	48 83 ec 40          	sub    rsp,0x40
   168b0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   168b4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   168b8:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   168bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   168bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   168c2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   168c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   168ca:	8b 10                	mov    edx,DWORD PTR [rax]
   168cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   168d0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   168d3:	0f af c2             	imul   eax,edx
   168d6:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   168d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   168dd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   168e1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   168e5:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   168e9:	74 25                	je     16910 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x68>
   168eb:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
   168ef:	74 1f                	je     16910 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x68>
   168f1:	48 8d 0d 50 44 02 00 	lea    rcx,[rip+0x24450]        # 3ad48 <stbi__depth_scale_table+0x150>
   168f8:	ba 86 12 00 00       	mov    edx,0x1286
   168fd:	48 8d 35 94 37 02 00 	lea    rsi,[rip+0x23794]        # 3a098 <_IO_stdin_used+0x98>
   16904:	48 8d 3d 77 44 02 00 	lea    rdi,[rip+0x24477]        # 3ad82 <stbi__depth_scale_table+0x18a>
   1690b:	e8 70 d9 fe ff       	call   4280 <__assert_fail@plt>
   16910:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16914:	75 46                	jne    1695c <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0xb4>
   16916:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   1691d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16920:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16923:	0f 83 9e 00 00 00    	jae    169c7 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x11f>
   16929:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1692d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16930:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16934:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16937:	38 c2                	cmp    dl,al
   16939:	75 07                	jne    16942 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x9a>
   1693b:	ba 00 00 00 00       	mov    edx,0x0
   16940:	eb 05                	jmp    16947 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x9f>
   16942:	ba ff ff ff ff       	mov    edx,0xffffffff
   16947:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1694b:	48 83 c0 01          	add    rax,0x1
   1694f:	88 10                	mov    BYTE PTR [rax],dl
   16951:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
   16956:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   1695a:	eb c1                	jmp    1691d <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x75>
   1695c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16963:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16966:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16969:	73 5c                	jae    169c7 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x11f>
   1696b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1696f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16972:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16976:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16979:	38 c2                	cmp    dl,al
   1697b:	75 3f                	jne    169bc <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x114>
   1697d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16981:	48 83 c0 01          	add    rax,0x1
   16985:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16988:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1698c:	48 83 c0 01          	add    rax,0x1
   16990:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16993:	38 c2                	cmp    dl,al
   16995:	75 25                	jne    169bc <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x114>
   16997:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1699b:	48 83 c0 02          	add    rax,0x2
   1699f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   169a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   169a6:	48 83 c0 02          	add    rax,0x2
   169aa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   169ad:	38 c2                	cmp    dl,al
   169af:	75 0b                	jne    169bc <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x114>
   169b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   169b5:	48 83 c0 03          	add    rax,0x3
   169b9:	c6 00 00             	mov    BYTE PTR [rax],0x0
   169bc:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   169c1:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   169c5:	eb 9c                	jmp    16963 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0xbb>
   169c7:	b8 01 00 00 00       	mov    eax,0x1
   169cc:	c9                   	leave  
   169cd:	c3                   	ret    

00000000000169ce <stbi__compute_transparency16(stbi__png*, unsigned short*, int)>:
   169ce:	55                   	push   rbp
   169cf:	48 89 e5             	mov    rbp,rsp
   169d2:	48 83 ec 40          	sub    rsp,0x40
   169d6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   169da:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   169de:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   169e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   169e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   169e8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   169ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   169f0:	8b 10                	mov    edx,DWORD PTR [rax]
   169f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   169f6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   169f9:	0f af c2             	imul   eax,edx
   169fc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   169ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16a03:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16a07:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16a0b:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16a0f:	74 25                	je     16a36 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x68>
   16a11:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
   16a15:	74 1f                	je     16a36 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x68>
   16a17:	48 8d 0d 82 43 02 00 	lea    rcx,[rip+0x24382]        # 3ada0 <stbi__depth_scale_table+0x1a8>
   16a1e:	ba 9f 12 00 00       	mov    edx,0x129f
   16a23:	48 8d 35 6e 36 02 00 	lea    rsi,[rip+0x2366e]        # 3a098 <_IO_stdin_used+0x98>
   16a2a:	48 8d 3d 51 43 02 00 	lea    rdi,[rip+0x24351]        # 3ad82 <stbi__depth_scale_table+0x18a>
   16a31:	e8 4a d8 fe ff       	call   4280 <__assert_fail@plt>
   16a36:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16a3a:	75 48                	jne    16a84 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0xb6>
   16a3c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16a43:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16a46:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16a49:	0f 83 a5 00 00 00    	jae    16af4 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x126>
   16a4f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16a53:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16a56:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16a5a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16a5d:	66 39 c2             	cmp    dx,ax
   16a60:	75 07                	jne    16a69 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x9b>
   16a62:	ba 00 00 00 00       	mov    edx,0x0
   16a67:	eb 05                	jmp    16a6e <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0xa0>
   16a69:	ba ff ff ff ff       	mov    edx,0xffffffff
   16a6e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16a72:	48 83 c0 02          	add    rax,0x2
   16a76:	66 89 10             	mov    WORD PTR [rax],dx
   16a79:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   16a7e:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16a82:	eb bf                	jmp    16a43 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x75>
   16a84:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16a8b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16a8e:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16a91:	73 61                	jae    16af4 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x126>
   16a93:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16a97:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16a9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16a9e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16aa1:	66 39 c2             	cmp    dx,ax
   16aa4:	75 43                	jne    16ae9 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x11b>
   16aa6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16aaa:	48 83 c0 02          	add    rax,0x2
   16aae:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16ab1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16ab5:	48 83 c0 02          	add    rax,0x2
   16ab9:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16abc:	66 39 c2             	cmp    dx,ax
   16abf:	75 28                	jne    16ae9 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x11b>
   16ac1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16ac5:	48 83 c0 04          	add    rax,0x4
   16ac9:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16acc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16ad0:	48 83 c0 04          	add    rax,0x4
   16ad4:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16ad7:	66 39 c2             	cmp    dx,ax
   16ada:	75 0d                	jne    16ae9 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x11b>
   16adc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16ae0:	48 83 c0 06          	add    rax,0x6
   16ae4:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
   16ae9:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
   16aee:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16af2:	eb 97                	jmp    16a8b <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0xbd>
   16af4:	b8 01 00 00 00       	mov    eax,0x1
   16af9:	c9                   	leave  
   16afa:	c3                   	ret    

0000000000016afb <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)>:
   16afb:	55                   	push   rbp
   16afc:	48 89 e5             	mov    rbp,rsp
   16aff:	48 83 ec 50          	sub    rsp,0x50
   16b03:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   16b07:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   16b0b:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
   16b0e:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
   16b11:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16b15:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16b18:	8b 10                	mov    edx,DWORD PTR [rax]
   16b1a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16b1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16b21:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16b24:	0f af c2             	imul   eax,edx
   16b27:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   16b2a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16b2e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16b32:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16b36:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   16b39:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
   16b3c:	ba 00 00 00 00       	mov    edx,0x0
   16b41:	89 ce                	mov    esi,ecx
   16b43:	89 c7                	mov    edi,eax
   16b45:	e8 d6 e1 fe ff       	call   4d20 <stbi__malloc_mad2(int, int, int)>
   16b4a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   16b4e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   16b53:	75 11                	jne    16b66 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x6b>
   16b55:	48 8d 3d d7 34 02 00 	lea    rdi,[rip+0x234d7]        # 3a033 <_IO_stdin_used+0x33>
   16b5c:	e8 de df fe ff       	call   4b3f <stbi__err(char const*)>
   16b61:	e9 5b 01 00 00       	jmp    16cc1 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x1c6>
   16b66:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   16b6a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16b6e:	83 7d b8 03          	cmp    DWORD PTR [rbp-0x48],0x3
   16b72:	0f 85 84 00 00 00    	jne    16bfc <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x101>
   16b78:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   16b7f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   16b82:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   16b85:	0f 83 15 01 00 00    	jae    16ca0 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x1a5>
   16b8b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   16b8e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16b92:	48 01 d0             	add    rax,rdx
   16b95:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16b98:	0f b6 c0             	movzx  eax,al
   16b9b:	c1 e0 02             	shl    eax,0x2
   16b9e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   16ba1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   16ba4:	48 63 d0             	movsxd rdx,eax
   16ba7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16bab:	48 01 d0             	add    rax,rdx
   16bae:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16bb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   16bb5:	88 10                	mov    BYTE PTR [rax],dl
   16bb7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   16bba:	48 98                	cdqe   
   16bbc:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16bc0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16bc4:	48 01 d0             	add    rax,rdx
   16bc7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16bcb:	48 83 c2 01          	add    rdx,0x1
   16bcf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16bd2:	88 02                	mov    BYTE PTR [rdx],al
   16bd4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   16bd7:	48 98                	cdqe   
   16bd9:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16bdd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16be1:	48 01 d0             	add    rax,rdx
   16be4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16be8:	48 83 c2 02          	add    rdx,0x2
   16bec:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16bef:	88 02                	mov    BYTE PTR [rdx],al
   16bf1:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
   16bf6:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   16bfa:	eb 83                	jmp    16b7f <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x84>
   16bfc:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   16c03:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   16c06:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   16c09:	0f 83 91 00 00 00    	jae    16ca0 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x1a5>
   16c0f:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   16c12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16c16:	48 01 d0             	add    rax,rdx
   16c19:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16c1c:	0f b6 c0             	movzx  eax,al
   16c1f:	c1 e0 02             	shl    eax,0x2
   16c22:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   16c25:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16c28:	48 63 d0             	movsxd rdx,eax
   16c2b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16c2f:	48 01 d0             	add    rax,rdx
   16c32:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16c35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   16c39:	88 10                	mov    BYTE PTR [rax],dl
   16c3b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16c3e:	48 98                	cdqe   
   16c40:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16c44:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16c48:	48 01 d0             	add    rax,rdx
   16c4b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16c4f:	48 83 c2 01          	add    rdx,0x1
   16c53:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16c56:	88 02                	mov    BYTE PTR [rdx],al
   16c58:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16c5b:	48 98                	cdqe   
   16c5d:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16c61:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16c65:	48 01 d0             	add    rax,rdx
   16c68:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16c6c:	48 83 c2 02          	add    rdx,0x2
   16c70:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16c73:	88 02                	mov    BYTE PTR [rdx],al
   16c75:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16c78:	48 98                	cdqe   
   16c7a:	48 8d 50 03          	lea    rdx,[rax+0x3]
   16c7e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16c82:	48 01 d0             	add    rax,rdx
   16c85:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16c89:	48 83 c2 03          	add    rdx,0x3
   16c8d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16c90:	88 02                	mov    BYTE PTR [rdx],al
   16c92:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   16c97:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   16c9b:	e9 63 ff ff ff       	jmp    16c03 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x108>
   16ca0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16ca4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16ca8:	48 89 c7             	mov    rdi,rax
   16cab:	e8 50 d8 fe ff       	call   4500 <free@plt>
   16cb0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16cb4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   16cb8:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   16cbc:	b8 01 00 00 00       	mov    eax,0x1
   16cc1:	c9                   	leave  
   16cc2:	c3                   	ret    

0000000000016cc3 <stbi_set_unpremultiply_on_load>:
   16cc3:	55                   	push   rbp
   16cc4:	48 89 e5             	mov    rbp,rsp
   16cc7:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   16cca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   16ccd:	89 05 65 4a 03 00    	mov    DWORD PTR [rip+0x34a65],eax        # 4b738 <stbi__unpremultiply_on_load>
   16cd3:	90                   	nop
   16cd4:	5d                   	pop    rbp
   16cd5:	c3                   	ret    

0000000000016cd6 <stbi_convert_iphone_png_to_rgb>:
   16cd6:	55                   	push   rbp
   16cd7:	48 89 e5             	mov    rbp,rsp
   16cda:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   16cdd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   16ce0:	89 05 56 4a 03 00    	mov    DWORD PTR [rip+0x34a56],eax        # 4b73c <stbi__de_iphone_flag>
   16ce6:	90                   	nop
   16ce7:	5d                   	pop    rbp
   16ce8:	c3                   	ret    

0000000000016ce9 <stbi__de_iphone(stbi__png*)>:
   16ce9:	55                   	push   rbp
   16cea:	48 89 e5             	mov    rbp,rsp
   16ced:	48 83 ec 30          	sub    rsp,0x30
   16cf1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   16cf5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16cf9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16cfc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16d00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16d04:	8b 10                	mov    edx,DWORD PTR [rax]
   16d06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16d0a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16d0d:	0f af c2             	imul   eax,edx
   16d10:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   16d13:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16d17:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16d1b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16d1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16d23:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   16d26:	83 f8 03             	cmp    eax,0x3
   16d29:	75 44                	jne    16d6f <stbi__de_iphone(stbi__png*)+0x86>
   16d2b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16d32:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16d35:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16d38:	0f 83 93 01 00 00    	jae    16ed1 <stbi__de_iphone(stbi__png*)+0x1e8>
   16d3e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16d42:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16d45:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
   16d48:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16d4c:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   16d50:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16d54:	88 10                	mov    BYTE PTR [rax],dl
   16d56:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16d5a:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16d5e:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
   16d62:	88 02                	mov    BYTE PTR [rdx],al
   16d64:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
   16d69:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16d6d:	eb c3                	jmp    16d32 <stbi__de_iphone(stbi__png*)+0x49>
   16d6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16d73:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   16d76:	83 f8 04             	cmp    eax,0x4
   16d79:	74 1f                	je     16d9a <stbi__de_iphone(stbi__png*)+0xb1>
   16d7b:	48 8d 0d 66 40 02 00 	lea    rcx,[rip+0x24066]        # 3ade8 <stbi__depth_scale_table+0x1f0>
   16d82:	ba f0 12 00 00       	mov    edx,0x12f0
   16d87:	48 8d 35 0a 33 02 00 	lea    rsi,[rip+0x2330a]        # 3a098 <_IO_stdin_used+0x98>
   16d8e:	48 8d 3d 74 40 02 00 	lea    rdi,[rip+0x24074]        # 3ae09 <stbi__depth_scale_table+0x211>
   16d95:	e8 e6 d4 fe ff       	call   4280 <__assert_fail@plt>
   16d9a:	8b 05 98 49 03 00    	mov    eax,DWORD PTR [rip+0x34998]        # 4b738 <stbi__unpremultiply_on_load>
   16da0:	85 c0                	test   eax,eax
   16da2:	0f 84 e9 00 00 00    	je     16e91 <stbi__de_iphone(stbi__png*)+0x1a8>
   16da8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16daf:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16db2:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16db5:	0f 83 16 01 00 00    	jae    16ed1 <stbi__de_iphone(stbi__png*)+0x1e8>
   16dbb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16dbf:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
   16dc3:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
   16dc6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16dca:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16dcd:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
   16dd0:	80 7d e4 00          	cmp    BYTE PTR [rbp-0x1c],0x0
   16dd4:	0f 84 8d 00 00 00    	je     16e67 <stbi__de_iphone(stbi__png*)+0x17e>
   16dda:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
   16dde:	d0 e8                	shr    al,1
   16de0:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
   16de3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16de7:	48 83 c0 02          	add    rax,0x2
   16deb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16dee:	0f b6 d0             	movzx  edx,al
   16df1:	89 d0                	mov    eax,edx
   16df3:	c1 e0 08             	shl    eax,0x8
   16df6:	29 d0                	sub    eax,edx
   16df8:	89 c1                	mov    ecx,eax
   16dfa:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   16dfe:	01 c8                	add    eax,ecx
   16e00:	0f b6 75 e4          	movzx  esi,BYTE PTR [rbp-0x1c]
   16e04:	99                   	cdq    
   16e05:	f7 fe                	idiv   esi
   16e07:	89 c2                	mov    edx,eax
   16e09:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e0d:	88 10                	mov    BYTE PTR [rax],dl
   16e0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e13:	48 83 c0 01          	add    rax,0x1
   16e17:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16e1a:	0f b6 d0             	movzx  edx,al
   16e1d:	89 d0                	mov    eax,edx
   16e1f:	c1 e0 08             	shl    eax,0x8
   16e22:	29 d0                	sub    eax,edx
   16e24:	89 c1                	mov    ecx,eax
   16e26:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   16e2a:	01 c8                	add    eax,ecx
   16e2c:	0f b6 7d e4          	movzx  edi,BYTE PTR [rbp-0x1c]
   16e30:	99                   	cdq    
   16e31:	f7 ff                	idiv   edi
   16e33:	89 c2                	mov    edx,eax
   16e35:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e39:	48 83 c0 01          	add    rax,0x1
   16e3d:	88 10                	mov    BYTE PTR [rax],dl
   16e3f:	0f b6 55 e5          	movzx  edx,BYTE PTR [rbp-0x1b]
   16e43:	89 d0                	mov    eax,edx
   16e45:	c1 e0 08             	shl    eax,0x8
   16e48:	29 d0                	sub    eax,edx
   16e4a:	89 c1                	mov    ecx,eax
   16e4c:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   16e50:	01 c8                	add    eax,ecx
   16e52:	0f b6 75 e4          	movzx  esi,BYTE PTR [rbp-0x1c]
   16e56:	99                   	cdq    
   16e57:	f7 fe                	idiv   esi
   16e59:	89 c2                	mov    edx,eax
   16e5b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e5f:	48 83 c0 02          	add    rax,0x2
   16e63:	88 10                	mov    BYTE PTR [rax],dl
   16e65:	eb 1c                	jmp    16e83 <stbi__de_iphone(stbi__png*)+0x19a>
   16e67:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e6b:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   16e6f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e73:	88 10                	mov    BYTE PTR [rax],dl
   16e75:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16e79:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16e7d:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
   16e81:	88 02                	mov    BYTE PTR [rdx],al
   16e83:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   16e88:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16e8c:	e9 1e ff ff ff       	jmp    16daf <stbi__de_iphone(stbi__png*)+0xc6>
   16e91:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16e98:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16e9b:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16e9e:	73 31                	jae    16ed1 <stbi__de_iphone(stbi__png*)+0x1e8>
   16ea0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16ea4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16ea7:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
   16eaa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16eae:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   16eb2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16eb6:	88 10                	mov    BYTE PTR [rax],dl
   16eb8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16ebc:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16ec0:	0f b6 45 e3          	movzx  eax,BYTE PTR [rbp-0x1d]
   16ec4:	88 02                	mov    BYTE PTR [rdx],al
   16ec6:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   16ecb:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16ecf:	eb c7                	jmp    16e98 <stbi__de_iphone(stbi__png*)+0x1af>
   16ed1:	90                   	nop
   16ed2:	c9                   	leave  
   16ed3:	c3                   	ret    

0000000000016ed4 <stbi__parse_png_file(stbi__png*, int, int)>:
   16ed4:	55                   	push   rbp
   16ed5:	48 89 e5             	mov    rbp,rsp
   16ed8:	53                   	push   rbx
   16ed9:	48 81 ec 98 04 00 00 	sub    rsp,0x498
   16ee0:	48 89 bd 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rdi
   16ee7:	89 b5 64 fb ff ff    	mov    DWORD PTR [rbp-0x49c],esi
   16eed:	89 95 60 fb ff ff    	mov    DWORD PTR [rbp-0x4a0],edx
   16ef3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   16efc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   16f00:	31 c0                	xor    eax,eax
   16f02:	c6 85 7e fb ff ff 00 	mov    BYTE PTR [rbp-0x482],0x0
   16f09:	c6 85 7f fb ff ff 00 	mov    BYTE PTR [rbp-0x481],0x0
   16f10:	66 c7 85 dd fb ff ff 00 00 	mov    WORD PTR [rbp-0x423],0x0
   16f19:	c6 85 df fb ff ff 00 	mov    BYTE PTR [rbp-0x421],0x0
   16f20:	c7 85 84 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x47c],0x0
   16f2a:	c7 85 88 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x478],0x0
   16f34:	c7 85 90 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x470],0x0
   16f3e:	c7 85 94 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x46c],0x1
   16f48:	c7 85 9c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x464],0x0
   16f52:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   16f5c:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   16f66:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   16f6d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16f70:	48 89 85 b8 fb ff ff 	mov    QWORD PTR [rbp-0x448],rax
   16f77:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   16f7e:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   16f86:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   16f8d:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   16f95:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   16f9c:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
   16fa4:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   16fab:	48 89 c7             	mov    rdi,rax
   16fae:	e8 d5 df ff ff       	call   14f88 <stbi__check_png_header(stbi__context*)>
   16fb3:	85 c0                	test   eax,eax
   16fb5:	0f 94 c0             	sete   al
   16fb8:	84 c0                	test   al,al
   16fba:	74 0a                	je     16fc6 <stbi__parse_png_file(stbi__png*, int, int)+0xf2>
   16fbc:	b8 00 00 00 00       	mov    eax,0x0
   16fc1:	e9 f6 0c 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   16fc6:	83 bd 64 fb ff ff 01 	cmp    DWORD PTR [rbp-0x49c],0x1
   16fcd:	75 0a                	jne    16fd9 <stbi__parse_png_file(stbi__png*, int, int)+0x105>
   16fcf:	b8 01 00 00 00       	mov    eax,0x1
   16fd4:	e9 e3 0c 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   16fd9:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   16fe0:	48 89 c7             	mov    rdi,rax
   16fe3:	e8 4d df ff ff       	call   14f35 <stbi__get_chunk_header(stbi__context*)>
   16fe8:	48 89 85 cc fb ff ff 	mov    QWORD PTR [rbp-0x434],rax
   16fef:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   16ff5:	3d 53 4e 52 74       	cmp    eax,0x74524e53
   16ffa:	0f 84 12 05 00 00    	je     17512 <stbi__parse_png_file(stbi__png*, int, int)+0x63e>
   17000:	3d 53 4e 52 74       	cmp    eax,0x74524e53
   17005:	0f 87 0b 0c 00 00    	ja     17c16 <stbi__parse_png_file(stbi__png*, int, int)+0xd42>
   1700b:	3d 45 54 4c 50       	cmp    eax,0x504c5445
   17010:	0f 84 d5 03 00 00    	je     173eb <stbi__parse_png_file(stbi__png*, int, int)+0x517>
   17016:	3d 45 54 4c 50       	cmp    eax,0x504c5445
   1701b:	0f 87 f5 0b 00 00    	ja     17c16 <stbi__parse_png_file(stbi__png*, int, int)+0xd42>
   17021:	3d 52 44 48 49       	cmp    eax,0x49484452
   17026:	74 60                	je     17088 <stbi__parse_png_file(stbi__png*, int, int)+0x1b4>
   17028:	3d 52 44 48 49       	cmp    eax,0x49484452
   1702d:	0f 87 e3 0b 00 00    	ja     17c16 <stbi__parse_png_file(stbi__png*, int, int)+0xd42>
   17033:	3d 44 4e 45 49       	cmp    eax,0x49454e44
   17038:	0f 84 6a 08 00 00    	je     178a8 <stbi__parse_png_file(stbi__png*, int, int)+0x9d4>
   1703e:	3d 44 4e 45 49       	cmp    eax,0x49454e44
   17043:	0f 87 cd 0b 00 00    	ja     17c16 <stbi__parse_png_file(stbi__png*, int, int)+0xd42>
   17049:	3d 49 42 67 43       	cmp    eax,0x43674249
   1704e:	74 10                	je     17060 <stbi__parse_png_file(stbi__png*, int, int)+0x18c>
   17050:	3d 54 41 44 49       	cmp    eax,0x49444154
   17055:	0f 84 b9 06 00 00    	je     17714 <stbi__parse_png_file(stbi__png*, int, int)+0x840>
   1705b:	e9 b6 0b 00 00       	jmp    17c16 <stbi__parse_png_file(stbi__png*, int, int)+0xd42>
   17060:	c7 85 a4 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x1
   1706a:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17070:	89 c2                	mov    edx,eax
   17072:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17079:	89 d6                	mov    esi,edx
   1707b:	48 89 c7             	mov    rdi,rax
   1707e:	e8 20 f5 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   17083:	e9 20 0c 00 00       	jmp    17ca8 <stbi__parse_png_file(stbi__png*, int, int)+0xdd4>
   17088:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   1708f:	75 11                	jne    170a2 <stbi__parse_png_file(stbi__png*, int, int)+0x1ce>
   17091:	48 8d 3d 83 3d 02 00 	lea    rdi,[rip+0x23d83]        # 3ae1b <stbi__depth_scale_table+0x223>
   17098:	e8 a2 da fe ff       	call   4b3f <stbi__err(char const*)>
   1709d:	e9 1a 0c 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   170a2:	c7 85 94 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x46c],0x0
   170ac:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   170b2:	83 f8 0d             	cmp    eax,0xd
   170b5:	74 11                	je     170c8 <stbi__parse_png_file(stbi__png*, int, int)+0x1f4>
   170b7:	48 8d 3d 6b 3d 02 00 	lea    rdi,[rip+0x23d6b]        # 3ae29 <stbi__depth_scale_table+0x231>
   170be:	e8 7c da fe ff       	call   4b3f <stbi__err(char const*)>
   170c3:	e9 f4 0b 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   170c8:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   170cf:	48 89 c7             	mov    rdi,rax
   170d2:	e8 f9 f6 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   170d7:	48 8b 95 b8 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x448]
   170de:	89 02                	mov    DWORD PTR [rdx],eax
   170e0:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   170e7:	8b 00                	mov    eax,DWORD PTR [rax]
   170e9:	3d 00 00 00 01       	cmp    eax,0x1000000
   170ee:	76 11                	jbe    17101 <stbi__parse_png_file(stbi__png*, int, int)+0x22d>
   170f0:	48 8d 3d 55 35 02 00 	lea    rdi,[rip+0x23555]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   170f7:	e8 43 da fe ff       	call   4b3f <stbi__err(char const*)>
   170fc:	e9 bb 0b 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17101:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17108:	48 89 c7             	mov    rdi,rax
   1710b:	e8 c0 f6 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   17110:	48 8b 95 b8 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x448]
   17117:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
   1711a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17121:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17124:	3d 00 00 00 01       	cmp    eax,0x1000000
   17129:	76 11                	jbe    1713c <stbi__parse_png_file(stbi__png*, int, int)+0x268>
   1712b:	48 8d 3d 1a 35 02 00 	lea    rdi,[rip+0x2351a]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   17132:	e8 08 da fe ff       	call   4b3f <stbi__err(char const*)>
   17137:	e9 80 0b 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1713c:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17143:	48 89 c7             	mov    rdi,rax
   17146:	e8 64 f3 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1714b:	0f b6 d0             	movzx  edx,al
   1714e:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17155:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   17158:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1715f:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17162:	83 f8 01             	cmp    eax,0x1
   17165:	74 4d                	je     171b4 <stbi__parse_png_file(stbi__png*, int, int)+0x2e0>
   17167:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1716e:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17171:	83 f8 02             	cmp    eax,0x2
   17174:	74 3e                	je     171b4 <stbi__parse_png_file(stbi__png*, int, int)+0x2e0>
   17176:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1717d:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17180:	83 f8 04             	cmp    eax,0x4
   17183:	74 2f                	je     171b4 <stbi__parse_png_file(stbi__png*, int, int)+0x2e0>
   17185:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1718c:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1718f:	83 f8 08             	cmp    eax,0x8
   17192:	74 20                	je     171b4 <stbi__parse_png_file(stbi__png*, int, int)+0x2e0>
   17194:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1719b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1719e:	83 f8 10             	cmp    eax,0x10
   171a1:	74 11                	je     171b4 <stbi__parse_png_file(stbi__png*, int, int)+0x2e0>
   171a3:	48 8d 3d 8c 3c 02 00 	lea    rdi,[rip+0x23c8c]        # 3ae36 <stbi__depth_scale_table+0x23e>
   171aa:	e8 90 d9 fe ff       	call   4b3f <stbi__err(char const*)>
   171af:	e9 08 0b 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   171b4:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   171bb:	48 89 c7             	mov    rdi,rax
   171be:	e8 ec f2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   171c3:	0f b6 c0             	movzx  eax,al
   171c6:	89 85 a0 fb ff ff    	mov    DWORD PTR [rbp-0x460],eax
   171cc:	83 bd a0 fb ff ff 06 	cmp    DWORD PTR [rbp-0x460],0x6
   171d3:	7e 11                	jle    171e6 <stbi__parse_png_file(stbi__png*, int, int)+0x312>
   171d5:	48 8d 3d 6e 3c 02 00 	lea    rdi,[rip+0x23c6e]        # 3ae4a <stbi__depth_scale_table+0x252>
   171dc:	e8 5e d9 fe ff       	call   4b3f <stbi__err(char const*)>
   171e1:	e9 d6 0a 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   171e6:	83 bd a0 fb ff ff 03 	cmp    DWORD PTR [rbp-0x460],0x3
   171ed:	75 20                	jne    1720f <stbi__parse_png_file(stbi__png*, int, int)+0x33b>
   171ef:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   171f6:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   171f9:	83 f8 10             	cmp    eax,0x10
   171fc:	75 11                	jne    1720f <stbi__parse_png_file(stbi__png*, int, int)+0x33b>
   171fe:	48 8d 3d 45 3c 02 00 	lea    rdi,[rip+0x23c45]        # 3ae4a <stbi__depth_scale_table+0x252>
   17205:	e8 35 d9 fe ff       	call   4b3f <stbi__err(char const*)>
   1720a:	e9 ad 0a 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1720f:	83 bd a0 fb ff ff 03 	cmp    DWORD PTR [rbp-0x460],0x3
   17216:	75 09                	jne    17221 <stbi__parse_png_file(stbi__png*, int, int)+0x34d>
   17218:	c6 85 7e fb ff ff 03 	mov    BYTE PTR [rbp-0x482],0x3
   1721f:	eb 1e                	jmp    1723f <stbi__parse_png_file(stbi__png*, int, int)+0x36b>
   17221:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   17227:	83 e0 01             	and    eax,0x1
   1722a:	85 c0                	test   eax,eax
   1722c:	74 11                	je     1723f <stbi__parse_png_file(stbi__png*, int, int)+0x36b>
   1722e:	48 8d 3d 15 3c 02 00 	lea    rdi,[rip+0x23c15]        # 3ae4a <stbi__depth_scale_table+0x252>
   17235:	e8 05 d9 fe ff       	call   4b3f <stbi__err(char const*)>
   1723a:	e9 7d 0a 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1723f:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17246:	48 89 c7             	mov    rdi,rax
   17249:	e8 61 f2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1724e:	0f b6 c0             	movzx  eax,al
   17251:	89 85 a8 fb ff ff    	mov    DWORD PTR [rbp-0x458],eax
   17257:	83 bd a8 fb ff ff 00 	cmp    DWORD PTR [rbp-0x458],0x0
   1725e:	74 11                	je     17271 <stbi__parse_png_file(stbi__png*, int, int)+0x39d>
   17260:	48 8d 3d ed 3b 02 00 	lea    rdi,[rip+0x23bed]        # 3ae54 <stbi__depth_scale_table+0x25c>
   17267:	e8 d3 d8 fe ff       	call   4b3f <stbi__err(char const*)>
   1726c:	e9 4b 0a 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17271:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17278:	48 89 c7             	mov    rdi,rax
   1727b:	e8 2f f2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   17280:	0f b6 c0             	movzx  eax,al
   17283:	89 85 ac fb ff ff    	mov    DWORD PTR [rbp-0x454],eax
   17289:	83 bd ac fb ff ff 00 	cmp    DWORD PTR [rbp-0x454],0x0
   17290:	74 11                	je     172a3 <stbi__parse_png_file(stbi__png*, int, int)+0x3cf>
   17292:	48 8d 3d cb 3b 02 00 	lea    rdi,[rip+0x23bcb]        # 3ae64 <stbi__depth_scale_table+0x26c>
   17299:	e8 a1 d8 fe ff       	call   4b3f <stbi__err(char const*)>
   1729e:	e9 19 0a 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   172a3:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   172aa:	48 89 c7             	mov    rdi,rax
   172ad:	e8 fd f1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   172b2:	0f b6 c0             	movzx  eax,al
   172b5:	89 85 9c fb ff ff    	mov    DWORD PTR [rbp-0x464],eax
   172bb:	83 bd 9c fb ff ff 01 	cmp    DWORD PTR [rbp-0x464],0x1
   172c2:	7e 11                	jle    172d5 <stbi__parse_png_file(stbi__png*, int, int)+0x401>
   172c4:	48 8d 3d ab 3b 02 00 	lea    rdi,[rip+0x23bab]        # 3ae76 <stbi__depth_scale_table+0x27e>
   172cb:	e8 6f d8 fe ff       	call   4b3f <stbi__err(char const*)>
   172d0:	e9 e7 09 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   172d5:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   172dc:	8b 00                	mov    eax,DWORD PTR [rax]
   172de:	85 c0                	test   eax,eax
   172e0:	74 0e                	je     172f0 <stbi__parse_png_file(stbi__png*, int, int)+0x41c>
   172e2:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   172e9:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   172ec:	85 c0                	test   eax,eax
   172ee:	75 11                	jne    17301 <stbi__parse_png_file(stbi__png*, int, int)+0x42d>
   172f0:	48 8d 3d 94 3b 02 00 	lea    rdi,[rip+0x23b94]        # 3ae8b <stbi__depth_scale_table+0x293>
   172f7:	e8 43 d8 fe ff       	call   4b3f <stbi__err(char const*)>
   172fc:	e9 bb 09 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17301:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17308:	0f 85 95 00 00 00    	jne    173a3 <stbi__parse_png_file(stbi__png*, int, int)+0x4cf>
   1730e:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   17314:	83 e0 02             	and    eax,0x2
   17317:	85 c0                	test   eax,eax
   17319:	74 07                	je     17322 <stbi__parse_png_file(stbi__png*, int, int)+0x44e>
   1731b:	ba 03 00 00 00       	mov    edx,0x3
   17320:	eb 05                	jmp    17327 <stbi__parse_png_file(stbi__png*, int, int)+0x453>
   17322:	ba 01 00 00 00       	mov    edx,0x1
   17327:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1732d:	c1 f8 02             	sar    eax,0x2
   17330:	83 e0 01             	and    eax,0x1
   17333:	01 c2                	add    edx,eax
   17335:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1733c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   1733f:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17346:	8b 18                	mov    ebx,DWORD PTR [rax]
   17348:	b8 00 00 00 40       	mov    eax,0x40000000
   1734d:	ba 00 00 00 00       	mov    edx,0x0
   17352:	f7 f3                	div    ebx
   17354:	89 c2                	mov    edx,eax
   17356:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1735d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17360:	89 c1                	mov    ecx,eax
   17362:	89 d0                	mov    eax,edx
   17364:	ba 00 00 00 00       	mov    edx,0x0
   17369:	f7 f1                	div    ecx
   1736b:	89 c2                	mov    edx,eax
   1736d:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17374:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17377:	39 c2                	cmp    edx,eax
   17379:	73 11                	jae    1738c <stbi__parse_png_file(stbi__png*, int, int)+0x4b8>
   1737b:	48 8d 3d ca 32 02 00 	lea    rdi,[rip+0x232ca]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   17382:	e8 b8 d7 fe ff       	call   4b3f <stbi__err(char const*)>
   17387:	e9 30 09 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1738c:	83 bd 64 fb ff ff 02 	cmp    DWORD PTR [rbp-0x49c],0x2
   17393:	0f 85 08 09 00 00    	jne    17ca1 <stbi__parse_png_file(stbi__png*, int, int)+0xdcd>
   17399:	b8 01 00 00 00       	mov    eax,0x1
   1739e:	e9 19 09 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   173a3:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   173aa:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
   173b1:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   173b8:	8b 18                	mov    ebx,DWORD PTR [rax]
   173ba:	b8 00 00 00 10       	mov    eax,0x10000000
   173bf:	ba 00 00 00 00       	mov    edx,0x0
   173c4:	f7 f3                	div    ebx
   173c6:	89 c2                	mov    edx,eax
   173c8:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   173cf:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   173d2:	39 c2                	cmp    edx,eax
   173d4:	0f 83 c7 08 00 00    	jae    17ca1 <stbi__parse_png_file(stbi__png*, int, int)+0xdcd>
   173da:	48 8d 3d 6b 32 02 00 	lea    rdi,[rip+0x2326b]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   173e1:	e8 59 d7 fe ff       	call   4b3f <stbi__err(char const*)>
   173e6:	e9 d1 08 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   173eb:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   173f2:	74 11                	je     17405 <stbi__parse_png_file(stbi__png*, int, int)+0x531>
   173f4:	48 8d 3d 9e 3a 02 00 	lea    rdi,[rip+0x23a9e]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   173fb:	e8 3f d7 fe ff       	call   4b3f <stbi__err(char const*)>
   17400:	e9 b7 08 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17405:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   1740b:	3d 00 03 00 00       	cmp    eax,0x300
   17410:	76 11                	jbe    17423 <stbi__parse_png_file(stbi__png*, int, int)+0x54f>
   17412:	48 8d 3d 8f 3a 02 00 	lea    rdi,[rip+0x23a8f]        # 3aea8 <stbi__depth_scale_table+0x2b0>
   17419:	e8 21 d7 fe ff       	call   4b3f <stbi__err(char const*)>
   1741e:	e9 99 08 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17423:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17429:	89 c2                	mov    edx,eax
   1742b:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
   17430:	48 0f af c2          	imul   rax,rdx
   17434:	48 c1 e8 20          	shr    rax,0x20
   17438:	d1 e8                	shr    eax,1
   1743a:	89 85 90 fb ff ff    	mov    DWORD PTR [rbp-0x470],eax
   17440:	8b 95 90 fb ff ff    	mov    edx,DWORD PTR [rbp-0x470]
   17446:	89 d0                	mov    eax,edx
   17448:	01 c0                	add    eax,eax
   1744a:	01 c2                	add    edx,eax
   1744c:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17452:	39 c2                	cmp    edx,eax
   17454:	74 11                	je     17467 <stbi__parse_png_file(stbi__png*, int, int)+0x593>
   17456:	48 8d 3d 4b 3a 02 00 	lea    rdi,[rip+0x23a4b]        # 3aea8 <stbi__depth_scale_table+0x2b0>
   1745d:	e8 dd d6 fe ff       	call   4b3f <stbi__err(char const*)>
   17462:	e9 55 08 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17467:	c7 85 8c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x474],0x0
   17471:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   17477:	3b 85 90 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x470]
   1747d:	0f 83 21 08 00 00    	jae    17ca4 <stbi__parse_png_file(stbi__png*, int, int)+0xdd0>
   17483:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   17489:	8d 1c 85 00 00 00 00 	lea    ebx,[rax*4+0x0]
   17490:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17497:	48 89 c7             	mov    rdi,rax
   1749a:	e8 10 f0 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1749f:	89 da                	mov    edx,ebx
   174a1:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   174a8:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   174ae:	c1 e0 02             	shl    eax,0x2
   174b1:	8d 58 01             	lea    ebx,[rax+0x1]
   174b4:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   174bb:	48 89 c7             	mov    rdi,rax
   174be:	e8 ec ef fe ff       	call   64af <stbi__get8(stbi__context*)>
   174c3:	89 da                	mov    edx,ebx
   174c5:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   174cc:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   174d2:	c1 e0 02             	shl    eax,0x2
   174d5:	8d 58 02             	lea    ebx,[rax+0x2]
   174d8:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   174df:	48 89 c7             	mov    rdi,rax
   174e2:	e8 c8 ef fe ff       	call   64af <stbi__get8(stbi__context*)>
   174e7:	89 da                	mov    edx,ebx
   174e9:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   174f0:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   174f6:	c1 e0 02             	shl    eax,0x2
   174f9:	83 c0 03             	add    eax,0x3
   174fc:	89 c0                	mov    eax,eax
   174fe:	c6 84 05 e0 fb ff ff ff 	mov    BYTE PTR [rbp+rax*1-0x420],0xff
   17506:	83 85 8c fb ff ff 01 	add    DWORD PTR [rbp-0x474],0x1
   1750d:	e9 5f ff ff ff       	jmp    17471 <stbi__parse_png_file(stbi__png*, int, int)+0x59d>
   17512:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   17519:	74 11                	je     1752c <stbi__parse_png_file(stbi__png*, int, int)+0x658>
   1751b:	48 8d 3d 77 39 02 00 	lea    rdi,[rip+0x23977]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   17522:	e8 18 d6 fe ff       	call   4b3f <stbi__err(char const*)>
   17527:	e9 90 07 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1752c:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17533:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17537:	48 85 c0             	test   rax,rax
   1753a:	74 11                	je     1754d <stbi__parse_png_file(stbi__png*, int, int)+0x679>
   1753c:	48 8d 3d 72 39 02 00 	lea    rdi,[rip+0x23972]        # 3aeb5 <stbi__depth_scale_table+0x2bd>
   17543:	e8 f7 d5 fe ff       	call   4b3f <stbi__err(char const*)>
   17548:	e9 6f 07 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1754d:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17554:	0f 84 aa 00 00 00    	je     17604 <stbi__parse_png_file(stbi__png*, int, int)+0x730>
   1755a:	83 bd 64 fb ff ff 02 	cmp    DWORD PTR [rbp-0x49c],0x2
   17561:	75 18                	jne    1757b <stbi__parse_png_file(stbi__png*, int, int)+0x6a7>
   17563:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1756a:	c7 40 08 04 00 00 00 	mov    DWORD PTR [rax+0x8],0x4
   17571:	b8 01 00 00 00       	mov    eax,0x1
   17576:	e9 41 07 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1757b:	83 bd 90 fb ff ff 00 	cmp    DWORD PTR [rbp-0x470],0x0
   17582:	75 11                	jne    17595 <stbi__parse_png_file(stbi__png*, int, int)+0x6c1>
   17584:	48 8d 3d 3a 39 02 00 	lea    rdi,[rip+0x2393a]        # 3aec5 <stbi__depth_scale_table+0x2cd>
   1758b:	e8 af d5 fe ff       	call   4b3f <stbi__err(char const*)>
   17590:	e9 27 07 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17595:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   1759b:	39 85 90 fb ff ff    	cmp    DWORD PTR [rbp-0x470],eax
   175a1:	73 11                	jae    175b4 <stbi__parse_png_file(stbi__png*, int, int)+0x6e0>
   175a3:	48 8d 3d 2c 39 02 00 	lea    rdi,[rip+0x2392c]        # 3aed6 <stbi__depth_scale_table+0x2de>
   175aa:	e8 90 d5 fe ff       	call   4b3f <stbi__err(char const*)>
   175af:	e9 08 07 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   175b4:	c6 85 7e fb ff ff 04 	mov    BYTE PTR [rbp-0x482],0x4
   175bb:	c7 85 8c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x474],0x0
   175c5:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   175cb:	39 85 8c fb ff ff    	cmp    DWORD PTR [rbp-0x474],eax
   175d1:	0f 83 d0 06 00 00    	jae    17ca7 <stbi__parse_png_file(stbi__png*, int, int)+0xdd3>
   175d7:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   175dd:	c1 e0 02             	shl    eax,0x2
   175e0:	8d 58 03             	lea    ebx,[rax+0x3]
   175e3:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   175ea:	48 89 c7             	mov    rdi,rax
   175ed:	e8 bd ee fe ff       	call   64af <stbi__get8(stbi__context*)>
   175f2:	89 da                	mov    edx,ebx
   175f4:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   175fb:	83 85 8c fb ff ff 01 	add    DWORD PTR [rbp-0x474],0x1
   17602:	eb c1                	jmp    175c5 <stbi__parse_png_file(stbi__png*, int, int)+0x6f1>
   17604:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1760b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1760e:	83 e0 01             	and    eax,0x1
   17611:	85 c0                	test   eax,eax
   17613:	75 11                	jne    17626 <stbi__parse_png_file(stbi__png*, int, int)+0x752>
   17615:	48 8d 3d c7 38 02 00 	lea    rdi,[rip+0x238c7]        # 3aee3 <stbi__depth_scale_table+0x2eb>
   1761c:	e8 1e d5 fe ff       	call   4b3f <stbi__err(char const*)>
   17621:	e9 96 06 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17626:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   1762c:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17633:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17636:	01 c0                	add    eax,eax
   17638:	39 c2                	cmp    edx,eax
   1763a:	74 11                	je     1764d <stbi__parse_png_file(stbi__png*, int, int)+0x779>
   1763c:	48 8d 3d 93 38 02 00 	lea    rdi,[rip+0x23893]        # 3aed6 <stbi__depth_scale_table+0x2de>
   17643:	e8 f7 d4 fe ff       	call   4b3f <stbi__err(char const*)>
   17648:	e9 6f 06 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1764d:	c6 85 7f fb ff ff 01 	mov    BYTE PTR [rbp-0x481],0x1
   17654:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1765b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1765e:	83 f8 10             	cmp    eax,0x10
   17661:	75 4a                	jne    176ad <stbi__parse_png_file(stbi__png*, int, int)+0x7d9>
   17663:	c7 85 98 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x468],0x0
   1766d:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17674:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17677:	39 85 98 fb ff ff    	cmp    DWORD PTR [rbp-0x468],eax
   1767d:	0f 8d 24 06 00 00    	jge    17ca7 <stbi__parse_png_file(stbi__png*, int, int)+0xdd3>
   17683:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1768a:	48 89 c7             	mov    rdi,rax
   1768d:	e8 00 f1 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   17692:	89 c2                	mov    edx,eax
   17694:	8b 85 98 fb ff ff    	mov    eax,DWORD PTR [rbp-0x468]
   1769a:	48 98                	cdqe   
   1769c:	66 89 94 45 d6 fb ff ff 	mov    WORD PTR [rbp+rax*2-0x42a],dx
   176a4:	83 85 98 fb ff ff 01 	add    DWORD PTR [rbp-0x468],0x1
   176ab:	eb c0                	jmp    1766d <stbi__parse_png_file(stbi__png*, int, int)+0x799>
   176ad:	c7 85 98 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x468],0x0
   176b7:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   176be:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   176c1:	39 85 98 fb ff ff    	cmp    DWORD PTR [rbp-0x468],eax
   176c7:	0f 8d da 05 00 00    	jge    17ca7 <stbi__parse_png_file(stbi__png*, int, int)+0xdd3>
   176cd:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   176d4:	48 89 c7             	mov    rdi,rax
   176d7:	e8 b6 f0 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   176dc:	89 c1                	mov    ecx,eax
   176de:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   176e5:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   176e8:	48 98                	cdqe   
   176ea:	48 8d 15 07 35 02 00 	lea    rdx,[rip+0x23507]        # 3abf8 <stbi__depth_scale_table>
   176f1:	0f b6 14 10          	movzx  edx,BYTE PTR [rax+rdx*1]
   176f5:	89 c8                	mov    eax,ecx
   176f7:	0f af c2             	imul   eax,edx
   176fa:	89 c2                	mov    edx,eax
   176fc:	8b 85 98 fb ff ff    	mov    eax,DWORD PTR [rbp-0x468]
   17702:	48 98                	cdqe   
   17704:	88 94 05 dd fb ff ff 	mov    BYTE PTR [rbp+rax*1-0x423],dl
   1770b:	83 85 98 fb ff ff 01 	add    DWORD PTR [rbp-0x468],0x1
   17712:	eb a3                	jmp    176b7 <stbi__parse_png_file(stbi__png*, int, int)+0x7e3>
   17714:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   1771b:	74 11                	je     1772e <stbi__parse_png_file(stbi__png*, int, int)+0x85a>
   1771d:	48 8d 3d 75 37 02 00 	lea    rdi,[rip+0x23775]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   17724:	e8 16 d4 fe ff       	call   4b3f <stbi__err(char const*)>
   17729:	e9 8e 05 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1772e:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17735:	74 1a                	je     17751 <stbi__parse_png_file(stbi__png*, int, int)+0x87d>
   17737:	83 bd 90 fb ff ff 00 	cmp    DWORD PTR [rbp-0x470],0x0
   1773e:	75 11                	jne    17751 <stbi__parse_png_file(stbi__png*, int, int)+0x87d>
   17740:	48 8d 3d ac 37 02 00 	lea    rdi,[rip+0x237ac]        # 3aef3 <stbi__depth_scale_table+0x2fb>
   17747:	e8 f3 d3 fe ff       	call   4b3f <stbi__err(char const*)>
   1774c:	e9 6b 05 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17751:	83 bd 64 fb ff ff 02 	cmp    DWORD PTR [rbp-0x49c],0x2
   17758:	75 1b                	jne    17775 <stbi__parse_png_file(stbi__png*, int, int)+0x8a1>
   1775a:	0f b6 95 7e fb ff ff 	movzx  edx,BYTE PTR [rbp-0x482]
   17761:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17768:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   1776b:	b8 01 00 00 00       	mov    eax,0x1
   17770:	e9 47 05 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17775:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   1777b:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   17781:	01 d0                	add    eax,edx
   17783:	89 c2                	mov    edx,eax
   17785:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   1778b:	39 c2                	cmp    edx,eax
   1778d:	7d 0a                	jge    17799 <stbi__parse_png_file(stbi__png*, int, int)+0x8c5>
   1778f:	b8 00 00 00 00       	mov    eax,0x0
   17794:	e9 23 05 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17799:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   1779f:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   177a5:	01 d0                	add    eax,edx
   177a7:	39 85 88 fb ff ff    	cmp    DWORD PTR [rbp-0x478],eax
   177ad:	0f 83 9c 00 00 00    	jae    1784f <stbi__parse_png_file(stbi__png*, int, int)+0x97b>
   177b3:	8b 85 88 fb ff ff    	mov    eax,DWORD PTR [rbp-0x478]
   177b9:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
   177bf:	83 bd 88 fb ff ff 00 	cmp    DWORD PTR [rbp-0x478],0x0
   177c6:	75 19                	jne    177e1 <stbi__parse_png_file(stbi__png*, int, int)+0x90d>
   177c8:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   177ce:	ba 00 10 00 00       	mov    edx,0x1000
   177d3:	3d 00 10 00 00       	cmp    eax,0x1000
   177d8:	0f 42 c2             	cmovb  eax,edx
   177db:	89 85 88 fb ff ff    	mov    DWORD PTR [rbp-0x478],eax
   177e1:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   177e7:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   177ed:	01 d0                	add    eax,edx
   177ef:	39 85 88 fb ff ff    	cmp    DWORD PTR [rbp-0x478],eax
   177f5:	73 08                	jae    177ff <stbi__parse_png_file(stbi__png*, int, int)+0x92b>
   177f7:	d1 a5 88 fb ff ff    	shl    DWORD PTR [rbp-0x478],1
   177fd:	eb e2                	jmp    177e1 <stbi__parse_png_file(stbi__png*, int, int)+0x90d>
   177ff:	8b 95 88 fb ff ff    	mov    edx,DWORD PTR [rbp-0x478]
   17805:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1780c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17810:	48 89 d6             	mov    rsi,rdx
   17813:	48 89 c7             	mov    rdi,rax
   17816:	e8 d5 ce fe ff       	call   46f0 <realloc@plt>
   1781b:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
   17822:	48 83 bd c0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x440],0x0
   1782a:	75 11                	jne    1783d <stbi__parse_png_file(stbi__png*, int, int)+0x969>
   1782c:	48 8d 3d 00 28 02 00 	lea    rdi,[rip+0x22800]        # 3a033 <_IO_stdin_used+0x33>
   17833:	e8 07 d3 fe ff       	call   4b3f <stbi__err(char const*)>
   17838:	e9 7f 04 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   1783d:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17844:	48 8b 95 c0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x440]
   1784b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   1784f:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17855:	89 c2                	mov    edx,eax
   17857:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1785e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   17862:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   17868:	48 01 c1             	add    rcx,rax
   1786b:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17872:	48 89 ce             	mov    rsi,rcx
   17875:	48 89 c7             	mov    rdi,rax
   17878:	e8 e1 ed fe ff       	call   665e <stbi__getn(stbi__context*, unsigned char*, int)>
   1787d:	85 c0                	test   eax,eax
   1787f:	0f 94 c0             	sete   al
   17882:	84 c0                	test   al,al
   17884:	74 11                	je     17897 <stbi__parse_png_file(stbi__png*, int, int)+0x9c3>
   17886:	48 8d 3d 6e 36 02 00 	lea    rdi,[rip+0x2366e]        # 3aefb <stbi__depth_scale_table+0x303>
   1788d:	e8 ad d2 fe ff       	call   4b3f <stbi__err(char const*)>
   17892:	e9 25 04 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17897:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   1789d:	01 85 84 fb ff ff    	add    DWORD PTR [rbp-0x47c],eax
   178a3:	e9 00 04 00 00       	jmp    17ca8 <stbi__parse_png_file(stbi__png*, int, int)+0xdd4>
   178a8:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   178af:	74 11                	je     178c2 <stbi__parse_png_file(stbi__png*, int, int)+0x9ee>
   178b1:	48 8d 3d e1 35 02 00 	lea    rdi,[rip+0x235e1]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   178b8:	e8 82 d2 fe ff       	call   4b3f <stbi__err(char const*)>
   178bd:	e9 fa 03 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   178c2:	83 bd 64 fb ff ff 00 	cmp    DWORD PTR [rbp-0x49c],0x0
   178c9:	74 0a                	je     178d5 <stbi__parse_png_file(stbi__png*, int, int)+0xa01>
   178cb:	b8 01 00 00 00       	mov    eax,0x1
   178d0:	e9 e7 03 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   178d5:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   178dc:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   178e0:	48 85 c0             	test   rax,rax
   178e3:	75 11                	jne    178f6 <stbi__parse_png_file(stbi__png*, int, int)+0xa22>
   178e5:	48 8d 3d 19 36 02 00 	lea    rdi,[rip+0x23619]        # 3af05 <stbi__depth_scale_table+0x30d>
   178ec:	e8 4e d2 fe ff       	call   4b3f <stbi__err(char const*)>
   178f1:	e9 c6 03 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   178f6:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   178fd:	8b 10                	mov    edx,DWORD PTR [rax]
   178ff:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17906:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17909:	0f af c2             	imul   eax,edx
   1790c:	83 c0 07             	add    eax,0x7
   1790f:	c1 e8 03             	shr    eax,0x3
   17912:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
   17918:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1791f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17922:	0f af 85 b0 fb ff ff 	imul   eax,DWORD PTR [rbp-0x450]
   17929:	89 c2                	mov    edx,eax
   1792b:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17932:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17935:	0f af d0             	imul   edx,eax
   17938:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1793f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17942:	01 d0                	add    eax,edx
   17944:	89 85 80 fb ff ff    	mov    DWORD PTR [rbp-0x480],eax
   1794a:	83 bd a4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x45c],0x0
   17951:	0f 94 c0             	sete   al
   17954:	0f b6 c8             	movzx  ecx,al
   17957:	8b 85 80 fb ff ff    	mov    eax,DWORD PTR [rbp-0x480]
   1795d:	89 c7                	mov    edi,eax
   1795f:	8b b5 84 fb ff ff    	mov    esi,DWORD PTR [rbp-0x47c]
   17965:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1796c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17970:	48 8d 95 80 fb ff ff 	lea    rdx,[rbp-0x480]
   17977:	41 89 c8             	mov    r8d,ecx
   1797a:	48 89 d1             	mov    rcx,rdx
   1797d:	89 fa                	mov    edx,edi
   1797f:	48 89 c7             	mov    rdi,rax
   17982:	e8 1d d2 ff ff       	call   14ba4 <stbi_zlib_decode_malloc_guesssize_headerflag>
   17987:	48 8b 95 68 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x498]
   1798e:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
   17992:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17999:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1799d:	48 85 c0             	test   rax,rax
   179a0:	75 0a                	jne    179ac <stbi__parse_png_file(stbi__png*, int, int)+0xad8>
   179a2:	b8 00 00 00 00       	mov    eax,0x0
   179a7:	e9 10 03 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   179ac:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   179b3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   179b7:	48 89 c7             	mov    rdi,rax
   179ba:	e8 41 cb fe ff       	call   4500 <free@plt>
   179bf:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   179c6:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   179ce:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   179d5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   179d8:	83 c0 01             	add    eax,0x1
   179db:	39 85 60 fb ff ff    	cmp    DWORD PTR [rbp-0x4a0],eax
   179e1:	75 12                	jne    179f5 <stbi__parse_png_file(stbi__png*, int, int)+0xb21>
   179e3:	83 bd 60 fb ff ff 03 	cmp    DWORD PTR [rbp-0x4a0],0x3
   179ea:	74 09                	je     179f5 <stbi__parse_png_file(stbi__png*, int, int)+0xb21>
   179ec:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   179f3:	74 09                	je     179fe <stbi__parse_png_file(stbi__png*, int, int)+0xb2a>
   179f5:	80 bd 7f fb ff ff 00 	cmp    BYTE PTR [rbp-0x481],0x0
   179fc:	74 19                	je     17a17 <stbi__parse_png_file(stbi__png*, int, int)+0xb43>
   179fe:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17a05:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17a08:	8d 50 01             	lea    edx,[rax+0x1]
   17a0b:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17a12:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17a15:	eb 14                	jmp    17a2b <stbi__parse_png_file(stbi__png*, int, int)+0xb57>
   17a17:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17a1e:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   17a21:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17a28:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17a2b:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a32:	44 8b 40 20          	mov    r8d,DWORD PTR [rax+0x20]
   17a36:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17a3d:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
   17a40:	8b 95 80 fb ff ff    	mov    edx,DWORD PTR [rbp-0x480]
   17a46:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a4d:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
   17a51:	44 8b 8d a0 fb ff ff 	mov    r9d,DWORD PTR [rbp-0x460]
   17a58:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a5f:	48 83 ec 08          	sub    rsp,0x8
   17a63:	8b bd 9c fb ff ff    	mov    edi,DWORD PTR [rbp-0x464]
   17a69:	57                   	push   rdi
   17a6a:	48 89 c7             	mov    rdi,rax
   17a6d:	e8 82 e9 ff ff       	call   163f4 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)>
   17a72:	48 83 c4 10          	add    rsp,0x10
   17a76:	85 c0                	test   eax,eax
   17a78:	0f 94 c0             	sete   al
   17a7b:	84 c0                	test   al,al
   17a7d:	74 0a                	je     17a89 <stbi__parse_png_file(stbi__png*, int, int)+0xbb5>
   17a7f:	b8 00 00 00 00       	mov    eax,0x0
   17a84:	e9 33 02 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17a89:	80 bd 7f fb ff ff 00 	cmp    BYTE PTR [rbp-0x481],0x0
   17a90:	74 7b                	je     17b0d <stbi__parse_png_file(stbi__png*, int, int)+0xc39>
   17a92:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a99:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17a9c:	83 f8 10             	cmp    eax,0x10
   17a9f:	75 36                	jne    17ad7 <stbi__parse_png_file(stbi__png*, int, int)+0xc03>
   17aa1:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17aa8:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   17aab:	48 8d 8d d6 fb ff ff 	lea    rcx,[rbp-0x42a]
   17ab2:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17ab9:	48 89 ce             	mov    rsi,rcx
   17abc:	48 89 c7             	mov    rdi,rax
   17abf:	e8 0a ef ff ff       	call   169ce <stbi__compute_transparency16(stbi__png*, unsigned short*, int)>
   17ac4:	85 c0                	test   eax,eax
   17ac6:	0f 94 c0             	sete   al
   17ac9:	84 c0                	test   al,al
   17acb:	74 40                	je     17b0d <stbi__parse_png_file(stbi__png*, int, int)+0xc39>
   17acd:	b8 00 00 00 00       	mov    eax,0x0
   17ad2:	e9 e5 01 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17ad7:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17ade:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   17ae1:	48 8d 8d dd fb ff ff 	lea    rcx,[rbp-0x423]
   17ae8:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17aef:	48 89 ce             	mov    rsi,rcx
   17af2:	48 89 c7             	mov    rdi,rax
   17af5:	e8 ae ed ff ff       	call   168a8 <stbi__compute_transparency(stbi__png*, unsigned char*, int)>
   17afa:	85 c0                	test   eax,eax
   17afc:	0f 94 c0             	sete   al
   17aff:	84 c0                	test   al,al
   17b01:	74 0a                	je     17b0d <stbi__parse_png_file(stbi__png*, int, int)+0xc39>
   17b03:	b8 00 00 00 00       	mov    eax,0x0
   17b08:	e9 af 01 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17b0d:	83 bd a4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x45c],0x0
   17b14:	74 28                	je     17b3e <stbi__parse_png_file(stbi__png*, int, int)+0xc6a>
   17b16:	8b 05 20 3c 03 00    	mov    eax,DWORD PTR [rip+0x33c20]        # 4b73c <stbi__de_iphone_flag>
   17b1c:	85 c0                	test   eax,eax
   17b1e:	74 1e                	je     17b3e <stbi__parse_png_file(stbi__png*, int, int)+0xc6a>
   17b20:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b27:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   17b2a:	83 f8 02             	cmp    eax,0x2
   17b2d:	7e 0f                	jle    17b3e <stbi__parse_png_file(stbi__png*, int, int)+0xc6a>
   17b2f:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17b36:	48 89 c7             	mov    rdi,rax
   17b39:	e8 ab f1 ff ff       	call   16ce9 <stbi__de_iphone(stbi__png*)>
   17b3e:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17b45:	74 74                	je     17bbb <stbi__parse_png_file(stbi__png*, int, int)+0xce7>
   17b47:	0f b6 95 7e fb ff ff 	movzx  edx,BYTE PTR [rbp-0x482]
   17b4e:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b55:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   17b58:	0f b6 95 7e fb ff ff 	movzx  edx,BYTE PTR [rbp-0x482]
   17b5f:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b66:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17b69:	83 bd 60 fb ff ff 02 	cmp    DWORD PTR [rbp-0x4a0],0x2
   17b70:	7e 10                	jle    17b82 <stbi__parse_png_file(stbi__png*, int, int)+0xcae>
   17b72:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b79:	8b 95 60 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a0]
   17b7f:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17b82:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b89:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
   17b8c:	8b 95 90 fb ff ff    	mov    edx,DWORD PTR [rbp-0x470]
   17b92:	48 8d b5 e0 fb ff ff 	lea    rsi,[rbp-0x420]
   17b99:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17ba0:	48 89 c7             	mov    rdi,rax
   17ba3:	e8 53 ef ff ff       	call   16afb <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)>
   17ba8:	85 c0                	test   eax,eax
   17baa:	0f 94 c0             	sete   al
   17bad:	84 c0                	test   al,al
   17baf:	74 2a                	je     17bdb <stbi__parse_png_file(stbi__png*, int, int)+0xd07>
   17bb1:	b8 00 00 00 00       	mov    eax,0x0
   17bb6:	e9 01 01 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17bbb:	80 bd 7f fb ff ff 00 	cmp    BYTE PTR [rbp-0x481],0x0
   17bc2:	74 17                	je     17bdb <stbi__parse_png_file(stbi__png*, int, int)+0xd07>
   17bc4:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17bcb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17bce:	8d 50 01             	lea    edx,[rax+0x1]
   17bd1:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17bd8:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   17bdb:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17be2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   17be6:	48 89 c7             	mov    rdi,rax
   17be9:	e8 12 c9 fe ff       	call   4500 <free@plt>
   17bee:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17bf5:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   17bfd:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c04:	48 89 c7             	mov    rdi,rax
   17c07:	e8 c4 eb fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   17c0c:	b8 01 00 00 00       	mov    eax,0x1
   17c11:	e9 a6 00 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17c16:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   17c1d:	74 11                	je     17c30 <stbi__parse_png_file(stbi__png*, int, int)+0xd5c>
   17c1f:	48 8d 3d 73 32 02 00 	lea    rdi,[rip+0x23273]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   17c26:	e8 14 cf fe ff       	call   4b3f <stbi__err(char const*)>
   17c2b:	e9 8c 00 00 00       	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17c30:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17c36:	25 00 00 00 20       	and    eax,0x20000000
   17c3b:	85 c0                	test   eax,eax
   17c3d:	75 47                	jne    17c86 <stbi__parse_png_file(stbi__png*, int, int)+0xdb2>
   17c3f:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17c45:	c1 e8 18             	shr    eax,0x18
   17c48:	88 05 f2 37 03 00    	mov    BYTE PTR [rip+0x337f2],al        # 4b440 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk>
   17c4e:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17c54:	c1 e8 10             	shr    eax,0x10
   17c57:	88 05 e4 37 03 00    	mov    BYTE PTR [rip+0x337e4],al        # 4b441 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk+0x1>
   17c5d:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17c63:	c1 e8 08             	shr    eax,0x8
   17c66:	88 05 d6 37 03 00    	mov    BYTE PTR [rip+0x337d6],al        # 4b442 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk+0x2>
   17c6c:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17c72:	88 05 cb 37 03 00    	mov    BYTE PTR [rip+0x337cb],al        # 4b443 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk+0x3>
   17c78:	48 8d 3d c1 37 03 00 	lea    rdi,[rip+0x337c1]        # 4b440 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk>
   17c7f:	e8 bb ce fe ff       	call   4b3f <stbi__err(char const*)>
   17c84:	eb 36                	jmp    17cbc <stbi__parse_png_file(stbi__png*, int, int)+0xde8>
   17c86:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17c8c:	89 c2                	mov    edx,eax
   17c8e:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c95:	89 d6                	mov    esi,edx
   17c97:	48 89 c7             	mov    rdi,rax
   17c9a:	e8 04 e9 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   17c9f:	eb 07                	jmp    17ca8 <stbi__parse_png_file(stbi__png*, int, int)+0xdd4>
   17ca1:	90                   	nop
   17ca2:	eb 04                	jmp    17ca8 <stbi__parse_png_file(stbi__png*, int, int)+0xdd4>
   17ca4:	90                   	nop
   17ca5:	eb 01                	jmp    17ca8 <stbi__parse_png_file(stbi__png*, int, int)+0xdd4>
   17ca7:	90                   	nop
   17ca8:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17caf:	48 89 c7             	mov    rdi,rax
   17cb2:	e8 19 eb fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   17cb7:	e9 1d f3 ff ff       	jmp    16fd9 <stbi__parse_png_file(stbi__png*, int, int)+0x105>
   17cbc:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   17cc0:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   17cc9:	74 05                	je     17cd0 <stbi__parse_png_file(stbi__png*, int, int)+0xdfc>
   17ccb:	e8 e0 c7 fe ff       	call   44b0 <__stack_chk_fail@plt>
   17cd0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   17cd4:	c9                   	leave  
   17cd5:	c3                   	ret    

0000000000017cd6 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)>:
   17cd6:	55                   	push   rbp
   17cd7:	48 89 e5             	mov    rbp,rsp
   17cda:	48 83 ec 40          	sub    rsp,0x40
   17cde:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   17ce2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   17ce6:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   17cea:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   17cee:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
   17cf2:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   17cf6:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   17cfe:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   17d02:	78 06                	js     17d0a <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x34>
   17d04:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
   17d08:	7e 16                	jle    17d20 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x4a>
   17d0a:	48 8d 3d 6e 29 02 00 	lea    rdi,[rip+0x2296e]        # 3a67f <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x8d>
   17d11:	e8 29 ce fe ff       	call   4b3f <stbi__err(char const*)>
   17d16:	b8 00 00 00 00       	mov    eax,0x0
   17d1b:	e9 9d 01 00 00       	jmp    17ebd <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x1e7>
   17d20:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   17d23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17d27:	be 00 00 00 00       	mov    esi,0x0
   17d2c:	48 89 c7             	mov    rdi,rax
   17d2f:	e8 a0 f1 ff ff       	call   16ed4 <stbi__parse_png_file(stbi__png*, int, int)>
   17d34:	85 c0                	test   eax,eax
   17d36:	0f 95 c0             	setne  al
   17d39:	84 c0                	test   al,al
   17d3b:	0f 84 24 01 00 00    	je     17e65 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x18f>
   17d41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17d45:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17d48:	83 f8 07             	cmp    eax,0x7
   17d4b:	7f 0c                	jg     17d59 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x83>
   17d4d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   17d51:	c7 00 08 00 00 00    	mov    DWORD PTR [rax],0x8
   17d57:	eb 0d                	jmp    17d66 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x90>
   17d59:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17d5d:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
   17d60:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   17d64:	89 10                	mov    DWORD PTR [rax],edx
   17d66:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17d6a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   17d6e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   17d72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17d76:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
   17d7e:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   17d82:	0f 84 a3 00 00 00    	je     17e2b <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x155>
   17d88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17d8c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17d8f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   17d92:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
   17d95:	0f 84 90 00 00 00    	je     17e2b <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x155>
   17d9b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   17d9f:	8b 00                	mov    eax,DWORD PTR [rax]
   17da1:	83 f8 08             	cmp    eax,0x8
   17da4:	75 35                	jne    17ddb <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x105>
   17da6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17daa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17dad:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   17db0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17db4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17db7:	8b 08                	mov    ecx,DWORD PTR [rax]
   17db9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17dbd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17dc0:	8b 70 0c             	mov    esi,DWORD PTR [rax+0xc]
   17dc3:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   17dc6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17dca:	41 89 f8             	mov    r8d,edi
   17dcd:	48 89 c7             	mov    rdi,rax
   17dd0:	e8 ca ea fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   17dd5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   17dd9:	eb 33                	jmp    17e0e <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x138>
   17ddb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17ddf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17de2:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   17de5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17de9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17dec:	8b 08                	mov    ecx,DWORD PTR [rax]
   17dee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17df2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17df5:	8b 70 0c             	mov    esi,DWORD PTR [rax+0xc]
   17df8:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   17dfb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17dff:	41 89 f8             	mov    r8d,edi
   17e02:	48 89 c7             	mov    rdi,rax
   17e05:	e8 1b f0 fe ff       	call   6e25 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)>
   17e0a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   17e0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e12:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17e15:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   17e18:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17e1b:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   17e20:	75 09                	jne    17e2b <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x155>
   17e22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17e26:	e9 92 00 00 00       	jmp    17ebd <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x1e7>
   17e2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17e32:	8b 00                	mov    eax,DWORD PTR [rax]
   17e34:	89 c2                	mov    edx,eax
   17e36:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   17e3a:	89 10                	mov    DWORD PTR [rax],edx
   17e3c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e40:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17e43:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17e46:	89 c2                	mov    edx,eax
   17e48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   17e4c:	89 10                	mov    DWORD PTR [rax],edx
   17e4e:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   17e53:	74 10                	je     17e65 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x18f>
   17e55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e59:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17e5c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   17e5f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   17e63:	89 10                	mov    DWORD PTR [rax],edx
   17e65:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e69:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   17e6d:	48 89 c7             	mov    rdi,rax
   17e70:	e8 8b c6 fe ff       	call   4500 <free@plt>
   17e75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e79:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
   17e81:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e85:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   17e89:	48 89 c7             	mov    rdi,rax
   17e8c:	e8 6f c6 fe ff       	call   4500 <free@plt>
   17e91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17e95:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   17e9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17ea1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17ea5:	48 89 c7             	mov    rdi,rax
   17ea8:	e8 53 c6 fe ff       	call   4500 <free@plt>
   17ead:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17eb1:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   17eb9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17ebd:	c9                   	leave  
   17ebe:	c3                   	ret    

0000000000017ebf <stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   17ebf:	55                   	push   rbp
   17ec0:	48 89 e5             	mov    rbp,rsp
   17ec3:	48 83 ec 60          	sub    rsp,0x60
   17ec7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   17ecb:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   17ecf:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   17ed3:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   17ed7:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
   17edb:	4c 89 4d a0          	mov    QWORD PTR [rbp-0x60],r9
   17edf:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   17ee8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   17eec:	31 c0                	xor    eax,eax
   17eee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   17ef2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   17ef6:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   17efa:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   17efd:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   17f01:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   17f05:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   17f09:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   17f0d:	4d 89 c1             	mov    r9,r8
   17f10:	41 89 f8             	mov    r8d,edi
   17f13:	48 89 c7             	mov    rdi,rax
   17f16:	e8 bb fd ff ff       	call   17cd6 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)>
   17f1b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   17f1f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   17f28:	74 05                	je     17f2f <stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x70>
   17f2a:	e8 81 c5 fe ff       	call   44b0 <__stack_chk_fail@plt>
   17f2f:	c9                   	leave  
   17f30:	c3                   	ret    

0000000000017f31 <stbi__png_test(stbi__context*)>:
   17f31:	55                   	push   rbp
   17f32:	48 89 e5             	mov    rbp,rsp
   17f35:	48 83 ec 20          	sub    rsp,0x20
   17f39:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   17f3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f41:	48 89 c7             	mov    rdi,rax
   17f44:	e8 3f d0 ff ff       	call   14f88 <stbi__check_png_header(stbi__context*)>
   17f49:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   17f4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f50:	48 89 c7             	mov    rdi,rax
   17f53:	e8 a1 cb fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   17f58:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   17f5b:	c9                   	leave  
   17f5c:	c3                   	ret    

0000000000017f5d <stbi__png_info_raw(stbi__png*, int*, int*, int*)>:
   17f5d:	55                   	push   rbp
   17f5e:	48 89 e5             	mov    rbp,rsp
   17f61:	48 83 ec 20          	sub    rsp,0x20
   17f65:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   17f69:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   17f6d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   17f71:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   17f75:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17f79:	ba 00 00 00 00       	mov    edx,0x0
   17f7e:	be 02 00 00 00       	mov    esi,0x2
   17f83:	48 89 c7             	mov    rdi,rax
   17f86:	e8 49 ef ff ff       	call   16ed4 <stbi__parse_png_file(stbi__png*, int, int)>
   17f8b:	85 c0                	test   eax,eax
   17f8d:	0f 94 c0             	sete   al
   17f90:	84 c0                	test   al,al
   17f92:	74 16                	je     17faa <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x4d>
   17f94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17f98:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17f9b:	48 89 c7             	mov    rdi,rax
   17f9e:	e8 56 cb fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   17fa3:	b8 00 00 00 00       	mov    eax,0x0
   17fa8:	eb 4d                	jmp    17ff7 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x9a>
   17faa:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   17faf:	74 11                	je     17fc2 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x65>
   17fb1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17fb5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17fb8:	8b 00                	mov    eax,DWORD PTR [rax]
   17fba:	89 c2                	mov    edx,eax
   17fbc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17fc0:	89 10                	mov    DWORD PTR [rax],edx
   17fc2:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   17fc7:	74 12                	je     17fdb <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x7e>
   17fc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17fcd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17fd0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17fd3:	89 c2                	mov    edx,eax
   17fd5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17fd9:	89 10                	mov    DWORD PTR [rax],edx
   17fdb:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   17fe0:	74 10                	je     17ff2 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x95>
   17fe2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17fe6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17fe9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   17fec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   17ff0:	89 10                	mov    DWORD PTR [rax],edx
   17ff2:	b8 01 00 00 00       	mov    eax,0x1
   17ff7:	c9                   	leave  
   17ff8:	c3                   	ret    

0000000000017ff9 <stbi__png_info(stbi__context*, int*, int*, int*)>:
   17ff9:	55                   	push   rbp
   17ffa:	48 89 e5             	mov    rbp,rsp
   17ffd:	48 83 ec 50          	sub    rsp,0x50
   18001:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   18005:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   18009:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   1800d:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   18011:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1801a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1801e:	31 c0                	xor    eax,eax
   18020:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18024:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   18028:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   1802c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   18030:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   18034:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   18038:	48 89 c7             	mov    rdi,rax
   1803b:	e8 1d ff ff ff       	call   17f5d <stbi__png_info_raw(stbi__png*, int*, int*, int*)>
   18040:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   18044:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   1804d:	74 05                	je     18054 <stbi__png_info(stbi__context*, int*, int*, int*)+0x5b>
   1804f:	e8 5c c4 fe ff       	call   44b0 <__stack_chk_fail@plt>
   18054:	c9                   	leave  
   18055:	c3                   	ret    

0000000000018056 <stbi__png_is16(stbi__context*)>:
   18056:	55                   	push   rbp
   18057:	48 89 e5             	mov    rbp,rsp
   1805a:	48 83 ec 40          	sub    rsp,0x40
   1805e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   18062:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1806b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1806f:	31 c0                	xor    eax,eax
   18071:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18075:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   18079:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   1807d:	b9 00 00 00 00       	mov    ecx,0x0
   18082:	ba 00 00 00 00       	mov    edx,0x0
   18087:	be 00 00 00 00       	mov    esi,0x0
   1808c:	48 89 c7             	mov    rdi,rax
   1808f:	e8 c9 fe ff ff       	call   17f5d <stbi__png_info_raw(stbi__png*, int*, int*, int*)>
   18094:	85 c0                	test   eax,eax
   18096:	0f 94 c0             	sete   al
   18099:	84 c0                	test   al,al
   1809b:	74 07                	je     180a4 <stbi__png_is16(stbi__context*)+0x4e>
   1809d:	b8 00 00 00 00       	mov    eax,0x0
   180a2:	eb 20                	jmp    180c4 <stbi__png_is16(stbi__context*)+0x6e>
   180a4:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   180a7:	83 f8 10             	cmp    eax,0x10
   180aa:	74 13                	je     180bf <stbi__png_is16(stbi__context*)+0x69>
   180ac:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   180b0:	48 89 c7             	mov    rdi,rax
   180b3:	e8 41 ca fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   180b8:	b8 00 00 00 00       	mov    eax,0x0
   180bd:	eb 05                	jmp    180c4 <stbi__png_is16(stbi__context*)+0x6e>
   180bf:	b8 01 00 00 00       	mov    eax,0x1
   180c4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   180c8:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   180d1:	74 05                	je     180d8 <stbi__png_is16(stbi__context*)+0x82>
   180d3:	e8 d8 c3 fe ff       	call   44b0 <__stack_chk_fail@plt>
   180d8:	c9                   	leave  
   180d9:	c3                   	ret    

00000000000180da <stbi__bmp_test_raw(stbi__context*)>:
   180da:	55                   	push   rbp
   180db:	48 89 e5             	mov    rbp,rsp
   180de:	48 83 ec 20          	sub    rsp,0x20
   180e2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   180e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   180ea:	48 89 c7             	mov    rdi,rax
   180ed:	e8 bd e3 fe ff       	call   64af <stbi__get8(stbi__context*)>
   180f2:	3c 42                	cmp    al,0x42
   180f4:	0f 95 c0             	setne  al
   180f7:	84 c0                	test   al,al
   180f9:	74 0a                	je     18105 <stbi__bmp_test_raw(stbi__context*)+0x2b>
   180fb:	b8 00 00 00 00       	mov    eax,0x0
   18100:	e9 8e 00 00 00       	jmp    18193 <stbi__bmp_test_raw(stbi__context*)+0xb9>
   18105:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18109:	48 89 c7             	mov    rdi,rax
   1810c:	e8 9e e3 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18111:	3c 4d                	cmp    al,0x4d
   18113:	0f 95 c0             	setne  al
   18116:	84 c0                	test   al,al
   18118:	74 07                	je     18121 <stbi__bmp_test_raw(stbi__context*)+0x47>
   1811a:	b8 00 00 00 00       	mov    eax,0x0
   1811f:	eb 72                	jmp    18193 <stbi__bmp_test_raw(stbi__context*)+0xb9>
   18121:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18125:	48 89 c7             	mov    rdi,rax
   18128:	e8 14 e7 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1812d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18131:	48 89 c7             	mov    rdi,rax
   18134:	e8 cf e6 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   18139:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1813d:	48 89 c7             	mov    rdi,rax
   18140:	e8 c3 e6 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   18145:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18149:	48 89 c7             	mov    rdi,rax
   1814c:	e8 f0 e6 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18151:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18155:	48 89 c7             	mov    rdi,rax
   18158:	e8 e4 e6 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1815d:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   18160:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   18164:	74 18                	je     1817e <stbi__bmp_test_raw(stbi__context*)+0xa4>
   18166:	83 7d f8 28          	cmp    DWORD PTR [rbp-0x8],0x28
   1816a:	74 12                	je     1817e <stbi__bmp_test_raw(stbi__context*)+0xa4>
   1816c:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   18170:	74 0c                	je     1817e <stbi__bmp_test_raw(stbi__context*)+0xa4>
   18172:	83 7d f8 6c          	cmp    DWORD PTR [rbp-0x8],0x6c
   18176:	74 06                	je     1817e <stbi__bmp_test_raw(stbi__context*)+0xa4>
   18178:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   1817c:	75 07                	jne    18185 <stbi__bmp_test_raw(stbi__context*)+0xab>
   1817e:	b8 01 00 00 00       	mov    eax,0x1
   18183:	eb 05                	jmp    1818a <stbi__bmp_test_raw(stbi__context*)+0xb0>
   18185:	b8 00 00 00 00       	mov    eax,0x0
   1818a:	0f b6 c0             	movzx  eax,al
   1818d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18190:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18193:	c9                   	leave  
   18194:	c3                   	ret    

0000000000018195 <stbi__bmp_test(stbi__context*)>:
   18195:	55                   	push   rbp
   18196:	48 89 e5             	mov    rbp,rsp
   18199:	48 83 ec 20          	sub    rsp,0x20
   1819d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   181a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   181a5:	48 89 c7             	mov    rdi,rax
   181a8:	e8 2d ff ff ff       	call   180da <stbi__bmp_test_raw(stbi__context*)>
   181ad:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   181b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   181b4:	48 89 c7             	mov    rdi,rax
   181b7:	e8 3d c9 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   181bc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   181bf:	c9                   	leave  
   181c0:	c3                   	ret    

00000000000181c1 <stbi__high_bit(unsigned int)>:
   181c1:	55                   	push   rbp
   181c2:	48 89 e5             	mov    rbp,rsp
   181c5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   181c8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   181cf:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   181d3:	75 07                	jne    181dc <stbi__high_bit(unsigned int)+0x1b>
   181d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
   181da:	eb 4b                	jmp    18227 <stbi__high_bit(unsigned int)+0x66>
   181dc:	81 7d ec ff ff 00 00 	cmp    DWORD PTR [rbp-0x14],0xffff
   181e3:	76 08                	jbe    181ed <stbi__high_bit(unsigned int)+0x2c>
   181e5:	83 45 fc 10          	add    DWORD PTR [rbp-0x4],0x10
   181e9:	c1 6d ec 10          	shr    DWORD PTR [rbp-0x14],0x10
   181ed:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
   181f4:	76 08                	jbe    181fe <stbi__high_bit(unsigned int)+0x3d>
   181f6:	83 45 fc 08          	add    DWORD PTR [rbp-0x4],0x8
   181fa:	c1 6d ec 08          	shr    DWORD PTR [rbp-0x14],0x8
   181fe:	83 7d ec 0f          	cmp    DWORD PTR [rbp-0x14],0xf
   18202:	76 08                	jbe    1820c <stbi__high_bit(unsigned int)+0x4b>
   18204:	83 45 fc 04          	add    DWORD PTR [rbp-0x4],0x4
   18208:	c1 6d ec 04          	shr    DWORD PTR [rbp-0x14],0x4
   1820c:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   18210:	76 08                	jbe    1821a <stbi__high_bit(unsigned int)+0x59>
   18212:	83 45 fc 02          	add    DWORD PTR [rbp-0x4],0x2
   18216:	c1 6d ec 02          	shr    DWORD PTR [rbp-0x14],0x2
   1821a:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
   1821e:	76 04                	jbe    18224 <stbi__high_bit(unsigned int)+0x63>
   18220:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   18224:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18227:	5d                   	pop    rbp
   18228:	c3                   	ret    

0000000000018229 <stbi__bitcount(unsigned int)>:
   18229:	55                   	push   rbp
   1822a:	48 89 e5             	mov    rbp,rsp
   1822d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   18230:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18233:	25 55 55 55 55       	and    eax,0x55555555
   18238:	89 c2                	mov    edx,eax
   1823a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1823d:	d1 e8                	shr    eax,1
   1823f:	25 55 55 55 55       	and    eax,0x55555555
   18244:	01 d0                	add    eax,edx
   18246:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18249:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1824c:	25 33 33 33 33       	and    eax,0x33333333
   18251:	89 c2                	mov    edx,eax
   18253:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18256:	c1 e8 02             	shr    eax,0x2
   18259:	25 33 33 33 33       	and    eax,0x33333333
   1825e:	01 d0                	add    eax,edx
   18260:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18263:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18266:	c1 e8 04             	shr    eax,0x4
   18269:	89 c2                	mov    edx,eax
   1826b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1826e:	01 d0                	add    eax,edx
   18270:	25 0f 0f 0f 0f       	and    eax,0xf0f0f0f
   18275:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18278:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1827b:	c1 e8 08             	shr    eax,0x8
   1827e:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18281:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18284:	c1 e8 10             	shr    eax,0x10
   18287:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   1828a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1828d:	0f b6 c0             	movzx  eax,al
   18290:	5d                   	pop    rbp
   18291:	c3                   	ret    

0000000000018292 <stbi__shiftsigned(unsigned int, int, int)>:
   18292:	55                   	push   rbp
   18293:	48 89 e5             	mov    rbp,rsp
   18296:	48 83 ec 10          	sub    rsp,0x10
   1829a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   1829d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   182a0:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   182a3:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   182a7:	79 0c                	jns    182b5 <stbi__shiftsigned(unsigned int, int, int)+0x23>
   182a9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   182ac:	f7 d8                	neg    eax
   182ae:	89 c1                	mov    ecx,eax
   182b0:	d3 65 fc             	shl    DWORD PTR [rbp-0x4],cl
   182b3:	eb 08                	jmp    182bd <stbi__shiftsigned(unsigned int, int, int)+0x2b>
   182b5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   182b8:	89 c1                	mov    ecx,eax
   182ba:	d3 6d fc             	shr    DWORD PTR [rbp-0x4],cl
   182bd:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
   182c4:	76 1f                	jbe    182e5 <stbi__shiftsigned(unsigned int, int, int)+0x53>
   182c6:	48 8d 0d 43 2c 02 00 	lea    rcx,[rip+0x22c43]        # 3af10 <stbi__depth_scale_table+0x318>
   182cd:	ba 4d 14 00 00       	mov    edx,0x144d
   182d2:	48 8d 35 bf 1d 02 00 	lea    rsi,[rip+0x21dbf]        # 3a098 <_IO_stdin_used+0x98>
   182d9:	48 8d 3d 5e 2c 02 00 	lea    rdi,[rip+0x22c5e]        # 3af3e <stbi__depth_scale_table+0x346>
   182e0:	e8 9b bf fe ff       	call   4280 <__assert_fail@plt>
   182e5:	b8 08 00 00 00       	mov    eax,0x8
   182ea:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   182ed:	89 c1                	mov    ecx,eax
   182ef:	d3 6d fc             	shr    DWORD PTR [rbp-0x4],cl
   182f2:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   182f6:	78 06                	js     182fe <stbi__shiftsigned(unsigned int, int, int)+0x6c>
   182f8:	83 7d f4 08          	cmp    DWORD PTR [rbp-0xc],0x8
   182fc:	7e 1f                	jle    1831d <stbi__shiftsigned(unsigned int, int, int)+0x8b>
   182fe:	48 8d 0d 0b 2c 02 00 	lea    rcx,[rip+0x22c0b]        # 3af10 <stbi__depth_scale_table+0x318>
   18305:	ba 4f 14 00 00       	mov    edx,0x144f
   1830a:	48 8d 35 87 1d 02 00 	lea    rsi,[rip+0x21d87]        # 3a098 <_IO_stdin_used+0x98>
   18311:	48 8d 3d 2e 2c 02 00 	lea    rdi,[rip+0x22c2e]        # 3af46 <stbi__depth_scale_table+0x34e>
   18318:	e8 63 bf fe ff       	call   4280 <__assert_fail@plt>
   1831d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   18320:	48 98                	cdqe   
   18322:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1832a:	48 8d 05 2f 31 03 00 	lea    rax,[rip+0x3312f]        # 4b460 <stbi__shiftsigned(unsigned int, int, int)::mul_table>
   18331:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   18334:	0f af 45 fc          	imul   eax,DWORD PTR [rbp-0x4]
   18338:	89 c6                	mov    esi,eax
   1833a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1833d:	48 98                	cdqe   
   1833f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18347:	48 8d 05 52 31 03 00 	lea    rax,[rip+0x33152]        # 4b4a0 <stbi__shiftsigned(unsigned int, int, int)::shift_table>
   1834e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   18351:	89 c1                	mov    ecx,eax
   18353:	d3 fe                	sar    esi,cl
   18355:	89 f0                	mov    eax,esi
   18357:	c9                   	leave  
   18358:	c3                   	ret    

0000000000018359 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)>:
   18359:	55                   	push   rbp
   1835a:	48 89 e5             	mov    rbp,rsp
   1835d:	48 83 ec 20          	sub    rsp,0x20
   18361:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   18365:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   18369:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1836d:	48 89 c7             	mov    rdi,rax
   18370:	e8 3a e1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18375:	3c 42                	cmp    al,0x42
   18377:	75 10                	jne    18389 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x30>
   18379:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1837d:	48 89 c7             	mov    rdi,rax
   18380:	e8 2a e1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18385:	3c 4d                	cmp    al,0x4d
   18387:	74 07                	je     18390 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x37>
   18389:	b8 01 00 00 00       	mov    eax,0x1
   1838e:	eb 05                	jmp    18395 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3c>
   18390:	b8 00 00 00 00       	mov    eax,0x0
   18395:	84 c0                	test   al,al
   18397:	74 16                	je     183af <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x56>
   18399:	48 8d 3d bd 2b 02 00 	lea    rdi,[rip+0x22bbd]        # 3af5d <stbi__depth_scale_table+0x365>
   183a0:	e8 9a c7 fe ff       	call   4b3f <stbi__err(char const*)>
   183a5:	b8 00 00 00 00       	mov    eax,0x0
   183aa:	e9 27 04 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   183af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183b3:	48 89 c7             	mov    rdi,rax
   183b6:	e8 86 e4 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   183bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183bf:	48 89 c7             	mov    rdi,rax
   183c2:	e8 41 e4 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   183c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183cb:	48 89 c7             	mov    rdi,rax
   183ce:	e8 35 e4 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   183d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183d7:	48 89 c7             	mov    rdi,rax
   183da:	e8 62 e4 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   183df:	89 c2                	mov    edx,eax
   183e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   183e5:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
   183e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183ec:	48 89 c7             	mov    rdi,rax
   183ef:	e8 4d e4 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   183f4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   183f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   183fb:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   183fe:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   18401:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18405:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
   1840c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18410:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
   18413:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18417:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   1841a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1841e:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   18421:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18425:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   18428:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1842c:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   1842f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18433:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   18436:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1843a:	c7 40 20 0e 00 00 00 	mov    DWORD PTR [rax+0x20],0xe
   18441:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   18445:	74 2e                	je     18475 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x11c>
   18447:	83 7d f8 28          	cmp    DWORD PTR [rbp-0x8],0x28
   1844b:	74 28                	je     18475 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x11c>
   1844d:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   18451:	74 22                	je     18475 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x11c>
   18453:	83 7d f8 6c          	cmp    DWORD PTR [rbp-0x8],0x6c
   18457:	74 1c                	je     18475 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x11c>
   18459:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   1845d:	74 16                	je     18475 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x11c>
   1845f:	48 8d 3d ff 2a 02 00 	lea    rdi,[rip+0x22aff]        # 3af65 <stbi__depth_scale_table+0x36d>
   18466:	e8 d4 c6 fe ff       	call   4b3f <stbi__err(char const*)>
   1846b:	b8 00 00 00 00       	mov    eax,0x0
   18470:	e9 61 03 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   18475:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   18479:	75 2b                	jne    184a6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x14d>
   1847b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1847f:	48 89 c7             	mov    rdi,rax
   18482:	e8 81 e3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   18487:	89 c2                	mov    edx,eax
   18489:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1848d:	89 10                	mov    DWORD PTR [rax],edx
   1848f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18493:	48 89 c7             	mov    rdi,rax
   18496:	e8 6d e3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1849b:	89 c2                	mov    edx,eax
   1849d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   184a1:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
   184a4:	eb 25                	jmp    184cb <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x172>
   184a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   184aa:	48 89 c7             	mov    rdi,rax
   184ad:	e8 8f e3 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   184b2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   184b6:	89 02                	mov    DWORD PTR [rdx],eax
   184b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   184bc:	48 89 c7             	mov    rdi,rax
   184bf:	e8 7d e3 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   184c4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   184c8:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
   184cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   184cf:	48 89 c7             	mov    rdi,rax
   184d2:	e8 31 e3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   184d7:	83 f8 01             	cmp    eax,0x1
   184da:	0f 95 c0             	setne  al
   184dd:	84 c0                	test   al,al
   184df:	74 16                	je     184f7 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x19e>
   184e1:	48 8d 3d 89 2a 02 00 	lea    rdi,[rip+0x22a89]        # 3af71 <stbi__depth_scale_table+0x379>
   184e8:	e8 52 c6 fe ff       	call   4b3f <stbi__err(char const*)>
   184ed:	b8 00 00 00 00       	mov    eax,0x0
   184f2:	e9 df 02 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   184f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   184fb:	48 89 c7             	mov    rdi,rax
   184fe:	e8 05 e3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   18503:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18507:	89 02                	mov    DWORD PTR [rdx],eax
   18509:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   1850d:	0f 84 be 02 00 00    	je     187d1 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x478>
   18513:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18517:	48 89 c7             	mov    rdi,rax
   1851a:	e8 22 e3 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1851f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18522:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   18526:	74 06                	je     1852e <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x1d5>
   18528:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
   1852c:	75 16                	jne    18544 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x1eb>
   1852e:	48 8d 3d 44 2a 02 00 	lea    rdi,[rip+0x22a44]        # 3af79 <stbi__depth_scale_table+0x381>
   18535:	e8 05 c6 fe ff       	call   4b3f <stbi__err(char const*)>
   1853a:	b8 00 00 00 00       	mov    eax,0x0
   1853f:	e9 92 02 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   18544:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18548:	48 89 c7             	mov    rdi,rax
   1854b:	e8 f1 e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18550:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18554:	48 89 c7             	mov    rdi,rax
   18557:	e8 e5 e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1855c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18560:	48 89 c7             	mov    rdi,rax
   18563:	e8 d9 e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18568:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1856c:	48 89 c7             	mov    rdi,rax
   1856f:	e8 cd e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18574:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18578:	48 89 c7             	mov    rdi,rax
   1857b:	e8 c1 e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18580:	83 7d f8 28          	cmp    DWORD PTR [rbp-0x8],0x28
   18584:	74 0a                	je     18590 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x237>
   18586:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   1858a:	0f 85 6f 01 00 00    	jne    186ff <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3a6>
   18590:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   18594:	75 30                	jne    185c6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x26d>
   18596:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1859a:	48 89 c7             	mov    rdi,rax
   1859d:	e8 9f e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   185a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185a6:	48 89 c7             	mov    rdi,rax
   185a9:	e8 93 e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   185ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185b2:	48 89 c7             	mov    rdi,rax
   185b5:	e8 87 e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   185ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185be:	48 89 c7             	mov    rdi,rax
   185c1:	e8 7b e2 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   185c6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   185ca:	8b 00                	mov    eax,DWORD PTR [rax]
   185cc:	83 f8 10             	cmp    eax,0x10
   185cf:	74 0f                	je     185e0 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x287>
   185d1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   185d5:	8b 00                	mov    eax,DWORD PTR [rax]
   185d7:	83 f8 20             	cmp    eax,0x20
   185da:	0f 85 f0 01 00 00    	jne    187d0 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x477>
   185e0:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   185e4:	75 6d                	jne    18653 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x2fa>
   185e6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   185ea:	8b 00                	mov    eax,DWORD PTR [rax]
   185ec:	83 f8 20             	cmp    eax,0x20
   185ef:	75 3c                	jne    1862d <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x2d4>
   185f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   185f5:	c7 40 0c 00 00 ff 00 	mov    DWORD PTR [rax+0xc],0xff0000
   185fc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18600:	c7 40 10 00 ff 00 00 	mov    DWORD PTR [rax+0x10],0xff00
   18607:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1860b:	c7 40 14 ff 00 00 00 	mov    DWORD PTR [rax+0x14],0xff
   18612:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18616:	c7 40 18 00 00 00 ff 	mov    DWORD PTR [rax+0x18],0xff000000
   1861d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18621:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
   18628:	e9 a3 01 00 00       	jmp    187d0 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x477>
   1862d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18631:	c7 40 0c 00 7c 00 00 	mov    DWORD PTR [rax+0xc],0x7c00
   18638:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1863c:	c7 40 10 e0 03 00 00 	mov    DWORD PTR [rax+0x10],0x3e0
   18643:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18647:	c7 40 14 1f 00 00 00 	mov    DWORD PTR [rax+0x14],0x1f
   1864e:	e9 7d 01 00 00       	jmp    187d0 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x477>
   18653:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   18657:	0f 85 8c 00 00 00    	jne    186e9 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x390>
   1865d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18661:	48 89 c7             	mov    rdi,rax
   18664:	e8 d8 e1 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18669:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1866d:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
   18670:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18674:	48 89 c7             	mov    rdi,rax
   18677:	e8 c5 e1 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1867c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18680:	89 42 10             	mov    DWORD PTR [rdx+0x10],eax
   18683:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18687:	48 89 c7             	mov    rdi,rax
   1868a:	e8 b2 e1 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1868f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18693:	89 42 14             	mov    DWORD PTR [rdx+0x14],eax
   18696:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1869a:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1869d:	8d 50 0c             	lea    edx,[rax+0xc]
   186a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   186a4:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   186a7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   186ab:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   186ae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   186b2:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   186b5:	39 c2                	cmp    edx,eax
   186b7:	0f 85 13 01 00 00    	jne    187d0 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x477>
   186bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   186c1:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   186c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   186c8:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   186cb:	39 c2                	cmp    edx,eax
   186cd:	0f 85 fd 00 00 00    	jne    187d0 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x477>
   186d3:	48 8d 3d 97 28 02 00 	lea    rdi,[rip+0x22897]        # 3af71 <stbi__depth_scale_table+0x379>
   186da:	e8 60 c4 fe ff       	call   4b3f <stbi__err(char const*)>
   186df:	b8 00 00 00 00       	mov    eax,0x0
   186e4:	e9 ed 00 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   186e9:	48 8d 3d 81 28 02 00 	lea    rdi,[rip+0x22881]        # 3af71 <stbi__depth_scale_table+0x379>
   186f0:	e8 4a c4 fe ff       	call   4b3f <stbi__err(char const*)>
   186f5:	b8 00 00 00 00       	mov    eax,0x0
   186fa:	e9 d7 00 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   186ff:	83 7d f8 6c          	cmp    DWORD PTR [rbp-0x8],0x6c
   18703:	74 1c                	je     18721 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3c8>
   18705:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   18709:	74 16                	je     18721 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3c8>
   1870b:	48 8d 3d 5f 28 02 00 	lea    rdi,[rip+0x2285f]        # 3af71 <stbi__depth_scale_table+0x379>
   18712:	e8 28 c4 fe ff       	call   4b3f <stbi__err(char const*)>
   18717:	b8 00 00 00 00       	mov    eax,0x0
   1871c:	e9 b5 00 00 00       	jmp    187d6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x47d>
   18721:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18725:	48 89 c7             	mov    rdi,rax
   18728:	e8 14 e1 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   1872d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18731:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
   18734:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18738:	48 89 c7             	mov    rdi,rax
   1873b:	e8 01 e1 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18740:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18744:	89 42 10             	mov    DWORD PTR [rdx+0x10],eax
   18747:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1874b:	48 89 c7             	mov    rdi,rax
   1874e:	e8 ee e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18753:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18757:	89 42 14             	mov    DWORD PTR [rdx+0x14],eax
   1875a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1875e:	48 89 c7             	mov    rdi,rax
   18761:	e8 db e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18766:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1876a:	89 42 18             	mov    DWORD PTR [rdx+0x18],eax
   1876d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18771:	48 89 c7             	mov    rdi,rax
   18774:	e8 c8 e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18779:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   18780:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
   18784:	7f 12                	jg     18798 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x43f>
   18786:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1878a:	48 89 c7             	mov    rdi,rax
   1878d:	e8 af e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   18792:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   18796:	eb e8                	jmp    18780 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x427>
   18798:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   1879c:	75 33                	jne    187d1 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x478>
   1879e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187a2:	48 89 c7             	mov    rdi,rax
   187a5:	e8 97 e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   187aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187ae:	48 89 c7             	mov    rdi,rax
   187b1:	e8 8b e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   187b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187ba:	48 89 c7             	mov    rdi,rax
   187bd:	e8 7f e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   187c2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187c6:	48 89 c7             	mov    rdi,rax
   187c9:	e8 73 e0 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   187ce:	eb 01                	jmp    187d1 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x478>
   187d0:	90                   	nop
   187d1:	b8 01 00 00 00       	mov    eax,0x1
   187d6:	c9                   	leave  
   187d7:	c3                   	ret    

00000000000187d8 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   187d8:	55                   	push   rbp
   187d9:	48 89 e5             	mov    rbp,rsp
   187dc:	53                   	push   rbx
   187dd:	48 81 ec 18 05 00 00 	sub    rsp,0x518
   187e4:	48 89 bd 08 fb ff ff 	mov    QWORD PTR [rbp-0x4f8],rdi
   187eb:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
   187f2:	48 89 95 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rdx
   187f9:	48 89 8d f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rcx
   18800:	44 89 85 ec fa ff ff 	mov    DWORD PTR [rbp-0x514],r8d
   18807:	4c 89 8d e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],r9
   1880e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   18817:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1881b:	31 c0                	xor    eax,eax
   1881d:	c7 85 70 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x490],0x0
   18827:	c7 85 74 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x48c],0x0
   18831:	c7 85 78 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x488],0x0
   1883b:	c7 85 7c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x484],0x0
   18845:	c7 85 20 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4e0],0x0
   1884f:	c7 85 cc fb ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x434],0xff
   18859:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   18860:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18867:	48 89 d6             	mov    rsi,rdx
   1886a:	48 89 c7             	mov    rdi,rax
   1886d:	e8 e7 fa ff ff       	call   18359 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)>
   18872:	48 85 c0             	test   rax,rax
   18875:	0f 94 c0             	sete   al
   18878:	84 c0                	test   al,al
   1887a:	74 0a                	je     18886 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xae>
   1887c:	b8 00 00 00 00       	mov    eax,0x0
   18881:	e9 8b 0f 00 00       	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   18886:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1888d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18890:	85 c0                	test   eax,eax
   18892:	0f 9f c0             	setg   al
   18895:	0f b6 c0             	movzx  eax,al
   18898:	89 85 80 fb ff ff    	mov    DWORD PTR [rbp-0x480],eax
   1889e:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   188a5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   188a8:	99                   	cdq    
   188a9:	31 d0                	xor    eax,edx
   188ab:	29 d0                	sub    eax,edx
   188ad:	89 c2                	mov    edx,eax
   188af:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   188b6:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
   188b9:	8b 85 bc fb ff ff    	mov    eax,DWORD PTR [rbp-0x444]
   188bf:	89 85 70 fb ff ff    	mov    DWORD PTR [rbp-0x490],eax
   188c5:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   188cb:	89 85 74 fb ff ff    	mov    DWORD PTR [rbp-0x48c],eax
   188d1:	8b 85 c4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x43c]
   188d7:	89 85 78 fb ff ff    	mov    DWORD PTR [rbp-0x488],eax
   188dd:	8b 85 c8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x438]
   188e3:	89 85 7c fb ff ff    	mov    DWORD PTR [rbp-0x484],eax
   188e9:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   188ef:	89 85 1c fb ff ff    	mov    DWORD PTR [rbp-0x4e4],eax
   188f5:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   188fb:	83 f8 0c             	cmp    eax,0xc
   188fe:	75 3b                	jne    1893b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x163>
   18900:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18906:	83 f8 17             	cmp    eax,0x17
   18909:	7f 5a                	jg     18965 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   1890b:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18911:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   18917:	29 d0                	sub    eax,edx
   18919:	83 e8 18             	sub    eax,0x18
   1891c:	48 63 d0             	movsxd rdx,eax
   1891f:	48 69 d2 56 55 55 55 	imul   rdx,rdx,0x55555556
   18926:	48 c1 ea 20          	shr    rdx,0x20
   1892a:	c1 f8 1f             	sar    eax,0x1f
   1892d:	89 c1                	mov    ecx,eax
   1892f:	89 d0                	mov    eax,edx
   18931:	29 c8                	sub    eax,ecx
   18933:	89 85 20 fb ff ff    	mov    DWORD PTR [rbp-0x4e0],eax
   18939:	eb 2a                	jmp    18965 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   1893b:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18941:	83 f8 0f             	cmp    eax,0xf
   18944:	7f 1f                	jg     18965 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   18946:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1894c:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   18952:	29 d0                	sub    eax,edx
   18954:	8b 95 b8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x448]
   1895a:	29 d0                	sub    eax,edx
   1895c:	c1 f8 02             	sar    eax,0x2
   1895f:	89 85 20 fb ff ff    	mov    DWORD PTR [rbp-0x4e0],eax
   18965:	83 bd 20 fb ff ff 00 	cmp    DWORD PTR [rbp-0x4e0],0x0
   1896c:	75 49                	jne    189b7 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1df>
   1896e:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18974:	48 63 d0             	movsxd rdx,eax
   18977:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1897e:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   18985:	48 8b 8d 08 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f8]
   1898c:	48 83 c1 38          	add    rcx,0x38
   18990:	48 29 c8             	sub    rax,rcx
   18993:	48 39 c2             	cmp    rdx,rax
   18996:	74 1f                	je     189b7 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1df>
   18998:	48 8d 0d e9 25 02 00 	lea    rcx,[rip+0x225e9]        # 3af88 <stbi__depth_scale_table+0x390>
   1899f:	ba cf 14 00 00       	mov    edx,0x14cf
   189a4:	48 8d 35 ed 16 02 00 	lea    rsi,[rip+0x216ed]        # 3a098 <_IO_stdin_used+0x98>
   189ab:	48 8d 3d 26 26 02 00 	lea    rdi,[rip+0x22626]        # 3afd8 <stbi__depth_scale_table+0x3e0>
   189b2:	e8 c9 b8 fe ff       	call   4280 <__assert_fail@plt>
   189b7:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   189bd:	83 f8 18             	cmp    eax,0x18
   189c0:	75 1c                	jne    189de <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x206>
   189c2:	81 bd 7c fb ff ff 00 00 00 ff 	cmp    DWORD PTR [rbp-0x484],0xff000000
   189cc:	75 10                	jne    189de <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x206>
   189ce:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   189d5:	c7 40 08 03 00 00 00 	mov    DWORD PTR [rax+0x8],0x3
   189dc:	eb 1f                	jmp    189fd <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x225>
   189de:	83 bd 7c fb ff ff 00 	cmp    DWORD PTR [rbp-0x484],0x0
   189e5:	74 07                	je     189ee <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x216>
   189e7:	ba 04 00 00 00       	mov    edx,0x4
   189ec:	eb 05                	jmp    189f3 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x21b>
   189ee:	ba 03 00 00 00       	mov    edx,0x3
   189f3:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   189fa:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   189fd:	83 bd ec fa ff ff 00 	cmp    DWORD PTR [rbp-0x514],0x0
   18a04:	74 17                	je     18a1d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x245>
   18a06:	83 bd ec fa ff ff 02 	cmp    DWORD PTR [rbp-0x514],0x2
   18a0d:	7e 0e                	jle    18a1d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x245>
   18a0f:	8b 85 ec fa ff ff    	mov    eax,DWORD PTR [rbp-0x514]
   18a15:	89 85 30 fb ff ff    	mov    DWORD PTR [rbp-0x4d0],eax
   18a1b:	eb 10                	jmp    18a2d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x255>
   18a1d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18a24:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   18a27:	89 85 30 fb ff ff    	mov    DWORD PTR [rbp-0x4d0],eax
   18a2d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18a34:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18a37:	89 c2                	mov    edx,eax
   18a39:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18a40:	8b 00                	mov    eax,DWORD PTR [rax]
   18a42:	89 c6                	mov    esi,eax
   18a44:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   18a4a:	b9 00 00 00 00       	mov    ecx,0x0
   18a4f:	89 c7                	mov    edi,eax
   18a51:	e8 d3 c1 fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   18a56:	85 c0                	test   eax,eax
   18a58:	0f 94 c0             	sete   al
   18a5b:	84 c0                	test   al,al
   18a5d:	74 16                	je     18a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x29d>
   18a5f:	48 8d 3d e6 1b 02 00 	lea    rdi,[rip+0x21be6]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   18a66:	e8 d4 c0 fe ff       	call   4b3f <stbi__err(char const*)>
   18a6b:	b8 00 00 00 00       	mov    eax,0x0
   18a70:	e9 9c 0d 00 00       	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   18a75:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18a7c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18a7f:	89 c2                	mov    edx,eax
   18a81:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18a88:	8b 00                	mov    eax,DWORD PTR [rax]
   18a8a:	89 c6                	mov    esi,eax
   18a8c:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   18a92:	b9 00 00 00 00       	mov    ecx,0x0
   18a97:	89 c7                	mov    edi,eax
   18a99:	e8 d0 c2 fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   18a9e:	48 89 85 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rax
   18aa5:	48 83 bd 98 fb ff ff 00 	cmp    QWORD PTR [rbp-0x468],0x0
   18aad:	75 16                	jne    18ac5 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2ed>
   18aaf:	48 8d 3d 7d 15 02 00 	lea    rdi,[rip+0x2157d]        # 3a033 <_IO_stdin_used+0x33>
   18ab6:	e8 84 c0 fe ff       	call   4b3f <stbi__err(char const*)>
   18abb:	b8 00 00 00 00       	mov    eax,0x0
   18ac0:	e9 4c 0d 00 00       	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   18ac5:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18acb:	83 f8 0f             	cmp    eax,0xf
   18ace:	0f 8f d9 05 00 00    	jg     190ad <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8d5>
   18ad4:	c7 85 34 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4cc],0x0
   18ade:	83 bd 20 fb ff ff 00 	cmp    DWORD PTR [rbp-0x4e0],0x0
   18ae5:	74 0c                	je     18af3 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x31b>
   18ae7:	81 bd 20 fb ff ff 00 01 00 00 	cmp    DWORD PTR [rbp-0x4e0],0x100
   18af1:	7e 25                	jle    18b18 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x340>
   18af3:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   18afa:	48 89 c7             	mov    rdi,rax
   18afd:	e8 fe b9 fe ff       	call   4500 <free@plt>
   18b02:	48 8d 3d 00 25 02 00 	lea    rdi,[rip+0x22500]        # 3b009 <stbi__depth_scale_table+0x411>
   18b09:	e8 31 c0 fe ff       	call   4b3f <stbi__err(char const*)>
   18b0e:	b8 00 00 00 00       	mov    eax,0x0
   18b13:	e9 f9 0c 00 00       	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   18b18:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   18b22:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   18b28:	3b 85 20 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x4e0]
   18b2e:	0f 8d 93 00 00 00    	jge    18bc7 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3ef>
   18b34:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18b3b:	48 89 c7             	mov    rdi,rax
   18b3e:	e8 6c d9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18b43:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   18b49:	48 63 d2             	movsxd rdx,edx
   18b4c:	88 84 95 e2 fb ff ff 	mov    BYTE PTR [rbp+rdx*4-0x41e],al
   18b53:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18b5a:	48 89 c7             	mov    rdi,rax
   18b5d:	e8 4d d9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18b62:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   18b68:	48 63 d2             	movsxd rdx,edx
   18b6b:	88 84 95 e1 fb ff ff 	mov    BYTE PTR [rbp+rdx*4-0x41f],al
   18b72:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18b79:	48 89 c7             	mov    rdi,rax
   18b7c:	e8 2e d9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18b81:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   18b87:	48 63 d2             	movsxd rdx,edx
   18b8a:	88 84 95 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*4-0x420],al
   18b91:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   18b97:	83 f8 0c             	cmp    eax,0xc
   18b9a:	74 0f                	je     18bab <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3d3>
   18b9c:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18ba3:	48 89 c7             	mov    rdi,rax
   18ba6:	e8 04 d9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18bab:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   18bb1:	48 98                	cdqe   
   18bb3:	c6 84 85 e3 fb ff ff ff 	mov    BYTE PTR [rbp+rax*4-0x41d],0xff
   18bbb:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   18bc2:	e9 5b ff ff ff       	jmp    18b22 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x34a>
   18bc7:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18bcd:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   18bd3:	29 d0                	sub    eax,edx
   18bd5:	8b 8d b8 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x448]
   18bdb:	29 c8                	sub    eax,ecx
   18bdd:	89 c2                	mov    edx,eax
   18bdf:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   18be5:	83 f8 0c             	cmp    eax,0xc
   18be8:	75 07                	jne    18bf1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x419>
   18bea:	b8 03 00 00 00       	mov    eax,0x3
   18bef:	eb 05                	jmp    18bf6 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x41e>
   18bf1:	b8 04 00 00 00       	mov    eax,0x4
   18bf6:	0f af 85 20 fb ff ff 	imul   eax,DWORD PTR [rbp-0x4e0]
   18bfd:	29 c2                	sub    edx,eax
   18bff:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c06:	89 d6                	mov    esi,edx
   18c08:	48 89 c7             	mov    rdi,rax
   18c0b:	e8 93 d9 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   18c10:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18c16:	83 f8 01             	cmp    eax,0x1
   18c19:	75 17                	jne    18c32 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x45a>
   18c1b:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c22:	8b 00                	mov    eax,DWORD PTR [rax]
   18c24:	83 c0 07             	add    eax,0x7
   18c27:	c1 e8 03             	shr    eax,0x3
   18c2a:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   18c30:	eb 62                	jmp    18c94 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4bc>
   18c32:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18c38:	83 f8 04             	cmp    eax,0x4
   18c3b:	75 16                	jne    18c53 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x47b>
   18c3d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c44:	8b 00                	mov    eax,DWORD PTR [rax]
   18c46:	83 c0 01             	add    eax,0x1
   18c49:	d1 e8                	shr    eax,1
   18c4b:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   18c51:	eb 41                	jmp    18c94 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4bc>
   18c53:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18c59:	83 f8 08             	cmp    eax,0x8
   18c5c:	75 11                	jne    18c6f <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x497>
   18c5e:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c65:	8b 00                	mov    eax,DWORD PTR [rax]
   18c67:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   18c6d:	eb 25                	jmp    18c94 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4bc>
   18c6f:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   18c76:	48 89 c7             	mov    rdi,rax
   18c79:	e8 82 b8 fe ff       	call   4500 <free@plt>
   18c7e:	48 8d 3d 8c 23 02 00 	lea    rdi,[rip+0x2238c]        # 3b011 <stbi__depth_scale_table+0x419>
   18c85:	e8 b5 be fe ff       	call   4b3f <stbi__err(char const*)>
   18c8a:	b8 00 00 00 00       	mov    eax,0x0
   18c8f:	e9 7d 0b 00 00       	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   18c94:	8b 85 2c fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d4]
   18c9a:	f7 d8                	neg    eax
   18c9c:	83 e0 03             	and    eax,0x3
   18c9f:	89 85 84 fb ff ff    	mov    DWORD PTR [rbp-0x47c],eax
   18ca5:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18cab:	83 f8 01             	cmp    eax,0x1
   18cae:	0f 85 a6 01 00 00    	jne    18e5a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x682>
   18cb4:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   18cbe:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18cc5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18cc8:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   18cce:	0f 8d fb 08 00 00    	jge    195cf <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdf7>
   18cd4:	c7 85 38 fb ff ff 07 00 00 00 	mov    DWORD PTR [rbp-0x4c8],0x7
   18cde:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18ce5:	48 89 c7             	mov    rdi,rax
   18ce8:	e8 c2 d7 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18ced:	0f b6 c0             	movzx  eax,al
   18cf0:	89 85 3c fb ff ff    	mov    DWORD PTR [rbp-0x4c4],eax
   18cf6:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   18d00:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18d07:	8b 00                	mov    eax,DWORD PTR [rax]
   18d09:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   18d0f:	0f 8d 22 01 00 00    	jge    18e37 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x65f>
   18d15:	8b 85 38 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c8]
   18d1b:	8b 95 3c fb ff ff    	mov    edx,DWORD PTR [rbp-0x4c4]
   18d21:	89 c1                	mov    ecx,eax
   18d23:	d3 fa                	sar    edx,cl
   18d25:	89 d0                	mov    eax,edx
   18d27:	83 e0 01             	and    eax,0x1
   18d2a:	89 85 94 fb ff ff    	mov    DWORD PTR [rbp-0x46c],eax
   18d30:	8b 85 94 fb ff ff    	mov    eax,DWORD PTR [rbp-0x46c]
   18d36:	48 98                	cdqe   
   18d38:	0f b6 94 85 e0 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x420]
   18d40:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18d47:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18d4d:	8d 48 01             	lea    ecx,[rax+0x1]
   18d50:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18d56:	48 98                	cdqe   
   18d58:	48 01 f0             	add    rax,rsi
   18d5b:	88 10                	mov    BYTE PTR [rax],dl
   18d5d:	8b 85 94 fb ff ff    	mov    eax,DWORD PTR [rbp-0x46c]
   18d63:	48 98                	cdqe   
   18d65:	0f b6 94 85 e1 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41f]
   18d6d:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18d74:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18d7a:	8d 48 01             	lea    ecx,[rax+0x1]
   18d7d:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18d83:	48 98                	cdqe   
   18d85:	48 01 f0             	add    rax,rsi
   18d88:	88 10                	mov    BYTE PTR [rax],dl
   18d8a:	8b 85 94 fb ff ff    	mov    eax,DWORD PTR [rbp-0x46c]
   18d90:	48 98                	cdqe   
   18d92:	0f b6 94 85 e2 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41e]
   18d9a:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18da1:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18da7:	8d 48 01             	lea    ecx,[rax+0x1]
   18daa:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18db0:	48 98                	cdqe   
   18db2:	48 01 f0             	add    rax,rsi
   18db5:	88 10                	mov    BYTE PTR [rax],dl
   18db7:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   18dbe:	75 1e                	jne    18dde <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x606>
   18dc0:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
   18dc7:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18dcd:	8d 50 01             	lea    edx,[rax+0x1]
   18dd0:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
   18dd6:	48 98                	cdqe   
   18dd8:	48 01 c8             	add    rax,rcx
   18ddb:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   18dde:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   18de4:	8d 50 01             	lea    edx,[rax+0x1]
   18de7:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18dee:	8b 00                	mov    eax,DWORD PTR [rax]
   18df0:	39 c2                	cmp    edx,eax
   18df2:	74 42                	je     18e36 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x65e>
   18df4:	83 ad 38 fb ff ff 01 	sub    DWORD PTR [rbp-0x4c8],0x1
   18dfb:	8b 85 38 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c8]
   18e01:	c1 e8 1f             	shr    eax,0x1f
   18e04:	84 c0                	test   al,al
   18e06:	74 22                	je     18e2a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x652>
   18e08:	c7 85 38 fb ff ff 07 00 00 00 	mov    DWORD PTR [rbp-0x4c8],0x7
   18e12:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e19:	48 89 c7             	mov    rdi,rax
   18e1c:	e8 8e d6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18e21:	0f b6 c0             	movzx  eax,al
   18e24:	89 85 3c fb ff ff    	mov    DWORD PTR [rbp-0x4c4],eax
   18e2a:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   18e31:	e9 ca fe ff ff       	jmp    18d00 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x528>
   18e36:	90                   	nop
   18e37:	8b 95 84 fb ff ff    	mov    edx,DWORD PTR [rbp-0x47c]
   18e3d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e44:	89 d6                	mov    esi,edx
   18e46:	48 89 c7             	mov    rdi,rax
   18e49:	e8 55 d7 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   18e4e:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   18e55:	e9 64 fe ff ff       	jmp    18cbe <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4e6>
   18e5a:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   18e64:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e6b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18e6e:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   18e74:	0f 8d 55 07 00 00    	jge    195cf <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdf7>
   18e7a:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   18e84:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e8b:	8b 00                	mov    eax,DWORD PTR [rax]
   18e8d:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   18e93:	0f 8d f1 01 00 00    	jge    1908a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8b2>
   18e99:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18ea0:	48 89 c7             	mov    rdi,rax
   18ea3:	e8 07 d6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18ea8:	0f b6 c0             	movzx  eax,al
   18eab:	89 85 40 fb ff ff    	mov    DWORD PTR [rbp-0x4c0],eax
   18eb1:	c7 85 44 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4bc],0x0
   18ebb:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18ec1:	83 f8 04             	cmp    eax,0x4
   18ec4:	75 16                	jne    18edc <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x704>
   18ec6:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   18ecc:	83 e0 0f             	and    eax,0xf
   18ecf:	89 85 44 fb ff ff    	mov    DWORD PTR [rbp-0x4bc],eax
   18ed5:	c1 bd 40 fb ff ff 04 	sar    DWORD PTR [rbp-0x4c0],0x4
   18edc:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   18ee2:	48 98                	cdqe   
   18ee4:	0f b6 94 85 e0 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x420]
   18eec:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18ef3:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18ef9:	8d 48 01             	lea    ecx,[rax+0x1]
   18efc:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18f02:	48 98                	cdqe   
   18f04:	48 01 f0             	add    rax,rsi
   18f07:	88 10                	mov    BYTE PTR [rax],dl
   18f09:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   18f0f:	48 98                	cdqe   
   18f11:	0f b6 94 85 e1 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41f]
   18f19:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18f20:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18f26:	8d 48 01             	lea    ecx,[rax+0x1]
   18f29:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18f2f:	48 98                	cdqe   
   18f31:	48 01 f0             	add    rax,rsi
   18f34:	88 10                	mov    BYTE PTR [rax],dl
   18f36:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   18f3c:	48 98                	cdqe   
   18f3e:	0f b6 94 85 e2 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41e]
   18f46:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18f4d:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18f53:	8d 48 01             	lea    ecx,[rax+0x1]
   18f56:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18f5c:	48 98                	cdqe   
   18f5e:	48 01 f0             	add    rax,rsi
   18f61:	88 10                	mov    BYTE PTR [rax],dl
   18f63:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   18f6a:	75 1e                	jne    18f8a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7b2>
   18f6c:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
   18f73:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18f79:	8d 50 01             	lea    edx,[rax+0x1]
   18f7c:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
   18f82:	48 98                	cdqe   
   18f84:	48 01 c8             	add    rax,rcx
   18f87:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   18f8a:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   18f90:	8d 50 01             	lea    edx,[rax+0x1]
   18f93:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18f9a:	8b 00                	mov    eax,DWORD PTR [rax]
   18f9c:	39 c2                	cmp    edx,eax
   18f9e:	0f 84 e5 00 00 00    	je     19089 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8b1>
   18fa4:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18faa:	83 f8 08             	cmp    eax,0x8
   18fad:	75 14                	jne    18fc3 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7eb>
   18faf:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18fb6:	48 89 c7             	mov    rdi,rax
   18fb9:	e8 f1 d4 fe ff       	call   64af <stbi__get8(stbi__context*)>
   18fbe:	0f b6 c0             	movzx  eax,al
   18fc1:	eb 06                	jmp    18fc9 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7f1>
   18fc3:	8b 85 44 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4bc]
   18fc9:	89 85 40 fb ff ff    	mov    DWORD PTR [rbp-0x4c0],eax
   18fcf:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   18fd5:	48 98                	cdqe   
   18fd7:	0f b6 94 85 e0 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x420]
   18fdf:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18fe6:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18fec:	8d 48 01             	lea    ecx,[rax+0x1]
   18fef:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18ff5:	48 98                	cdqe   
   18ff7:	48 01 f0             	add    rax,rsi
   18ffa:	88 10                	mov    BYTE PTR [rax],dl
   18ffc:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   19002:	48 98                	cdqe   
   19004:	0f b6 94 85 e1 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41f]
   1900c:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19013:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   19019:	8d 48 01             	lea    ecx,[rax+0x1]
   1901c:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   19022:	48 98                	cdqe   
   19024:	48 01 f0             	add    rax,rsi
   19027:	88 10                	mov    BYTE PTR [rax],dl
   19029:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   1902f:	48 98                	cdqe   
   19031:	0f b6 94 85 e2 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41e]
   19039:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19040:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   19046:	8d 48 01             	lea    ecx,[rax+0x1]
   19049:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   1904f:	48 98                	cdqe   
   19051:	48 01 f0             	add    rax,rsi
   19054:	88 10                	mov    BYTE PTR [rax],dl
   19056:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   1905d:	75 1e                	jne    1907d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8a5>
   1905f:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
   19066:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   1906c:	8d 50 01             	lea    edx,[rax+0x1]
   1906f:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
   19075:	48 98                	cdqe   
   19077:	48 01 c8             	add    rax,rcx
   1907a:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1907d:	83 85 24 fb ff ff 02 	add    DWORD PTR [rbp-0x4dc],0x2
   19084:	e9 fb fd ff ff       	jmp    18e84 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6ac>
   19089:	90                   	nop
   1908a:	8b 95 84 fb ff ff    	mov    edx,DWORD PTR [rbp-0x47c]
   19090:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19097:	89 d6                	mov    esi,edx
   19099:	48 89 c7             	mov    rdi,rax
   1909c:	e8 02 d5 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   190a1:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   190a8:	e9 b7 fd ff ff       	jmp    18e64 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x68c>
   190ad:	c7 85 48 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4b8],0x0
   190b7:	c7 85 4c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4b4],0x0
   190c1:	c7 85 50 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4b0],0x0
   190cb:	c7 85 54 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4ac],0x0
   190d5:	c7 85 58 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a8],0x0
   190df:	c7 85 5c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a4],0x0
   190e9:	c7 85 60 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a0],0x0
   190f3:	c7 85 64 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x49c],0x0
   190fd:	c7 85 68 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x498],0x0
   19107:	c7 85 6c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x494],0x0
   19111:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   19117:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   1911d:	29 d0                	sub    eax,edx
   1911f:	8b 8d b8 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x448]
   19125:	29 c8                	sub    eax,ecx
   19127:	89 c2                	mov    edx,eax
   19129:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19130:	89 d6                	mov    esi,edx
   19132:	48 89 c7             	mov    rdi,rax
   19135:	e8 69 d4 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1913a:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   19140:	83 f8 18             	cmp    eax,0x18
   19143:	75 17                	jne    1915c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x984>
   19145:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1914c:	8b 10                	mov    edx,DWORD PTR [rax]
   1914e:	89 d0                	mov    eax,edx
   19150:	01 c0                	add    eax,eax
   19152:	01 d0                	add    eax,edx
   19154:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   1915a:	eb 28                	jmp    19184 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9ac>
   1915c:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   19162:	83 f8 10             	cmp    eax,0x10
   19165:	75 13                	jne    1917a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9a2>
   19167:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1916e:	8b 00                	mov    eax,DWORD PTR [rax]
   19170:	01 c0                	add    eax,eax
   19172:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   19178:	eb 0a                	jmp    19184 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9ac>
   1917a:	c7 85 2c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d4],0x0
   19184:	8b 85 2c fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d4]
   1918a:	f7 d8                	neg    eax
   1918c:	83 e0 03             	and    eax,0x3
   1918f:	89 85 84 fb ff ff    	mov    DWORD PTR [rbp-0x47c],eax
   19195:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   1919b:	83 f8 18             	cmp    eax,0x18
   1919e:	75 0c                	jne    191ac <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9d4>
   191a0:	c7 85 6c fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x494],0x1
   191aa:	eb 45                	jmp    191f1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa19>
   191ac:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   191b2:	83 f8 20             	cmp    eax,0x20
   191b5:	75 3a                	jne    191f1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa19>
   191b7:	81 bd 78 fb ff ff ff 00 00 00 	cmp    DWORD PTR [rbp-0x488],0xff
   191c1:	75 2e                	jne    191f1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa19>
   191c3:	81 bd 74 fb ff ff 00 ff 00 00 	cmp    DWORD PTR [rbp-0x48c],0xff00
   191cd:	75 22                	jne    191f1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa19>
   191cf:	81 bd 70 fb ff ff 00 00 ff 00 	cmp    DWORD PTR [rbp-0x490],0xff0000
   191d9:	75 16                	jne    191f1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa19>
   191db:	81 bd 7c fb ff ff 00 00 00 ff 	cmp    DWORD PTR [rbp-0x484],0xff000000
   191e5:	75 0a                	jne    191f1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa19>
   191e7:	c7 85 6c fb ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x494],0x2
   191f1:	83 bd 6c fb ff ff 00 	cmp    DWORD PTR [rbp-0x494],0x0
   191f8:	0f 85 e4 00 00 00    	jne    192e2 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb0a>
   191fe:	83 bd 70 fb ff ff 00 	cmp    DWORD PTR [rbp-0x490],0x0
   19205:	74 12                	je     19219 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa41>
   19207:	83 bd 74 fb ff ff 00 	cmp    DWORD PTR [rbp-0x48c],0x0
   1920e:	74 09                	je     19219 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa41>
   19210:	83 bd 78 fb ff ff 00 	cmp    DWORD PTR [rbp-0x488],0x0
   19217:	75 25                	jne    1923e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa66>
   19219:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19220:	48 89 c7             	mov    rdi,rax
   19223:	e8 d8 b2 fe ff       	call   4500 <free@plt>
   19228:	48 8d 3d ea 1d 02 00 	lea    rdi,[rip+0x21dea]        # 3b019 <stbi__depth_scale_table+0x421>
   1922f:	e8 0b b9 fe ff       	call   4b3f <stbi__err(char const*)>
   19234:	b8 00 00 00 00       	mov    eax,0x0
   19239:	e9 d3 05 00 00       	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   1923e:	8b 85 70 fb ff ff    	mov    eax,DWORD PTR [rbp-0x490]
   19244:	89 c7                	mov    edi,eax
   19246:	e8 76 ef ff ff       	call   181c1 <stbi__high_bit(unsigned int)>
   1924b:	83 e8 07             	sub    eax,0x7
   1924e:	89 85 48 fb ff ff    	mov    DWORD PTR [rbp-0x4b8],eax
   19254:	8b 85 70 fb ff ff    	mov    eax,DWORD PTR [rbp-0x490]
   1925a:	89 c7                	mov    edi,eax
   1925c:	e8 c8 ef ff ff       	call   18229 <stbi__bitcount(unsigned int)>
   19261:	89 85 58 fb ff ff    	mov    DWORD PTR [rbp-0x4a8],eax
   19267:	8b 85 74 fb ff ff    	mov    eax,DWORD PTR [rbp-0x48c]
   1926d:	89 c7                	mov    edi,eax
   1926f:	e8 4d ef ff ff       	call   181c1 <stbi__high_bit(unsigned int)>
   19274:	83 e8 07             	sub    eax,0x7
   19277:	89 85 4c fb ff ff    	mov    DWORD PTR [rbp-0x4b4],eax
   1927d:	8b 85 74 fb ff ff    	mov    eax,DWORD PTR [rbp-0x48c]
   19283:	89 c7                	mov    edi,eax
   19285:	e8 9f ef ff ff       	call   18229 <stbi__bitcount(unsigned int)>
   1928a:	89 85 5c fb ff ff    	mov    DWORD PTR [rbp-0x4a4],eax
   19290:	8b 85 78 fb ff ff    	mov    eax,DWORD PTR [rbp-0x488]
   19296:	89 c7                	mov    edi,eax
   19298:	e8 24 ef ff ff       	call   181c1 <stbi__high_bit(unsigned int)>
   1929d:	83 e8 07             	sub    eax,0x7
   192a0:	89 85 50 fb ff ff    	mov    DWORD PTR [rbp-0x4b0],eax
   192a6:	8b 85 78 fb ff ff    	mov    eax,DWORD PTR [rbp-0x488]
   192ac:	89 c7                	mov    edi,eax
   192ae:	e8 76 ef ff ff       	call   18229 <stbi__bitcount(unsigned int)>
   192b3:	89 85 60 fb ff ff    	mov    DWORD PTR [rbp-0x4a0],eax
   192b9:	8b 85 7c fb ff ff    	mov    eax,DWORD PTR [rbp-0x484]
   192bf:	89 c7                	mov    edi,eax
   192c1:	e8 fb ee ff ff       	call   181c1 <stbi__high_bit(unsigned int)>
   192c6:	83 e8 07             	sub    eax,0x7
   192c9:	89 85 54 fb ff ff    	mov    DWORD PTR [rbp-0x4ac],eax
   192cf:	8b 85 7c fb ff ff    	mov    eax,DWORD PTR [rbp-0x484]
   192d5:	89 c7                	mov    edi,eax
   192d7:	e8 4d ef ff ff       	call   18229 <stbi__bitcount(unsigned int)>
   192dc:	89 85 64 fb ff ff    	mov    DWORD PTR [rbp-0x49c],eax
   192e2:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   192ec:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   192f3:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   192f6:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   192fc:	0f 8d cd 02 00 00    	jge    195cf <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdf7>
   19302:	83 bd 6c fb ff ff 00 	cmp    DWORD PTR [rbp-0x494],0x0
   19309:	0f 84 06 01 00 00    	je     19415 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc3d>
   1930f:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   19319:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19320:	8b 00                	mov    eax,DWORD PTR [rax]
   19322:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   19328:	0f 8d 7e 02 00 00    	jge    195ac <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdd4>
   1932e:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19334:	48 98                	cdqe   
   19336:	48 8d 50 02          	lea    rdx,[rax+0x2]
   1933a:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19341:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   19345:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1934c:	48 89 c7             	mov    rdi,rax
   1934f:	e8 5b d1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19354:	88 03                	mov    BYTE PTR [rbx],al
   19356:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   1935c:	48 98                	cdqe   
   1935e:	48 8d 50 01          	lea    rdx,[rax+0x1]
   19362:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19369:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1936d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19374:	48 89 c7             	mov    rdi,rax
   19377:	e8 33 d1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1937c:	88 03                	mov    BYTE PTR [rbx],al
   1937e:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19384:	48 63 d0             	movsxd rdx,eax
   19387:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1938e:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   19392:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19399:	48 89 c7             	mov    rdi,rax
   1939c:	e8 0e d1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   193a1:	88 03                	mov    BYTE PTR [rbx],al
   193a3:	83 85 68 fb ff ff 03 	add    DWORD PTR [rbp-0x498],0x3
   193aa:	83 bd 6c fb ff ff 02 	cmp    DWORD PTR [rbp-0x494],0x2
   193b1:	75 11                	jne    193c4 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xbec>
   193b3:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   193ba:	48 89 c7             	mov    rdi,rax
   193bd:	e8 ed d0 fe ff       	call   64af <stbi__get8(stbi__context*)>
   193c2:	eb 05                	jmp    193c9 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xbf1>
   193c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   193c9:	88 85 1a fb ff ff    	mov    BYTE PTR [rbp-0x4e6],al
   193cf:	0f b6 85 1a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x4e6]
   193d6:	09 85 1c fb ff ff    	or     DWORD PTR [rbp-0x4e4],eax
   193dc:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   193e3:	75 24                	jne    19409 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc31>
   193e5:	0f b6 95 1a fb ff ff 	movzx  edx,BYTE PTR [rbp-0x4e6]
   193ec:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   193f3:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   193f9:	8d 48 01             	lea    ecx,[rax+0x1]
   193fc:	89 8d 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],ecx
   19402:	48 98                	cdqe   
   19404:	48 01 f0             	add    rax,rsi
   19407:	88 10                	mov    BYTE PTR [rax],dl
   19409:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   19410:	e9 04 ff ff ff       	jmp    19319 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb41>
   19415:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   1941b:	89 85 88 fb ff ff    	mov    DWORD PTR [rbp-0x478],eax
   19421:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   1942b:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19432:	8b 00                	mov    eax,DWORD PTR [rax]
   19434:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   1943a:	0f 8d 6c 01 00 00    	jge    195ac <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdd4>
   19440:	83 bd 88 fb ff ff 10 	cmp    DWORD PTR [rbp-0x478],0x10
   19447:	75 11                	jne    1945a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc82>
   19449:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19450:	48 89 c7             	mov    rdi,rax
   19453:	e8 b0 d3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19458:	eb 0f                	jmp    19469 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc91>
   1945a:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19461:	48 89 c7             	mov    rdi,rax
   19464:	e8 d8 d3 fe ff       	call   6841 <stbi__get32le(stbi__context*)>
   19469:	89 85 8c fb ff ff    	mov    DWORD PTR [rbp-0x474],eax
   1946f:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   19475:	23 85 70 fb ff ff    	and    eax,DWORD PTR [rbp-0x490]
   1947b:	8b 95 58 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a8]
   19481:	8b 8d 48 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4b8]
   19487:	89 ce                	mov    esi,ecx
   19489:	89 c7                	mov    edi,eax
   1948b:	e8 02 ee ff ff       	call   18292 <stbi__shiftsigned(unsigned int, int, int)>
   19490:	89 c1                	mov    ecx,eax
   19492:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19499:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   1949f:	8d 50 01             	lea    edx,[rax+0x1]
   194a2:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   194a8:	48 98                	cdqe   
   194aa:	48 01 f0             	add    rax,rsi
   194ad:	88 08                	mov    BYTE PTR [rax],cl
   194af:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   194b5:	23 85 74 fb ff ff    	and    eax,DWORD PTR [rbp-0x48c]
   194bb:	8b 95 5c fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a4]
   194c1:	8b 8d 4c fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4b4]
   194c7:	89 ce                	mov    esi,ecx
   194c9:	89 c7                	mov    edi,eax
   194cb:	e8 c2 ed ff ff       	call   18292 <stbi__shiftsigned(unsigned int, int, int)>
   194d0:	89 c1                	mov    ecx,eax
   194d2:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   194d9:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   194df:	8d 50 01             	lea    edx,[rax+0x1]
   194e2:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   194e8:	48 98                	cdqe   
   194ea:	48 01 f0             	add    rax,rsi
   194ed:	88 08                	mov    BYTE PTR [rax],cl
   194ef:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   194f5:	23 85 78 fb ff ff    	and    eax,DWORD PTR [rbp-0x488]
   194fb:	8b 95 60 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a0]
   19501:	8b 8d 50 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4b0]
   19507:	89 ce                	mov    esi,ecx
   19509:	89 c7                	mov    edi,eax
   1950b:	e8 82 ed ff ff       	call   18292 <stbi__shiftsigned(unsigned int, int, int)>
   19510:	89 c1                	mov    ecx,eax
   19512:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19519:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   1951f:	8d 50 01             	lea    edx,[rax+0x1]
   19522:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   19528:	48 98                	cdqe   
   1952a:	48 01 f0             	add    rax,rsi
   1952d:	88 08                	mov    BYTE PTR [rax],cl
   1952f:	83 bd 7c fb ff ff 00 	cmp    DWORD PTR [rbp-0x484],0x0
   19536:	74 23                	je     1955b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xd83>
   19538:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   1953e:	23 85 7c fb ff ff    	and    eax,DWORD PTR [rbp-0x484]
   19544:	8b 95 64 fb ff ff    	mov    edx,DWORD PTR [rbp-0x49c]
   1954a:	8b 8d 54 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4ac]
   19550:	89 ce                	mov    esi,ecx
   19552:	89 c7                	mov    edi,eax
   19554:	e8 39 ed ff ff       	call   18292 <stbi__shiftsigned(unsigned int, int, int)>
   19559:	eb 05                	jmp    19560 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xd88>
   1955b:	b8 ff 00 00 00       	mov    eax,0xff
   19560:	89 85 90 fb ff ff    	mov    DWORD PTR [rbp-0x470],eax
   19566:	8b 85 90 fb ff ff    	mov    eax,DWORD PTR [rbp-0x470]
   1956c:	09 85 1c fb ff ff    	or     DWORD PTR [rbp-0x4e4],eax
   19572:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   19579:	75 25                	jne    195a0 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdc8>
   1957b:	8b 85 90 fb ff ff    	mov    eax,DWORD PTR [rbp-0x470]
   19581:	89 c1                	mov    ecx,eax
   19583:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   1958a:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19590:	8d 50 01             	lea    edx,[rax+0x1]
   19593:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   19599:	48 98                	cdqe   
   1959b:	48 01 f0             	add    rax,rsi
   1959e:	88 08                	mov    BYTE PTR [rax],cl
   195a0:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   195a7:	e9 7f fe ff ff       	jmp    1942b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc53>
   195ac:	8b 95 84 fb ff ff    	mov    edx,DWORD PTR [rbp-0x47c]
   195b2:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   195b9:	89 d6                	mov    esi,edx
   195bb:	48 89 c7             	mov    rdi,rax
   195be:	e8 e0 cf fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   195c3:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   195ca:	e9 1d fd ff ff       	jmp    192ec <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb14>
   195cf:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   195d6:	75 53                	jne    1962b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe53>
   195d8:	83 bd 1c fb ff ff 00 	cmp    DWORD PTR [rbp-0x4e4],0x0
   195df:	75 4a                	jne    1962b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe53>
   195e1:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   195e8:	8b 10                	mov    edx,DWORD PTR [rax]
   195ea:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   195f1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   195f4:	0f af c2             	imul   eax,edx
   195f7:	c1 e0 02             	shl    eax,0x2
   195fa:	83 e8 01             	sub    eax,0x1
   195fd:	89 85 24 fb ff ff    	mov    DWORD PTR [rbp-0x4dc],eax
   19603:	83 bd 24 fb ff ff 00 	cmp    DWORD PTR [rbp-0x4dc],0x0
   1960a:	78 1f                	js     1962b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe53>
   1960c:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   19612:	48 63 d0             	movsxd rdx,eax
   19615:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1961c:	48 01 d0             	add    rax,rdx
   1961f:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   19622:	83 ad 24 fb ff ff 04 	sub    DWORD PTR [rbp-0x4dc],0x4
   19629:	eb d8                	jmp    19603 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe2b>
   1962b:	83 bd 80 fb ff ff 00 	cmp    DWORD PTR [rbp-0x480],0x0
   19632:	0f 84 2a 01 00 00    	je     19762 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xf8a>
   19638:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   19642:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19649:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1964c:	d1 f8                	sar    eax,1
   1964e:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   19654:	0f 8d 08 01 00 00    	jge    19762 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xf8a>
   1965a:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19661:	8b 10                	mov    edx,DWORD PTR [rax]
   19663:	8b 85 28 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d8]
   19669:	0f af d0             	imul   edx,eax
   1966c:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   19672:	0f af c2             	imul   eax,edx
   19675:	89 c2                	mov    edx,eax
   19677:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1967e:	48 01 d0             	add    rax,rdx
   19681:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
   19688:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1968f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   19692:	8b 95 28 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4d8]
   19698:	29 d0                	sub    eax,edx
   1969a:	8d 50 ff             	lea    edx,[rax-0x1]
   1969d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   196a4:	8b 00                	mov    eax,DWORD PTR [rax]
   196a6:	0f af d0             	imul   edx,eax
   196a9:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   196af:	0f af c2             	imul   eax,edx
   196b2:	89 c2                	mov    edx,eax
   196b4:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   196bb:	48 01 d0             	add    rax,rdx
   196be:	48 89 85 a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rax
   196c5:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   196cf:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   196d6:	8b 00                	mov    eax,DWORD PTR [rax]
   196d8:	0f af 85 30 fb ff ff 	imul   eax,DWORD PTR [rbp-0x4d0]
   196df:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   196e5:	7d 6f                	jge    19756 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xf7e>
   196e7:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   196ed:	48 63 d0             	movsxd rdx,eax
   196f0:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
   196f7:	48 01 d0             	add    rax,rdx
   196fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   196fd:	88 85 1b fb ff ff    	mov    BYTE PTR [rbp-0x4e5],al
   19703:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   19709:	48 63 d0             	movsxd rdx,eax
   1970c:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
   19713:	48 01 d0             	add    rax,rdx
   19716:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   1971c:	48 63 ca             	movsxd rcx,edx
   1971f:	48 8b 95 a0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x460]
   19726:	48 01 ca             	add    rdx,rcx
   19729:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1972c:	88 02                	mov    BYTE PTR [rdx],al
   1972e:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   19734:	48 63 d0             	movsxd rdx,eax
   19737:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
   1973e:	48 01 c2             	add    rdx,rax
   19741:	0f b6 85 1b fb ff ff 	movzx  eax,BYTE PTR [rbp-0x4e5]
   19748:	88 02                	mov    BYTE PTR [rdx],al
   1974a:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   19751:	e9 79 ff ff ff       	jmp    196cf <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xef7>
   19756:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   1975d:	e9 e0 fe ff ff       	jmp    19642 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe6a>
   19762:	83 bd ec fa ff ff 00 	cmp    DWORD PTR [rbp-0x514],0x0
   19769:	74 59                	je     197c4 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xfec>
   1976b:	8b 85 ec fa ff ff    	mov    eax,DWORD PTR [rbp-0x514]
   19771:	3b 85 30 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x4d0]
   19777:	74 4b                	je     197c4 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xfec>
   19779:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19780:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   19783:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1978a:	8b 08                	mov    ecx,DWORD PTR [rax]
   1978c:	8b 95 ec fa ff ff    	mov    edx,DWORD PTR [rbp-0x514]
   19792:	8b b5 30 fb ff ff    	mov    esi,DWORD PTR [rbp-0x4d0]
   19798:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1979f:	41 89 f8             	mov    r8d,edi
   197a2:	48 89 c7             	mov    rdi,rax
   197a5:	e8 f5 d0 fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   197aa:	48 89 85 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rax
   197b1:	48 83 bd 98 fb ff ff 00 	cmp    QWORD PTR [rbp-0x468],0x0
   197b9:	75 09                	jne    197c4 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xfec>
   197bb:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   197c2:	eb 4d                	jmp    19811 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1039>
   197c4:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   197cb:	8b 00                	mov    eax,DWORD PTR [rax]
   197cd:	89 c2                	mov    edx,eax
   197cf:	48 8b 85 00 fb ff ff 	mov    rax,QWORD PTR [rbp-0x500]
   197d6:	89 10                	mov    DWORD PTR [rax],edx
   197d8:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   197df:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   197e2:	89 c2                	mov    edx,eax
   197e4:	48 8b 85 f8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x508]
   197eb:	89 10                	mov    DWORD PTR [rax],edx
   197ed:	48 83 bd f0 fa ff ff 00 	cmp    QWORD PTR [rbp-0x510],0x0
   197f5:	74 13                	je     1980a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1032>
   197f7:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   197fe:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   19801:	48 8b 85 f0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x510]
   19808:	89 10                	mov    DWORD PTR [rax],edx
   1980a:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19811:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   19815:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   1981e:	74 05                	je     19825 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x104d>
   19820:	e8 8b ac fe ff       	call   44b0 <__stack_chk_fail@plt>
   19825:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   19829:	c9                   	leave  
   1982a:	c3                   	ret    

000000000001982b <stbi__tga_get_comp(int, int, int*)>:
   1982b:	55                   	push   rbp
   1982c:	48 89 e5             	mov    rbp,rsp
   1982f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   19832:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   19835:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
   19839:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   1983e:	74 0a                	je     1984a <stbi__tga_get_comp(int, int, int*)+0x1f>
   19840:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19844:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   1984a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1984d:	83 e8 08             	sub    eax,0x8
   19850:	83 f8 18             	cmp    eax,0x18
   19853:	77 5e                	ja     198b3 <stbi__tga_get_comp(int, int, int*)+0x88>
   19855:	89 c0                	mov    eax,eax
   19857:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1985f:	48 8d 05 be 17 02 00 	lea    rax,[rip+0x217be]        # 3b024 <stbi__depth_scale_table+0x42c>
   19866:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19869:	48 98                	cdqe   
   1986b:	48 8d 15 b2 17 02 00 	lea    rdx,[rip+0x217b2]        # 3b024 <stbi__depth_scale_table+0x42c>
   19872:	48 01 d0             	add    rax,rdx
   19875:	ff e0                	jmp    rax
   19877:	b8 01 00 00 00       	mov    eax,0x1
   1987c:	eb 3a                	jmp    198b8 <stbi__tga_get_comp(int, int, int*)+0x8d>
   1987e:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   19882:	74 07                	je     1988b <stbi__tga_get_comp(int, int, int*)+0x60>
   19884:	b8 02 00 00 00       	mov    eax,0x2
   19889:	eb 2d                	jmp    198b8 <stbi__tga_get_comp(int, int, int*)+0x8d>
   1988b:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   19890:	74 0a                	je     1989c <stbi__tga_get_comp(int, int, int*)+0x71>
   19892:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19896:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
   1989c:	b8 03 00 00 00       	mov    eax,0x3
   198a1:	eb 15                	jmp    198b8 <stbi__tga_get_comp(int, int, int*)+0x8d>
   198a3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   198a6:	8d 50 07             	lea    edx,[rax+0x7]
   198a9:	85 c0                	test   eax,eax
   198ab:	0f 48 c2             	cmovs  eax,edx
   198ae:	c1 f8 03             	sar    eax,0x3
   198b1:	eb 05                	jmp    198b8 <stbi__tga_get_comp(int, int, int*)+0x8d>
   198b3:	b8 00 00 00 00       	mov    eax,0x0
   198b8:	5d                   	pop    rbp
   198b9:	c3                   	ret    

00000000000198ba <stbi__tga_info(stbi__context*, int*, int*, int*)>:
   198ba:	55                   	push   rbp
   198bb:	48 89 e5             	mov    rbp,rsp
   198be:	48 83 ec 40          	sub    rsp,0x40
   198c2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   198c6:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   198ca:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   198ce:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   198d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   198d6:	48 89 c7             	mov    rdi,rax
   198d9:	e8 d1 cb fe ff       	call   64af <stbi__get8(stbi__context*)>
   198de:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   198e2:	48 89 c7             	mov    rdi,rax
   198e5:	e8 c5 cb fe ff       	call   64af <stbi__get8(stbi__context*)>
   198ea:	0f b6 c0             	movzx  eax,al
   198ed:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   198f0:	83 7d e8 01          	cmp    DWORD PTR [rbp-0x18],0x1
   198f4:	7e 16                	jle    1990c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x52>
   198f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   198fa:	48 89 c7             	mov    rdi,rax
   198fd:	e8 f7 b1 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19902:	b8 00 00 00 00       	mov    eax,0x0
   19907:	e9 26 02 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   1990c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19910:	48 89 c7             	mov    rdi,rax
   19913:	e8 97 cb fe ff       	call   64af <stbi__get8(stbi__context*)>
   19918:	0f b6 c0             	movzx  eax,al
   1991b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1991e:	83 7d e8 01          	cmp    DWORD PTR [rbp-0x18],0x1
   19922:	0f 85 92 00 00 00    	jne    199ba <stbi__tga_info(stbi__context*, int*, int*, int*)+0x100>
   19928:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
   1992c:	74 1c                	je     1994a <stbi__tga_info(stbi__context*, int*, int*, int*)+0x90>
   1992e:	83 7d ec 09          	cmp    DWORD PTR [rbp-0x14],0x9
   19932:	74 16                	je     1994a <stbi__tga_info(stbi__context*, int*, int*, int*)+0x90>
   19934:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19938:	48 89 c7             	mov    rdi,rax
   1993b:	e8 b9 b1 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19940:	b8 00 00 00 00       	mov    eax,0x0
   19945:	e9 e8 01 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   1994a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1994e:	be 04 00 00 00       	mov    esi,0x4
   19953:	48 89 c7             	mov    rdi,rax
   19956:	e8 48 cc fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1995b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1995f:	48 89 c7             	mov    rdi,rax
   19962:	e8 48 cb fe ff       	call   64af <stbi__get8(stbi__context*)>
   19967:	0f b6 c0             	movzx  eax,al
   1996a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1996d:	83 7d f0 08          	cmp    DWORD PTR [rbp-0x10],0x8
   19971:	74 2e                	je     199a1 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19973:	83 7d f0 0f          	cmp    DWORD PTR [rbp-0x10],0xf
   19977:	74 28                	je     199a1 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19979:	83 7d f0 10          	cmp    DWORD PTR [rbp-0x10],0x10
   1997d:	74 22                	je     199a1 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   1997f:	83 7d f0 18          	cmp    DWORD PTR [rbp-0x10],0x18
   19983:	74 1c                	je     199a1 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19985:	83 7d f0 20          	cmp    DWORD PTR [rbp-0x10],0x20
   19989:	74 16                	je     199a1 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   1998b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1998f:	48 89 c7             	mov    rdi,rax
   19992:	e8 62 b1 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19997:	b8 00 00 00 00       	mov    eax,0x0
   1999c:	e9 91 01 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   199a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   199a5:	be 04 00 00 00       	mov    esi,0x4
   199aa:	48 89 c7             	mov    rdi,rax
   199ad:	e8 f1 cb fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   199b2:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   199b5:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   199b8:	eb 46                	jmp    19a00 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x146>
   199ba:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
   199be:	74 28                	je     199e8 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   199c0:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   199c4:	74 22                	je     199e8 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   199c6:	83 7d ec 0a          	cmp    DWORD PTR [rbp-0x14],0xa
   199ca:	74 1c                	je     199e8 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   199cc:	83 7d ec 0b          	cmp    DWORD PTR [rbp-0x14],0xb
   199d0:	74 16                	je     199e8 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   199d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   199d6:	48 89 c7             	mov    rdi,rax
   199d9:	e8 1b b1 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   199de:	b8 00 00 00 00       	mov    eax,0x0
   199e3:	e9 4a 01 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   199e8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   199ec:	be 09 00 00 00       	mov    esi,0x9
   199f1:	48 89 c7             	mov    rdi,rax
   199f4:	e8 aa cb fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   199f9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   19a00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a04:	48 89 c7             	mov    rdi,rax
   19a07:	e8 fc cd fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19a0c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   19a0f:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   19a13:	7f 16                	jg     19a2b <stbi__tga_info(stbi__context*, int*, int*, int*)+0x171>
   19a15:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a19:	48 89 c7             	mov    rdi,rax
   19a1c:	e8 d8 b0 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19a21:	b8 00 00 00 00       	mov    eax,0x0
   19a26:	e9 07 01 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19a2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a2f:	48 89 c7             	mov    rdi,rax
   19a32:	e8 d1 cd fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19a37:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   19a3a:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   19a3e:	7f 16                	jg     19a56 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x19c>
   19a40:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a44:	48 89 c7             	mov    rdi,rax
   19a47:	e8 ad b0 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19a4c:	b8 00 00 00 00       	mov    eax,0x0
   19a51:	e9 dc 00 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19a56:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a5a:	48 89 c7             	mov    rdi,rax
   19a5d:	e8 4d ca fe ff       	call   64af <stbi__get8(stbi__context*)>
   19a62:	0f b6 c0             	movzx  eax,al
   19a65:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19a68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a6c:	48 89 c7             	mov    rdi,rax
   19a6f:	e8 3b ca fe ff       	call   64af <stbi__get8(stbi__context*)>
   19a74:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   19a78:	74 3b                	je     19ab5 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x1fb>
   19a7a:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19a7e:	74 1c                	je     19a9c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x1e2>
   19a80:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19a84:	74 16                	je     19a9c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x1e2>
   19a86:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19a8a:	48 89 c7             	mov    rdi,rax
   19a8d:	e8 67 b0 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19a92:	b8 00 00 00 00       	mov    eax,0x0
   19a97:	e9 96 00 00 00       	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19a9c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   19a9f:	ba 00 00 00 00       	mov    edx,0x0
   19aa4:	be 00 00 00 00       	mov    esi,0x0
   19aa9:	89 c7                	mov    edi,eax
   19aab:	e8 7b fd ff ff       	call   1982b <stbi__tga_get_comp(int, int, int*)>
   19ab0:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   19ab3:	eb 2f                	jmp    19ae4 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x22a>
   19ab5:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   19ab9:	74 06                	je     19ac1 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x207>
   19abb:	83 7d ec 0b          	cmp    DWORD PTR [rbp-0x14],0xb
   19abf:	75 07                	jne    19ac8 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x20e>
   19ac1:	b8 01 00 00 00       	mov    eax,0x1
   19ac6:	eb 05                	jmp    19acd <stbi__tga_info(stbi__context*, int*, int*, int*)+0x213>
   19ac8:	b8 00 00 00 00       	mov    eax,0x0
   19acd:	0f b6 c8             	movzx  ecx,al
   19ad0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   19ad3:	ba 00 00 00 00       	mov    edx,0x0
   19ad8:	89 ce                	mov    esi,ecx
   19ada:	89 c7                	mov    edi,eax
   19adc:	e8 4a fd ff ff       	call   1982b <stbi__tga_get_comp(int, int, int*)>
   19ae1:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   19ae4:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   19ae8:	75 13                	jne    19afd <stbi__tga_info(stbi__context*, int*, int*, int*)+0x243>
   19aea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19aee:	48 89 c7             	mov    rdi,rax
   19af1:	e8 03 b0 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19af6:	b8 00 00 00 00       	mov    eax,0x0
   19afb:	eb 35                	jmp    19b32 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19afd:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   19b02:	74 09                	je     19b0d <stbi__tga_info(stbi__context*, int*, int*, int*)+0x253>
   19b04:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19b08:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   19b0b:	89 10                	mov    DWORD PTR [rax],edx
   19b0d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   19b12:	74 09                	je     19b1d <stbi__tga_info(stbi__context*, int*, int*, int*)+0x263>
   19b14:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   19b18:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   19b1b:	89 10                	mov    DWORD PTR [rax],edx
   19b1d:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   19b22:	74 09                	je     19b2d <stbi__tga_info(stbi__context*, int*, int*, int*)+0x273>
   19b24:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   19b28:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   19b2b:	89 10                	mov    DWORD PTR [rax],edx
   19b2d:	b8 01 00 00 00       	mov    eax,0x1
   19b32:	c9                   	leave  
   19b33:	c3                   	ret    

0000000000019b34 <stbi__tga_test(stbi__context*)>:
   19b34:	55                   	push   rbp
   19b35:	48 89 e5             	mov    rbp,rsp
   19b38:	48 83 ec 20          	sub    rsp,0x20
   19b3c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   19b40:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   19b47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19b4b:	48 89 c7             	mov    rdi,rax
   19b4e:	e8 5c c9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19b53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19b57:	48 89 c7             	mov    rdi,rax
   19b5a:	e8 50 c9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19b5f:	0f b6 c0             	movzx  eax,al
   19b62:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   19b65:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
   19b69:	0f 8f 22 01 00 00    	jg     19c91 <stbi__tga_test(stbi__context*)+0x15d>
   19b6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19b73:	48 89 c7             	mov    rdi,rax
   19b76:	e8 34 c9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19b7b:	0f b6 c0             	movzx  eax,al
   19b7e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19b81:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
   19b85:	75 68                	jne    19bef <stbi__tga_test(stbi__context*)+0xbb>
   19b87:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   19b8b:	74 0a                	je     19b97 <stbi__tga_test(stbi__context*)+0x63>
   19b8d:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
   19b91:	0f 85 fd 00 00 00    	jne    19c94 <stbi__tga_test(stbi__context*)+0x160>
   19b97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19b9b:	be 04 00 00 00       	mov    esi,0x4
   19ba0:	48 89 c7             	mov    rdi,rax
   19ba3:	e8 fb c9 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   19ba8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19bac:	48 89 c7             	mov    rdi,rax
   19baf:	e8 fb c8 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19bb4:	0f b6 c0             	movzx  eax,al
   19bb7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19bba:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19bbe:	74 1c                	je     19bdc <stbi__tga_test(stbi__context*)+0xa8>
   19bc0:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
   19bc4:	74 16                	je     19bdc <stbi__tga_test(stbi__context*)+0xa8>
   19bc6:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19bca:	74 10                	je     19bdc <stbi__tga_test(stbi__context*)+0xa8>
   19bcc:	83 7d fc 18          	cmp    DWORD PTR [rbp-0x4],0x18
   19bd0:	74 0a                	je     19bdc <stbi__tga_test(stbi__context*)+0xa8>
   19bd2:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
   19bd6:	0f 85 bb 00 00 00    	jne    19c97 <stbi__tga_test(stbi__context*)+0x163>
   19bdc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19be0:	be 04 00 00 00       	mov    esi,0x4
   19be5:	48 89 c7             	mov    rdi,rax
   19be8:	e8 b6 c9 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   19bed:	eb 2d                	jmp    19c1c <stbi__tga_test(stbi__context*)+0xe8>
   19bef:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
   19bf3:	74 16                	je     19c0b <stbi__tga_test(stbi__context*)+0xd7>
   19bf5:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   19bf9:	74 10                	je     19c0b <stbi__tga_test(stbi__context*)+0xd7>
   19bfb:	83 7d fc 0a          	cmp    DWORD PTR [rbp-0x4],0xa
   19bff:	74 0a                	je     19c0b <stbi__tga_test(stbi__context*)+0xd7>
   19c01:	83 7d fc 0b          	cmp    DWORD PTR [rbp-0x4],0xb
   19c05:	0f 85 8f 00 00 00    	jne    19c9a <stbi__tga_test(stbi__context*)+0x166>
   19c0b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19c0f:	be 09 00 00 00       	mov    esi,0x9
   19c14:	48 89 c7             	mov    rdi,rax
   19c17:	e8 87 c9 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   19c1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19c20:	48 89 c7             	mov    rdi,rax
   19c23:	e8 e0 cb fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19c28:	85 c0                	test   eax,eax
   19c2a:	0f 9e c0             	setle  al
   19c2d:	84 c0                	test   al,al
   19c2f:	75 6c                	jne    19c9d <stbi__tga_test(stbi__context*)+0x169>
   19c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19c35:	48 89 c7             	mov    rdi,rax
   19c38:	e8 cb cb fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19c3d:	85 c0                	test   eax,eax
   19c3f:	0f 9e c0             	setle  al
   19c42:	84 c0                	test   al,al
   19c44:	75 5a                	jne    19ca0 <stbi__tga_test(stbi__context*)+0x16c>
   19c46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19c4a:	48 89 c7             	mov    rdi,rax
   19c4d:	e8 5d c8 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19c52:	0f b6 c0             	movzx  eax,al
   19c55:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19c58:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
   19c5c:	75 0c                	jne    19c6a <stbi__tga_test(stbi__context*)+0x136>
   19c5e:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19c62:	74 06                	je     19c6a <stbi__tga_test(stbi__context*)+0x136>
   19c64:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19c68:	75 39                	jne    19ca3 <stbi__tga_test(stbi__context*)+0x16f>
   19c6a:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19c6e:	74 18                	je     19c88 <stbi__tga_test(stbi__context*)+0x154>
   19c70:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
   19c74:	74 12                	je     19c88 <stbi__tga_test(stbi__context*)+0x154>
   19c76:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19c7a:	74 0c                	je     19c88 <stbi__tga_test(stbi__context*)+0x154>
   19c7c:	83 7d fc 18          	cmp    DWORD PTR [rbp-0x4],0x18
   19c80:	74 06                	je     19c88 <stbi__tga_test(stbi__context*)+0x154>
   19c82:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
   19c86:	75 1e                	jne    19ca6 <stbi__tga_test(stbi__context*)+0x172>
   19c88:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   19c8f:	eb 16                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19c91:	90                   	nop
   19c92:	eb 13                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19c94:	90                   	nop
   19c95:	eb 10                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19c97:	90                   	nop
   19c98:	eb 0d                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19c9a:	90                   	nop
   19c9b:	eb 0a                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19c9d:	90                   	nop
   19c9e:	eb 07                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19ca0:	90                   	nop
   19ca1:	eb 04                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19ca3:	90                   	nop
   19ca4:	eb 01                	jmp    19ca7 <stbi__tga_test(stbi__context*)+0x173>
   19ca6:	90                   	nop
   19ca7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19cab:	48 89 c7             	mov    rdi,rax
   19cae:	e8 46 ae fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   19cb3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   19cb6:	c9                   	leave  
   19cb7:	c3                   	ret    

0000000000019cb8 <stbi__tga_read_rgb16(stbi__context*, unsigned char*)>:
   19cb8:	55                   	push   rbp
   19cb9:	48 89 e5             	mov    rbp,rsp
   19cbc:	48 83 ec 20          	sub    rsp,0x20
   19cc0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   19cc4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   19cc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19ccc:	48 89 c7             	mov    rdi,rax
   19ccf:	e8 34 cb fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19cd4:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
   19cd8:	66 c7 45 f2 1f 00    	mov    WORD PTR [rbp-0xe],0x1f
   19cde:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
   19ce2:	66 c1 e8 0a          	shr    ax,0xa
   19ce6:	66 23 45 f2          	and    ax,WORD PTR [rbp-0xe]
   19cea:	0f b7 c0             	movzx  eax,ax
   19ced:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   19cf0:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
   19cf4:	66 c1 e8 05          	shr    ax,0x5
   19cf8:	66 23 45 f2          	and    ax,WORD PTR [rbp-0xe]
   19cfc:	0f b7 c0             	movzx  eax,ax
   19cff:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   19d02:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
   19d06:	66 23 45 f2          	and    ax,WORD PTR [rbp-0xe]
   19d0a:	0f b7 c0             	movzx  eax,ax
   19d0d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19d10:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   19d13:	89 d0                	mov    eax,edx
   19d15:	c1 e0 08             	shl    eax,0x8
   19d18:	29 d0                	sub    eax,edx
   19d1a:	48 63 d0             	movsxd rdx,eax
   19d1d:	48 69 d2 43 08 21 84 	imul   rdx,rdx,0xffffffff84210843
   19d24:	48 c1 ea 20          	shr    rdx,0x20
   19d28:	01 c2                	add    edx,eax
   19d2a:	c1 fa 04             	sar    edx,0x4
   19d2d:	c1 f8 1f             	sar    eax,0x1f
   19d30:	89 c1                	mov    ecx,eax
   19d32:	89 d0                	mov    eax,edx
   19d34:	29 c8                	sub    eax,ecx
   19d36:	89 c2                	mov    edx,eax
   19d38:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   19d3c:	88 10                	mov    BYTE PTR [rax],dl
   19d3e:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   19d41:	89 d0                	mov    eax,edx
   19d43:	c1 e0 08             	shl    eax,0x8
   19d46:	29 d0                	sub    eax,edx
   19d48:	48 63 d0             	movsxd rdx,eax
   19d4b:	48 69 d2 43 08 21 84 	imul   rdx,rdx,0xffffffff84210843
   19d52:	48 c1 ea 20          	shr    rdx,0x20
   19d56:	01 c2                	add    edx,eax
   19d58:	c1 fa 04             	sar    edx,0x4
   19d5b:	c1 f8 1f             	sar    eax,0x1f
   19d5e:	29 c2                	sub    edx,eax
   19d60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   19d64:	48 83 c0 01          	add    rax,0x1
   19d68:	88 10                	mov    BYTE PTR [rax],dl
   19d6a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   19d6d:	89 d0                	mov    eax,edx
   19d6f:	c1 e0 08             	shl    eax,0x8
   19d72:	29 d0                	sub    eax,edx
   19d74:	48 63 d0             	movsxd rdx,eax
   19d77:	48 69 d2 43 08 21 84 	imul   rdx,rdx,0xffffffff84210843
   19d7e:	48 c1 ea 20          	shr    rdx,0x20
   19d82:	01 c2                	add    edx,eax
   19d84:	c1 fa 04             	sar    edx,0x4
   19d87:	c1 f8 1f             	sar    eax,0x1f
   19d8a:	29 c2                	sub    edx,eax
   19d8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   19d90:	48 83 c0 02          	add    rax,0x2
   19d94:	88 10                	mov    BYTE PTR [rax],dl
   19d96:	90                   	nop
   19d97:	c9                   	leave  
   19d98:	c3                   	ret    

0000000000019d99 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   19d99:	55                   	push   rbp
   19d9a:	48 89 e5             	mov    rbp,rsp
   19d9d:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
   19da4:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
   19dab:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
   19db2:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   19db9:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
   19dc0:	44 89 85 3c ff ff ff 	mov    DWORD PTR [rbp-0xc4],r8d
   19dc7:	4c 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],r9
   19dce:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   19dd7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   19ddb:	31 c0                	xor    eax,eax
   19ddd:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19de4:	48 89 c7             	mov    rdi,rax
   19de7:	e8 c3 c6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19dec:	0f b6 c0             	movzx  eax,al
   19def:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   19df2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19df9:	48 89 c7             	mov    rdi,rax
   19dfc:	e8 ae c6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19e01:	0f b6 c0             	movzx  eax,al
   19e04:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   19e07:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e0e:	48 89 c7             	mov    rdi,rax
   19e11:	e8 99 c6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19e16:	0f b6 c0             	movzx  eax,al
   19e19:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   19e1f:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   19e29:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e30:	48 89 c7             	mov    rdi,rax
   19e33:	e8 d0 c9 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19e38:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   19e3b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e42:	48 89 c7             	mov    rdi,rax
   19e45:	e8 be c9 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19e4a:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   19e4d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e54:	48 89 c7             	mov    rdi,rax
   19e57:	e8 53 c6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19e5c:	0f b6 c0             	movzx  eax,al
   19e5f:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   19e62:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e69:	48 89 c7             	mov    rdi,rax
   19e6c:	e8 97 c9 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19e71:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   19e74:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e7b:	48 89 c7             	mov    rdi,rax
   19e7e:	e8 85 c9 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19e83:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   19e86:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e8d:	48 89 c7             	mov    rdi,rax
   19e90:	e8 73 c9 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19e95:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   19e98:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19e9f:	48 89 c7             	mov    rdi,rax
   19ea2:	e8 61 c9 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   19ea7:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   19eaa:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19eb1:	48 89 c7             	mov    rdi,rax
   19eb4:	e8 f6 c5 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19eb9:	0f b6 c0             	movzx  eax,al
   19ebc:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
   19ebf:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   19ec9:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   19ed0:	48 89 c7             	mov    rdi,rax
   19ed3:	e8 d7 c5 fe ff       	call   64af <stbi__get8(stbi__context*)>
   19ed8:	0f b6 c0             	movzx  eax,al
   19edb:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   19ede:	48 c7 45 d0 00 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
   19ee6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   19eed:	c7 85 7c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x84],0x0
   19ef7:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   19efe:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   19f05:	83 bd 68 ff ff ff 07 	cmp    DWORD PTR [rbp-0x98],0x7
   19f0c:	7e 11                	jle    19f1f <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x186>
   19f0e:	83 ad 68 ff ff ff 08 	sub    DWORD PTR [rbp-0x98],0x8
   19f15:	c7 85 6c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x94],0x1
   19f1f:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   19f22:	83 e0 20             	and    eax,0x20
   19f25:	85 c0                	test   eax,eax
   19f27:	0f 94 c0             	sete   al
   19f2a:	0f b6 c0             	movzx  eax,al
   19f2d:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   19f30:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   19f34:	74 1e                	je     19f54 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1bb>
   19f36:	48 8d 95 64 ff ff ff 	lea    rdx,[rbp-0x9c]
   19f3d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   19f40:	be 00 00 00 00       	mov    esi,0x0
   19f45:	89 c7                	mov    edi,eax
   19f47:	e8 df f8 ff ff       	call   1982b <stbi__tga_get_comp(int, int, int*)>
   19f4c:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   19f52:	eb 26                	jmp    19f7a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1e1>
   19f54:	83 bd 68 ff ff ff 03 	cmp    DWORD PTR [rbp-0x98],0x3
   19f5b:	0f 94 c0             	sete   al
   19f5e:	0f b6 c8             	movzx  ecx,al
   19f61:	48 8d 95 64 ff ff ff 	lea    rdx,[rbp-0x9c]
   19f68:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   19f6b:	89 ce                	mov    esi,ecx
   19f6d:	89 c7                	mov    edi,eax
   19f6f:	e8 b7 f8 ff ff       	call   1982b <stbi__tga_get_comp(int, int, int*)>
   19f74:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   19f7a:	83 bd 70 ff ff ff 00 	cmp    DWORD PTR [rbp-0x90],0x0
   19f81:	75 16                	jne    19f99 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x200>
   19f83:	48 8d 3d fe 10 02 00 	lea    rdi,[rip+0x210fe]        # 3b088 <stbi__depth_scale_table+0x490>
   19f8a:	e8 b0 ab fe ff       	call   4b3f <stbi__err(char const*)>
   19f8f:	b8 00 00 00 00       	mov    eax,0x0
   19f94:	e9 60 06 00 00       	jmp    1a5f9 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x860>
   19f99:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   19fa0:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   19fa3:	89 10                	mov    DWORD PTR [rax],edx
   19fa5:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   19fac:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   19faf:	89 10                	mov    DWORD PTR [rax],edx
   19fb1:	48 83 bd 40 ff ff ff 00 	cmp    QWORD PTR [rbp-0xc0],0x0
   19fb9:	74 0f                	je     19fca <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x231>
   19fbb:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   19fc2:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   19fc8:	89 10                	mov    DWORD PTR [rax],edx
   19fca:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   19fd0:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   19fd3:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   19fd6:	b9 00 00 00 00       	mov    ecx,0x0
   19fdb:	89 c7                	mov    edi,eax
   19fdd:	e8 47 ac fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   19fe2:	85 c0                	test   eax,eax
   19fe4:	0f 94 c0             	sete   al
   19fe7:	84 c0                	test   al,al
   19fe9:	74 16                	je     1a001 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x268>
   19feb:	48 8d 3d 5a 06 02 00 	lea    rdi,[rip+0x2065a]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   19ff2:	e8 48 ab fe ff       	call   4b3f <stbi__err(char const*)>
   19ff7:	b8 00 00 00 00       	mov    eax,0x0
   19ffc:	e9 f8 05 00 00       	jmp    1a5f9 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x860>
   1a001:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a007:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a00a:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a00d:	b9 00 00 00 00       	mov    ecx,0x0
   1a012:	89 c7                	mov    edi,eax
   1a014:	e8 55 ad fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   1a019:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1a01d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1a022:	75 16                	jne    1a03a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2a1>
   1a024:	48 8d 3d 08 00 02 00 	lea    rdi,[rip+0x20008]        # 3a033 <_IO_stdin_used+0x33>
   1a02b:	e8 0f ab fe ff       	call   4b3f <stbi__err(char const*)>
   1a030:	b8 00 00 00 00       	mov    eax,0x0
   1a035:	e9 bf 05 00 00       	jmp    1a5f9 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x860>
   1a03a:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1a03d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a044:	89 d6                	mov    esi,edx
   1a046:	48 89 c7             	mov    rdi,rax
   1a049:	e8 55 c5 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1a04e:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a052:	0f 85 94 00 00 00    	jne    1a0ec <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x353>
   1a058:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
   1a05f:	0f 85 87 00 00 00    	jne    1a0ec <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x353>
   1a065:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a06b:	85 c0                	test   eax,eax
   1a06d:	75 7d                	jne    1a0ec <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x353>
   1a06f:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a079:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a07f:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   1a082:	0f 8d 9c 04 00 00    	jge    1a524 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x78b>
   1a088:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1a08c:	74 0e                	je     1a09c <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x303>
   1a08e:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   1a091:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   1a097:	83 e8 01             	sub    eax,0x1
   1a09a:	eb 06                	jmp    1a0a2 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x309>
   1a09c:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a0a2:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   1a0a5:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1a0a8:	0f af 45 b0          	imul   eax,DWORD PTR [rbp-0x50]
   1a0ac:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a0b3:	48 63 d0             	movsxd rdx,eax
   1a0b6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a0ba:	48 01 d0             	add    rax,rdx
   1a0bd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1a0c1:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a0c4:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a0cb:	89 c2                	mov    edx,eax
   1a0cd:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   1a0d1:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a0d8:	48 89 ce             	mov    rsi,rcx
   1a0db:	48 89 c7             	mov    rdi,rax
   1a0de:	e8 7b c5 fe ff       	call   665e <stbi__getn(stbi__context*, unsigned char*, int)>
   1a0e3:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a0ea:	eb 8d                	jmp    1a079 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2e0>
   1a0ec:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a0f0:	0f 84 2f 01 00 00    	je     1a225 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x48c>
   1a0f6:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
   1a0f9:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a100:	89 d6                	mov    esi,edx
   1a102:	48 89 c7             	mov    rdi,rax
   1a105:	e8 99 c4 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1a10a:	8b 8d 70 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x90]
   1a110:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1a113:	ba 00 00 00 00       	mov    edx,0x0
   1a118:	89 ce                	mov    esi,ecx
   1a11a:	89 c7                	mov    edi,eax
   1a11c:	e8 ff ab fe ff       	call   4d20 <stbi__malloc_mad2(int, int, int)>
   1a121:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1a125:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1a12a:	75 22                	jne    1a14e <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3b5>
   1a12c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a130:	48 89 c7             	mov    rdi,rax
   1a133:	e8 c8 a3 fe ff       	call   4500 <free@plt>
   1a138:	48 8d 3d f4 fe 01 00 	lea    rdi,[rip+0x1fef4]        # 3a033 <_IO_stdin_used+0x33>
   1a13f:	e8 fb a9 fe ff       	call   4b3f <stbi__err(char const*)>
   1a144:	b8 00 00 00 00       	mov    eax,0x0
   1a149:	e9 ab 04 00 00       	jmp    1a5f9 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x860>
   1a14e:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a154:	85 c0                	test   eax,eax
   1a156:	74 74                	je     1a1cc <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x433>
   1a158:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a15c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   1a160:	83 bd 70 ff ff ff 03 	cmp    DWORD PTR [rbp-0x90],0x3
   1a167:	74 1f                	je     1a188 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3ef>
   1a169:	48 8d 0d 28 0f 02 00 	lea    rcx,[rip+0x20f28]        # 3b098 <stbi__depth_scale_table+0x4a0>
   1a170:	ba 3f 16 00 00       	mov    edx,0x163f
   1a175:	48 8d 35 1c ff 01 00 	lea    rsi,[rip+0x1ff1c]        # 3a098 <_IO_stdin_used+0x98>
   1a17c:	48 8d 3d 65 0f 02 00 	lea    rdi,[rip+0x20f65]        # 3b0e8 <stbi__depth_scale_table+0x4f0>
   1a183:	e8 f8 a0 fe ff       	call   4280 <__assert_fail@plt>
   1a188:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a192:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a198:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   1a19b:	0f 8d 84 00 00 00    	jge    1a225 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x48c>
   1a1a1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1a1a5:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a1ac:	48 89 d6             	mov    rsi,rdx
   1a1af:	48 89 c7             	mov    rdi,rax
   1a1b2:	e8 01 fb ff ff       	call   19cb8 <stbi__tga_read_rgb16(stbi__context*, unsigned char*)>
   1a1b7:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1a1bd:	48 98                	cdqe   
   1a1bf:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
   1a1c3:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a1ca:	eb c6                	jmp    1a192 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3f9>
   1a1cc:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1a1cf:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a1d6:	89 c2                	mov    edx,eax
   1a1d8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1a1dc:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a1e3:	48 89 ce             	mov    rsi,rcx
   1a1e6:	48 89 c7             	mov    rdi,rax
   1a1e9:	e8 70 c4 fe ff       	call   665e <stbi__getn(stbi__context*, unsigned char*, int)>
   1a1ee:	85 c0                	test   eax,eax
   1a1f0:	0f 94 c0             	sete   al
   1a1f3:	84 c0                	test   al,al
   1a1f5:	74 2e                	je     1a225 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x48c>
   1a1f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a1fb:	48 89 c7             	mov    rdi,rax
   1a1fe:	e8 fd a2 fe ff       	call   4500 <free@plt>
   1a203:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a207:	48 89 c7             	mov    rdi,rax
   1a20a:	e8 f1 a2 fe ff       	call   4500 <free@plt>
   1a20f:	48 8d 3d e7 0e 02 00 	lea    rdi,[rip+0x20ee7]        # 3b0fd <stbi__depth_scale_table+0x505>
   1a216:	e8 24 a9 fe ff       	call   4b3f <stbi__err(char const*)>
   1a21b:	b8 00 00 00 00       	mov    eax,0x0
   1a220:	e9 d4 03 00 00       	jmp    1a5f9 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x860>
   1a225:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a22f:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a232:	0f af 45 b4          	imul   eax,DWORD PTR [rbp-0x4c]
   1a236:	39 85 74 ff ff ff    	cmp    DWORD PTR [rbp-0x8c],eax
   1a23c:	0f 8d f5 01 00 00    	jge    1a437 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x69e>
   1a242:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
   1a249:	74 4e                	je     1a299 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x500>
   1a24b:	83 bd 7c ff ff ff 00 	cmp    DWORD PTR [rbp-0x84],0x0
   1a252:	75 36                	jne    1a28a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4f1>
   1a254:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a25b:	48 89 c7             	mov    rdi,rax
   1a25e:	e8 4c c2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1a263:	0f b6 c0             	movzx  eax,al
   1a266:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   1a269:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1a26c:	83 e0 7f             	and    eax,0x7f
   1a26f:	83 c0 01             	add    eax,0x1
   1a272:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   1a278:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1a27b:	c1 f8 07             	sar    eax,0x7
   1a27e:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   1a281:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a288:	eb 16                	jmp    1a2a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x507>
   1a28a:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   1a28e:	75 10                	jne    1a2a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x507>
   1a290:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a297:	eb 07                	jmp    1a2a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x507>
   1a299:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a2a0:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
   1a2a4:	0f 84 29 01 00 00    	je     1a3d3 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x63a>
   1a2aa:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a2ae:	0f 84 91 00 00 00    	je     1a345 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5ac>
   1a2b4:	83 7d b8 08          	cmp    DWORD PTR [rbp-0x48],0x8
   1a2b8:	75 14                	jne    1a2ce <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x535>
   1a2ba:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a2c1:	48 89 c7             	mov    rdi,rax
   1a2c4:	e8 e6 c1 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1a2c9:	0f b6 c0             	movzx  eax,al
   1a2cc:	eb 0f                	jmp    1a2dd <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x544>
   1a2ce:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a2d5:	48 89 c7             	mov    rdi,rax
   1a2d8:	e8 2b c5 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1a2dd:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   1a2e0:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1a2e3:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   1a2e6:	7c 07                	jl     1a2ef <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x556>
   1a2e8:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1a2ef:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1a2f2:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a2f9:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   1a2fc:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a306:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a30c:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a312:	0f 8d b4 00 00 00    	jge    1a3cc <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x633>
   1a318:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   1a31b:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a321:	01 d0                	add    eax,edx
   1a323:	48 63 d0             	movsxd rdx,eax
   1a326:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a32a:	48 01 d0             	add    rax,rdx
   1a32d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1a330:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a336:	48 98                	cdqe   
   1a338:	88 54 05 f4          	mov    BYTE PTR [rbp+rax*1-0xc],dl
   1a33c:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a343:	eb c1                	jmp    1a306 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x56d>
   1a345:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a34b:	85 c0                	test   eax,eax
   1a34d:	74 40                	je     1a38f <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5f6>
   1a34f:	83 bd 70 ff ff ff 03 	cmp    DWORD PTR [rbp-0x90],0x3
   1a356:	74 1f                	je     1a377 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5de>
   1a358:	48 8d 0d 39 0d 02 00 	lea    rcx,[rip+0x20d39]        # 3b098 <stbi__depth_scale_table+0x4a0>
   1a35f:	ba 70 16 00 00       	mov    edx,0x1670
   1a364:	48 8d 35 2d fd 01 00 	lea    rsi,[rip+0x1fd2d]        # 3a098 <_IO_stdin_used+0x98>
   1a36b:	48 8d 3d 76 0d 02 00 	lea    rdi,[rip+0x20d76]        # 3b0e8 <stbi__depth_scale_table+0x4f0>
   1a372:	e8 09 9f fe ff       	call   4280 <__assert_fail@plt>
   1a377:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1a37b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a382:	48 89 d6             	mov    rsi,rdx
   1a385:	48 89 c7             	mov    rdi,rax
   1a388:	e8 2b f9 ff ff       	call   19cb8 <stbi__tga_read_rgb16(stbi__context*, unsigned char*)>
   1a38d:	eb 3d                	jmp    1a3cc <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x633>
   1a38f:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a399:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a39f:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a3a5:	7d 25                	jge    1a3cc <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x633>
   1a3a7:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a3ae:	48 89 c7             	mov    rdi,rax
   1a3b1:	e8 f9 c0 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1a3b6:	8b 95 78 ff ff ff    	mov    edx,DWORD PTR [rbp-0x88]
   1a3bc:	48 63 d2             	movsxd rdx,edx
   1a3bf:	88 44 15 f4          	mov    BYTE PTR [rbp+rdx*1-0xc],al
   1a3c3:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a3ca:	eb cd                	jmp    1a399 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x600>
   1a3cc:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   1a3d3:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a3dd:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a3e3:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a3e9:	7d 39                	jge    1a424 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x68b>
   1a3eb:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a3f1:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a3f8:	89 c2                	mov    edx,eax
   1a3fa:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a400:	01 d0                	add    eax,edx
   1a402:	48 63 d0             	movsxd rdx,eax
   1a405:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a409:	48 01 c2             	add    rdx,rax
   1a40c:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a412:	48 98                	cdqe   
   1a414:	0f b6 44 05 f4       	movzx  eax,BYTE PTR [rbp+rax*1-0xc]
   1a419:	88 02                	mov    BYTE PTR [rdx],al
   1a41b:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a422:	eb b9                	jmp    1a3dd <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x644>
   1a424:	83 ad 7c ff ff ff 01 	sub    DWORD PTR [rbp-0x84],0x1
   1a42b:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a432:	e9 f8 fd ff ff       	jmp    1a22f <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x496>
   1a437:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1a43b:	0f 84 ce 00 00 00    	je     1a50f <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x776>
   1a441:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a44b:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a451:	01 c0                	add    eax,eax
   1a453:	39 45 b4             	cmp    DWORD PTR [rbp-0x4c],eax
   1a456:	0f 8e b3 00 00 00    	jle    1a50f <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x776>
   1a45c:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a462:	0f af 45 b0          	imul   eax,DWORD PTR [rbp-0x50]
   1a466:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a46c:	0f af c2             	imul   eax,edx
   1a46f:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   1a472:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   1a475:	83 e8 01             	sub    eax,0x1
   1a478:	2b 85 78 ff ff ff    	sub    eax,DWORD PTR [rbp-0x88]
   1a47e:	0f af 45 b0          	imul   eax,DWORD PTR [rbp-0x50]
   1a482:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a488:	0f af c2             	imul   eax,edx
   1a48b:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   1a48e:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a491:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a498:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   1a49e:	83 bd 74 ff ff ff 00 	cmp    DWORD PTR [rbp-0x8c],0x0
   1a4a5:	7e 5c                	jle    1a503 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x76a>
   1a4a7:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1a4aa:	48 63 d0             	movsxd rdx,eax
   1a4ad:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a4b1:	48 01 d0             	add    rax,rdx
   1a4b4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1a4b7:	88 85 62 ff ff ff    	mov    BYTE PTR [rbp-0x9e],al
   1a4bd:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   1a4c0:	48 63 d0             	movsxd rdx,eax
   1a4c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a4c7:	48 01 d0             	add    rax,rdx
   1a4ca:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   1a4cd:	48 63 ca             	movsxd rcx,edx
   1a4d0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1a4d4:	48 01 ca             	add    rdx,rcx
   1a4d7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1a4da:	88 02                	mov    BYTE PTR [rdx],al
   1a4dc:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   1a4df:	48 63 d0             	movsxd rdx,eax
   1a4e2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a4e6:	48 01 c2             	add    rdx,rax
   1a4e9:	0f b6 85 62 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x9e]
   1a4f0:	88 02                	mov    BYTE PTR [rdx],al
   1a4f2:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1a4f6:	83 45 90 01          	add    DWORD PTR [rbp-0x70],0x1
   1a4fa:	83 ad 74 ff ff ff 01 	sub    DWORD PTR [rbp-0x8c],0x1
   1a501:	eb 9b                	jmp    1a49e <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x705>
   1a503:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a50a:	e9 3c ff ff ff       	jmp    1a44b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6b2>
   1a50f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1a514:	74 0f                	je     1a525 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x78c>
   1a516:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a51a:	48 89 c7             	mov    rdi,rax
   1a51d:	e8 de 9f fe ff       	call   4500 <free@plt>
   1a522:	eb 01                	jmp    1a525 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x78c>
   1a524:	90                   	nop
   1a525:	83 bd 70 ff ff ff 02 	cmp    DWORD PTR [rbp-0x90],0x2
   1a52c:	7e 6c                	jle    1a59a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x801>
   1a52e:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a534:	85 c0                	test   eax,eax
   1a536:	75 62                	jne    1a59a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x801>
   1a538:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a53c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1a540:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a54a:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a54d:	0f af 45 b4          	imul   eax,DWORD PTR [rbp-0x4c]
   1a551:	39 85 74 ff ff ff    	cmp    DWORD PTR [rbp-0x8c],eax
   1a557:	7d 41                	jge    1a59a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x801>
   1a559:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a55d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1a560:	88 85 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],al
   1a566:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a56a:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   1a56e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a572:	88 10                	mov    BYTE PTR [rax],dl
   1a574:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a578:	48 8d 50 02          	lea    rdx,[rax+0x2]
   1a57c:	0f b6 85 63 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x9d]
   1a583:	88 02                	mov    BYTE PTR [rdx],al
   1a585:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1a58b:	48 98                	cdqe   
   1a58d:	48 01 45 e0          	add    QWORD PTR [rbp-0x20],rax
   1a591:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a598:	eb b0                	jmp    1a54a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7b1>
   1a59a:	83 bd 3c ff ff ff 00 	cmp    DWORD PTR [rbp-0xc4],0x0
   1a5a1:	74 33                	je     1a5d6 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x83d>
   1a5a3:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
   1a5a9:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a5af:	74 25                	je     1a5d6 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x83d>
   1a5b1:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a5b4:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a5b7:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
   1a5bd:	8b b5 70 ff ff ff    	mov    esi,DWORD PTR [rbp-0x90]
   1a5c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a5c7:	41 89 f8             	mov    r8d,edi
   1a5ca:	48 89 c7             	mov    rdi,rax
   1a5cd:	e8 cd c2 fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1a5d2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1a5d6:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1a5dd:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1a5e0:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   1a5e3:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   1a5e6:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   1a5e9:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1a5ec:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1a5ef:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1a5f2:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   1a5f5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a5f9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1a5fd:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1a606:	74 05                	je     1a60d <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x874>
   1a608:	e8 a3 9e fe ff       	call   44b0 <__stack_chk_fail@plt>
   1a60d:	c9                   	leave  
   1a60e:	c3                   	ret    

000000000001a60f <stbi__psd_test(stbi__context*)>:
   1a60f:	55                   	push   rbp
   1a610:	48 89 e5             	mov    rbp,rsp
   1a613:	48 83 ec 20          	sub    rsp,0x20
   1a617:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1a61b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a61f:	48 89 c7             	mov    rdi,rax
   1a622:	e8 a9 c1 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a627:	3d 53 50 42 38       	cmp    eax,0x38425053
   1a62c:	0f 94 c0             	sete   al
   1a62f:	0f b6 c0             	movzx  eax,al
   1a632:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1a635:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a639:	48 89 c7             	mov    rdi,rax
   1a63c:	e8 b8 a4 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1a641:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1a644:	c9                   	leave  
   1a645:	c3                   	ret    

000000000001a646 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)>:
   1a646:	55                   	push   rbp
   1a647:	48 89 e5             	mov    rbp,rsp
   1a64a:	48 83 ec 30          	sub    rsp,0x30
   1a64e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1a652:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1a656:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1a659:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   1a660:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1a663:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   1a666:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1a669:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   1a66d:	0f 9f c0             	setg   al
   1a670:	84 c0                	test   al,al
   1a672:	0f 84 bb 00 00 00    	je     1a733 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xed>
   1a678:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a67c:	48 89 c7             	mov    rdi,rax
   1a67f:	e8 2b be fe ff       	call   64af <stbi__get8(stbi__context*)>
   1a684:	0f b6 c0             	movzx  eax,al
   1a687:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1a68a:	81 7d f8 80 00 00 00 	cmp    DWORD PTR [rbp-0x8],0x80
   1a691:	74 cd                	je     1a660 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x1a>
   1a693:	83 7d f8 7f          	cmp    DWORD PTR [rbp-0x8],0x7f
   1a697:	7f 3f                	jg     1a6d8 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x92>
   1a699:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   1a69d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a6a0:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   1a6a3:	7e 0a                	jle    1a6af <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x69>
   1a6a5:	b8 00 00 00 00       	mov    eax,0x0
   1a6aa:	e9 89 00 00 00       	jmp    1a738 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xf2>
   1a6af:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a6b2:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   1a6b5:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   1a6b9:	74 a5                	je     1a660 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x1a>
   1a6bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a6bf:	48 89 c7             	mov    rdi,rax
   1a6c2:	e8 e8 bd fe ff       	call   64af <stbi__get8(stbi__context*)>
   1a6c7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1a6cb:	88 02                	mov    BYTE PTR [rdx],al
   1a6cd:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   1a6d2:	83 6d f8 01          	sub    DWORD PTR [rbp-0x8],0x1
   1a6d6:	eb dd                	jmp    1a6b5 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x6f>
   1a6d8:	81 7d f8 80 00 00 00 	cmp    DWORD PTR [rbp-0x8],0x80
   1a6df:	0f 8e 7b ff ff ff    	jle    1a660 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x1a>
   1a6e5:	b8 01 01 00 00       	mov    eax,0x101
   1a6ea:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
   1a6ed:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1a6f0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a6f3:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   1a6f6:	7e 07                	jle    1a6ff <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xb9>
   1a6f8:	b8 00 00 00 00       	mov    eax,0x0
   1a6fd:	eb 39                	jmp    1a738 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xf2>
   1a6ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a703:	48 89 c7             	mov    rdi,rax
   1a706:	e8 a4 bd fe ff       	call   64af <stbi__get8(stbi__context*)>
   1a70b:	88 45 f3             	mov    BYTE PTR [rbp-0xd],al
   1a70e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a711:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   1a714:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   1a718:	0f 84 42 ff ff ff    	je     1a660 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x1a>
   1a71e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a722:	0f b6 55 f3          	movzx  edx,BYTE PTR [rbp-0xd]
   1a726:	88 10                	mov    BYTE PTR [rax],dl
   1a728:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   1a72d:	83 6d f8 01          	sub    DWORD PTR [rbp-0x8],0x1
   1a731:	eb e1                	jmp    1a714 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xce>
   1a733:	b8 01 00 00 00       	mov    eax,0x1
   1a738:	c9                   	leave  
   1a739:	c3                   	ret    

000000000001a73a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>:
   1a73a:	55                   	push   rbp
   1a73b:	48 89 e5             	mov    rbp,rsp
   1a73e:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
   1a745:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
   1a74c:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
   1a753:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
   1a75a:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
   1a761:	44 89 85 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r8d
   1a768:	4c 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r9
   1a76f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a776:	48 89 c7             	mov    rdi,rax
   1a779:	e8 52 c0 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a77e:	3d 53 50 42 38       	cmp    eax,0x38425053
   1a783:	0f 95 c0             	setne  al
   1a786:	84 c0                	test   al,al
   1a788:	74 16                	je     1a7a0 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x66>
   1a78a:	48 8d 3d 78 09 02 00 	lea    rdi,[rip+0x20978]        # 3b109 <stbi__depth_scale_table+0x511>
   1a791:	e8 a9 a3 fe ff       	call   4b3f <stbi__err(char const*)>
   1a796:	b8 00 00 00 00       	mov    eax,0x0
   1a79b:	e9 f6 07 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a7a0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a7a7:	48 89 c7             	mov    rdi,rax
   1a7aa:	e8 e3 bf fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1a7af:	83 f8 01             	cmp    eax,0x1
   1a7b2:	0f 95 c0             	setne  al
   1a7b5:	84 c0                	test   al,al
   1a7b7:	74 16                	je     1a7cf <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x95>
   1a7b9:	48 8d 3d 51 09 02 00 	lea    rdi,[rip+0x20951]        # 3b111 <stbi__depth_scale_table+0x519>
   1a7c0:	e8 7a a3 fe ff       	call   4b3f <stbi__err(char const*)>
   1a7c5:	b8 00 00 00 00       	mov    eax,0x0
   1a7ca:	e9 c7 07 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a7cf:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a7d6:	be 06 00 00 00       	mov    esi,0x6
   1a7db:	48 89 c7             	mov    rdi,rax
   1a7de:	e8 c0 bd fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1a7e3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a7ea:	48 89 c7             	mov    rdi,rax
   1a7ed:	e8 a0 bf fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1a7f2:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   1a7f5:	83 7d 90 00          	cmp    DWORD PTR [rbp-0x70],0x0
   1a7f9:	78 06                	js     1a801 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0xc7>
   1a7fb:	83 7d 90 10          	cmp    DWORD PTR [rbp-0x70],0x10
   1a7ff:	7e 16                	jle    1a817 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0xdd>
   1a801:	48 8d 3d 17 09 02 00 	lea    rdi,[rip+0x20917]        # 3b11f <stbi__depth_scale_table+0x527>
   1a808:	e8 32 a3 fe ff       	call   4b3f <stbi__err(char const*)>
   1a80d:	b8 00 00 00 00       	mov    eax,0x0
   1a812:	e9 7f 07 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a817:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a81e:	48 89 c7             	mov    rdi,rax
   1a821:	e8 aa bf fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a826:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   1a829:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a830:	48 89 c7             	mov    rdi,rax
   1a833:	e8 98 bf fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a838:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   1a83b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a842:	48 89 c7             	mov    rdi,rax
   1a845:	e8 48 bf fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1a84a:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   1a84d:	83 7d 9c 08          	cmp    DWORD PTR [rbp-0x64],0x8
   1a851:	74 1c                	je     1a86f <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x135>
   1a853:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1a857:	74 16                	je     1a86f <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x135>
   1a859:	48 8d 3d d3 08 02 00 	lea    rdi,[rip+0x208d3]        # 3b133 <stbi__depth_scale_table+0x53b>
   1a860:	e8 da a2 fe ff       	call   4b3f <stbi__err(char const*)>
   1a865:	b8 00 00 00 00       	mov    eax,0x0
   1a86a:	e9 27 07 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a86f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a876:	48 89 c7             	mov    rdi,rax
   1a879:	e8 14 bf fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1a87e:	83 f8 03             	cmp    eax,0x3
   1a881:	0f 95 c0             	setne  al
   1a884:	84 c0                	test   al,al
   1a886:	74 16                	je     1a89e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x164>
   1a888:	48 8d 3d ba 08 02 00 	lea    rdi,[rip+0x208ba]        # 3b149 <stbi__depth_scale_table+0x551>
   1a88f:	e8 ab a2 fe ff       	call   4b3f <stbi__err(char const*)>
   1a894:	b8 00 00 00 00       	mov    eax,0x0
   1a899:	e9 f8 06 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a89e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a8a5:	48 89 c7             	mov    rdi,rax
   1a8a8:	e8 23 bf fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a8ad:	89 c2                	mov    edx,eax
   1a8af:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a8b6:	89 d6                	mov    esi,edx
   1a8b8:	48 89 c7             	mov    rdi,rax
   1a8bb:	e8 e3 bc fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1a8c0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a8c7:	48 89 c7             	mov    rdi,rax
   1a8ca:	e8 01 bf fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a8cf:	89 c2                	mov    edx,eax
   1a8d1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a8d8:	89 d6                	mov    esi,edx
   1a8da:	48 89 c7             	mov    rdi,rax
   1a8dd:	e8 c1 bc fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1a8e2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a8e9:	48 89 c7             	mov    rdi,rax
   1a8ec:	e8 df be fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1a8f1:	89 c2                	mov    edx,eax
   1a8f3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a8fa:	89 d6                	mov    esi,edx
   1a8fc:	48 89 c7             	mov    rdi,rax
   1a8ff:	e8 9f bc fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1a904:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a90b:	48 89 c7             	mov    rdi,rax
   1a90e:	e8 7f be fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1a913:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1a916:	83 7d a0 01          	cmp    DWORD PTR [rbp-0x60],0x1
   1a91a:	7e 16                	jle    1a932 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x1f8>
   1a91c:	48 8d 3d 5b 01 02 00 	lea    rdi,[rip+0x2015b]        # 3aa7e <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xce>
   1a923:	e8 17 a2 fe ff       	call   4b3f <stbi__err(char const*)>
   1a928:	b8 00 00 00 00       	mov    eax,0x0
   1a92d:	e9 64 06 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a932:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1a935:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1a938:	b9 00 00 00 00       	mov    ecx,0x0
   1a93d:	89 c6                	mov    esi,eax
   1a93f:	bf 04 00 00 00       	mov    edi,0x4
   1a944:	e8 e0 a2 fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   1a949:	85 c0                	test   eax,eax
   1a94b:	0f 94 c0             	sete   al
   1a94e:	84 c0                	test   al,al
   1a950:	74 16                	je     1a968 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x22e>
   1a952:	48 8d 3d f3 fc 01 00 	lea    rdi,[rip+0x1fcf3]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1a959:	e8 e1 a1 fe ff       	call   4b3f <stbi__err(char const*)>
   1a95e:	b8 00 00 00 00       	mov    eax,0x0
   1a963:	e9 2e 06 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a968:	83 7d a0 00          	cmp    DWORD PTR [rbp-0x60],0x0
   1a96c:	75 36                	jne    1a9a4 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x26a>
   1a96e:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1a972:	75 30                	jne    1a9a4 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x26a>
   1a974:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   1a978:	75 2a                	jne    1a9a4 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x26a>
   1a97a:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1a97d:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1a980:	b9 00 00 00 00       	mov    ecx,0x0
   1a985:	89 c6                	mov    esi,eax
   1a987:	bf 08 00 00 00       	mov    edi,0x8
   1a98c:	e8 dd a3 fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   1a991:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1a995:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1a99c:	c7 00 10 00 00 00    	mov    DWORD PTR [rax],0x10
   1a9a2:	eb 18                	jmp    1a9bc <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x282>
   1a9a4:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1a9a7:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1a9ab:	c1 e0 02             	shl    eax,0x2
   1a9ae:	48 98                	cdqe   
   1a9b0:	48 89 c7             	mov    rdi,rax
   1a9b3:	e8 a3 a1 fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1a9b8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1a9bc:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1a9c1:	75 16                	jne    1a9d9 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x29f>
   1a9c3:	48 8d 3d 69 f6 01 00 	lea    rdi,[rip+0x1f669]        # 3a033 <_IO_stdin_used+0x33>
   1a9ca:	e8 70 a1 fe ff       	call   4b3f <stbi__err(char const*)>
   1a9cf:	b8 00 00 00 00       	mov    eax,0x0
   1a9d4:	e9 bd 05 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1a9d9:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1a9dc:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1a9e0:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   1a9e3:	83 7d a0 00          	cmp    DWORD PTR [rbp-0x60],0x0
   1a9e7:	0f 84 c4 00 00 00    	je     1aab1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x377>
   1a9ed:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1a9f0:	0f af 45 90          	imul   eax,DWORD PTR [rbp-0x70]
   1a9f4:	8d 14 00             	lea    edx,[rax+rax*1]
   1a9f7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a9fe:	89 d6                	mov    esi,edx
   1aa00:	48 89 c7             	mov    rdi,rax
   1aa03:	e8 9b bb fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1aa08:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1aa0f:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1aa13:	0f 8f 3e 02 00 00    	jg     1ac57 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x51d>
   1aa19:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1aa1c:	48 63 d0             	movsxd rdx,eax
   1aa1f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1aa23:	48 01 d0             	add    rax,rdx
   1aa26:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1aa2a:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1aa2d:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
   1aa30:	7c 32                	jl     1aa64 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x32a>
   1aa32:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1aa39:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1aa3c:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1aa3f:	7d 67                	jge    1aaa8 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x36e>
   1aa41:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1aa45:	75 07                	jne    1aa4e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x314>
   1aa47:	ba ff ff ff ff       	mov    edx,0xffffffff
   1aa4c:	eb 05                	jmp    1aa53 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x319>
   1aa4e:	ba 00 00 00 00       	mov    edx,0x0
   1aa53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1aa57:	88 10                	mov    BYTE PTR [rax],dl
   1aa59:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1aa5d:	48 83 45 c8 04       	add    QWORD PTR [rbp-0x38],0x4
   1aa62:	eb d5                	jmp    1aa39 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ff>
   1aa64:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1aa67:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
   1aa6b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aa72:	48 89 ce             	mov    rsi,rcx
   1aa75:	48 89 c7             	mov    rdi,rax
   1aa78:	e8 c9 fb ff ff       	call   1a646 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)>
   1aa7d:	85 c0                	test   eax,eax
   1aa7f:	0f 94 c0             	sete   al
   1aa82:	84 c0                	test   al,al
   1aa84:	74 22                	je     1aaa8 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x36e>
   1aa86:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1aa8a:	48 89 c7             	mov    rdi,rax
   1aa8d:	e8 6e 9a fe ff       	call   4500 <free@plt>
   1aa92:	48 8d 3d c3 06 02 00 	lea    rdi,[rip+0x206c3]        # 3b15c <stbi__depth_scale_table+0x564>
   1aa99:	e8 a1 a0 fe ff       	call   4b3f <stbi__err(char const*)>
   1aa9e:	b8 00 00 00 00       	mov    eax,0x0
   1aaa3:	e9 ee 04 00 00       	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1aaa8:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1aaac:	e9 5e ff ff ff       	jmp    1aa0f <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2d5>
   1aab1:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1aab8:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1aabc:	0f 8f 95 01 00 00    	jg     1ac57 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x51d>
   1aac2:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1aac5:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
   1aac8:	0f 8c ad 00 00 00    	jl     1ab7b <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x441>
   1aace:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1aad2:	75 59                	jne    1ab2d <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3f3>
   1aad4:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   1aad8:	75 53                	jne    1ab2d <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3f3>
   1aada:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1aadd:	48 98                	cdqe   
   1aadf:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1aae3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1aae7:	48 01 d0             	add    rax,rdx
   1aaea:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1aaee:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1aaf2:	75 07                	jne    1aafb <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3c1>
   1aaf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1aaf9:	eb 05                	jmp    1ab00 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3c6>
   1aafb:	b8 00 00 00 00       	mov    eax,0x0
   1ab00:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
   1ab04:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1ab0b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1ab0e:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1ab11:	0f 8d 36 01 00 00    	jge    1ac4d <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x513>
   1ab17:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1ab1b:	0f b7 55 86          	movzx  edx,WORD PTR [rbp-0x7a]
   1ab1f:	66 89 10             	mov    WORD PTR [rax],dx
   1ab22:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1ab26:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
   1ab2b:	eb de                	jmp    1ab0b <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3d1>
   1ab2d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1ab30:	48 63 d0             	movsxd rdx,eax
   1ab33:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ab37:	48 01 d0             	add    rax,rdx
   1ab3a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   1ab3e:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1ab42:	75 07                	jne    1ab4b <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x411>
   1ab44:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ab49:	eb 05                	jmp    1ab50 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x416>
   1ab4b:	b8 00 00 00 00       	mov    eax,0x0
   1ab50:	88 45 85             	mov    BYTE PTR [rbp-0x7b],al
   1ab53:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1ab5a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1ab5d:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1ab60:	0f 8d e8 00 00 00    	jge    1ac4e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x514>
   1ab66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ab6a:	0f b6 55 85          	movzx  edx,BYTE PTR [rbp-0x7b]
   1ab6e:	88 10                	mov    BYTE PTR [rax],dl
   1ab70:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1ab74:	48 83 45 d8 04       	add    QWORD PTR [rbp-0x28],0x4
   1ab79:	eb df                	jmp    1ab5a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x420>
   1ab7b:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1ab82:	8b 00                	mov    eax,DWORD PTR [rax]
   1ab84:	83 f8 10             	cmp    eax,0x10
   1ab87:	75 4a                	jne    1abd3 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x499>
   1ab89:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1ab8c:	48 98                	cdqe   
   1ab8e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1ab92:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ab96:	48 01 d0             	add    rax,rdx
   1ab99:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1ab9d:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1aba4:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1aba7:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1abaa:	0f 8d 9e 00 00 00    	jge    1ac4e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x514>
   1abb0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1abb7:	48 89 c7             	mov    rdi,rax
   1abba:	e8 d3 bb fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1abbf:	89 c2                	mov    edx,eax
   1abc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1abc5:	66 89 10             	mov    WORD PTR [rax],dx
   1abc8:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1abcc:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
   1abd1:	eb d1                	jmp    1aba4 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x46a>
   1abd3:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1abd6:	48 63 d0             	movsxd rdx,eax
   1abd9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1abdd:	48 01 d0             	add    rax,rdx
   1abe0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1abe4:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1abe8:	75 34                	jne    1ac1e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4e4>
   1abea:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1abf1:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1abf4:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1abf7:	7d 55                	jge    1ac4e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x514>
   1abf9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ac00:	48 89 c7             	mov    rdi,rax
   1ac03:	e8 8a bb fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1ac08:	c1 f8 08             	sar    eax,0x8
   1ac0b:	89 c2                	mov    edx,eax
   1ac0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ac11:	88 10                	mov    BYTE PTR [rax],dl
   1ac13:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1ac17:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   1ac1c:	eb d3                	jmp    1abf1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4b7>
   1ac1e:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1ac25:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1ac28:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1ac2b:	7d 21                	jge    1ac4e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x514>
   1ac2d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ac34:	48 89 c7             	mov    rdi,rax
   1ac37:	e8 73 b8 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1ac3c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ac40:	88 02                	mov    BYTE PTR [rdx],al
   1ac42:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1ac46:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   1ac4b:	eb d8                	jmp    1ac25 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4eb>
   1ac4d:	90                   	nop
   1ac4e:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1ac52:	e9 61 fe ff ff       	jmp    1aab8 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x37e>
   1ac57:	83 7d 90 03          	cmp    DWORD PTR [rbp-0x70],0x3
   1ac5b:	0f 8e 8b 02 00 00    	jle    1aeec <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7b2>
   1ac61:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1ac68:	8b 00                	mov    eax,DWORD PTR [rax]
   1ac6a:	83 f8 10             	cmp    eax,0x10
   1ac6d:	0f 85 41 01 00 00    	jne    1adb4 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x67a>
   1ac73:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1ac7a:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1ac7d:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1ac81:	39 45 8c             	cmp    DWORD PTR [rbp-0x74],eax
   1ac84:	0f 8d 62 02 00 00    	jge    1aeec <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7b2>
   1ac8a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1ac8d:	c1 e0 02             	shl    eax,0x2
   1ac90:	48 98                	cdqe   
   1ac92:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1ac96:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ac9a:	48 01 d0             	add    rax,rdx
   1ac9d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1aca1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1aca5:	48 83 c0 06          	add    rax,0x6
   1aca9:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1acac:	66 85 c0             	test   ax,ax
   1acaf:	0f 84 f6 00 00 00    	je     1adab <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x671>
   1acb5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1acb9:	48 83 c0 06          	add    rax,0x6
   1acbd:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1acc0:	66 83 f8 ff          	cmp    ax,0xffff
   1acc4:	0f 84 e1 00 00 00    	je     1adab <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x671>
   1acca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1acce:	48 83 c0 06          	add    rax,0x6
   1acd2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1acd5:	0f b7 c0             	movzx  eax,ax
   1acd8:	66 0f ef c0          	pxor   xmm0,xmm0
   1acdc:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ace0:	f3 0f 10 0d 80 20 02 00 	movss  xmm1,DWORD PTR [rip+0x22080]        # 3cd68 <NANO_SEC+0x1aa0>
   1ace8:	f3 0f 5e c1          	divss  xmm0,xmm1
   1acec:	f3 0f 11 45 b4       	movss  DWORD PTR [rbp-0x4c],xmm0
   1acf1:	f3 0f 10 05 63 20 02 00 	movss  xmm0,DWORD PTR [rip+0x22063]        # 3cd5c <NANO_SEC+0x1a94>
   1acf9:	f3 0f 5e 45 b4       	divss  xmm0,DWORD PTR [rbp-0x4c]
   1acfe:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   1ad03:	f3 0f 10 05 51 20 02 00 	movss  xmm0,DWORD PTR [rip+0x22051]        # 3cd5c <NANO_SEC+0x1a94>
   1ad0b:	0f 28 c8             	movaps xmm1,xmm0
   1ad0e:	f3 0f 5c 4d b8       	subss  xmm1,DWORD PTR [rbp-0x48]
   1ad13:	f3 0f 10 05 4d 20 02 00 	movss  xmm0,DWORD PTR [rip+0x2204d]        # 3cd68 <NANO_SEC+0x1aa0>
   1ad1b:	f3 0f 59 c1          	mulss  xmm0,xmm1
   1ad1f:	f3 0f 11 45 bc       	movss  DWORD PTR [rbp-0x44],xmm0
   1ad24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ad28:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1ad2b:	0f b7 c0             	movzx  eax,ax
   1ad2e:	66 0f ef c0          	pxor   xmm0,xmm0
   1ad32:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ad36:	f3 0f 59 45 b8       	mulss  xmm0,DWORD PTR [rbp-0x48]
   1ad3b:	f3 0f 58 45 bc       	addss  xmm0,DWORD PTR [rbp-0x44]
   1ad40:	f3 0f 2c c0          	cvttss2si eax,xmm0
   1ad44:	89 c2                	mov    edx,eax
   1ad46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ad4a:	66 89 10             	mov    WORD PTR [rax],dx
   1ad4d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ad51:	48 83 c0 02          	add    rax,0x2
   1ad55:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1ad58:	0f b7 c0             	movzx  eax,ax
   1ad5b:	66 0f ef c0          	pxor   xmm0,xmm0
   1ad5f:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ad63:	f3 0f 59 45 b8       	mulss  xmm0,DWORD PTR [rbp-0x48]
   1ad68:	f3 0f 58 45 bc       	addss  xmm0,DWORD PTR [rbp-0x44]
   1ad6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ad71:	48 83 c0 02          	add    rax,0x2
   1ad75:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1ad79:	66 89 10             	mov    WORD PTR [rax],dx
   1ad7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ad80:	48 83 c0 04          	add    rax,0x4
   1ad84:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1ad87:	0f b7 c0             	movzx  eax,ax
   1ad8a:	66 0f ef c0          	pxor   xmm0,xmm0
   1ad8e:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ad92:	f3 0f 59 45 b8       	mulss  xmm0,DWORD PTR [rbp-0x48]
   1ad97:	f3 0f 58 45 bc       	addss  xmm0,DWORD PTR [rbp-0x44]
   1ad9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ada0:	48 83 c0 04          	add    rax,0x4
   1ada4:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1ada8:	66 89 10             	mov    WORD PTR [rax],dx
   1adab:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1adaf:	e9 c6 fe ff ff       	jmp    1ac7a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x540>
   1adb4:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1adbb:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1adbe:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1adc2:	39 45 8c             	cmp    DWORD PTR [rbp-0x74],eax
   1adc5:	0f 8d 21 01 00 00    	jge    1aeec <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7b2>
   1adcb:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1adce:	c1 e0 02             	shl    eax,0x2
   1add1:	48 63 d0             	movsxd rdx,eax
   1add4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1add8:	48 01 d0             	add    rax,rdx
   1addb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1addf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ade3:	48 83 c0 03          	add    rax,0x3
   1ade7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1adea:	84 c0                	test   al,al
   1adec:	0f 84 f1 00 00 00    	je     1aee3 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7a9>
   1adf2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1adf6:	48 83 c0 03          	add    rax,0x3
   1adfa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1adfd:	3c ff                	cmp    al,0xff
   1adff:	0f 84 de 00 00 00    	je     1aee3 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7a9>
   1ae05:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ae09:	48 83 c0 03          	add    rax,0x3
   1ae0d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ae10:	0f b6 c0             	movzx  eax,al
   1ae13:	66 0f ef c0          	pxor   xmm0,xmm0
   1ae17:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ae1b:	f3 0f 10 0d 3d 1f 02 00 	movss  xmm1,DWORD PTR [rip+0x21f3d]        # 3cd60 <NANO_SEC+0x1a98>
   1ae23:	f3 0f 5e c1          	divss  xmm0,xmm1
   1ae27:	f3 0f 11 45 a8       	movss  DWORD PTR [rbp-0x58],xmm0
   1ae2c:	f3 0f 10 05 28 1f 02 00 	movss  xmm0,DWORD PTR [rip+0x21f28]        # 3cd5c <NANO_SEC+0x1a94>
   1ae34:	f3 0f 5e 45 a8       	divss  xmm0,DWORD PTR [rbp-0x58]
   1ae39:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   1ae3e:	f3 0f 10 05 16 1f 02 00 	movss  xmm0,DWORD PTR [rip+0x21f16]        # 3cd5c <NANO_SEC+0x1a94>
   1ae46:	0f 28 c8             	movaps xmm1,xmm0
   1ae49:	f3 0f 5c 4d ac       	subss  xmm1,DWORD PTR [rbp-0x54]
   1ae4e:	f3 0f 10 05 0a 1f 02 00 	movss  xmm0,DWORD PTR [rip+0x21f0a]        # 3cd60 <NANO_SEC+0x1a98>
   1ae56:	f3 0f 59 c1          	mulss  xmm0,xmm1
   1ae5a:	f3 0f 11 45 b0       	movss  DWORD PTR [rbp-0x50],xmm0
   1ae5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ae63:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ae66:	0f b6 c0             	movzx  eax,al
   1ae69:	66 0f ef c0          	pxor   xmm0,xmm0
   1ae6d:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ae71:	f3 0f 59 45 ac       	mulss  xmm0,DWORD PTR [rbp-0x54]
   1ae76:	f3 0f 58 45 b0       	addss  xmm0,DWORD PTR [rbp-0x50]
   1ae7b:	f3 0f 2c c0          	cvttss2si eax,xmm0
   1ae7f:	89 c2                	mov    edx,eax
   1ae81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ae85:	88 10                	mov    BYTE PTR [rax],dl
   1ae87:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ae8b:	48 83 c0 01          	add    rax,0x1
   1ae8f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ae92:	0f b6 c0             	movzx  eax,al
   1ae95:	66 0f ef c0          	pxor   xmm0,xmm0
   1ae99:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1ae9d:	f3 0f 59 45 ac       	mulss  xmm0,DWORD PTR [rbp-0x54]
   1aea2:	f3 0f 58 45 b0       	addss  xmm0,DWORD PTR [rbp-0x50]
   1aea7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1aeab:	48 83 c0 01          	add    rax,0x1
   1aeaf:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1aeb3:	88 10                	mov    BYTE PTR [rax],dl
   1aeb5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1aeb9:	48 83 c0 02          	add    rax,0x2
   1aebd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1aec0:	0f b6 c0             	movzx  eax,al
   1aec3:	66 0f ef c0          	pxor   xmm0,xmm0
   1aec7:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1aecb:	f3 0f 59 45 ac       	mulss  xmm0,DWORD PTR [rbp-0x54]
   1aed0:	f3 0f 58 45 b0       	addss  xmm0,DWORD PTR [rbp-0x50]
   1aed5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1aed9:	48 83 c0 02          	add    rax,0x2
   1aedd:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1aee1:	88 10                	mov    BYTE PTR [rax],dl
   1aee3:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1aee7:	e9 cf fe ff ff       	jmp    1adbb <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x681>
   1aeec:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
   1aef3:	74 6e                	je     1af63 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x829>
   1aef5:	83 bd 5c ff ff ff 04 	cmp    DWORD PTR [rbp-0xa4],0x4
   1aefc:	74 65                	je     1af63 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x829>
   1aefe:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1af05:	8b 00                	mov    eax,DWORD PTR [rax]
   1af07:	83 f8 10             	cmp    eax,0x10
   1af0a:	75 26                	jne    1af32 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7f8>
   1af0c:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
   1af0f:	8b 4d 98             	mov    ecx,DWORD PTR [rbp-0x68]
   1af12:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   1af18:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af1c:	41 89 f0             	mov    r8d,esi
   1af1f:	be 04 00 00 00       	mov    esi,0x4
   1af24:	48 89 c7             	mov    rdi,rax
   1af27:	e8 f9 be fe ff       	call   6e25 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)>
   1af2c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1af30:	eb 24                	jmp    1af56 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x81c>
   1af32:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
   1af35:	8b 4d 98             	mov    ecx,DWORD PTR [rbp-0x68]
   1af38:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   1af3e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af42:	41 89 f0             	mov    r8d,esi
   1af45:	be 04 00 00 00       	mov    esi,0x4
   1af4a:	48 89 c7             	mov    rdi,rax
   1af4d:	e8 4d b9 fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1af52:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1af56:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1af5b:	75 06                	jne    1af63 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x829>
   1af5d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af61:	eb 33                	jmp    1af96 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x85c>
   1af63:	48 83 bd 60 ff ff ff 00 	cmp    QWORD PTR [rbp-0xa0],0x0
   1af6b:	74 0d                	je     1af7a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x840>
   1af6d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1af74:	c7 00 04 00 00 00    	mov    DWORD PTR [rax],0x4
   1af7a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1af81:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1af84:	89 10                	mov    DWORD PTR [rax],edx
   1af86:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   1af8d:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   1af90:	89 10                	mov    DWORD PTR [rax],edx
   1af92:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af96:	c9                   	leave  
   1af97:	c3                   	ret    

000000000001af98 <stbi__pic_is4(stbi__context*, char const*)>:
   1af98:	55                   	push   rbp
   1af99:	48 89 e5             	mov    rbp,rsp
   1af9c:	48 83 ec 20          	sub    rsp,0x20
   1afa0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1afa4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1afa8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1afaf:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   1afb3:	7f 32                	jg     1afe7 <stbi__pic_is4(stbi__context*, char const*)+0x4f>
   1afb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1afb9:	48 89 c7             	mov    rdi,rax
   1afbc:	e8 ee b4 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1afc1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1afc4:	48 63 ca             	movsxd rcx,edx
   1afc7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1afcb:	48 01 ca             	add    rdx,rcx
   1afce:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   1afd1:	38 d0                	cmp    al,dl
   1afd3:	0f 95 c0             	setne  al
   1afd6:	84 c0                	test   al,al
   1afd8:	74 07                	je     1afe1 <stbi__pic_is4(stbi__context*, char const*)+0x49>
   1afda:	b8 00 00 00 00       	mov    eax,0x0
   1afdf:	eb 0b                	jmp    1afec <stbi__pic_is4(stbi__context*, char const*)+0x54>
   1afe1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1afe5:	eb c8                	jmp    1afaf <stbi__pic_is4(stbi__context*, char const*)+0x17>
   1afe7:	b8 01 00 00 00       	mov    eax,0x1
   1afec:	c9                   	leave  
   1afed:	c3                   	ret    

000000000001afee <stbi__pic_test_core(stbi__context*)>:
   1afee:	55                   	push   rbp
   1afef:	48 89 e5             	mov    rbp,rsp
   1aff2:	48 83 ec 20          	sub    rsp,0x20
   1aff6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1affa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1affe:	48 8d 35 5f 01 02 00 	lea    rsi,[rip+0x2015f]        # 3b164 <stbi__depth_scale_table+0x56c>
   1b005:	48 89 c7             	mov    rdi,rax
   1b008:	e8 8b ff ff ff       	call   1af98 <stbi__pic_is4(stbi__context*, char const*)>
   1b00d:	85 c0                	test   eax,eax
   1b00f:	0f 94 c0             	sete   al
   1b012:	84 c0                	test   al,al
   1b014:	74 07                	je     1b01d <stbi__pic_test_core(stbi__context*)+0x2f>
   1b016:	b8 00 00 00 00       	mov    eax,0x0
   1b01b:	eb 47                	jmp    1b064 <stbi__pic_test_core(stbi__context*)+0x76>
   1b01d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1b024:	83 7d fc 53          	cmp    DWORD PTR [rbp-0x4],0x53
   1b028:	7f 12                	jg     1b03c <stbi__pic_test_core(stbi__context*)+0x4e>
   1b02a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b02e:	48 89 c7             	mov    rdi,rax
   1b031:	e8 79 b4 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b036:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1b03a:	eb e8                	jmp    1b024 <stbi__pic_test_core(stbi__context*)+0x36>
   1b03c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b040:	48 8d 35 22 01 02 00 	lea    rsi,[rip+0x20122]        # 3b169 <stbi__depth_scale_table+0x571>
   1b047:	48 89 c7             	mov    rdi,rax
   1b04a:	e8 49 ff ff ff       	call   1af98 <stbi__pic_is4(stbi__context*, char const*)>
   1b04f:	85 c0                	test   eax,eax
   1b051:	0f 94 c0             	sete   al
   1b054:	84 c0                	test   al,al
   1b056:	74 07                	je     1b05f <stbi__pic_test_core(stbi__context*)+0x71>
   1b058:	b8 00 00 00 00       	mov    eax,0x0
   1b05d:	eb 05                	jmp    1b064 <stbi__pic_test_core(stbi__context*)+0x76>
   1b05f:	b8 01 00 00 00       	mov    eax,0x1
   1b064:	c9                   	leave  
   1b065:	c3                   	ret    

000000000001b066 <stbi__readval(stbi__context*, int, unsigned char*)>:
   1b066:	55                   	push   rbp
   1b067:	48 89 e5             	mov    rbp,rsp
   1b06a:	53                   	push   rbx
   1b06b:	48 83 ec 38          	sub    rsp,0x38
   1b06f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1b073:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   1b076:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1b07a:	c7 45 e8 80 00 00 00 	mov    DWORD PTR [rbp-0x18],0x80
   1b081:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   1b088:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   1b08c:	7f 57                	jg     1b0e5 <stbi__readval(stbi__context*, int, unsigned char*)+0x7f>
   1b08e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1b091:	23 45 e8             	and    eax,DWORD PTR [rbp-0x18]
   1b094:	85 c0                	test   eax,eax
   1b096:	74 44                	je     1b0dc <stbi__readval(stbi__context*, int, unsigned char*)+0x76>
   1b098:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b09c:	48 89 c7             	mov    rdi,rax
   1b09f:	e8 8e b4 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1b0a4:	85 c0                	test   eax,eax
   1b0a6:	0f 95 c0             	setne  al
   1b0a9:	84 c0                	test   al,al
   1b0ab:	74 13                	je     1b0c0 <stbi__readval(stbi__context*, int, unsigned char*)+0x5a>
   1b0ad:	48 8d 3d ba 00 02 00 	lea    rdi,[rip+0x200ba]        # 3b16e <stbi__depth_scale_table+0x576>
   1b0b4:	e8 86 9a fe ff       	call   4b3f <stbi__err(char const*)>
   1b0b9:	b8 00 00 00 00       	mov    eax,0x0
   1b0be:	eb 29                	jmp    1b0e9 <stbi__readval(stbi__context*, int, unsigned char*)+0x83>
   1b0c0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b0c3:	48 63 d0             	movsxd rdx,eax
   1b0c6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b0ca:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1b0ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b0d2:	48 89 c7             	mov    rdi,rax
   1b0d5:	e8 d5 b3 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b0da:	88 03                	mov    BYTE PTR [rbx],al
   1b0dc:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   1b0e0:	d1 7d e8             	sar    DWORD PTR [rbp-0x18],1
   1b0e3:	eb a3                	jmp    1b088 <stbi__readval(stbi__context*, int, unsigned char*)+0x22>
   1b0e5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b0e9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1b0ed:	c9                   	leave  
   1b0ee:	c3                   	ret    

000000000001b0ef <stbi__copyval(int, unsigned char*, unsigned char const*)>:
   1b0ef:	55                   	push   rbp
   1b0f0:	48 89 e5             	mov    rbp,rsp
   1b0f3:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   1b0f6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1b0fa:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1b0fe:	c7 45 f8 80 00 00 00 	mov    DWORD PTR [rbp-0x8],0x80
   1b105:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1b10c:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   1b110:	7f 32                	jg     1b144 <stbi__copyval(int, unsigned char*, unsigned char const*)+0x55>
   1b112:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b115:	23 45 f8             	and    eax,DWORD PTR [rbp-0x8]
   1b118:	85 c0                	test   eax,eax
   1b11a:	74 1f                	je     1b13b <stbi__copyval(int, unsigned char*, unsigned char const*)+0x4c>
   1b11c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1b11f:	48 63 d0             	movsxd rdx,eax
   1b122:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b126:	48 01 d0             	add    rax,rdx
   1b129:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1b12c:	48 63 ca             	movsxd rcx,edx
   1b12f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1b133:	48 01 ca             	add    rdx,rcx
   1b136:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b139:	88 02                	mov    BYTE PTR [rdx],al
   1b13b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1b13f:	d1 7d f8             	sar    DWORD PTR [rbp-0x8],1
   1b142:	eb c8                	jmp    1b10c <stbi__copyval(int, unsigned char*, unsigned char const*)+0x1d>
   1b144:	90                   	nop
   1b145:	5d                   	pop    rbp
   1b146:	c3                   	ret    

000000000001b147 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)>:
   1b147:	55                   	push   rbp
   1b148:	48 89 e5             	mov    rbp,rsp
   1b14b:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
   1b152:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
   1b159:	89 b5 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],esi
   1b15f:	89 95 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],edx
   1b165:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   1b16c:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
   1b173:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1b17c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1b180:	31 c0                	xor    eax,eax
   1b182:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1b189:	c7 45 90 00 00 00 00 	mov    DWORD PTR [rbp-0x70],0x0
   1b190:	83 7d 90 0a          	cmp    DWORD PTR [rbp-0x70],0xa
   1b194:	75 16                	jne    1b1ac <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x65>
   1b196:	48 8d 3d eb fe 01 00 	lea    rdi,[rip+0x1feeb]        # 3b088 <stbi__depth_scale_table+0x490>
   1b19d:	e8 9d 99 fe ff       	call   4b3f <stbi__err(char const*)>
   1b1a2:	b8 00 00 00 00       	mov    eax,0x0
   1b1a7:	e9 68 04 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b1ac:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   1b1af:	8d 50 01             	lea    edx,[rax+0x1]
   1b1b2:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
   1b1b5:	48 8d 4d d0          	lea    rcx,[rbp-0x30]
   1b1b9:	48 63 d0             	movsxd rdx,eax
   1b1bc:	48 89 d0             	mov    rax,rdx
   1b1bf:	48 01 c0             	add    rax,rax
   1b1c2:	48 01 d0             	add    rax,rdx
   1b1c5:	48 01 c8             	add    rax,rcx
   1b1c8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1b1cc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b1d3:	48 89 c7             	mov    rdi,rax
   1b1d6:	e8 d4 b2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b1db:	0f b6 c0             	movzx  eax,al
   1b1de:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   1b1e1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b1e8:	48 89 c7             	mov    rdi,rax
   1b1eb:	e8 bf b2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b1f0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b1f4:	88 02                	mov    BYTE PTR [rdx],al
   1b1f6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b1fd:	48 89 c7             	mov    rdi,rax
   1b200:	e8 aa b2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b205:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b209:	88 42 01             	mov    BYTE PTR [rdx+0x1],al
   1b20c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b213:	48 89 c7             	mov    rdi,rax
   1b216:	e8 94 b2 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b21b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b21f:	88 42 02             	mov    BYTE PTR [rdx+0x2],al
   1b222:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b226:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b22a:	0f b6 c0             	movzx  eax,al
   1b22d:	09 45 8c             	or     DWORD PTR [rbp-0x74],eax
   1b230:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b237:	48 89 c7             	mov    rdi,rax
   1b23a:	e8 f3 b2 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1b23f:	85 c0                	test   eax,eax
   1b241:	0f 95 c0             	setne  al
   1b244:	84 c0                	test   al,al
   1b246:	74 16                	je     1b25e <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x117>
   1b248:	48 8d 3d 1f ff 01 00 	lea    rdi,[rip+0x1ff1f]        # 3b16e <stbi__depth_scale_table+0x576>
   1b24f:	e8 eb 98 fe ff       	call   4b3f <stbi__err(char const*)>
   1b254:	b8 00 00 00 00       	mov    eax,0x0
   1b259:	e9 b6 03 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b25e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b262:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b265:	3c 08                	cmp    al,0x8
   1b267:	74 16                	je     1b27f <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x138>
   1b269:	48 8d 3d 18 fe 01 00 	lea    rdi,[rip+0x1fe18]        # 3b088 <stbi__depth_scale_table+0x490>
   1b270:	e8 ca 98 fe ff       	call   4b3f <stbi__err(char const*)>
   1b275:	b8 00 00 00 00       	mov    eax,0x0
   1b27a:	e9 95 03 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b27f:	83 7d b4 00          	cmp    DWORD PTR [rbp-0x4c],0x0
   1b283:	74 05                	je     1b28a <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x143>
   1b285:	e9 06 ff ff ff       	jmp    1b190 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x49>
   1b28a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1b28d:	83 e0 10             	and    eax,0x10
   1b290:	85 c0                	test   eax,eax
   1b292:	74 07                	je     1b29b <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x154>
   1b294:	ba 04 00 00 00       	mov    edx,0x4
   1b299:	eb 05                	jmp    1b2a0 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x159>
   1b29b:	ba 03 00 00 00       	mov    edx,0x3
   1b2a0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1b2a7:	89 10                	mov    DWORD PTR [rax],edx
   1b2a9:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
   1b2b0:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1b2b3:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1b2b9:	0f 8d 4e 03 00 00    	jge    1b60d <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4c6>
   1b2bf:	c7 45 98 00 00 00 00 	mov    DWORD PTR [rbp-0x68],0x0
   1b2c6:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1b2c9:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
   1b2cc:	0f 8d 32 03 00 00    	jge    1b604 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4bd>
   1b2d2:	48 8d 4d d0          	lea    rcx,[rbp-0x30]
   1b2d6:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1b2d9:	48 63 d0             	movsxd rdx,eax
   1b2dc:	48 89 d0             	mov    rax,rdx
   1b2df:	48 01 c0             	add    rax,rax
   1b2e2:	48 01 d0             	add    rax,rdx
   1b2e5:	48 01 c8             	add    rax,rcx
   1b2e8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1b2ec:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1b2ef:	0f af 85 74 ff ff ff 	imul   eax,DWORD PTR [rbp-0x8c]
   1b2f6:	c1 e0 02             	shl    eax,0x2
   1b2f9:	48 63 d0             	movsxd rdx,eax
   1b2fc:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1b303:	48 01 d0             	add    rax,rdx
   1b306:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   1b30a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b30e:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
   1b312:	0f b6 c0             	movzx  eax,al
   1b315:	83 f8 02             	cmp    eax,0x2
   1b318:	0f 84 53 01 00 00    	je     1b471 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x32a>
   1b31e:	83 f8 02             	cmp    eax,0x2
   1b321:	7f 09                	jg     1b32c <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x1e5>
   1b323:	85 c0                	test   eax,eax
   1b325:	74 1b                	je     1b342 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x1fb>
   1b327:	83 f8 01             	cmp    eax,0x1
   1b32a:	74 6b                	je     1b397 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x250>
   1b32c:	48 8d 3d 55 fd 01 00 	lea    rdi,[rip+0x1fd55]        # 3b088 <stbi__depth_scale_table+0x490>
   1b333:	e8 07 98 fe ff       	call   4b3f <stbi__err(char const*)>
   1b338:	b8 00 00 00 00       	mov    eax,0x0
   1b33d:	e9 d2 02 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b342:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
   1b349:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
   1b34c:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   1b352:	0f 8d 9c 02 00 00    	jge    1b5f4 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4ad>
   1b358:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b35c:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b360:	0f b6 c8             	movzx  ecx,al
   1b363:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1b367:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b36e:	89 ce                	mov    esi,ecx
   1b370:	48 89 c7             	mov    rdi,rax
   1b373:	e8 ee fc ff ff       	call   1b066 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b378:	48 85 c0             	test   rax,rax
   1b37b:	0f 94 c0             	sete   al
   1b37e:	84 c0                	test   al,al
   1b380:	74 0a                	je     1b38c <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x245>
   1b382:	b8 00 00 00 00       	mov    eax,0x0
   1b387:	e9 88 02 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b38c:	83 45 9c 01          	add    DWORD PTR [rbp-0x64],0x1
   1b390:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b395:	eb b2                	jmp    1b349 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x202>
   1b397:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1b39d:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1b3a0:	83 7d a0 00          	cmp    DWORD PTR [rbp-0x60],0x0
   1b3a4:	0f 8e 4d 02 00 00    	jle    1b5f7 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4b0>
   1b3aa:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b3b1:	48 89 c7             	mov    rdi,rax
   1b3b4:	e8 f6 b0 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b3b9:	88 45 8b             	mov    BYTE PTR [rbp-0x75],al
   1b3bc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b3c3:	48 89 c7             	mov    rdi,rax
   1b3c6:	e8 67 b1 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1b3cb:	85 c0                	test   eax,eax
   1b3cd:	0f 95 c0             	setne  al
   1b3d0:	84 c0                	test   al,al
   1b3d2:	74 16                	je     1b3ea <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2a3>
   1b3d4:	48 8d 3d 93 fd 01 00 	lea    rdi,[rip+0x1fd93]        # 3b16e <stbi__depth_scale_table+0x576>
   1b3db:	e8 5f 97 fe ff       	call   4b3f <stbi__err(char const*)>
   1b3e0:	b8 00 00 00 00       	mov    eax,0x0
   1b3e5:	e9 2a 02 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b3ea:	0f b6 45 8b          	movzx  eax,BYTE PTR [rbp-0x75]
   1b3ee:	39 45 a0             	cmp    DWORD PTR [rbp-0x60],eax
   1b3f1:	7d 06                	jge    1b3f9 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2b2>
   1b3f3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b3f6:	88 45 8b             	mov    BYTE PTR [rbp-0x75],al
   1b3f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b3fd:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b401:	0f b6 c8             	movzx  ecx,al
   1b404:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b408:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b40f:	89 ce                	mov    esi,ecx
   1b411:	48 89 c7             	mov    rdi,rax
   1b414:	e8 4d fc ff ff       	call   1b066 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b419:	48 85 c0             	test   rax,rax
   1b41c:	0f 94 c0             	sete   al
   1b41f:	84 c0                	test   al,al
   1b421:	74 0a                	je     1b42d <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2e6>
   1b423:	b8 00 00 00 00       	mov    eax,0x0
   1b428:	e9 e7 01 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b42d:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1b434:	0f b6 45 8b          	movzx  eax,BYTE PTR [rbp-0x75]
   1b438:	39 45 a4             	cmp    DWORD PTR [rbp-0x5c],eax
   1b43b:	7d 28                	jge    1b465 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x31e>
   1b43d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b441:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b445:	0f b6 c0             	movzx  eax,al
   1b448:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b44c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
   1b450:	48 89 ce             	mov    rsi,rcx
   1b453:	89 c7                	mov    edi,eax
   1b455:	e8 95 fc ff ff       	call   1b0ef <stbi__copyval(int, unsigned char*, unsigned char const*)>
   1b45a:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1b45e:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b463:	eb cf                	jmp    1b434 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2ed>
   1b465:	0f b6 45 8b          	movzx  eax,BYTE PTR [rbp-0x75]
   1b469:	29 45 a0             	sub    DWORD PTR [rbp-0x60],eax
   1b46c:	e9 2f ff ff ff       	jmp    1b3a0 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x259>
   1b471:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1b477:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   1b47a:	83 7d a8 00          	cmp    DWORD PTR [rbp-0x58],0x0
   1b47e:	0f 8e 76 01 00 00    	jle    1b5fa <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4b3>
   1b484:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b48b:	48 89 c7             	mov    rdi,rax
   1b48e:	e8 1c b0 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b493:	0f b6 c0             	movzx  eax,al
   1b496:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   1b499:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b4a0:	48 89 c7             	mov    rdi,rax
   1b4a3:	e8 8a b0 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1b4a8:	85 c0                	test   eax,eax
   1b4aa:	0f 95 c0             	setne  al
   1b4ad:	84 c0                	test   al,al
   1b4af:	74 16                	je     1b4c7 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x380>
   1b4b1:	48 8d 3d b6 fc 01 00 	lea    rdi,[rip+0x1fcb6]        # 3b16e <stbi__depth_scale_table+0x576>
   1b4b8:	e8 82 96 fe ff       	call   4b3f <stbi__err(char const*)>
   1b4bd:	b8 00 00 00 00       	mov    eax,0x0
   1b4c2:	e9 4d 01 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b4c7:	83 7d ac 7f          	cmp    DWORD PTR [rbp-0x54],0x7f
   1b4cb:	0f 8e ae 00 00 00    	jle    1b57f <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x438>
   1b4d1:	81 7d ac 80 00 00 00 	cmp    DWORD PTR [rbp-0x54],0x80
   1b4d8:	75 14                	jne    1b4ee <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3a7>
   1b4da:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b4e1:	48 89 c7             	mov    rdi,rax
   1b4e4:	e8 a9 b2 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1b4e9:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   1b4ec:	eb 04                	jmp    1b4f2 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3ab>
   1b4ee:	83 6d ac 7f          	sub    DWORD PTR [rbp-0x54],0x7f
   1b4f2:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1b4f5:	3b 45 a8             	cmp    eax,DWORD PTR [rbp-0x58]
   1b4f8:	7e 16                	jle    1b510 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3c9>
   1b4fa:	48 8d 3d 6d fc 01 00 	lea    rdi,[rip+0x1fc6d]        # 3b16e <stbi__depth_scale_table+0x576>
   1b501:	e8 39 96 fe ff       	call   4b3f <stbi__err(char const*)>
   1b506:	b8 00 00 00 00       	mov    eax,0x0
   1b50b:	e9 04 01 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b510:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b514:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b518:	0f b6 c8             	movzx  ecx,al
   1b51b:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b51f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b526:	89 ce                	mov    esi,ecx
   1b528:	48 89 c7             	mov    rdi,rax
   1b52b:	e8 36 fb ff ff       	call   1b066 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b530:	48 85 c0             	test   rax,rax
   1b533:	0f 94 c0             	sete   al
   1b536:	84 c0                	test   al,al
   1b538:	74 0a                	je     1b544 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3fd>
   1b53a:	b8 00 00 00 00       	mov    eax,0x0
   1b53f:	e9 d0 00 00 00       	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b544:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1b54b:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1b54e:	3b 45 ac             	cmp    eax,DWORD PTR [rbp-0x54]
   1b551:	0f 8d 92 00 00 00    	jge    1b5e9 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4a2>
   1b557:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b55b:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b55f:	0f b6 c0             	movzx  eax,al
   1b562:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b566:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
   1b56a:	48 89 ce             	mov    rsi,rcx
   1b56d:	89 c7                	mov    edi,eax
   1b56f:	e8 7b fb ff ff       	call   1b0ef <stbi__copyval(int, unsigned char*, unsigned char const*)>
   1b574:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1b578:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b57d:	eb cc                	jmp    1b54b <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x404>
   1b57f:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1b583:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1b586:	3b 45 a8             	cmp    eax,DWORD PTR [rbp-0x58]
   1b589:	7e 13                	jle    1b59e <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x457>
   1b58b:	48 8d 3d dc fb 01 00 	lea    rdi,[rip+0x1fbdc]        # 3b16e <stbi__depth_scale_table+0x576>
   1b592:	e8 a8 95 fe ff       	call   4b3f <stbi__err(char const*)>
   1b597:	b8 00 00 00 00       	mov    eax,0x0
   1b59c:	eb 76                	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b59e:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1b5a5:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1b5a8:	3b 45 ac             	cmp    eax,DWORD PTR [rbp-0x54]
   1b5ab:	7d 3c                	jge    1b5e9 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4a2>
   1b5ad:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b5b1:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b5b5:	0f b6 c8             	movzx  ecx,al
   1b5b8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1b5bc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b5c3:	89 ce                	mov    esi,ecx
   1b5c5:	48 89 c7             	mov    rdi,rax
   1b5c8:	e8 99 fa ff ff       	call   1b066 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b5cd:	48 85 c0             	test   rax,rax
   1b5d0:	0f 94 c0             	sete   al
   1b5d3:	84 c0                	test   al,al
   1b5d5:	74 07                	je     1b5de <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x497>
   1b5d7:	b8 00 00 00 00       	mov    eax,0x0
   1b5dc:	eb 36                	jmp    1b614 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cd>
   1b5de:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1b5e2:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b5e7:	eb bc                	jmp    1b5a5 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x45e>
   1b5e9:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1b5ec:	29 45 a8             	sub    DWORD PTR [rbp-0x58],eax
   1b5ef:	e9 86 fe ff ff       	jmp    1b47a <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x333>
   1b5f4:	90                   	nop
   1b5f5:	eb 04                	jmp    1b5fb <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4b4>
   1b5f7:	90                   	nop
   1b5f8:	eb 01                	jmp    1b5fb <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4b4>
   1b5fa:	90                   	nop
   1b5fb:	83 45 98 01          	add    DWORD PTR [rbp-0x68],0x1
   1b5ff:	e9 c2 fc ff ff       	jmp    1b2c6 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x17f>
   1b604:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
   1b608:	e9 a3 fc ff ff       	jmp    1b2b0 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x169>
   1b60d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1b614:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   1b618:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
   1b621:	74 05                	je     1b628 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e1>
   1b623:	e8 88 8e fe ff       	call   44b0 <__stack_chk_fail@plt>
   1b628:	c9                   	leave  
   1b629:	c3                   	ret    

000000000001b62a <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1b62a:	55                   	push   rbp
   1b62b:	48 89 e5             	mov    rbp,rsp
   1b62e:	48 83 ec 50          	sub    rsp,0x50
   1b632:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1b636:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1b63a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1b63e:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   1b642:	44 89 45 bc          	mov    DWORD PTR [rbp-0x44],r8d
   1b646:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
   1b64a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1b653:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1b657:	31 c0                	xor    eax,eax
   1b659:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1b65e:	75 08                	jne    1b668 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3e>
   1b660:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   1b664:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1b668:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   1b66f:	83 7d e4 5b          	cmp    DWORD PTR [rbp-0x1c],0x5b
   1b673:	7f 12                	jg     1b687 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5d>
   1b675:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b679:	48 89 c7             	mov    rdi,rax
   1b67c:	e8 2e ae fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b681:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   1b685:	eb e8                	jmp    1b66f <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x45>
   1b687:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b68b:	48 89 c7             	mov    rdi,rax
   1b68e:	e8 ff b0 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1b693:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   1b696:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b69a:	48 89 c7             	mov    rdi,rax
   1b69d:	e8 f0 b0 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1b6a2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1b6a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b6a9:	48 89 c7             	mov    rdi,rax
   1b6ac:	e8 81 ae fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1b6b1:	85 c0                	test   eax,eax
   1b6b3:	0f 95 c0             	setne  al
   1b6b6:	84 c0                	test   al,al
   1b6b8:	74 16                	je     1b6d0 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa6>
   1b6ba:	48 8d 3d ad fa 01 00 	lea    rdi,[rip+0x1faad]        # 3b16e <stbi__depth_scale_table+0x576>
   1b6c1:	e8 79 94 fe ff       	call   4b3f <stbi__err(char const*)>
   1b6c6:	b8 00 00 00 00       	mov    eax,0x0
   1b6cb:	e9 14 01 00 00       	jmp    1b7e4 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1ba>
   1b6d0:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   1b6d3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1b6d6:	b9 00 00 00 00       	mov    ecx,0x0
   1b6db:	ba 04 00 00 00       	mov    edx,0x4
   1b6e0:	89 c7                	mov    edi,eax
   1b6e2:	e8 42 95 fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   1b6e7:	85 c0                	test   eax,eax
   1b6e9:	0f 94 c0             	sete   al
   1b6ec:	84 c0                	test   al,al
   1b6ee:	74 16                	je     1b706 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdc>
   1b6f0:	48 8d 3d 55 ef 01 00 	lea    rdi,[rip+0x1ef55]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1b6f7:	e8 43 94 fe ff       	call   4b3f <stbi__err(char const*)>
   1b6fc:	b8 00 00 00 00       	mov    eax,0x0
   1b701:	e9 de 00 00 00       	jmp    1b7e4 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1ba>
   1b706:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b70a:	48 89 c7             	mov    rdi,rax
   1b70d:	e8 be b0 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1b712:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b716:	48 89 c7             	mov    rdi,rax
   1b719:	e8 74 b0 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1b71e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b722:	48 89 c7             	mov    rdi,rax
   1b725:	e8 68 b0 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1b72a:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   1b72d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1b730:	b9 00 00 00 00       	mov    ecx,0x0
   1b735:	ba 04 00 00 00       	mov    edx,0x4
   1b73a:	89 c7                	mov    edi,eax
   1b73c:	e8 2d 96 fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   1b741:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1b745:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1b748:	0f af 45 ec          	imul   eax,DWORD PTR [rbp-0x14]
   1b74c:	c1 e0 02             	shl    eax,0x2
   1b74f:	48 63 d0             	movsxd rdx,eax
   1b752:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b756:	be ff 00 00 00       	mov    esi,0xff
   1b75b:	48 89 c7             	mov    rdi,rax
   1b75e:	e8 7d 8a fe ff       	call   41e0 <memset@plt>
   1b763:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
   1b767:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1b76b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   1b76e:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   1b771:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b775:	49 89 f8             	mov    r8,rdi
   1b778:	48 89 c7             	mov    rdi,rax
   1b77b:	e8 c7 f9 ff ff       	call   1b147 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)>
   1b780:	48 85 c0             	test   rax,rax
   1b783:	0f 94 c0             	sete   al
   1b786:	84 c0                	test   al,al
   1b788:	74 14                	je     1b79e <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x174>
   1b78a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b78e:	48 89 c7             	mov    rdi,rax
   1b791:	e8 6a 8d fe ff       	call   4500 <free@plt>
   1b796:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
   1b79e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1b7a2:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   1b7a5:	89 10                	mov    DWORD PTR [rax],edx
   1b7a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b7ab:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   1b7ae:	89 10                	mov    DWORD PTR [rax],edx
   1b7b0:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b7b4:	75 09                	jne    1b7bf <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x195>
   1b7b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b7ba:	8b 00                	mov    eax,DWORD PTR [rax]
   1b7bc:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   1b7bf:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   1b7c2:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
   1b7c5:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
   1b7c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b7cc:	41 89 f0             	mov    r8d,esi
   1b7cf:	be 04 00 00 00       	mov    esi,0x4
   1b7d4:	48 89 c7             	mov    rdi,rax
   1b7d7:	e8 c3 b0 fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1b7dc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1b7e0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b7e4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1b7e8:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1b7f1:	74 05                	je     1b7f8 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1ce>
   1b7f3:	e8 b8 8c fe ff       	call   44b0 <__stack_chk_fail@plt>
   1b7f8:	c9                   	leave  
   1b7f9:	c3                   	ret    

000000000001b7fa <stbi__pic_test(stbi__context*)>:
   1b7fa:	55                   	push   rbp
   1b7fb:	48 89 e5             	mov    rbp,rsp
   1b7fe:	48 83 ec 20          	sub    rsp,0x20
   1b802:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1b806:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b80a:	48 89 c7             	mov    rdi,rax
   1b80d:	e8 dc f7 ff ff       	call   1afee <stbi__pic_test_core(stbi__context*)>
   1b812:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1b815:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b819:	48 89 c7             	mov    rdi,rax
   1b81c:	e8 d8 92 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1b821:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1b824:	c9                   	leave  
   1b825:	c3                   	ret    

000000000001b826 <stbi__gif_test_raw(stbi__context*)>:
   1b826:	55                   	push   rbp
   1b827:	48 89 e5             	mov    rbp,rsp
   1b82a:	48 83 ec 20          	sub    rsp,0x20
   1b82e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1b832:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b836:	48 89 c7             	mov    rdi,rax
   1b839:	e8 71 ac fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b83e:	3c 47                	cmp    al,0x47
   1b840:	75 30                	jne    1b872 <stbi__gif_test_raw(stbi__context*)+0x4c>
   1b842:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b846:	48 89 c7             	mov    rdi,rax
   1b849:	e8 61 ac fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b84e:	3c 49                	cmp    al,0x49
   1b850:	75 20                	jne    1b872 <stbi__gif_test_raw(stbi__context*)+0x4c>
   1b852:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b856:	48 89 c7             	mov    rdi,rax
   1b859:	e8 51 ac fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b85e:	3c 46                	cmp    al,0x46
   1b860:	75 10                	jne    1b872 <stbi__gif_test_raw(stbi__context*)+0x4c>
   1b862:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b866:	48 89 c7             	mov    rdi,rax
   1b869:	e8 41 ac fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b86e:	3c 38                	cmp    al,0x38
   1b870:	74 07                	je     1b879 <stbi__gif_test_raw(stbi__context*)+0x53>
   1b872:	b8 01 00 00 00       	mov    eax,0x1
   1b877:	eb 05                	jmp    1b87e <stbi__gif_test_raw(stbi__context*)+0x58>
   1b879:	b8 00 00 00 00       	mov    eax,0x0
   1b87e:	84 c0                	test   al,al
   1b880:	74 07                	je     1b889 <stbi__gif_test_raw(stbi__context*)+0x63>
   1b882:	b8 00 00 00 00       	mov    eax,0x0
   1b887:	eb 46                	jmp    1b8cf <stbi__gif_test_raw(stbi__context*)+0xa9>
   1b889:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b88d:	48 89 c7             	mov    rdi,rax
   1b890:	e8 1a ac fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b895:	0f b6 c0             	movzx  eax,al
   1b898:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1b89b:	83 7d fc 39          	cmp    DWORD PTR [rbp-0x4],0x39
   1b89f:	74 0d                	je     1b8ae <stbi__gif_test_raw(stbi__context*)+0x88>
   1b8a1:	83 7d fc 37          	cmp    DWORD PTR [rbp-0x4],0x37
   1b8a5:	74 07                	je     1b8ae <stbi__gif_test_raw(stbi__context*)+0x88>
   1b8a7:	b8 00 00 00 00       	mov    eax,0x0
   1b8ac:	eb 21                	jmp    1b8cf <stbi__gif_test_raw(stbi__context*)+0xa9>
   1b8ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b8b2:	48 89 c7             	mov    rdi,rax
   1b8b5:	e8 f5 ab fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b8ba:	3c 61                	cmp    al,0x61
   1b8bc:	0f 95 c0             	setne  al
   1b8bf:	84 c0                	test   al,al
   1b8c1:	74 07                	je     1b8ca <stbi__gif_test_raw(stbi__context*)+0xa4>
   1b8c3:	b8 00 00 00 00       	mov    eax,0x0
   1b8c8:	eb 05                	jmp    1b8cf <stbi__gif_test_raw(stbi__context*)+0xa9>
   1b8ca:	b8 01 00 00 00       	mov    eax,0x1
   1b8cf:	c9                   	leave  
   1b8d0:	c3                   	ret    

000000000001b8d1 <stbi__gif_test(stbi__context*)>:
   1b8d1:	55                   	push   rbp
   1b8d2:	48 89 e5             	mov    rbp,rsp
   1b8d5:	48 83 ec 20          	sub    rsp,0x20
   1b8d9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1b8dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b8e1:	48 89 c7             	mov    rdi,rax
   1b8e4:	e8 3d ff ff ff       	call   1b826 <stbi__gif_test_raw(stbi__context*)>
   1b8e9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1b8ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b8f0:	48 89 c7             	mov    rdi,rax
   1b8f3:	e8 01 92 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1b8f8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1b8fb:	c9                   	leave  
   1b8fc:	c3                   	ret    

000000000001b8fd <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)>:
   1b8fd:	55                   	push   rbp
   1b8fe:	48 89 e5             	mov    rbp,rsp
   1b901:	53                   	push   rbx
   1b902:	48 83 ec 38          	sub    rsp,0x38
   1b906:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1b90a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1b90e:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   1b911:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
   1b914:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   1b91b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b91e:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
   1b921:	0f 8d 9f 00 00 00    	jge    1b9c6 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0xc9>
   1b927:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b92a:	48 98                	cdqe   
   1b92c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b934:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1b938:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1b93c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b940:	48 89 c7             	mov    rdi,rax
   1b943:	e8 67 ab fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b948:	88 43 02             	mov    BYTE PTR [rbx+0x2],al
   1b94b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b94e:	48 98                	cdqe   
   1b950:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b958:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1b95c:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1b960:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b964:	48 89 c7             	mov    rdi,rax
   1b967:	e8 43 ab fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b96c:	88 43 01             	mov    BYTE PTR [rbx+0x1],al
   1b96f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b972:	48 98                	cdqe   
   1b974:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b97c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1b980:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1b984:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b988:	48 89 c7             	mov    rdi,rax
   1b98b:	e8 1f ab fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b990:	88 03                	mov    BYTE PTR [rbx],al
   1b992:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
   1b995:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   1b998:	75 07                	jne    1b9a1 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0xa4>
   1b99a:	ba 00 00 00 00       	mov    edx,0x0
   1b99f:	eb 05                	jmp    1b9a6 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0xa9>
   1b9a1:	ba ff ff ff ff       	mov    edx,0xffffffff
   1b9a6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b9a9:	48 98                	cdqe   
   1b9ab:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b9b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1b9b7:	48 01 c8             	add    rax,rcx
   1b9ba:	88 50 03             	mov    BYTE PTR [rax+0x3],dl
   1b9bd:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   1b9c1:	e9 55 ff ff ff       	jmp    1b91b <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0x1e>
   1b9c6:	90                   	nop
   1b9c7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1b9cb:	c9                   	leave  
   1b9cc:	c3                   	ret    

000000000001b9cd <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)>:
   1b9cd:	55                   	push   rbp
   1b9ce:	48 89 e5             	mov    rbp,rsp
   1b9d1:	48 83 ec 30          	sub    rsp,0x30
   1b9d5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1b9d9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1b9dd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1b9e1:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   1b9e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b9e8:	48 89 c7             	mov    rdi,rax
   1b9eb:	e8 bf aa fe ff       	call   64af <stbi__get8(stbi__context*)>
   1b9f0:	3c 47                	cmp    al,0x47
   1b9f2:	75 30                	jne    1ba24 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x57>
   1b9f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b9f8:	48 89 c7             	mov    rdi,rax
   1b9fb:	e8 af aa fe ff       	call   64af <stbi__get8(stbi__context*)>
   1ba00:	3c 49                	cmp    al,0x49
   1ba02:	75 20                	jne    1ba24 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x57>
   1ba04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ba08:	48 89 c7             	mov    rdi,rax
   1ba0b:	e8 9f aa fe ff       	call   64af <stbi__get8(stbi__context*)>
   1ba10:	3c 46                	cmp    al,0x46
   1ba12:	75 10                	jne    1ba24 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x57>
   1ba14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ba18:	48 89 c7             	mov    rdi,rax
   1ba1b:	e8 8f aa fe ff       	call   64af <stbi__get8(stbi__context*)>
   1ba20:	3c 38                	cmp    al,0x38
   1ba22:	74 07                	je     1ba2b <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x5e>
   1ba24:	b8 01 00 00 00       	mov    eax,0x1
   1ba29:	eb 05                	jmp    1ba30 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x63>
   1ba2b:	b8 00 00 00 00       	mov    eax,0x0
   1ba30:	84 c0                	test   al,al
   1ba32:	74 11                	je     1ba45 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x78>
   1ba34:	48 8d 3d 3c f7 01 00 	lea    rdi,[rip+0x1f73c]        # 3b177 <stbi__depth_scale_table+0x57f>
   1ba3b:	e8 ff 90 fe ff       	call   4b3f <stbi__err(char const*)>
   1ba40:	e9 33 01 00 00       	jmp    1bb78 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1ab>
   1ba45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ba49:	48 89 c7             	mov    rdi,rax
   1ba4c:	e8 5e aa fe ff       	call   64af <stbi__get8(stbi__context*)>
   1ba51:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
   1ba54:	80 7d ff 37          	cmp    BYTE PTR [rbp-0x1],0x37
   1ba58:	74 17                	je     1ba71 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0xa4>
   1ba5a:	80 7d ff 39          	cmp    BYTE PTR [rbp-0x1],0x39
   1ba5e:	74 11                	je     1ba71 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0xa4>
   1ba60:	48 8d 3d 10 f7 01 00 	lea    rdi,[rip+0x1f710]        # 3b177 <stbi__depth_scale_table+0x57f>
   1ba67:	e8 d3 90 fe ff       	call   4b3f <stbi__err(char const*)>
   1ba6c:	e9 07 01 00 00       	jmp    1bb78 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1ab>
   1ba71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ba75:	48 89 c7             	mov    rdi,rax
   1ba78:	e8 32 aa fe ff       	call   64af <stbi__get8(stbi__context*)>
   1ba7d:	3c 61                	cmp    al,0x61
   1ba7f:	0f 95 c0             	setne  al
   1ba82:	84 c0                	test   al,al
   1ba84:	74 11                	je     1ba97 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0xca>
   1ba86:	48 8d 3d ea f6 01 00 	lea    rdi,[rip+0x1f6ea]        # 3b177 <stbi__depth_scale_table+0x57f>
   1ba8d:	e8 ad 90 fe ff       	call   4b3f <stbi__err(char const*)>
   1ba92:	e9 e1 00 00 00       	jmp    1bb78 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1ab>
   1ba97:	48 8d 05 e1 f6 01 00 	lea    rax,[rip+0x1f6e1]        # 3b17f <stbi__depth_scale_table+0x587>
   1ba9e:	64 48 89 04 25 f0 ff ff ff 	mov    QWORD PTR fs:0xfffffffffffffff0,rax
   1baa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1baab:	48 89 c7             	mov    rdi,rax
   1baae:	e8 55 ad fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1bab3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1bab7:	89 02                	mov    DWORD PTR [rdx],eax
   1bab9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1babd:	48 89 c7             	mov    rdi,rax
   1bac0:	e8 43 ad fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1bac5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1bac9:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
   1bacc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bad0:	48 89 c7             	mov    rdi,rax
   1bad3:	e8 d7 a9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1bad8:	0f b6 d0             	movzx  edx,al
   1badb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1badf:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   1bae2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bae6:	48 89 c7             	mov    rdi,rax
   1bae9:	e8 c1 a9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1baee:	0f b6 d0             	movzx  edx,al
   1baf1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1baf5:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   1baf8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bafc:	48 89 c7             	mov    rdi,rax
   1baff:	e8 ab a9 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1bb04:	0f b6 d0             	movzx  edx,al
   1bb07:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bb0b:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   1bb0e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bb12:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [rax+0x2c],0xffffffff
   1bb19:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   1bb1e:	74 0a                	je     1bb2a <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x15d>
   1bb20:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bb24:	c7 00 04 00 00 00    	mov    DWORD PTR [rax],0x4
   1bb2a:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
   1bb2e:	74 07                	je     1bb37 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x16a>
   1bb30:	b8 01 00 00 00       	mov    eax,0x1
   1bb35:	eb 41                	jmp    1bb78 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1ab>
   1bb37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bb3b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1bb3e:	25 80 00 00 00       	and    eax,0x80
   1bb43:	85 c0                	test   eax,eax
   1bb45:	74 2c                	je     1bb73 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1a6>
   1bb47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bb4b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1bb4e:	83 e0 07             	and    eax,0x7
   1bb51:	ba 02 00 00 00       	mov    edx,0x2
   1bb56:	89 c1                	mov    ecx,eax
   1bb58:	d3 e2                	shl    edx,cl
   1bb5a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bb5e:	48 8d 70 34          	lea    rsi,[rax+0x34]
   1bb62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb66:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   1bb6b:	48 89 c7             	mov    rdi,rax
   1bb6e:	e8 8a fd ff ff       	call   1b8fd <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)>
   1bb73:	b8 01 00 00 00       	mov    eax,0x1
   1bb78:	c9                   	leave  
   1bb79:	c3                   	ret    

000000000001bb7a <stbi__gif_info_raw(stbi__context*, int*, int*, int*)>:
   1bb7a:	55                   	push   rbp
   1bb7b:	48 89 e5             	mov    rbp,rsp
   1bb7e:	48 83 ec 30          	sub    rsp,0x30
   1bb82:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1bb86:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1bb8a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1bb8e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1bb92:	bf 70 88 00 00       	mov    edi,0x8870
   1bb97:	e8 bf 8f fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1bb9c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1bba0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   1bba4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   1bba8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bbac:	b9 01 00 00 00       	mov    ecx,0x1
   1bbb1:	48 89 c7             	mov    rdi,rax
   1bbb4:	e8 14 fe ff ff       	call   1b9cd <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)>
   1bbb9:	85 c0                	test   eax,eax
   1bbbb:	0f 94 c0             	sete   al
   1bbbe:	84 c0                	test   al,al
   1bbc0:	74 1f                	je     1bbe1 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x67>
   1bbc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bbc6:	48 89 c7             	mov    rdi,rax
   1bbc9:	e8 32 89 fe ff       	call   4500 <free@plt>
   1bbce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bbd2:	48 89 c7             	mov    rdi,rax
   1bbd5:	e8 1f 8f fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1bbda:	b8 00 00 00 00       	mov    eax,0x0
   1bbdf:	eb 38                	jmp    1bc19 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x9f>
   1bbe1:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   1bbe6:	74 0c                	je     1bbf4 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x7a>
   1bbe8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bbec:	8b 10                	mov    edx,DWORD PTR [rax]
   1bbee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bbf2:	89 10                	mov    DWORD PTR [rax],edx
   1bbf4:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   1bbf9:	74 0d                	je     1bc08 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x8e>
   1bbfb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bbff:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   1bc02:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc06:	89 10                	mov    DWORD PTR [rax],edx
   1bc08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bc0c:	48 89 c7             	mov    rdi,rax
   1bc0f:	e8 ec 88 fe ff       	call   4500 <free@plt>
   1bc14:	b8 01 00 00 00       	mov    eax,0x1
   1bc19:	c9                   	leave  
   1bc1a:	c3                   	ret    

000000000001bc1b <stbi__out_gif_code(stbi__gif*, unsigned short)>:
   1bc1b:	55                   	push   rbp
   1bc1c:	48 89 e5             	mov    rbp,rsp
   1bc1f:	48 83 ec 30          	sub    rsp,0x30
   1bc23:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1bc27:	89 f0                	mov    eax,esi
   1bc29:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
   1bc2d:	0f b7 55 d4          	movzx  edx,WORD PTR [rbp-0x2c]
   1bc31:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc35:	48 63 d2             	movsxd rdx,edx
   1bc38:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bc3f:	0f b7 44 90 04       	movzx  eax,WORD PTR [rax+rdx*4+0x4]
   1bc44:	66 85 c0             	test   ax,ax
   1bc47:	78 28                	js     1bc71 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x56>
   1bc49:	0f b7 55 d4          	movzx  edx,WORD PTR [rbp-0x2c]
   1bc4d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc51:	48 63 d2             	movsxd rdx,edx
   1bc54:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bc5b:	0f b7 44 90 04       	movzx  eax,WORD PTR [rax+rdx*4+0x4]
   1bc60:	0f b7 d0             	movzx  edx,ax
   1bc63:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc67:	89 d6                	mov    esi,edx
   1bc69:	48 89 c7             	mov    rdi,rax
   1bc6c:	e8 aa ff ff ff       	call   1bc1b <stbi__out_gif_code(stbi__gif*, unsigned short)>
   1bc71:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc75:	8b 90 60 88 00 00    	mov    edx,DWORD PTR [rax+0x8860]
   1bc7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc7f:	8b 80 58 88 00 00    	mov    eax,DWORD PTR [rax+0x8858]
   1bc85:	39 c2                	cmp    edx,eax
   1bc87:	0f 8d bb 01 00 00    	jge    1be48 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x22d>
   1bc8d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc91:	8b 90 5c 88 00 00    	mov    edx,DWORD PTR [rax+0x885c]
   1bc97:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc9b:	8b 80 60 88 00 00    	mov    eax,DWORD PTR [rax+0x8860]
   1bca1:	01 d0                	add    eax,edx
   1bca3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1bca6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bcaa:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1bcae:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bcb1:	48 98                	cdqe   
   1bcb3:	48 01 d0             	add    rax,rdx
   1bcb6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1bcba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bcbe:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   1bcc2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bcc5:	8d 50 03             	lea    edx,[rax+0x3]
   1bcc8:	85 c0                	test   eax,eax
   1bcca:	0f 48 c2             	cmovs  eax,edx
   1bccd:	c1 f8 02             	sar    eax,0x2
   1bcd0:	48 98                	cdqe   
   1bcd2:	48 01 c8             	add    rax,rcx
   1bcd5:	c6 00 01             	mov    BYTE PTR [rax],0x1
   1bcd8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bcdc:	48 8b 88 38 88 00 00 	mov    rcx,QWORD PTR [rax+0x8838]
   1bce3:	0f b7 55 d4          	movzx  edx,WORD PTR [rbp-0x2c]
   1bce7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bceb:	48 63 d2             	movsxd rdx,edx
   1bcee:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bcf5:	0f b6 44 90 07       	movzx  eax,BYTE PTR [rax+rdx*4+0x7]
   1bcfa:	0f b6 c0             	movzx  eax,al
   1bcfd:	c1 e0 02             	shl    eax,0x2
   1bd00:	48 98                	cdqe   
   1bd02:	48 01 c8             	add    rax,rcx
   1bd05:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1bd09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bd0d:	48 83 c0 03          	add    rax,0x3
   1bd11:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1bd14:	3c 80                	cmp    al,0x80
   1bd16:	76 43                	jbe    1bd5b <stbi__out_gif_code(stbi__gif*, unsigned short)+0x140>
   1bd18:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bd1c:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   1bd20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1bd24:	88 10                	mov    BYTE PTR [rax],dl
   1bd26:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1bd2a:	48 8d 50 01          	lea    rdx,[rax+0x1]
   1bd2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bd32:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
   1bd36:	88 02                	mov    BYTE PTR [rdx],al
   1bd38:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1bd3c:	48 8d 50 02          	lea    rdx,[rax+0x2]
   1bd40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bd44:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1bd47:	88 02                	mov    BYTE PTR [rdx],al
   1bd49:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1bd4d:	48 8d 50 03          	lea    rdx,[rax+0x3]
   1bd51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bd55:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
   1bd59:	88 02                	mov    BYTE PTR [rdx],al
   1bd5b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bd5f:	8b 80 5c 88 00 00    	mov    eax,DWORD PTR [rax+0x885c]
   1bd65:	8d 50 04             	lea    edx,[rax+0x4]
   1bd68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bd6c:	89 90 5c 88 00 00    	mov    DWORD PTR [rax+0x885c],edx
   1bd72:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bd76:	8b 90 5c 88 00 00    	mov    edx,DWORD PTR [rax+0x885c]
   1bd7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bd80:	8b 80 54 88 00 00    	mov    eax,DWORD PTR [rax+0x8854]
   1bd86:	39 c2                	cmp    edx,eax
   1bd88:	0f 8c bb 00 00 00    	jl     1be49 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x22e>
   1bd8e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bd92:	8b 90 4c 88 00 00    	mov    edx,DWORD PTR [rax+0x884c]
   1bd98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bd9c:	89 90 5c 88 00 00    	mov    DWORD PTR [rax+0x885c],edx
   1bda2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bda6:	8b 90 60 88 00 00    	mov    edx,DWORD PTR [rax+0x8860]
   1bdac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdb0:	8b 80 44 88 00 00    	mov    eax,DWORD PTR [rax+0x8844]
   1bdb6:	01 c2                	add    edx,eax
   1bdb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdbc:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1bdc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdc6:	8b 90 60 88 00 00    	mov    edx,DWORD PTR [rax+0x8860]
   1bdcc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdd0:	8b 80 58 88 00 00    	mov    eax,DWORD PTR [rax+0x8858]
   1bdd6:	39 c2                	cmp    edx,eax
   1bdd8:	7c 6f                	jl     1be49 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x22e>
   1bdda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdde:	8b 80 40 88 00 00    	mov    eax,DWORD PTR [rax+0x8840]
   1bde4:	85 c0                	test   eax,eax
   1bde6:	7e 61                	jle    1be49 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x22e>
   1bde8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdec:	8b 90 64 88 00 00    	mov    edx,DWORD PTR [rax+0x8864]
   1bdf2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bdf6:	8b 80 40 88 00 00    	mov    eax,DWORD PTR [rax+0x8840]
   1bdfc:	89 c1                	mov    ecx,eax
   1bdfe:	d3 e2                	shl    edx,cl
   1be00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be04:	89 90 44 88 00 00    	mov    DWORD PTR [rax+0x8844],edx
   1be0a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be0e:	8b 90 50 88 00 00    	mov    edx,DWORD PTR [rax+0x8850]
   1be14:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be18:	8b 80 44 88 00 00    	mov    eax,DWORD PTR [rax+0x8844]
   1be1e:	d1 f8                	sar    eax,1
   1be20:	01 c2                	add    edx,eax
   1be22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be26:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1be2c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be30:	8b 80 40 88 00 00    	mov    eax,DWORD PTR [rax+0x8840]
   1be36:	8d 50 ff             	lea    edx,[rax-0x1]
   1be39:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be3d:	89 90 40 88 00 00    	mov    DWORD PTR [rax+0x8840],edx
   1be43:	e9 7a ff ff ff       	jmp    1bdc2 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x1a7>
   1be48:	90                   	nop
   1be49:	c9                   	leave  
   1be4a:	c3                   	ret    

000000000001be4b <stbi__process_gif_raster(stbi__context*, stbi__gif*)>:
   1be4b:	55                   	push   rbp
   1be4c:	48 89 e5             	mov    rbp,rsp
   1be4f:	48 83 ec 50          	sub    rsp,0x50
   1be53:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1be57:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1be5b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1be5f:	48 89 c7             	mov    rdi,rax
   1be62:	e8 48 a6 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1be67:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
   1be6a:	80 7d cb 0c          	cmp    BYTE PTR [rbp-0x35],0xc
   1be6e:	76 0a                	jbe    1be7a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2f>
   1be70:	b8 00 00 00 00       	mov    eax,0x0
   1be75:	e9 10 03 00 00       	jmp    1c18a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x33f>
   1be7a:	0f b6 45 cb          	movzx  eax,BYTE PTR [rbp-0x35]
   1be7e:	ba 01 00 00 00       	mov    edx,0x1
   1be83:	89 c1                	mov    ecx,eax
   1be85:	d3 e2                	shl    edx,cl
   1be87:	89 d0                	mov    eax,edx
   1be89:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1be8c:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   1be93:	0f b6 45 cb          	movzx  eax,BYTE PTR [rbp-0x35]
   1be97:	83 c0 01             	add    eax,0x1
   1be9a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1be9d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1bea0:	ba 01 00 00 00       	mov    edx,0x1
   1bea5:	89 c1                	mov    ecx,eax
   1bea7:	d3 e2                	shl    edx,cl
   1bea9:	89 d0                	mov    eax,edx
   1beab:	83 e8 01             	sub    eax,0x1
   1beae:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1beb1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   1beb8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   1bebf:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
   1bec6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1bec9:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
   1becc:	7d 52                	jge    1bf20 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xd5>
   1bece:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1bed2:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   1bed5:	48 63 d2             	movsxd rdx,edx
   1bed8:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bedf:	66 c7 44 90 04 ff ff 	mov    WORD PTR [rax+rdx*4+0x4],0xffff
   1bee6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1bee9:	89 c1                	mov    ecx,eax
   1beeb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1beef:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   1bef2:	48 63 d2             	movsxd rdx,edx
   1bef5:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1befc:	88 4c 90 06          	mov    BYTE PTR [rax+rdx*4+0x6],cl
   1bf00:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1bf03:	89 c1                	mov    ecx,eax
   1bf05:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1bf09:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   1bf0c:	48 63 d2             	movsxd rdx,edx
   1bf0f:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bf16:	88 4c 90 07          	mov    BYTE PTR [rax+rdx*4+0x7],cl
   1bf1a:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   1bf1e:	eb a6                	jmp    1bec6 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x7b>
   1bf20:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1bf23:	83 c0 02             	add    eax,0x2
   1bf26:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1bf29:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
   1bf30:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
   1bf37:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bf3a:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1bf3d:	7d 50                	jge    1bf8f <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x144>
   1bf3f:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1bf43:	75 25                	jne    1bf6a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x11f>
   1bf45:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1bf49:	48 89 c7             	mov    rdi,rax
   1bf4c:	e8 5e a5 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1bf51:	0f b6 c0             	movzx  eax,al
   1bf54:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1bf57:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1bf5b:	75 0d                	jne    1bf6a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x11f>
   1bf5d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1bf61:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1bf65:	e9 20 02 00 00       	jmp    1c18a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x33f>
   1bf6a:	83 6d cc 01          	sub    DWORD PTR [rbp-0x34],0x1
   1bf6e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1bf72:	48 89 c7             	mov    rdi,rax
   1bf75:	e8 35 a5 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1bf7a:	0f b6 d0             	movzx  edx,al
   1bf7d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bf80:	89 c1                	mov    ecx,eax
   1bf82:	d3 e2                	shl    edx,cl
   1bf84:	89 d0                	mov    eax,edx
   1bf86:	09 45 e8             	or     DWORD PTR [rbp-0x18],eax
   1bf89:	83 45 ec 08          	add    DWORD PTR [rbp-0x14],0x8
   1bf8d:	eb a8                	jmp    1bf37 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xec>
   1bf8f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1bf92:	23 45 dc             	and    eax,DWORD PTR [rbp-0x24]
   1bf95:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1bf98:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1bf9b:	89 c1                	mov    ecx,eax
   1bf9d:	d3 7d e8             	sar    DWORD PTR [rbp-0x18],cl
   1bfa0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1bfa3:	29 45 ec             	sub    DWORD PTR [rbp-0x14],eax
   1bfa6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1bfa9:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
   1bfac:	75 3a                	jne    1bfe8 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x19d>
   1bfae:	0f b6 45 cb          	movzx  eax,BYTE PTR [rbp-0x35]
   1bfb2:	83 c0 01             	add    eax,0x1
   1bfb5:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1bfb8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1bfbb:	ba 01 00 00 00       	mov    edx,0x1
   1bfc0:	89 c1                	mov    ecx,eax
   1bfc2:	d3 e2                	shl    edx,cl
   1bfc4:	89 d0                	mov    eax,edx
   1bfc6:	83 e8 01             	sub    eax,0x1
   1bfc9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1bfcc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1bfcf:	83 c0 02             	add    eax,0x2
   1bfd2:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1bfd5:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
   1bfdc:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1bfe3:	e9 4f ff ff ff       	jmp    1bf37 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xec>
   1bfe8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1bfeb:	83 c0 01             	add    eax,0x1
   1bfee:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   1bff1:	75 4e                	jne    1c041 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x1f6>
   1bff3:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1bff6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1bffa:	89 d6                	mov    esi,edx
   1bffc:	48 89 c7             	mov    rdi,rax
   1bfff:	e8 9f a5 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1c004:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c008:	48 89 c7             	mov    rdi,rax
   1c00b:	e8 9f a4 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c010:	0f b6 c0             	movzx  eax,al
   1c013:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1c016:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1c01a:	0f 9f c0             	setg   al
   1c01d:	84 c0                	test   al,al
   1c01f:	74 13                	je     1c034 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x1e9>
   1c021:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1c024:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c028:	89 d6                	mov    esi,edx
   1c02a:	48 89 c7             	mov    rdi,rax
   1c02d:	e8 71 a5 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1c032:	eb d0                	jmp    1c004 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x1b9>
   1c034:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c038:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c03c:	e9 49 01 00 00       	jmp    1c18a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x33f>
   1c041:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c044:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1c047:	0f 8f 2c 01 00 00    	jg     1c179 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x32e>
   1c04d:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
   1c051:	74 16                	je     1c069 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x21e>
   1c053:	48 8d 3d 26 f1 01 00 	lea    rdi,[rip+0x1f126]        # 3b180 <stbi__depth_scale_table+0x588>
   1c05a:	e8 e0 8a fe ff       	call   4b3f <stbi__err(char const*)>
   1c05f:	b8 00 00 00 00       	mov    eax,0x0
   1c064:	e9 21 01 00 00       	jmp    1c18a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x33f>
   1c069:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   1c06d:	0f 88 a1 00 00 00    	js     1c114 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2c9>
   1c073:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1c076:	8d 50 01             	lea    edx,[rax+0x1]
   1c079:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   1c07c:	48 98                	cdqe   
   1c07e:	48 05 0c 02 00 00    	add    rax,0x20c
   1c084:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c08c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c090:	48 01 d0             	add    rax,rdx
   1c093:	48 83 c0 04          	add    rax,0x4
   1c097:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1c09b:	81 7d e0 00 20 00 00 	cmp    DWORD PTR [rbp-0x20],0x2000
   1c0a2:	7e 16                	jle    1c0ba <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x26f>
   1c0a4:	48 8d 3d e3 f0 01 00 	lea    rdi,[rip+0x1f0e3]        # 3b18e <stbi__depth_scale_table+0x596>
   1c0ab:	e8 8f 8a fe ff       	call   4b3f <stbi__err(char const*)>
   1c0b0:	b8 00 00 00 00       	mov    eax,0x0
   1c0b5:	e9 d0 00 00 00       	jmp    1c18a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x33f>
   1c0ba:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1c0bd:	89 c2                	mov    edx,eax
   1c0bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c0c3:	66 89 10             	mov    WORD PTR [rax],dx
   1c0c6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c0ca:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   1c0cd:	48 63 d2             	movsxd rdx,edx
   1c0d0:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c0d7:	0f b6 54 90 06       	movzx  edx,BYTE PTR [rax+rdx*4+0x6]
   1c0dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c0e0:	88 50 02             	mov    BYTE PTR [rax+0x2],dl
   1c0e3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c0e6:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1c0e9:	75 0a                	jne    1c0f5 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2aa>
   1c0eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c0ef:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1c0f3:	eb 16                	jmp    1c10b <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2c0>
   1c0f5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c0f9:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   1c0fc:	48 63 d2             	movsxd rdx,edx
   1c0ff:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c106:	0f b6 44 90 06       	movzx  eax,BYTE PTR [rax+rdx*4+0x6]
   1c10b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1c10f:	88 42 03             	mov    BYTE PTR [rdx+0x3],al
   1c112:	eb 1b                	jmp    1c12f <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2e4>
   1c114:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c117:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1c11a:	75 13                	jne    1c12f <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2e4>
   1c11c:	48 8d 3d 7a f0 01 00 	lea    rdi,[rip+0x1f07a]        # 3b19d <stbi__depth_scale_table+0x5a5>
   1c123:	e8 17 8a fe ff       	call   4b3f <stbi__err(char const*)>
   1c128:	b8 00 00 00 00       	mov    eax,0x0
   1c12d:	eb 5b                	jmp    1c18a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x33f>
   1c12f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c132:	0f b7 d0             	movzx  edx,ax
   1c135:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c139:	89 d6                	mov    esi,edx
   1c13b:	48 89 c7             	mov    rdi,rax
   1c13e:	e8 d8 fa ff ff       	call   1bc1b <stbi__out_gif_code(stbi__gif*, unsigned short)>
   1c143:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1c146:	23 45 dc             	and    eax,DWORD PTR [rbp-0x24]
   1c149:	85 c0                	test   eax,eax
   1c14b:	75 21                	jne    1c16e <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x323>
   1c14d:	81 7d e0 ff 0f 00 00 	cmp    DWORD PTR [rbp-0x20],0xfff
   1c154:	7f 18                	jg     1c16e <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x323>
   1c156:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   1c15a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c15d:	ba 01 00 00 00       	mov    edx,0x1
   1c162:	89 c1                	mov    ecx,eax
   1c164:	d3 e2                	shl    edx,cl
   1c166:	89 d0                	mov    eax,edx
   1c168:	83 e8 01             	sub    eax,0x1
   1c16b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1c16e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c171:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1c174:	e9 be fd ff ff       	jmp    1bf37 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xec>
   1c179:	48 8d 3d 1d f0 01 00 	lea    rdi,[rip+0x1f01d]        # 3b19d <stbi__depth_scale_table+0x5a5>
   1c180:	e8 ba 89 fe ff       	call   4b3f <stbi__err(char const*)>
   1c185:	b8 00 00 00 00       	mov    eax,0x0
   1c18a:	c9                   	leave  
   1c18b:	c3                   	ret    

000000000001c18c <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)>:
   1c18c:	55                   	push   rbp
   1c18d:	48 89 e5             	mov    rbp,rsp
   1c190:	48 83 ec 70          	sub    rsp,0x70
   1c194:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1c198:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1c19c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   1c1a0:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
   1c1a3:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
   1c1a7:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
   1c1ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c1b2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c1b6:	48 85 c0             	test   rax,rax
   1c1b9:	0f 85 61 01 00 00    	jne    1c320 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x194>
   1c1bf:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   1c1c3:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   1c1c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c1cb:	b9 00 00 00 00       	mov    ecx,0x0
   1c1d0:	48 89 c7             	mov    rdi,rax
   1c1d3:	e8 f5 f7 ff ff       	call   1b9cd <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)>
   1c1d8:	85 c0                	test   eax,eax
   1c1da:	0f 94 c0             	sete   al
   1c1dd:	84 c0                	test   al,al
   1c1df:	74 0a                	je     1c1eb <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x5f>
   1c1e1:	b8 00 00 00 00       	mov    eax,0x0
   1c1e6:	e9 44 07 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c1eb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c1ef:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   1c1f2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c1f6:	8b 00                	mov    eax,DWORD PTR [rax]
   1c1f8:	b9 00 00 00 00       	mov    ecx,0x0
   1c1fd:	89 c6                	mov    esi,eax
   1c1ff:	bf 04 00 00 00       	mov    edi,0x4
   1c204:	e8 20 8a fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   1c209:	85 c0                	test   eax,eax
   1c20b:	0f 94 c0             	sete   al
   1c20e:	84 c0                	test   al,al
   1c210:	74 16                	je     1c228 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x9c>
   1c212:	48 8d 3d 33 e4 01 00 	lea    rdi,[rip+0x1e433]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1c219:	e8 21 89 fe ff       	call   4b3f <stbi__err(char const*)>
   1c21e:	b8 00 00 00 00       	mov    eax,0x0
   1c223:	e9 07 07 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c228:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c22c:	8b 10                	mov    edx,DWORD PTR [rax]
   1c22e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c232:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c235:	0f af c2             	imul   eax,edx
   1c238:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c23b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c23e:	c1 e0 02             	shl    eax,0x2
   1c241:	48 98                	cdqe   
   1c243:	48 89 c7             	mov    rdi,rax
   1c246:	e8 10 89 fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1c24b:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c24f:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
   1c253:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c256:	c1 e0 02             	shl    eax,0x2
   1c259:	48 98                	cdqe   
   1c25b:	48 89 c7             	mov    rdi,rax
   1c25e:	e8 f8 88 fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1c263:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c267:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
   1c26b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c26e:	48 98                	cdqe   
   1c270:	48 89 c7             	mov    rdi,rax
   1c273:	e8 e3 88 fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1c278:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c27c:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
   1c280:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c284:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c288:	48 85 c0             	test   rax,rax
   1c28b:	74 1a                	je     1c2a7 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x11b>
   1c28d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c291:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1c295:	48 85 c0             	test   rax,rax
   1c298:	74 0d                	je     1c2a7 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x11b>
   1c29a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c29e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1c2a2:	48 85 c0             	test   rax,rax
   1c2a5:	75 16                	jne    1c2bd <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x131>
   1c2a7:	48 8d 3d 85 dd 01 00 	lea    rdi,[rip+0x1dd85]        # 3a033 <_IO_stdin_used+0x33>
   1c2ae:	e8 8c 88 fe ff       	call   4b3f <stbi__err(char const*)>
   1c2b3:	b8 00 00 00 00       	mov    eax,0x0
   1c2b8:	e9 72 06 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c2bd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c2c0:	c1 e0 02             	shl    eax,0x2
   1c2c3:	48 63 d0             	movsxd rdx,eax
   1c2c6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c2ca:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c2ce:	be 00 00 00 00       	mov    esi,0x0
   1c2d3:	48 89 c7             	mov    rdi,rax
   1c2d6:	e8 05 7f fe ff       	call   41e0 <memset@plt>
   1c2db:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c2de:	c1 e0 02             	shl    eax,0x2
   1c2e1:	48 63 d0             	movsxd rdx,eax
   1c2e4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c2e8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1c2ec:	be 00 00 00 00       	mov    esi,0x0
   1c2f1:	48 89 c7             	mov    rdi,rax
   1c2f4:	e8 e7 7e fe ff       	call   41e0 <memset@plt>
   1c2f9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c2fc:	48 63 d0             	movsxd rdx,eax
   1c2ff:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c303:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1c307:	be 00 00 00 00       	mov    esi,0x0
   1c30c:	48 89 c7             	mov    rdi,rax
   1c30f:	e8 cc 7e fe ff       	call   41e0 <memset@plt>
   1c314:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   1c31b:	e9 23 01 00 00       	jmp    1c443 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x2b7>
   1c320:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c324:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   1c327:	c1 f8 02             	sar    eax,0x2
   1c32a:	83 e0 07             	and    eax,0x7
   1c32d:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1c330:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c334:	8b 10                	mov    edx,DWORD PTR [rax]
   1c336:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c33a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c33d:	0f af c2             	imul   eax,edx
   1c340:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c343:	83 7d cc 03          	cmp    DWORD PTR [rbp-0x34],0x3
   1c347:	75 0e                	jne    1c357 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x1cb>
   1c349:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   1c34e:	75 07                	jne    1c357 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x1cb>
   1c350:	c7 45 cc 02 00 00 00 	mov    DWORD PTR [rbp-0x34],0x2
   1c357:	83 7d cc 03          	cmp    DWORD PTR [rbp-0x34],0x3
   1c35b:	75 58                	jne    1c3b5 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x229>
   1c35d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1c364:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c367:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1c36a:	0f 8d a2 00 00 00    	jge    1c412 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x286>
   1c370:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c374:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1c378:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c37b:	48 98                	cdqe   
   1c37d:	48 01 d0             	add    rax,rdx
   1c380:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1c383:	84 c0                	test   al,al
   1c385:	74 28                	je     1c3af <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x223>
   1c387:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c38a:	c1 e0 02             	shl    eax,0x2
   1c38d:	48 63 d0             	movsxd rdx,eax
   1c390:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1c394:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1c398:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c39c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1c3a0:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c3a3:	c1 e0 02             	shl    eax,0x2
   1c3a6:	48 98                	cdqe   
   1c3a8:	48 01 c2             	add    rdx,rax
   1c3ab:	8b 01                	mov    eax,DWORD PTR [rcx]
   1c3ad:	89 02                	mov    DWORD PTR [rdx],eax
   1c3af:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   1c3b3:	eb af                	jmp    1c364 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x1d8>
   1c3b5:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   1c3b9:	75 57                	jne    1c412 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x286>
   1c3bb:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1c3c2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c3c5:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1c3c8:	7d 48                	jge    1c412 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x286>
   1c3ca:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c3ce:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1c3d2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c3d5:	48 98                	cdqe   
   1c3d7:	48 01 d0             	add    rax,rdx
   1c3da:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1c3dd:	84 c0                	test   al,al
   1c3df:	74 2b                	je     1c40c <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x280>
   1c3e1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c3e5:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   1c3e9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c3ec:	c1 e0 02             	shl    eax,0x2
   1c3ef:	48 98                	cdqe   
   1c3f1:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1c3f5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c3f9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1c3fd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c400:	c1 e0 02             	shl    eax,0x2
   1c403:	48 98                	cdqe   
   1c405:	48 01 c2             	add    rdx,rax
   1c408:	8b 01                	mov    eax,DWORD PTR [rcx]
   1c40a:	89 02                	mov    DWORD PTR [rdx],eax
   1c40c:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   1c410:	eb b0                	jmp    1c3c2 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x236>
   1c412:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c416:	8b 10                	mov    edx,DWORD PTR [rax]
   1c418:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c41c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c41f:	0f af c2             	imul   eax,edx
   1c422:	c1 e0 02             	shl    eax,0x2
   1c425:	48 63 d0             	movsxd rdx,eax
   1c428:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c42c:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   1c430:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c434:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1c438:	48 89 ce             	mov    rsi,rcx
   1c43b:	48 89 c7             	mov    rdi,rax
   1c43e:	e8 0d 7f fe ff       	call   4350 <memcpy@plt>
   1c443:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c447:	8b 10                	mov    edx,DWORD PTR [rax]
   1c449:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c44d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c450:	0f af c2             	imul   eax,edx
   1c453:	48 63 d0             	movsxd rdx,eax
   1c456:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c45a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1c45e:	be 00 00 00 00       	mov    esi,0x0
   1c463:	48 89 c7             	mov    rdi,rax
   1c466:	e8 75 7d fe ff       	call   41e0 <memset@plt>
   1c46b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c46f:	48 89 c7             	mov    rdi,rax
   1c472:	e8 38 a0 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c477:	0f b6 c0             	movzx  eax,al
   1c47a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1c47d:	83 7d dc 3b          	cmp    DWORD PTR [rbp-0x24],0x3b
   1c481:	0f 84 89 04 00 00    	je     1c910 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x784>
   1c487:	83 7d dc 3b          	cmp    DWORD PTR [rbp-0x24],0x3b
   1c48b:	0f 8f 85 04 00 00    	jg     1c916 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x78a>
   1c491:	83 7d dc 21          	cmp    DWORD PTR [rbp-0x24],0x21
   1c495:	0f 84 3e 03 00 00    	je     1c7d9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x64d>
   1c49b:	83 7d dc 2c          	cmp    DWORD PTR [rbp-0x24],0x2c
   1c49f:	0f 85 71 04 00 00    	jne    1c916 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x78a>
   1c4a5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c4a9:	48 89 c7             	mov    rdi,rax
   1c4ac:	e8 57 a3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1c4b1:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1c4b4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c4b8:	48 89 c7             	mov    rdi,rax
   1c4bb:	e8 48 a3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1c4c0:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1c4c3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c4c7:	48 89 c7             	mov    rdi,rax
   1c4ca:	e8 39 a3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1c4cf:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   1c4d2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c4d6:	48 89 c7             	mov    rdi,rax
   1c4d9:	e8 2a a3 fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1c4de:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1c4e1:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   1c4e4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1c4e7:	01 c2                	add    edx,eax
   1c4e9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c4ed:	8b 00                	mov    eax,DWORD PTR [rax]
   1c4ef:	39 c2                	cmp    edx,eax
   1c4f1:	7f 13                	jg     1c506 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x37a>
   1c4f3:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   1c4f6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1c4f9:	01 c2                	add    edx,eax
   1c4fb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c4ff:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c502:	39 c2                	cmp    edx,eax
   1c504:	7e 16                	jle    1c51c <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x390>
   1c506:	48 8d 3d a7 ec 01 00 	lea    rdi,[rip+0x1eca7]        # 3b1b4 <stbi__depth_scale_table+0x5bc>
   1c50d:	e8 2d 86 fe ff       	call   4b3f <stbi__err(char const*)>
   1c512:	b8 00 00 00 00       	mov    eax,0x0
   1c517:	e9 13 04 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c51c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c520:	8b 00                	mov    eax,DWORD PTR [rax]
   1c522:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
   1c529:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c52d:	89 90 64 88 00 00    	mov    DWORD PTR [rax+0x8864],edx
   1c533:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1c536:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
   1c53d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c541:	89 90 4c 88 00 00    	mov    DWORD PTR [rax+0x884c],edx
   1c547:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c54b:	8b 80 64 88 00 00    	mov    eax,DWORD PTR [rax+0x8864]
   1c551:	0f af 45 e4          	imul   eax,DWORD PTR [rbp-0x1c]
   1c555:	89 c2                	mov    edx,eax
   1c557:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c55b:	89 90 50 88 00 00    	mov    DWORD PTR [rax+0x8850],edx
   1c561:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c565:	8b 90 4c 88 00 00    	mov    edx,DWORD PTR [rax+0x884c]
   1c56b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1c56e:	c1 e0 02             	shl    eax,0x2
   1c571:	01 c2                	add    edx,eax
   1c573:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c577:	89 90 54 88 00 00    	mov    DWORD PTR [rax+0x8854],edx
   1c57d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c581:	8b 90 50 88 00 00    	mov    edx,DWORD PTR [rax+0x8850]
   1c587:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c58b:	8b 80 64 88 00 00    	mov    eax,DWORD PTR [rax+0x8864]
   1c591:	0f af 45 ec          	imul   eax,DWORD PTR [rbp-0x14]
   1c595:	01 c2                	add    edx,eax
   1c597:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c59b:	89 90 58 88 00 00    	mov    DWORD PTR [rax+0x8858],edx
   1c5a1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5a5:	8b 90 4c 88 00 00    	mov    edx,DWORD PTR [rax+0x884c]
   1c5ab:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5af:	89 90 5c 88 00 00    	mov    DWORD PTR [rax+0x885c],edx
   1c5b5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5b9:	8b 90 50 88 00 00    	mov    edx,DWORD PTR [rax+0x8850]
   1c5bf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5c3:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1c5c9:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   1c5cd:	75 14                	jne    1c5e3 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x457>
   1c5cf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5d3:	8b 90 58 88 00 00    	mov    edx,DWORD PTR [rax+0x8858]
   1c5d9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5dd:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1c5e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c5e7:	48 89 c7             	mov    rdi,rax
   1c5ea:	e8 c0 9e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c5ef:	0f b6 d0             	movzx  edx,al
   1c5f2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5f6:	89 90 48 88 00 00    	mov    DWORD PTR [rax+0x8848],edx
   1c5fc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c600:	8b 80 48 88 00 00    	mov    eax,DWORD PTR [rax+0x8848]
   1c606:	83 e0 40             	and    eax,0x40
   1c609:	85 c0                	test   eax,eax
   1c60b:	74 2b                	je     1c638 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4ac>
   1c60d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c611:	8b 80 64 88 00 00    	mov    eax,DWORD PTR [rax+0x8864]
   1c617:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   1c61e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c622:	89 90 44 88 00 00    	mov    DWORD PTR [rax+0x8844],edx
   1c628:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c62c:	c7 80 40 88 00 00 03 00 00 00 	mov    DWORD PTR [rax+0x8840],0x3
   1c636:	eb 22                	jmp    1c65a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4ce>
   1c638:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c63c:	8b 90 64 88 00 00    	mov    edx,DWORD PTR [rax+0x8864]
   1c642:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c646:	89 90 44 88 00 00    	mov    DWORD PTR [rax+0x8844],edx
   1c64c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c650:	c7 80 40 88 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x8840],0x0
   1c65a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c65e:	8b 80 48 88 00 00    	mov    eax,DWORD PTR [rax+0x8848]
   1c664:	25 80 00 00 00       	and    eax,0x80
   1c669:	85 c0                	test   eax,eax
   1c66b:	74 62                	je     1c6cf <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x543>
   1c66d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c671:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   1c674:	83 e0 01             	and    eax,0x1
   1c677:	85 c0                	test   eax,eax
   1c679:	74 09                	je     1c684 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4f8>
   1c67b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c67f:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   1c682:	eb 05                	jmp    1c689 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4fd>
   1c684:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1c689:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c68d:	8b 92 48 88 00 00    	mov    edx,DWORD PTR [rdx+0x8848]
   1c693:	83 e2 07             	and    edx,0x7
   1c696:	be 02 00 00 00       	mov    esi,0x2
   1c69b:	89 d1                	mov    ecx,edx
   1c69d:	d3 e6                	shl    esi,cl
   1c69f:	89 f2                	mov    edx,esi
   1c6a1:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   1c6a5:	48 8d b1 34 04 00 00 	lea    rsi,[rcx+0x434]
   1c6ac:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   1c6b0:	89 c1                	mov    ecx,eax
   1c6b2:	e8 46 f2 ff ff       	call   1b8fd <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)>
   1c6b7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6bb:	48 8d 90 34 04 00 00 	lea    rdx,[rax+0x434]
   1c6c2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6c6:	48 89 90 38 88 00 00 	mov    QWORD PTR [rax+0x8838],rdx
   1c6cd:	eb 3b                	jmp    1c70a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x57e>
   1c6cf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6d3:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1c6d6:	25 80 00 00 00       	and    eax,0x80
   1c6db:	85 c0                	test   eax,eax
   1c6dd:	74 15                	je     1c6f4 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x568>
   1c6df:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6e3:	48 8d 50 34          	lea    rdx,[rax+0x34]
   1c6e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6eb:	48 89 90 38 88 00 00 	mov    QWORD PTR [rax+0x8838],rdx
   1c6f2:	eb 16                	jmp    1c70a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x57e>
   1c6f4:	48 8d 3d ce ea 01 00 	lea    rdi,[rip+0x1eace]        # 3b1c9 <stbi__depth_scale_table+0x5d1>
   1c6fb:	e8 3f 84 fe ff       	call   4b3f <stbi__err(char const*)>
   1c700:	b8 00 00 00 00       	mov    eax,0x0
   1c705:	e9 25 02 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c70a:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c70e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c712:	48 89 d6             	mov    rsi,rdx
   1c715:	48 89 c7             	mov    rdi,rax
   1c718:	e8 2e f7 ff ff       	call   1be4b <stbi__process_gif_raster(stbi__context*, stbi__gif*)>
   1c71d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1c721:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1c726:	75 0a                	jne    1c732 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x5a6>
   1c728:	b8 00 00 00 00       	mov    eax,0x0
   1c72d:	e9 fd 01 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c732:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c736:	8b 10                	mov    edx,DWORD PTR [rax]
   1c738:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c73c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c73f:	0f af c2             	imul   eax,edx
   1c742:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c745:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
   1c749:	0f 84 81 00 00 00    	je     1c7d0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x644>
   1c74f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c753:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   1c756:	85 c0                	test   eax,eax
   1c758:	7e 76                	jle    1c7d0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x644>
   1c75a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1c761:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c764:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1c767:	7d 67                	jge    1c7d0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x644>
   1c769:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c76d:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1c771:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c774:	48 98                	cdqe   
   1c776:	48 01 d0             	add    rax,rdx
   1c779:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1c77c:	84 c0                	test   al,al
   1c77e:	75 4a                	jne    1c7ca <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x63e>
   1c780:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c784:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
   1c787:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c78b:	48 63 d2             	movsxd rdx,edx
   1c78e:	c6 44 90 37 ff       	mov    BYTE PTR [rax+rdx*4+0x37],0xff
   1c793:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c797:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   1c79a:	48 98                	cdqe   
   1c79c:	48 83 c0 0c          	add    rax,0xc
   1c7a0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c7a8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c7ac:	48 01 d0             	add    rax,rdx
   1c7af:	48 8d 48 04          	lea    rcx,[rax+0x4]
   1c7b3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c7b7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1c7bb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c7be:	c1 e0 02             	shl    eax,0x2
   1c7c1:	48 98                	cdqe   
   1c7c3:	48 01 c2             	add    rdx,rax
   1c7c6:	8b 01                	mov    eax,DWORD PTR [rcx]
   1c7c8:	89 02                	mov    DWORD PTR [rdx],eax
   1c7ca:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   1c7ce:	eb 91                	jmp    1c761 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x5d5>
   1c7d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c7d4:	e9 56 01 00 00       	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c7d9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c7dd:	48 89 c7             	mov    rdi,rax
   1c7e0:	e8 ca 9c fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c7e5:	0f b6 c0             	movzx  eax,al
   1c7e8:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1c7eb:	81 7d f0 f9 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xf9
   1c7f2:	0f 85 e8 00 00 00    	jne    1c8e0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x754>
   1c7f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c7fc:	48 89 c7             	mov    rdi,rax
   1c7ff:	e8 ab 9c fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c804:	0f b6 c0             	movzx  eax,al
   1c807:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1c80a:	83 7d f4 04          	cmp    DWORD PTR [rbp-0xc],0x4
   1c80e:	0f 85 b9 00 00 00    	jne    1c8cd <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x741>
   1c814:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c818:	48 89 c7             	mov    rdi,rax
   1c81b:	e8 8f 9c fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c820:	0f b6 d0             	movzx  edx,al
   1c823:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c827:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   1c82a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c82e:	48 89 c7             	mov    rdi,rax
   1c831:	e8 d2 9f fe ff       	call   6808 <stbi__get16le(stbi__context*)>
   1c836:	89 c2                	mov    edx,eax
   1c838:	89 d0                	mov    eax,edx
   1c83a:	c1 e0 02             	shl    eax,0x2
   1c83d:	01 d0                	add    eax,edx
   1c83f:	01 c0                	add    eax,eax
   1c841:	89 c2                	mov    edx,eax
   1c843:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c847:	89 90 68 88 00 00    	mov    DWORD PTR [rax+0x8868],edx
   1c84d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c851:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   1c854:	85 c0                	test   eax,eax
   1c856:	78 13                	js     1c86b <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x6df>
   1c858:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c85c:	8b 50 2c             	mov    edx,DWORD PTR [rax+0x2c]
   1c85f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c863:	48 63 d2             	movsxd rdx,edx
   1c866:	c6 44 90 37 ff       	mov    BYTE PTR [rax+rdx*4+0x37],0xff
   1c86b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c86f:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   1c872:	83 e0 01             	and    eax,0x1
   1c875:	85 c0                	test   eax,eax
   1c877:	74 36                	je     1c8af <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x723>
   1c879:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c87d:	48 89 c7             	mov    rdi,rax
   1c880:	e8 2a 9c fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c885:	0f b6 d0             	movzx  edx,al
   1c888:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c88c:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   1c88f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c893:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   1c896:	85 c0                	test   eax,eax
   1c898:	78 46                	js     1c8e0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x754>
   1c89a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c89e:	8b 50 2c             	mov    edx,DWORD PTR [rax+0x2c]
   1c8a1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8a5:	48 63 d2             	movsxd rdx,edx
   1c8a8:	c6 44 90 37 00       	mov    BYTE PTR [rax+rdx*4+0x37],0x0
   1c8ad:	eb 31                	jmp    1c8e0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x754>
   1c8af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c8b3:	be 01 00 00 00       	mov    esi,0x1
   1c8b8:	48 89 c7             	mov    rdi,rax
   1c8bb:	e8 e3 9c fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1c8c0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8c4:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [rax+0x2c],0xffffffff
   1c8cb:	eb 13                	jmp    1c8e0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x754>
   1c8cd:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   1c8d0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c8d4:	89 d6                	mov    esi,edx
   1c8d6:	48 89 c7             	mov    rdi,rax
   1c8d9:	e8 c5 9c fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1c8de:	eb 4a                	jmp    1c92a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x79e>
   1c8e0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c8e4:	48 89 c7             	mov    rdi,rax
   1c8e7:	e8 c3 9b fe ff       	call   64af <stbi__get8(stbi__context*)>
   1c8ec:	0f b6 c0             	movzx  eax,al
   1c8ef:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1c8f2:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   1c8f6:	0f 95 c0             	setne  al
   1c8f9:	84 c0                	test   al,al
   1c8fb:	74 2c                	je     1c929 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x79d>
   1c8fd:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   1c900:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c904:	89 d6                	mov    esi,edx
   1c906:	48 89 c7             	mov    rdi,rax
   1c909:	e8 95 9c fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1c90e:	eb d0                	jmp    1c8e0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x754>
   1c910:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c914:	eb 19                	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c916:	48 8d 3d c0 e8 01 00 	lea    rdi,[rip+0x1e8c0]        # 3b1dd <stbi__depth_scale_table+0x5e5>
   1c91d:	e8 1d 82 fe ff       	call   4b3f <stbi__err(char const*)>
   1c922:	b8 00 00 00 00       	mov    eax,0x0
   1c927:	eb 06                	jmp    1c92f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7a3>
   1c929:	90                   	nop
   1c92a:	e9 3c fb ff ff       	jmp    1c46b <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x2df>
   1c92f:	c9                   	leave  
   1c930:	c3                   	ret    

000000000001c931 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)>:
   1c931:	55                   	push   rbp
   1c932:	48 89 e5             	mov    rbp,rsp
   1c935:	48 81 ec e0 88 00 00 	sub    rsp,0x88e0
   1c93c:	48 89 bd 48 77 ff ff 	mov    QWORD PTR [rbp-0x88b8],rdi
   1c943:	48 89 b5 40 77 ff ff 	mov    QWORD PTR [rbp-0x88c0],rsi
   1c94a:	48 89 95 38 77 ff ff 	mov    QWORD PTR [rbp-0x88c8],rdx
   1c951:	48 89 8d 30 77 ff ff 	mov    QWORD PTR [rbp-0x88d0],rcx
   1c958:	4c 89 85 28 77 ff ff 	mov    QWORD PTR [rbp-0x88d8],r8
   1c95f:	4c 89 8d 20 77 ff ff 	mov    QWORD PTR [rbp-0x88e0],r9
   1c966:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1c96f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1c973:	31 c0                	xor    eax,eax
   1c975:	48 8b 85 48 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88b8]
   1c97c:	48 89 c7             	mov    rdi,rax
   1c97f:	e8 4d ef ff ff       	call   1b8d1 <stbi__gif_test(stbi__context*)>
   1c984:	85 c0                	test   eax,eax
   1c986:	0f 95 c0             	setne  al
   1c989:	84 c0                	test   al,al
   1c98b:	0f 84 2d 03 00 00    	je     1ccbe <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x38d>
   1c991:	c7 85 58 77 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88a8],0x0
   1c99b:	48 c7 85 60 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x88a0],0x0
   1c9a6:	48 c7 85 68 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8898],0x0
   1c9b1:	48 c7 85 70 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8890],0x0
   1c9bc:	48 8d 85 80 77 ff ff 	lea    rax,[rbp-0x8880]
   1c9c3:	ba 70 88 00 00       	mov    edx,0x8870
   1c9c8:	be 00 00 00 00       	mov    esi,0x0
   1c9cd:	48 89 c7             	mov    rdi,rax
   1c9d0:	e8 0b 78 fe ff       	call   41e0 <memset@plt>
   1c9d5:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1c9dd:	74 0e                	je     1c9ed <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0xbc>
   1c9df:	48 8b 85 40 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c0]
   1c9e6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   1c9ed:	48 8b 8d 70 77 ff ff 	mov    rcx,QWORD PTR [rbp-0x8890]
   1c9f4:	48 8b 95 20 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88e0]
   1c9fb:	48 8d b5 80 77 ff ff 	lea    rsi,[rbp-0x8880]
   1ca02:	48 8b 85 48 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88b8]
   1ca09:	49 89 c8             	mov    r8,rcx
   1ca0c:	8b 4d 10             	mov    ecx,DWORD PTR [rbp+0x10]
   1ca0f:	48 89 c7             	mov    rdi,rax
   1ca12:	e8 75 f7 ff ff       	call   1c18c <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)>
   1ca17:	48 89 85 60 77 ff ff 	mov    QWORD PTR [rbp-0x88a0],rax
   1ca1e:	48 8b 85 60 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a0]
   1ca25:	48 3b 85 48 77 ff ff 	cmp    rax,QWORD PTR [rbp-0x88b8]
   1ca2c:	75 0b                	jne    1ca39 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x108>
   1ca2e:	48 c7 85 60 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x88a0],0x0
   1ca39:	48 83 bd 60 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88a0],0x0
   1ca41:	0f 84 dd 01 00 00    	je     1cc24 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x2f3>
   1ca47:	8b 95 80 77 ff ff    	mov    edx,DWORD PTR [rbp-0x8880]
   1ca4d:	48 8b 85 38 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c8]
   1ca54:	89 10                	mov    DWORD PTR [rax],edx
   1ca56:	8b 95 84 77 ff ff    	mov    edx,DWORD PTR [rbp-0x887c]
   1ca5c:	48 8b 85 30 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88d0]
   1ca63:	89 10                	mov    DWORD PTR [rax],edx
   1ca65:	83 85 58 77 ff ff 01 	add    DWORD PTR [rbp-0x88a8],0x1
   1ca6c:	8b 95 80 77 ff ff    	mov    edx,DWORD PTR [rbp-0x8880]
   1ca72:	8b 85 84 77 ff ff    	mov    eax,DWORD PTR [rbp-0x887c]
   1ca78:	0f af c2             	imul   eax,edx
   1ca7b:	c1 e0 02             	shl    eax,0x2
   1ca7e:	89 85 5c 77 ff ff    	mov    DWORD PTR [rbp-0x88a4],eax
   1ca84:	48 83 bd 68 77 ff ff 00 	cmp    QWORD PTR [rbp-0x8898],0x0
   1ca8c:	0f 84 bf 00 00 00    	je     1cb51 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x220>
   1ca92:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1ca98:	0f af 85 5c 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a4]
   1ca9f:	48 63 d0             	movsxd rdx,eax
   1caa2:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1caa9:	48 89 d6             	mov    rsi,rdx
   1caac:	48 89 c7             	mov    rdi,rax
   1caaf:	e8 3c 7c fe ff       	call   46f0 <realloc@plt>
   1cab4:	48 89 85 78 77 ff ff 	mov    QWORD PTR [rbp-0x8888],rax
   1cabb:	48 83 bd 78 77 ff ff 00 	cmp    QWORD PTR [rbp-0x8888],0x0
   1cac3:	75 43                	jne    1cb08 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x1d7>
   1cac5:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1cacc:	48 89 c7             	mov    rdi,rax
   1cacf:	e8 2c 7a fe ff       	call   4500 <free@plt>
   1cad4:	48 8b 85 98 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8868]
   1cadb:	48 89 c7             	mov    rdi,rax
   1cade:	e8 1d 7a fe ff       	call   4500 <free@plt>
   1cae3:	48 8b 85 90 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8870]
   1caea:	48 89 c7             	mov    rdi,rax
   1caed:	e8 0e 7a fe ff       	call   4500 <free@plt>
   1caf2:	48 8d 3d 3a d5 01 00 	lea    rdi,[rip+0x1d53a]        # 3a033 <_IO_stdin_used+0x33>
   1caf9:	e8 41 80 fe ff       	call   4b3f <stbi__err(char const*)>
   1cafe:	b8 00 00 00 00       	mov    eax,0x0
   1cb03:	e9 c7 01 00 00       	jmp    1cccf <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x39e>
   1cb08:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1cb0f:	48 89 85 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rax
   1cb16:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1cb1e:	74 77                	je     1cb97 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x266>
   1cb20:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cb26:	48 98                	cdqe   
   1cb28:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cb30:	48 8b 85 40 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c0]
   1cb37:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1cb3a:	48 89 d6             	mov    rsi,rdx
   1cb3d:	48 89 c7             	mov    rdi,rax
   1cb40:	e8 ab 7b fe ff       	call   46f0 <realloc@plt>
   1cb45:	48 8b 95 40 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88c0]
   1cb4c:	48 89 02             	mov    QWORD PTR [rdx],rax
   1cb4f:	eb 46                	jmp    1cb97 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x266>
   1cb51:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cb57:	0f af 85 5c 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a4]
   1cb5e:	48 98                	cdqe   
   1cb60:	48 89 c7             	mov    rdi,rax
   1cb63:	e8 f3 7f fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1cb68:	48 89 85 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rax
   1cb6f:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1cb77:	74 1e                	je     1cb97 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x266>
   1cb79:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cb7f:	48 98                	cdqe   
   1cb81:	48 c1 e0 02          	shl    rax,0x2
   1cb85:	48 89 c7             	mov    rdi,rax
   1cb88:	e8 ce 7f fe ff       	call   4b5b <stbi__malloc(unsigned long)>
   1cb8d:	48 8b 95 40 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88c0]
   1cb94:	48 89 02             	mov    QWORD PTR [rdx],rax
   1cb97:	8b 85 5c 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a4]
   1cb9d:	48 63 d0             	movsxd rdx,eax
   1cba0:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cba6:	83 e8 01             	sub    eax,0x1
   1cba9:	0f af 85 5c 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a4]
   1cbb0:	48 63 c8             	movsxd rcx,eax
   1cbb3:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cbba:	48 01 c1             	add    rcx,rax
   1cbbd:	48 8b 85 60 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a0]
   1cbc4:	48 89 c6             	mov    rsi,rax
   1cbc7:	48 89 cf             	mov    rdi,rcx
   1cbca:	e8 81 77 fe ff       	call   4350 <memcpy@plt>
   1cbcf:	83 bd 58 77 ff ff 01 	cmp    DWORD PTR [rbp-0x88a8],0x1
   1cbd6:	7e 21                	jle    1cbf9 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x2c8>
   1cbd8:	8b 85 5c 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a4]
   1cbde:	01 c0                	add    eax,eax
   1cbe0:	48 98                	cdqe   
   1cbe2:	48 f7 d8             	neg    rax
   1cbe5:	48 89 c2             	mov    rdx,rax
   1cbe8:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cbef:	48 01 d0             	add    rax,rdx
   1cbf2:	48 89 85 70 77 ff ff 	mov    QWORD PTR [rbp-0x8890],rax
   1cbf9:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1cc01:	74 21                	je     1cc24 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x2f3>
   1cc03:	48 8b 85 40 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c0]
   1cc0a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   1cc0d:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cc13:	83 e8 01             	sub    eax,0x1
   1cc16:	89 c0                	mov    eax,eax
   1cc18:	48 c1 e0 02          	shl    rax,0x2
   1cc1c:	48 01 c2             	add    rdx,rax
   1cc1f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1cc22:	89 02                	mov    DWORD PTR [rdx],eax
   1cc24:	48 83 bd 60 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88a0],0x0
   1cc2c:	74 05                	je     1cc33 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x302>
   1cc2e:	e9 ba fd ff ff       	jmp    1c9ed <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0xbc>
   1cc33:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1cc3a:	48 89 c7             	mov    rdi,rax
   1cc3d:	e8 be 78 fe ff       	call   4500 <free@plt>
   1cc42:	48 8b 85 98 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8868]
   1cc49:	48 89 c7             	mov    rdi,rax
   1cc4c:	e8 af 78 fe ff       	call   4500 <free@plt>
   1cc51:	48 8b 85 90 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8870]
   1cc58:	48 89 c7             	mov    rdi,rax
   1cc5b:	e8 a0 78 fe ff       	call   4500 <free@plt>
   1cc60:	83 7d 10 00          	cmp    DWORD PTR [rbp+0x10],0x0
   1cc64:	74 40                	je     1cca6 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x375>
   1cc66:	83 7d 10 04          	cmp    DWORD PTR [rbp+0x10],0x4
   1cc6a:	74 3a                	je     1cca6 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x375>
   1cc6c:	8b 85 84 77 ff ff    	mov    eax,DWORD PTR [rbp-0x887c]
   1cc72:	89 c1                	mov    ecx,eax
   1cc74:	8b 85 80 77 ff ff    	mov    eax,DWORD PTR [rbp-0x8880]
   1cc7a:	0f af 85 58 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a8]
   1cc81:	89 c2                	mov    edx,eax
   1cc83:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cc8a:	41 89 c8             	mov    r8d,ecx
   1cc8d:	89 d1                	mov    ecx,edx
   1cc8f:	8b 55 10             	mov    edx,DWORD PTR [rbp+0x10]
   1cc92:	be 04 00 00 00       	mov    esi,0x4
   1cc97:	48 89 c7             	mov    rdi,rax
   1cc9a:	e8 00 9c fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1cc9f:	48 89 85 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rax
   1cca6:	48 8b 85 28 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88d8]
   1ccad:	8b 95 58 77 ff ff    	mov    edx,DWORD PTR [rbp-0x88a8]
   1ccb3:	89 10                	mov    DWORD PTR [rax],edx
   1ccb5:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1ccbc:	eb 11                	jmp    1cccf <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x39e>
   1ccbe:	48 8d 3d b2 e4 01 00 	lea    rdi,[rip+0x1e4b2]        # 3b177 <stbi__depth_scale_table+0x57f>
   1ccc5:	e8 75 7e fe ff       	call   4b3f <stbi__err(char const*)>
   1ccca:	b8 00 00 00 00       	mov    eax,0x0
   1cccf:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   1ccd3:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
   1ccdc:	74 05                	je     1cce3 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x3b2>
   1ccde:	e8 cd 77 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1cce3:	c9                   	leave  
   1cce4:	c3                   	ret    

000000000001cce5 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1cce5:	55                   	push   rbp
   1cce6:	48 89 e5             	mov    rbp,rsp
   1cce9:	48 81 ec c0 88 00 00 	sub    rsp,0x88c0
   1ccf0:	48 89 bd 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rdi
   1ccf7:	48 89 b5 60 77 ff ff 	mov    QWORD PTR [rbp-0x88a0],rsi
   1ccfe:	48 89 95 58 77 ff ff 	mov    QWORD PTR [rbp-0x88a8],rdx
   1cd05:	48 89 8d 50 77 ff ff 	mov    QWORD PTR [rbp-0x88b0],rcx
   1cd0c:	44 89 85 4c 77 ff ff 	mov    DWORD PTR [rbp-0x88b4],r8d
   1cd13:	4c 89 8d 40 77 ff ff 	mov    QWORD PTR [rbp-0x88c0],r9
   1cd1a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1cd23:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1cd27:	31 c0                	xor    eax,eax
   1cd29:	48 c7 85 78 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8888],0x0
   1cd34:	48 8d 85 80 77 ff ff 	lea    rax,[rbp-0x8880]
   1cd3b:	ba 70 88 00 00       	mov    edx,0x8870
   1cd40:	be 00 00 00 00       	mov    esi,0x0
   1cd45:	48 89 c7             	mov    rdi,rax
   1cd48:	e8 93 74 fe ff       	call   41e0 <memset@plt>
   1cd4d:	8b 8d 4c 77 ff ff    	mov    ecx,DWORD PTR [rbp-0x88b4]
   1cd53:	48 8b 95 50 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88b0]
   1cd5a:	48 8d b5 80 77 ff ff 	lea    rsi,[rbp-0x8880]
   1cd61:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cd68:	41 b8 00 00 00 00    	mov    r8d,0x0
   1cd6e:	48 89 c7             	mov    rdi,rax
   1cd71:	e8 16 f4 ff ff       	call   1c18c <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)>
   1cd76:	48 89 85 78 77 ff ff 	mov    QWORD PTR [rbp-0x8888],rax
   1cd7d:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1cd84:	48 3b 85 68 77 ff ff 	cmp    rax,QWORD PTR [rbp-0x8898]
   1cd8b:	75 0b                	jne    1cd98 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb3>
   1cd8d:	48 c7 85 78 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8888],0x0
   1cd98:	48 83 bd 78 77 ff ff 00 	cmp    QWORD PTR [rbp-0x8888],0x0
   1cda0:	74 66                	je     1ce08 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x123>
   1cda2:	8b 95 80 77 ff ff    	mov    edx,DWORD PTR [rbp-0x8880]
   1cda8:	48 8b 85 60 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a0]
   1cdaf:	89 10                	mov    DWORD PTR [rax],edx
   1cdb1:	8b 95 84 77 ff ff    	mov    edx,DWORD PTR [rbp-0x887c]
   1cdb7:	48 8b 85 58 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a8]
   1cdbe:	89 10                	mov    DWORD PTR [rax],edx
   1cdc0:	83 bd 4c 77 ff ff 00 	cmp    DWORD PTR [rbp-0x88b4],0x0
   1cdc7:	74 5a                	je     1ce23 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1cdc9:	83 bd 4c 77 ff ff 04 	cmp    DWORD PTR [rbp-0x88b4],0x4
   1cdd0:	74 51                	je     1ce23 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1cdd2:	8b 85 84 77 ff ff    	mov    eax,DWORD PTR [rbp-0x887c]
   1cdd8:	89 c6                	mov    esi,eax
   1cdda:	8b 85 80 77 ff ff    	mov    eax,DWORD PTR [rbp-0x8880]
   1cde0:	89 c1                	mov    ecx,eax
   1cde2:	8b 95 4c 77 ff ff    	mov    edx,DWORD PTR [rbp-0x88b4]
   1cde8:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1cdef:	41 89 f0             	mov    r8d,esi
   1cdf2:	be 04 00 00 00       	mov    esi,0x4
   1cdf7:	48 89 c7             	mov    rdi,rax
   1cdfa:	e8 a0 9a fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1cdff:	48 89 85 78 77 ff ff 	mov    QWORD PTR [rbp-0x8888],rax
   1ce06:	eb 1b                	jmp    1ce23 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1ce08:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1ce0f:	48 85 c0             	test   rax,rax
   1ce12:	74 0f                	je     1ce23 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1ce14:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1ce1b:	48 89 c7             	mov    rdi,rax
   1ce1e:	e8 dd 76 fe ff       	call   4500 <free@plt>
   1ce23:	48 8b 85 98 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8868]
   1ce2a:	48 89 c7             	mov    rdi,rax
   1ce2d:	e8 ce 76 fe ff       	call   4500 <free@plt>
   1ce32:	48 8b 85 90 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8870]
   1ce39:	48 89 c7             	mov    rdi,rax
   1ce3c:	e8 bf 76 fe ff       	call   4500 <free@plt>
   1ce41:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1ce48:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1ce4c:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1ce55:	74 05                	je     1ce5c <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x177>
   1ce57:	e8 54 76 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1ce5c:	c9                   	leave  
   1ce5d:	c3                   	ret    

000000000001ce5e <stbi__gif_info(stbi__context*, int*, int*, int*)>:
   1ce5e:	55                   	push   rbp
   1ce5f:	48 89 e5             	mov    rbp,rsp
   1ce62:	48 83 ec 20          	sub    rsp,0x20
   1ce66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1ce6a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1ce6e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   1ce72:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   1ce76:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1ce7a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ce7e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1ce82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ce86:	48 89 c7             	mov    rdi,rax
   1ce89:	e8 ec ec ff ff       	call   1bb7a <stbi__gif_info_raw(stbi__context*, int*, int*, int*)>
   1ce8e:	c9                   	leave  
   1ce8f:	c3                   	ret    

000000000001ce90 <stbi__hdr_test_core(stbi__context*, char const*)>:
   1ce90:	55                   	push   rbp
   1ce91:	48 89 e5             	mov    rbp,rsp
   1ce94:	48 83 ec 20          	sub    rsp,0x20
   1ce98:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1ce9c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1cea0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1cea7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1ceaa:	48 63 d0             	movsxd rdx,eax
   1cead:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1ceb1:	48 01 d0             	add    rax,rdx
   1ceb4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ceb7:	84 c0                	test   al,al
   1ceb9:	74 38                	je     1cef3 <stbi__hdr_test_core(stbi__context*, char const*)+0x63>
   1cebb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cebf:	48 89 c7             	mov    rdi,rax
   1cec2:	e8 e8 95 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1cec7:	0f b6 d0             	movzx  edx,al
   1ceca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1cecd:	48 63 c8             	movsxd rcx,eax
   1ced0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1ced4:	48 01 c8             	add    rax,rcx
   1ced7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ceda:	0f be c0             	movsx  eax,al
   1cedd:	39 c2                	cmp    edx,eax
   1cedf:	0f 95 c0             	setne  al
   1cee2:	84 c0                	test   al,al
   1cee4:	74 07                	je     1ceed <stbi__hdr_test_core(stbi__context*, char const*)+0x5d>
   1cee6:	b8 00 00 00 00       	mov    eax,0x0
   1ceeb:	eb 17                	jmp    1cf04 <stbi__hdr_test_core(stbi__context*, char const*)+0x74>
   1ceed:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1cef1:	eb b4                	jmp    1cea7 <stbi__hdr_test_core(stbi__context*, char const*)+0x17>
   1cef3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cef7:	48 89 c7             	mov    rdi,rax
   1cefa:	e8 fa 7b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1ceff:	b8 01 00 00 00       	mov    eax,0x1
   1cf04:	c9                   	leave  
   1cf05:	c3                   	ret    

000000000001cf06 <stbi__hdr_test(stbi__context*)>:
   1cf06:	55                   	push   rbp
   1cf07:	48 89 e5             	mov    rbp,rsp
   1cf0a:	48 83 ec 20          	sub    rsp,0x20
   1cf0e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1cf12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cf16:	48 8d 35 cd e2 01 00 	lea    rsi,[rip+0x1e2cd]        # 3b1ea <stbi__depth_scale_table+0x5f2>
   1cf1d:	48 89 c7             	mov    rdi,rax
   1cf20:	e8 6b ff ff ff       	call   1ce90 <stbi__hdr_test_core(stbi__context*, char const*)>
   1cf25:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1cf28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cf2c:	48 89 c7             	mov    rdi,rax
   1cf2f:	e8 c5 7b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1cf34:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   1cf38:	75 22                	jne    1cf5c <stbi__hdr_test(stbi__context*)+0x56>
   1cf3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cf3e:	48 8d 35 b1 e2 01 00 	lea    rsi,[rip+0x1e2b1]        # 3b1f6 <stbi__depth_scale_table+0x5fe>
   1cf45:	48 89 c7             	mov    rdi,rax
   1cf48:	e8 43 ff ff ff       	call   1ce90 <stbi__hdr_test_core(stbi__context*, char const*)>
   1cf4d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1cf50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cf54:	48 89 c7             	mov    rdi,rax
   1cf57:	e8 9d 7b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1cf5c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1cf5f:	c9                   	leave  
   1cf60:	c3                   	ret    

000000000001cf61 <stbi__hdr_gettoken(stbi__context*, char*)>:
   1cf61:	55                   	push   rbp
   1cf62:	48 89 e5             	mov    rbp,rsp
   1cf65:	48 83 ec 20          	sub    rsp,0x20
   1cf69:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1cf6d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1cf71:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1cf78:	c6 45 fb 00          	mov    BYTE PTR [rbp-0x5],0x0
   1cf7c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cf80:	48 89 c7             	mov    rdi,rax
   1cf83:	e8 27 95 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1cf88:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
   1cf8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cf8f:	48 89 c7             	mov    rdi,rax
   1cf92:	e8 9b 95 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1cf97:	85 c0                	test   eax,eax
   1cf99:	75 0d                	jne    1cfa8 <stbi__hdr_gettoken(stbi__context*, char*)+0x47>
   1cf9b:	80 7d fb 0a          	cmp    BYTE PTR [rbp-0x5],0xa
   1cf9f:	74 07                	je     1cfa8 <stbi__hdr_gettoken(stbi__context*, char*)+0x47>
   1cfa1:	b8 01 00 00 00       	mov    eax,0x1
   1cfa6:	eb 05                	jmp    1cfad <stbi__hdr_gettoken(stbi__context*, char*)+0x4c>
   1cfa8:	b8 00 00 00 00       	mov    eax,0x0
   1cfad:	84 c0                	test   al,al
   1cfaf:	74 68                	je     1d019 <stbi__hdr_gettoken(stbi__context*, char*)+0xb8>
   1cfb1:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
   1cfb5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   1cfb9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1cfbc:	8d 48 01             	lea    ecx,[rax+0x1]
   1cfbf:	89 4d fc             	mov    DWORD PTR [rbp-0x4],ecx
   1cfc2:	48 98                	cdqe   
   1cfc4:	48 01 f0             	add    rax,rsi
   1cfc7:	88 10                	mov    BYTE PTR [rax],dl
   1cfc9:	81 7d fc ff 03 00 00 	cmp    DWORD PTR [rbp-0x4],0x3ff
   1cfd0:	75 32                	jne    1d004 <stbi__hdr_gettoken(stbi__context*, char*)+0xa3>
   1cfd2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cfd6:	48 89 c7             	mov    rdi,rax
   1cfd9:	e8 54 95 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1cfde:	85 c0                	test   eax,eax
   1cfe0:	75 17                	jne    1cff9 <stbi__hdr_gettoken(stbi__context*, char*)+0x98>
   1cfe2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1cfe6:	48 89 c7             	mov    rdi,rax
   1cfe9:	e8 c1 94 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1cfee:	3c 0a                	cmp    al,0xa
   1cff0:	74 07                	je     1cff9 <stbi__hdr_gettoken(stbi__context*, char*)+0x98>
   1cff2:	b8 01 00 00 00       	mov    eax,0x1
   1cff7:	eb 05                	jmp    1cffe <stbi__hdr_gettoken(stbi__context*, char*)+0x9d>
   1cff9:	b8 00 00 00 00       	mov    eax,0x0
   1cffe:	84 c0                	test   al,al
   1d000:	74 16                	je     1d018 <stbi__hdr_gettoken(stbi__context*, char*)+0xb7>
   1d002:	eb ce                	jmp    1cfd2 <stbi__hdr_gettoken(stbi__context*, char*)+0x71>
   1d004:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d008:	48 89 c7             	mov    rdi,rax
   1d00b:	e8 9f 94 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d010:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
   1d013:	e9 73 ff ff ff       	jmp    1cf8b <stbi__hdr_gettoken(stbi__context*, char*)+0x2a>
   1d018:	90                   	nop
   1d019:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1d01c:	48 63 d0             	movsxd rdx,eax
   1d01f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d023:	48 01 d0             	add    rax,rdx
   1d026:	c6 00 00             	mov    BYTE PTR [rax],0x0
   1d029:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d02d:	c9                   	leave  
   1d02e:	c3                   	ret    

000000000001d02f <stbi__hdr_convert(float*, unsigned char*, int)>:
   1d02f:	55                   	push   rbp
   1d030:	48 89 e5             	mov    rbp,rsp
   1d033:	48 83 ec 30          	sub    rsp,0x30
   1d037:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1d03b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1d03f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1d042:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d046:	48 83 c0 03          	add    rax,0x3
   1d04a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d04d:	84 c0                	test   al,al
   1d04f:	0f 84 26 01 00 00    	je     1d17b <stbi__hdr_convert(float*, unsigned char*, int)+0x14c>
   1d055:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d059:	48 83 c0 03          	add    rax,0x3
   1d05d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d060:	0f b6 c0             	movzx  eax,al
   1d063:	2d 88 00 00 00       	sub    eax,0x88
   1d068:	89 c7                	mov    edi,eax
   1d06a:	f3 0f 10 05 ea fc 01 00 	movss  xmm0,DWORD PTR [rip+0x1fcea]        # 3cd5c <NANO_SEC+0x1a94>
   1d072:	e8 f4 7b 00 00       	call   24c6b <std::ldexp(float, int)>
   1d077:	66 0f 7e c0          	movd   eax,xmm0
   1d07b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1d07e:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
   1d082:	7f 4d                	jg     1d0d1 <stbi__hdr_convert(float*, unsigned char*, int)+0xa2>
   1d084:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d088:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d08b:	0f b6 d0             	movzx  edx,al
   1d08e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d092:	48 83 c0 01          	add    rax,0x1
   1d096:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d099:	0f b6 c0             	movzx  eax,al
   1d09c:	01 c2                	add    edx,eax
   1d09e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d0a2:	48 83 c0 02          	add    rax,0x2
   1d0a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d0a9:	0f b6 c0             	movzx  eax,al
   1d0ac:	01 d0                	add    eax,edx
   1d0ae:	66 0f ef c0          	pxor   xmm0,xmm0
   1d0b2:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d0b6:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d0bb:	f3 0f 10 0d a9 fc 01 00 	movss  xmm1,DWORD PTR [rip+0x1fca9]        # 3cd6c <NANO_SEC+0x1aa4>
   1d0c3:	f3 0f 5e c1          	divss  xmm0,xmm1
   1d0c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d0cb:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d0cf:	eb 6d                	jmp    1d13e <stbi__hdr_convert(float*, unsigned char*, int)+0x10f>
   1d0d1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d0d5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d0d8:	0f b6 c0             	movzx  eax,al
   1d0db:	66 0f ef c0          	pxor   xmm0,xmm0
   1d0df:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d0e3:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d0e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d0ec:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d0f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d0f4:	48 83 c0 01          	add    rax,0x1
   1d0f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d0fb:	0f b6 c0             	movzx  eax,al
   1d0fe:	66 0f ef c0          	pxor   xmm0,xmm0
   1d102:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d106:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d10a:	48 83 c0 04          	add    rax,0x4
   1d10e:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d113:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d117:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d11b:	48 83 c0 02          	add    rax,0x2
   1d11f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d122:	0f b6 c0             	movzx  eax,al
   1d125:	66 0f ef c0          	pxor   xmm0,xmm0
   1d129:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d12d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d131:	48 83 c0 08          	add    rax,0x8
   1d135:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d13a:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d13e:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
   1d142:	75 14                	jne    1d158 <stbi__hdr_convert(float*, unsigned char*, int)+0x129>
   1d144:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d148:	48 83 c0 04          	add    rax,0x4
   1d14c:	f3 0f 10 05 08 fc 01 00 	movss  xmm0,DWORD PTR [rip+0x1fc08]        # 3cd5c <NANO_SEC+0x1a94>
   1d154:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d158:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   1d15c:	0f 85 a2 00 00 00    	jne    1d204 <stbi__hdr_convert(float*, unsigned char*, int)+0x1d5>
   1d162:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d166:	48 83 c0 0c          	add    rax,0xc
   1d16a:	f3 0f 10 05 ea fb 01 00 	movss  xmm0,DWORD PTR [rip+0x1fbea]        # 3cd5c <NANO_SEC+0x1a94>
   1d172:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d176:	e9 89 00 00 00       	jmp    1d204 <stbi__hdr_convert(float*, unsigned char*, int)+0x1d5>
   1d17b:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   1d17f:	74 20                	je     1d1a1 <stbi__hdr_convert(float*, unsigned char*, int)+0x172>
   1d181:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   1d185:	7f 7d                	jg     1d204 <stbi__hdr_convert(float*, unsigned char*, int)+0x1d5>
   1d187:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
   1d18b:	74 28                	je     1d1b5 <stbi__hdr_convert(float*, unsigned char*, int)+0x186>
   1d18d:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
   1d191:	7f 71                	jg     1d204 <stbi__hdr_convert(float*, unsigned char*, int)+0x1d5>
   1d193:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
   1d197:	74 5e                	je     1d1f7 <stbi__hdr_convert(float*, unsigned char*, int)+0x1c8>
   1d199:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
   1d19d:	74 44                	je     1d1e3 <stbi__hdr_convert(float*, unsigned char*, int)+0x1b4>
   1d19f:	eb 63                	jmp    1d204 <stbi__hdr_convert(float*, unsigned char*, int)+0x1d5>
   1d1a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1a5:	48 83 c0 0c          	add    rax,0xc
   1d1a9:	f3 0f 10 05 ab fb 01 00 	movss  xmm0,DWORD PTR [rip+0x1fbab]        # 3cd5c <NANO_SEC+0x1a94>
   1d1b1:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d1b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1b9:	48 8d 50 08          	lea    rdx,[rax+0x8]
   1d1bd:	66 0f ef c0          	pxor   xmm0,xmm0
   1d1c1:	f3 0f 11 02          	movss  DWORD PTR [rdx],xmm0
   1d1c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1c9:	48 83 c0 04          	add    rax,0x4
   1d1cd:	f3 0f 10 02          	movss  xmm0,DWORD PTR [rdx]
   1d1d1:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d1d5:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   1d1d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1dd:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d1e1:	eb 21                	jmp    1d204 <stbi__hdr_convert(float*, unsigned char*, int)+0x1d5>
   1d1e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1e7:	48 83 c0 04          	add    rax,0x4
   1d1eb:	f3 0f 10 05 69 fb 01 00 	movss  xmm0,DWORD PTR [rip+0x1fb69]        # 3cd5c <NANO_SEC+0x1a94>
   1d1f3:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d1f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1fb:	66 0f ef c0          	pxor   xmm0,xmm0
   1d1ff:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d203:	90                   	nop
   1d204:	90                   	nop
   1d205:	c9                   	leave  
   1d206:	c3                   	ret    

000000000001d207 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1d207:	55                   	push   rbp
   1d208:	48 89 e5             	mov    rbp,rsp
   1d20b:	48 81 ec a0 04 00 00 	sub    rsp,0x4a0
   1d212:	48 89 bd 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rdi
   1d219:	48 89 b5 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rsi
   1d220:	48 89 95 78 fb ff ff 	mov    QWORD PTR [rbp-0x488],rdx
   1d227:	48 89 8d 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rcx
   1d22e:	44 89 85 6c fb ff ff 	mov    DWORD PTR [rbp-0x494],r8d
   1d235:	4c 89 8d 60 fb ff ff 	mov    QWORD PTR [rbp-0x4a0],r9
   1d23c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1d245:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1d249:	31 c0                	xor    eax,eax
   1d24b:	c7 85 9c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x464],0x0
   1d255:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1d25c:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d263:	48 89 d6             	mov    rsi,rdx
   1d266:	48 89 c7             	mov    rdi,rax
   1d269:	e8 f3 fc ff ff       	call   1cf61 <stbi__hdr_gettoken(stbi__context*, char*)>
   1d26e:	48 89 85 d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],rax
   1d275:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1d27c:	48 8d 35 7b df 01 00 	lea    rsi,[rip+0x1df7b]        # 3b1fe <stbi__depth_scale_table+0x606>
   1d283:	48 89 c7             	mov    rdi,rax
   1d286:	e8 75 73 fe ff       	call   4600 <strcmp@plt>
   1d28b:	85 c0                	test   eax,eax
   1d28d:	74 30                	je     1d2bf <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb8>
   1d28f:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1d296:	48 8d 35 6c df 01 00 	lea    rsi,[rip+0x1df6c]        # 3b209 <stbi__depth_scale_table+0x611>
   1d29d:	48 89 c7             	mov    rdi,rax
   1d2a0:	e8 5b 73 fe ff       	call   4600 <strcmp@plt>
   1d2a5:	85 c0                	test   eax,eax
   1d2a7:	74 16                	je     1d2bf <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb8>
   1d2a9:	48 8d 3d 60 df 01 00 	lea    rdi,[rip+0x1df60]        # 3b210 <stbi__depth_scale_table+0x618>
   1d2b0:	e8 8a 78 fe ff       	call   4b3f <stbi__err(char const*)>
   1d2b5:	b8 00 00 00 00       	mov    eax,0x0
   1d2ba:	e9 7c 07 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d2bf:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1d2c6:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d2cd:	48 89 d6             	mov    rsi,rdx
   1d2d0:	48 89 c7             	mov    rdi,rax
   1d2d3:	e8 89 fc ff ff       	call   1cf61 <stbi__hdr_gettoken(stbi__context*, char*)>
   1d2d8:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d2df:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d2e6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d2e9:	84 c0                	test   al,al
   1d2eb:	74 26                	je     1d313 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x10c>
   1d2ed:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d2f4:	48 8d 35 1d df 01 00 	lea    rsi,[rip+0x1df1d]        # 3b218 <stbi__depth_scale_table+0x620>
   1d2fb:	48 89 c7             	mov    rdi,rax
   1d2fe:	e8 fd 72 fe ff       	call   4600 <strcmp@plt>
   1d303:	85 c0                	test   eax,eax
   1d305:	75 b8                	jne    1d2bf <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb8>
   1d307:	c7 85 9c fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x464],0x1
   1d311:	eb ac                	jmp    1d2bf <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb8>
   1d313:	90                   	nop
   1d314:	83 bd 9c fb ff ff 00 	cmp    DWORD PTR [rbp-0x464],0x0
   1d31b:	75 16                	jne    1d333 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x12c>
   1d31d:	48 8d 3d 0b df 01 00 	lea    rdi,[rip+0x1df0b]        # 3b22f <stbi__depth_scale_table+0x637>
   1d324:	e8 16 78 fe ff       	call   4b3f <stbi__err(char const*)>
   1d329:	b8 00 00 00 00       	mov    eax,0x0
   1d32e:	e9 08 07 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d333:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1d33a:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d341:	48 89 d6             	mov    rsi,rdx
   1d344:	48 89 c7             	mov    rdi,rax
   1d347:	e8 15 fc ff ff       	call   1cf61 <stbi__hdr_gettoken(stbi__context*, char*)>
   1d34c:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d353:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d35a:	ba 03 00 00 00       	mov    edx,0x3
   1d35f:	48 8d 35 dc de 01 00 	lea    rsi,[rip+0x1dedc]        # 3b242 <stbi__depth_scale_table+0x64a>
   1d366:	48 89 c7             	mov    rdi,rax
   1d369:	e8 32 6e fe ff       	call   41a0 <strncmp@plt>
   1d36e:	85 c0                	test   eax,eax
   1d370:	74 16                	je     1d388 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x181>
   1d372:	48 8d 3d cd de 01 00 	lea    rdi,[rip+0x1decd]        # 3b246 <stbi__depth_scale_table+0x64e>
   1d379:	e8 c1 77 fe ff       	call   4b3f <stbi__err(char const*)>
   1d37e:	b8 00 00 00 00       	mov    eax,0x0
   1d383:	e9 b3 06 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d388:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d38f:	48 83 c0 03          	add    rax,0x3
   1d393:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d39a:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d3a1:	48 8d 8d c8 fb ff ff 	lea    rcx,[rbp-0x438]
   1d3a8:	ba 0a 00 00 00       	mov    edx,0xa
   1d3ad:	48 89 ce             	mov    rsi,rcx
   1d3b0:	48 89 c7             	mov    rdi,rax
   1d3b3:	e8 38 74 fe ff       	call   47f0 <strtol@plt>
   1d3b8:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
   1d3be:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d3c5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d3c8:	3c 20                	cmp    al,0x20
   1d3ca:	75 14                	jne    1d3e0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1d9>
   1d3cc:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d3d3:	48 83 c0 01          	add    rax,0x1
   1d3d7:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d3de:	eb de                	jmp    1d3be <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1b7>
   1d3e0:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d3e7:	ba 03 00 00 00       	mov    edx,0x3
   1d3ec:	48 8d 35 6b de 01 00 	lea    rsi,[rip+0x1de6b]        # 3b25e <stbi__depth_scale_table+0x666>
   1d3f3:	48 89 c7             	mov    rdi,rax
   1d3f6:	e8 a5 6d fe ff       	call   41a0 <strncmp@plt>
   1d3fb:	85 c0                	test   eax,eax
   1d3fd:	74 16                	je     1d415 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x20e>
   1d3ff:	48 8d 3d 40 de 01 00 	lea    rdi,[rip+0x1de40]        # 3b246 <stbi__depth_scale_table+0x64e>
   1d406:	e8 34 77 fe ff       	call   4b3f <stbi__err(char const*)>
   1d40b:	b8 00 00 00 00       	mov    eax,0x0
   1d410:	e9 26 06 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d415:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d41c:	48 83 c0 03          	add    rax,0x3
   1d420:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d427:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d42e:	ba 0a 00 00 00       	mov    edx,0xa
   1d433:	be 00 00 00 00       	mov    esi,0x0
   1d438:	48 89 c7             	mov    rdi,rax
   1d43b:	e8 b0 73 fe ff       	call   47f0 <strtol@plt>
   1d440:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
   1d446:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
   1d44d:	8b 95 b4 fb ff ff    	mov    edx,DWORD PTR [rbp-0x44c]
   1d453:	89 10                	mov    DWORD PTR [rax],edx
   1d455:	48 8b 85 78 fb ff ff 	mov    rax,QWORD PTR [rbp-0x488]
   1d45c:	8b 95 b0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x450]
   1d462:	89 10                	mov    DWORD PTR [rax],edx
   1d464:	48 83 bd 70 fb ff ff 00 	cmp    QWORD PTR [rbp-0x490],0x0
   1d46c:	74 0d                	je     1d47b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x274>
   1d46e:	48 8b 85 70 fb ff ff 	mov    rax,QWORD PTR [rbp-0x490]
   1d475:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
   1d47b:	83 bd 6c fb ff ff 00 	cmp    DWORD PTR [rbp-0x494],0x0
   1d482:	75 0a                	jne    1d48e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x287>
   1d484:	c7 85 6c fb ff ff 03 00 00 00 	mov    DWORD PTR [rbp-0x494],0x3
   1d48e:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d494:	8b b5 b0 fb ff ff    	mov    esi,DWORD PTR [rbp-0x450]
   1d49a:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1d4a0:	41 b8 00 00 00 00    	mov    r8d,0x0
   1d4a6:	b9 04 00 00 00       	mov    ecx,0x4
   1d4ab:	89 c7                	mov    edi,eax
   1d4ad:	e8 e1 77 fe ff       	call   4c93 <stbi__mad4sizes_valid(int, int, int, int, int)>
   1d4b2:	85 c0                	test   eax,eax
   1d4b4:	0f 94 c0             	sete   al
   1d4b7:	84 c0                	test   al,al
   1d4b9:	74 16                	je     1d4d1 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2ca>
   1d4bb:	48 8d 3d 8a d1 01 00 	lea    rdi,[rip+0x1d18a]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1d4c2:	e8 78 76 fe ff       	call   4b3f <stbi__err(char const*)>
   1d4c7:	b8 00 00 00 00       	mov    eax,0x0
   1d4cc:	e9 6a 05 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d4d1:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d4d7:	8b b5 b0 fb ff ff    	mov    esi,DWORD PTR [rbp-0x450]
   1d4dd:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1d4e3:	41 b8 00 00 00 00    	mov    r8d,0x0
   1d4e9:	b9 04 00 00 00       	mov    ecx,0x4
   1d4ee:	89 c7                	mov    edi,eax
   1d4f0:	e8 cf 78 fe ff       	call   4dc4 <stbi__malloc_mad4(int, int, int, int, int)>
   1d4f5:	48 89 85 e0 fb ff ff 	mov    QWORD PTR [rbp-0x420],rax
   1d4fc:	48 83 bd e0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x420],0x0
   1d504:	75 16                	jne    1d51c <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x315>
   1d506:	48 8d 3d 26 cb 01 00 	lea    rdi,[rip+0x1cb26]        # 3a033 <_IO_stdin_used+0x33>
   1d50d:	e8 2d 76 fe ff       	call   4b3f <stbi__err(char const*)>
   1d512:	b8 00 00 00 00       	mov    eax,0x0
   1d517:	e9 1f 05 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d51c:	83 bd b4 fb ff ff 07 	cmp    DWORD PTR [rbp-0x44c],0x7
   1d523:	7e 10                	jle    1d535 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x32e>
   1d525:	81 bd b4 fb ff ff ff 7f 00 00 	cmp    DWORD PTR [rbp-0x44c],0x7fff
   1d52f:	0f 8e bf 00 00 00    	jle    1d5f4 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3ed>
   1d535:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   1d53f:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1d545:	3b 85 b0 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x450]
   1d54b:	0f 8d e2 04 00 00    	jge    1da33 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x82c>
   1d551:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1d55b:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d561:	3b 85 b4 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x44c]
   1d567:	7d 7f                	jge    1d5e8 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3e1>
   1d569:	90                   	nop
   1d56a:	48 8d 8d ec fb ff ff 	lea    rcx,[rbp-0x414]
   1d571:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d578:	ba 04 00 00 00       	mov    edx,0x4
   1d57d:	48 89 ce             	mov    rsi,rcx
   1d580:	48 89 c7             	mov    rdi,rax
   1d583:	e8 d6 90 fe ff       	call   665e <stbi__getn(stbi__context*, unsigned char*, int)>
   1d588:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1d58e:	0f af 85 b4 fb ff ff 	imul   eax,DWORD PTR [rbp-0x44c]
   1d595:	0f af 85 6c fb ff ff 	imul   eax,DWORD PTR [rbp-0x494]
   1d59c:	48 63 d0             	movsxd rdx,eax
   1d59f:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d5a5:	0f af 85 6c fb ff ff 	imul   eax,DWORD PTR [rbp-0x494]
   1d5ac:	48 98                	cdqe   
   1d5ae:	48 01 d0             	add    rax,rdx
   1d5b1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d5b9:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d5c0:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1d5c4:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d5ca:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
   1d5d1:	48 89 c6             	mov    rsi,rax
   1d5d4:	48 89 cf             	mov    rdi,rcx
   1d5d7:	e8 53 fa ff ff       	call   1d02f <stbi__hdr_convert(float*, unsigned char*, int)>
   1d5dc:	83 85 a0 fb ff ff 01 	add    DWORD PTR [rbp-0x460],0x1
   1d5e3:	e9 73 ff ff ff       	jmp    1d55b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x354>
   1d5e8:	83 85 a4 fb ff ff 01 	add    DWORD PTR [rbp-0x45c],0x1
   1d5ef:	e9 4b ff ff ff       	jmp    1d53f <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x338>
   1d5f4:	48 c7 85 d0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x430],0x0
   1d5ff:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   1d609:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1d60f:	3b 85 b0 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x450]
   1d615:	0f 8d fd 03 00 00    	jge    1da18 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x811>
   1d61b:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d622:	48 89 c7             	mov    rdi,rax
   1d625:	e8 85 8e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d62a:	0f b6 c0             	movzx  eax,al
   1d62d:	89 85 b8 fb ff ff    	mov    DWORD PTR [rbp-0x448],eax
   1d633:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d63a:	48 89 c7             	mov    rdi,rax
   1d63d:	e8 6d 8e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d642:	0f b6 c0             	movzx  eax,al
   1d645:	89 85 bc fb ff ff    	mov    DWORD PTR [rbp-0x444],eax
   1d64b:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d652:	48 89 c7             	mov    rdi,rax
   1d655:	e8 55 8e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d65a:	0f b6 c0             	movzx  eax,al
   1d65d:	89 85 c0 fb ff ff    	mov    DWORD PTR [rbp-0x440],eax
   1d663:	83 bd b8 fb ff ff 02 	cmp    DWORD PTR [rbp-0x448],0x2
   1d66a:	75 1c                	jne    1d688 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x481>
   1d66c:	83 bd bc fb ff ff 02 	cmp    DWORD PTR [rbp-0x444],0x2
   1d673:	75 13                	jne    1d688 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x481>
   1d675:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   1d67b:	25 80 00 00 00       	and    eax,0x80
   1d680:	85 c0                	test   eax,eax
   1d682:	0f 84 80 00 00 00    	je     1d708 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x501>
   1d688:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   1d68e:	88 85 ec fb ff ff    	mov    BYTE PTR [rbp-0x414],al
   1d694:	8b 85 bc fb ff ff    	mov    eax,DWORD PTR [rbp-0x444]
   1d69a:	88 85 ed fb ff ff    	mov    BYTE PTR [rbp-0x413],al
   1d6a0:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   1d6a6:	88 85 ee fb ff ff    	mov    BYTE PTR [rbp-0x412],al
   1d6ac:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d6b3:	48 89 c7             	mov    rdi,rax
   1d6b6:	e8 f4 8d fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d6bb:	88 85 ef fb ff ff    	mov    BYTE PTR [rbp-0x411],al
   1d6c1:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d6c7:	48 8d 8d ec fb ff ff 	lea    rcx,[rbp-0x414]
   1d6ce:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d6d5:	48 89 ce             	mov    rsi,rcx
   1d6d8:	48 89 c7             	mov    rdi,rax
   1d6db:	e8 4f f9 ff ff       	call   1d02f <stbi__hdr_convert(float*, unsigned char*, int)>
   1d6e0:	c7 85 a0 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x460],0x1
   1d6ea:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   1d6f4:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1d6fb:	48 89 c7             	mov    rdi,rax
   1d6fe:	e8 fd 6d fe ff       	call   4500 <free@plt>
   1d703:	e9 62 fe ff ff       	jmp    1d56a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x363>
   1d708:	c1 a5 c0 fb ff ff 08 	shl    DWORD PTR [rbp-0x440],0x8
   1d70f:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d716:	48 89 c7             	mov    rdi,rax
   1d719:	e8 91 8d fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d71e:	0f b6 c0             	movzx  eax,al
   1d721:	09 85 c0 fb ff ff    	or     DWORD PTR [rbp-0x440],eax
   1d727:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   1d72d:	3b 85 b4 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x44c]
   1d733:	74 34                	je     1d769 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x562>
   1d735:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d73c:	48 89 c7             	mov    rdi,rax
   1d73f:	e8 bc 6d fe ff       	call   4500 <free@plt>
   1d744:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1d74b:	48 89 c7             	mov    rdi,rax
   1d74e:	e8 ad 6d fe ff       	call   4500 <free@plt>
   1d753:	48 8d 3d 0e db 01 00 	lea    rdi,[rip+0x1db0e]        # 3b268 <stbi__depth_scale_table+0x670>
   1d75a:	e8 e0 73 fe ff       	call   4b3f <stbi__err(char const*)>
   1d75f:	b8 00 00 00 00       	mov    eax,0x0
   1d764:	e9 d2 02 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d769:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1d771:	75 4d                	jne    1d7c0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5b9>
   1d773:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1d779:	ba 00 00 00 00       	mov    edx,0x0
   1d77e:	be 04 00 00 00       	mov    esi,0x4
   1d783:	89 c7                	mov    edi,eax
   1d785:	e8 96 75 fe ff       	call   4d20 <stbi__malloc_mad2(int, int, int)>
   1d78a:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
   1d791:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1d799:	75 25                	jne    1d7c0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5b9>
   1d79b:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d7a2:	48 89 c7             	mov    rdi,rax
   1d7a5:	e8 56 6d fe ff       	call   4500 <free@plt>
   1d7aa:	48 8d 3d 82 c8 01 00 	lea    rdi,[rip+0x1c882]        # 3a033 <_IO_stdin_used+0x33>
   1d7b1:	e8 89 73 fe ff       	call   4b3f <stbi__err(char const*)>
   1d7b6:	b8 00 00 00 00       	mov    eax,0x0
   1d7bb:	e9 7b 02 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d7c0:	c7 85 a8 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x458],0x0
   1d7ca:	83 bd a8 fb ff ff 03 	cmp    DWORD PTR [rbp-0x458],0x3
   1d7d1:	0f 8f ba 01 00 00    	jg     1d991 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x78a>
   1d7d7:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1d7e1:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1d7e7:	2b 85 a0 fb ff ff    	sub    eax,DWORD PTR [rbp-0x460]
   1d7ed:	89 85 c4 fb ff ff    	mov    DWORD PTR [rbp-0x43c],eax
   1d7f3:	83 bd c4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x43c],0x0
   1d7fa:	0f 9f c0             	setg   al
   1d7fd:	84 c0                	test   al,al
   1d7ff:	0f 84 80 01 00 00    	je     1d985 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x77e>
   1d805:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d80c:	48 89 c7             	mov    rdi,rax
   1d80f:	e8 9b 8c fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d814:	88 85 9a fb ff ff    	mov    BYTE PTR [rbp-0x466],al
   1d81a:	80 bd 9a fb ff ff 80 	cmp    BYTE PTR [rbp-0x466],0x80
   1d821:	0f 86 b8 00 00 00    	jbe    1d8df <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6d8>
   1d827:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d82e:	48 89 c7             	mov    rdi,rax
   1d831:	e8 79 8c fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d836:	88 85 9b fb ff ff    	mov    BYTE PTR [rbp-0x465],al
   1d83c:	80 85 9a fb ff ff 80 	add    BYTE PTR [rbp-0x466],0x80
   1d843:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1d84a:	39 85 c4 fb ff ff    	cmp    DWORD PTR [rbp-0x43c],eax
   1d850:	7d 34                	jge    1d886 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x67f>
   1d852:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d859:	48 89 c7             	mov    rdi,rax
   1d85c:	e8 9f 6c fe ff       	call   4500 <free@plt>
   1d861:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1d868:	48 89 c7             	mov    rdi,rax
   1d86b:	e8 90 6c fe ff       	call   4500 <free@plt>
   1d870:	48 8d 3d e5 d8 01 00 	lea    rdi,[rip+0x1d8e5]        # 3b15c <stbi__depth_scale_table+0x564>
   1d877:	e8 c3 72 fe ff       	call   4b3f <stbi__err(char const*)>
   1d87c:	b8 00 00 00 00       	mov    eax,0x0
   1d881:	e9 b5 01 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d886:	c7 85 ac fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x454],0x0
   1d890:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1d897:	39 85 ac fb ff ff    	cmp    DWORD PTR [rbp-0x454],eax
   1d89d:	0f 8d 3e ff ff ff    	jge    1d7e1 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5da>
   1d8a3:	0f b6 95 9b fb ff ff 	movzx  edx,BYTE PTR [rbp-0x465]
   1d8aa:	48 8b b5 d0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x430]
   1d8b1:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d8b7:	8d 48 01             	lea    ecx,[rax+0x1]
   1d8ba:	89 8d a0 fb ff ff    	mov    DWORD PTR [rbp-0x460],ecx
   1d8c0:	8d 0c 85 00 00 00 00 	lea    ecx,[rax*4+0x0]
   1d8c7:	8b 85 a8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x458]
   1d8cd:	01 c8                	add    eax,ecx
   1d8cf:	48 98                	cdqe   
   1d8d1:	48 01 f0             	add    rax,rsi
   1d8d4:	88 10                	mov    BYTE PTR [rax],dl
   1d8d6:	83 85 ac fb ff ff 01 	add    DWORD PTR [rbp-0x454],0x1
   1d8dd:	eb b1                	jmp    1d890 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x689>
   1d8df:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1d8e6:	39 85 c4 fb ff ff    	cmp    DWORD PTR [rbp-0x43c],eax
   1d8ec:	7d 34                	jge    1d922 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x71b>
   1d8ee:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d8f5:	48 89 c7             	mov    rdi,rax
   1d8f8:	e8 03 6c fe ff       	call   4500 <free@plt>
   1d8fd:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1d904:	48 89 c7             	mov    rdi,rax
   1d907:	e8 f4 6b fe ff       	call   4500 <free@plt>
   1d90c:	48 8d 3d 49 d8 01 00 	lea    rdi,[rip+0x1d849]        # 3b15c <stbi__depth_scale_table+0x564>
   1d913:	e8 27 72 fe ff       	call   4b3f <stbi__err(char const*)>
   1d918:	b8 00 00 00 00       	mov    eax,0x0
   1d91d:	e9 19 01 00 00       	jmp    1da3b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d922:	c7 85 ac fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x454],0x0
   1d92c:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1d933:	39 85 ac fb ff ff    	cmp    DWORD PTR [rbp-0x454],eax
   1d939:	0f 8d a2 fe ff ff    	jge    1d7e1 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5da>
   1d93f:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d946:	48 89 c7             	mov    rdi,rax
   1d949:	e8 61 8b fe ff       	call   64af <stbi__get8(stbi__context*)>
   1d94e:	89 c2                	mov    edx,eax
   1d950:	48 8b b5 d0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x430]
   1d957:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d95d:	8d 48 01             	lea    ecx,[rax+0x1]
   1d960:	89 8d a0 fb ff ff    	mov    DWORD PTR [rbp-0x460],ecx
   1d966:	8d 0c 85 00 00 00 00 	lea    ecx,[rax*4+0x0]
   1d96d:	8b 85 a8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x458]
   1d973:	01 c8                	add    eax,ecx
   1d975:	48 98                	cdqe   
   1d977:	48 01 f0             	add    rax,rsi
   1d97a:	88 10                	mov    BYTE PTR [rax],dl
   1d97c:	83 85 ac fb ff ff 01 	add    DWORD PTR [rbp-0x454],0x1
   1d983:	eb a7                	jmp    1d92c <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x725>
   1d985:	83 85 a8 fb ff ff 01 	add    DWORD PTR [rbp-0x458],0x1
   1d98c:	e9 39 fe ff ff       	jmp    1d7ca <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5c3>
   1d991:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1d99b:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d9a1:	3b 85 b4 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x44c]
   1d9a7:	7d 63                	jge    1da0c <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x805>
   1d9a9:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d9af:	c1 e0 02             	shl    eax,0x2
   1d9b2:	48 63 d0             	movsxd rdx,eax
   1d9b5:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1d9bc:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   1d9c0:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1d9c6:	0f af 85 b4 fb ff ff 	imul   eax,DWORD PTR [rbp-0x44c]
   1d9cd:	89 c2                	mov    edx,eax
   1d9cf:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d9d5:	01 d0                	add    eax,edx
   1d9d7:	0f af 85 6c fb ff ff 	imul   eax,DWORD PTR [rbp-0x494]
   1d9de:	48 98                	cdqe   
   1d9e0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d9e8:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d9ef:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1d9f3:	8b 85 6c fb ff ff    	mov    eax,DWORD PTR [rbp-0x494]
   1d9f9:	89 c2                	mov    edx,eax
   1d9fb:	48 89 cf             	mov    rdi,rcx
   1d9fe:	e8 2c f6 ff ff       	call   1d02f <stbi__hdr_convert(float*, unsigned char*, int)>
   1da03:	83 85 a0 fb ff ff 01 	add    DWORD PTR [rbp-0x460],0x1
   1da0a:	eb 8f                	jmp    1d99b <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x794>
   1da0c:	83 85 a4 fb ff ff 01 	add    DWORD PTR [rbp-0x45c],0x1
   1da13:	e9 f1 fb ff ff       	jmp    1d609 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x402>
   1da18:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1da20:	74 12                	je     1da34 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x82d>
   1da22:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1da29:	48 89 c7             	mov    rdi,rax
   1da2c:	e8 cf 6a fe ff       	call   4500 <free@plt>
   1da31:	eb 01                	jmp    1da34 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x82d>
   1da33:	90                   	nop
   1da34:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1da3b:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1da3f:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1da48:	74 05                	je     1da4f <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x848>
   1da4a:	e8 61 6a fe ff       	call   44b0 <__stack_chk_fail@plt>
   1da4f:	c9                   	leave  
   1da50:	c3                   	ret    

000000000001da51 <stbi__hdr_info(stbi__context*, int*, int*, int*)>:
   1da51:	55                   	push   rbp
   1da52:	48 89 e5             	mov    rbp,rsp
   1da55:	48 81 ec 40 04 00 00 	sub    rsp,0x440
   1da5c:	48 89 bd d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],rdi
   1da63:	48 89 b5 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rsi
   1da6a:	48 89 95 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rdx
   1da71:	48 89 8d c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rcx
   1da78:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1da81:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1da85:	31 c0                	xor    eax,eax
   1da87:	c7 85 e4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x41c],0x0
   1da91:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1da99:	75 0e                	jne    1daa9 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x58>
   1da9b:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   1daa2:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
   1daa9:	48 83 bd c8 fb ff ff 00 	cmp    QWORD PTR [rbp-0x438],0x0
   1dab1:	75 0e                	jne    1dac1 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x70>
   1dab3:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   1daba:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1dac1:	48 83 bd c0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x440],0x0
   1dac9:	75 0e                	jne    1dad9 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x88>
   1dacb:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   1dad2:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
   1dad9:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1dae0:	48 89 c7             	mov    rdi,rax
   1dae3:	e8 1e f4 ff ff       	call   1cf06 <stbi__hdr_test(stbi__context*)>
   1dae8:	85 c0                	test   eax,eax
   1daea:	0f 94 c0             	sete   al
   1daed:	84 c0                	test   al,al
   1daef:	74 19                	je     1db0a <stbi__hdr_info(stbi__context*, int*, int*, int*)+0xb9>
   1daf1:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1daf8:	48 89 c7             	mov    rdi,rax
   1dafb:	e8 f9 6f fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1db00:	b8 00 00 00 00       	mov    eax,0x0
   1db05:	e9 a9 01 00 00       	jmp    1dcb3 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x262>
   1db0a:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1db11:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1db18:	48 89 d6             	mov    rsi,rdx
   1db1b:	48 89 c7             	mov    rdi,rax
   1db1e:	e8 3e f4 ff ff       	call   1cf61 <stbi__hdr_gettoken(stbi__context*, char*)>
   1db23:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1db2a:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1db31:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1db34:	84 c0                	test   al,al
   1db36:	74 26                	je     1db5e <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x10d>
   1db38:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1db3f:	48 8d 35 d2 d6 01 00 	lea    rsi,[rip+0x1d6d2]        # 3b218 <stbi__depth_scale_table+0x620>
   1db46:	48 89 c7             	mov    rdi,rax
   1db49:	e8 b2 6a fe ff       	call   4600 <strcmp@plt>
   1db4e:	85 c0                	test   eax,eax
   1db50:	75 b8                	jne    1db0a <stbi__hdr_info(stbi__context*, int*, int*, int*)+0xb9>
   1db52:	c7 85 e4 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x41c],0x1
   1db5c:	eb ac                	jmp    1db0a <stbi__hdr_info(stbi__context*, int*, int*, int*)+0xb9>
   1db5e:	90                   	nop
   1db5f:	83 bd e4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x41c],0x0
   1db66:	75 19                	jne    1db81 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x130>
   1db68:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1db6f:	48 89 c7             	mov    rdi,rax
   1db72:	e8 82 6f fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1db77:	b8 00 00 00 00       	mov    eax,0x0
   1db7c:	e9 32 01 00 00       	jmp    1dcb3 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x262>
   1db81:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1db88:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1db8f:	48 89 d6             	mov    rsi,rdx
   1db92:	48 89 c7             	mov    rdi,rax
   1db95:	e8 c7 f3 ff ff       	call   1cf61 <stbi__hdr_gettoken(stbi__context*, char*)>
   1db9a:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1dba1:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dba8:	ba 03 00 00 00       	mov    edx,0x3
   1dbad:	48 8d 35 8e d6 01 00 	lea    rsi,[rip+0x1d68e]        # 3b242 <stbi__depth_scale_table+0x64a>
   1dbb4:	48 89 c7             	mov    rdi,rax
   1dbb7:	e8 e4 65 fe ff       	call   41a0 <strncmp@plt>
   1dbbc:	85 c0                	test   eax,eax
   1dbbe:	74 19                	je     1dbd9 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x188>
   1dbc0:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1dbc7:	48 89 c7             	mov    rdi,rax
   1dbca:	e8 2a 6f fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1dbcf:	b8 00 00 00 00       	mov    eax,0x0
   1dbd4:	e9 da 00 00 00       	jmp    1dcb3 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x262>
   1dbd9:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dbe0:	48 83 c0 03          	add    rax,0x3
   1dbe4:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1dbeb:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dbf2:	48 8d 8d e8 fb ff ff 	lea    rcx,[rbp-0x418]
   1dbf9:	ba 0a 00 00 00       	mov    edx,0xa
   1dbfe:	48 89 ce             	mov    rsi,rcx
   1dc01:	48 89 c7             	mov    rdi,rax
   1dc04:	e8 e7 6b fe ff       	call   47f0 <strtol@plt>
   1dc09:	89 c2                	mov    edx,eax
   1dc0b:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1dc12:	89 10                	mov    DWORD PTR [rax],edx
   1dc14:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dc1b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1dc1e:	3c 20                	cmp    al,0x20
   1dc20:	75 14                	jne    1dc36 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x1e5>
   1dc22:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dc29:	48 83 c0 01          	add    rax,0x1
   1dc2d:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1dc34:	eb de                	jmp    1dc14 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x1c3>
   1dc36:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dc3d:	ba 03 00 00 00       	mov    edx,0x3
   1dc42:	48 8d 35 15 d6 01 00 	lea    rsi,[rip+0x1d615]        # 3b25e <stbi__depth_scale_table+0x666>
   1dc49:	48 89 c7             	mov    rdi,rax
   1dc4c:	e8 4f 65 fe ff       	call   41a0 <strncmp@plt>
   1dc51:	85 c0                	test   eax,eax
   1dc53:	74 16                	je     1dc6b <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x21a>
   1dc55:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1dc5c:	48 89 c7             	mov    rdi,rax
   1dc5f:	e8 95 6e fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1dc64:	b8 00 00 00 00       	mov    eax,0x0
   1dc69:	eb 48                	jmp    1dcb3 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x262>
   1dc6b:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dc72:	48 83 c0 03          	add    rax,0x3
   1dc76:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1dc7d:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dc84:	ba 0a 00 00 00       	mov    edx,0xa
   1dc89:	be 00 00 00 00       	mov    esi,0x0
   1dc8e:	48 89 c7             	mov    rdi,rax
   1dc91:	e8 5a 6b fe ff       	call   47f0 <strtol@plt>
   1dc96:	89 c2                	mov    edx,eax
   1dc98:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1dc9f:	89 10                	mov    DWORD PTR [rax],edx
   1dca1:	48 8b 85 c0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x440]
   1dca8:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
   1dcae:	b8 01 00 00 00       	mov    eax,0x1
   1dcb3:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1dcb7:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1dcc0:	74 05                	je     1dcc7 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x276>
   1dcc2:	e8 e9 67 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1dcc7:	c9                   	leave  
   1dcc8:	c3                   	ret    

000000000001dcc9 <stbi__bmp_info(stbi__context*, int*, int*, int*)>:
   1dcc9:	55                   	push   rbp
   1dcca:	48 89 e5             	mov    rbp,rsp
   1dccd:	48 83 ec 60          	sub    rsp,0x60
   1dcd1:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1dcd5:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1dcd9:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   1dcdd:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
   1dce1:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1dcea:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1dcee:	31 c0                	xor    eax,eax
   1dcf0:	c7 45 ec ff 00 00 00 	mov    DWORD PTR [rbp-0x14],0xff
   1dcf7:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   1dcfb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1dcff:	48 89 d6             	mov    rsi,rdx
   1dd02:	48 89 c7             	mov    rdi,rax
   1dd05:	e8 4f a6 ff ff       	call   18359 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)>
   1dd0a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1dd0e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1dd12:	48 89 c7             	mov    rdi,rax
   1dd15:	e8 df 6d fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1dd1a:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1dd1f:	75 07                	jne    1dd28 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0x5f>
   1dd21:	b8 00 00 00 00       	mov    eax,0x0
   1dd26:	eb 6e                	jmp    1dd96 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xcd>
   1dd28:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   1dd2d:	74 0e                	je     1dd3d <stbi__bmp_info(stbi__context*, int*, int*, int*)+0x74>
   1dd2f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1dd33:	8b 00                	mov    eax,DWORD PTR [rax]
   1dd35:	89 c2                	mov    edx,eax
   1dd37:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1dd3b:	89 10                	mov    DWORD PTR [rax],edx
   1dd3d:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   1dd42:	74 0f                	je     1dd53 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0x8a>
   1dd44:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1dd48:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1dd4b:	89 c2                	mov    edx,eax
   1dd4d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1dd51:	89 10                	mov    DWORD PTR [rax],edx
   1dd53:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   1dd58:	74 37                	je     1dd91 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xc8>
   1dd5a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1dd5d:	83 f8 18             	cmp    eax,0x18
   1dd60:	75 16                	jne    1dd78 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xaf>
   1dd62:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1dd65:	3d 00 00 00 ff       	cmp    eax,0xff000000
   1dd6a:	75 0c                	jne    1dd78 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xaf>
   1dd6c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1dd70:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
   1dd76:	eb 19                	jmp    1dd91 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xc8>
   1dd78:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1dd7b:	85 c0                	test   eax,eax
   1dd7d:	74 07                	je     1dd86 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xbd>
   1dd7f:	ba 04 00 00 00       	mov    edx,0x4
   1dd84:	eb 05                	jmp    1dd8b <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xc2>
   1dd86:	ba 03 00 00 00       	mov    edx,0x3
   1dd8b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1dd8f:	89 10                	mov    DWORD PTR [rax],edx
   1dd91:	b8 01 00 00 00       	mov    eax,0x1
   1dd96:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1dd9a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1dda3:	74 05                	je     1ddaa <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xe1>
   1dda5:	e8 06 67 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1ddaa:	c9                   	leave  
   1ddab:	c3                   	ret    

000000000001ddac <stbi__psd_info(stbi__context*, int*, int*, int*)>:
   1ddac:	55                   	push   rbp
   1ddad:	48 89 e5             	mov    rbp,rsp
   1ddb0:	48 83 ec 40          	sub    rsp,0x40
   1ddb4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1ddb8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1ddbc:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1ddc0:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   1ddc4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ddcd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ddd1:	31 c0                	xor    eax,eax
   1ddd3:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1ddd8:	75 08                	jne    1dde2 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x36>
   1ddda:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   1ddde:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1dde2:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1dde7:	75 08                	jne    1ddf1 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x45>
   1dde9:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   1dded:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1ddf1:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1ddf6:	75 08                	jne    1de00 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x54>
   1ddf8:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   1ddfc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1de00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de04:	48 89 c7             	mov    rdi,rax
   1de07:	e8 c4 89 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1de0c:	3d 53 50 42 38       	cmp    eax,0x38425053
   1de11:	0f 95 c0             	setne  al
   1de14:	84 c0                	test   al,al
   1de16:	74 16                	je     1de2e <stbi__psd_info(stbi__context*, int*, int*, int*)+0x82>
   1de18:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de1c:	48 89 c7             	mov    rdi,rax
   1de1f:	e8 d5 6c fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1de24:	b8 00 00 00 00       	mov    eax,0x0
   1de29:	e9 fc 00 00 00       	jmp    1df2a <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1de2e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de32:	48 89 c7             	mov    rdi,rax
   1de35:	e8 58 89 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1de3a:	83 f8 01             	cmp    eax,0x1
   1de3d:	0f 95 c0             	setne  al
   1de40:	84 c0                	test   al,al
   1de42:	74 16                	je     1de5a <stbi__psd_info(stbi__context*, int*, int*, int*)+0xae>
   1de44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de48:	48 89 c7             	mov    rdi,rax
   1de4b:	e8 a9 6c fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1de50:	b8 00 00 00 00       	mov    eax,0x0
   1de55:	e9 d0 00 00 00       	jmp    1df2a <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1de5a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de5e:	be 06 00 00 00       	mov    esi,0x6
   1de63:	48 89 c7             	mov    rdi,rax
   1de66:	e8 38 87 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1de6b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de6f:	48 89 c7             	mov    rdi,rax
   1de72:	e8 1b 89 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1de77:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1de7a:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   1de7e:	78 06                	js     1de86 <stbi__psd_info(stbi__context*, int*, int*, int*)+0xda>
   1de80:	83 7d f0 10          	cmp    DWORD PTR [rbp-0x10],0x10
   1de84:	7e 16                	jle    1de9c <stbi__psd_info(stbi__context*, int*, int*, int*)+0xf0>
   1de86:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1de8a:	48 89 c7             	mov    rdi,rax
   1de8d:	e8 67 6c fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1de92:	b8 00 00 00 00       	mov    eax,0x0
   1de97:	e9 8e 00 00 00       	jmp    1df2a <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1de9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1dea0:	48 89 c7             	mov    rdi,rax
   1dea3:	e8 28 89 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1dea8:	89 c2                	mov    edx,eax
   1deaa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1deae:	89 10                	mov    DWORD PTR [rax],edx
   1deb0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1deb4:	48 89 c7             	mov    rdi,rax
   1deb7:	e8 14 89 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1debc:	89 c2                	mov    edx,eax
   1debe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1dec2:	89 10                	mov    DWORD PTR [rax],edx
   1dec4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1dec8:	48 89 c7             	mov    rdi,rax
   1decb:	e8 c2 88 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1ded0:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1ded3:	83 7d f4 08          	cmp    DWORD PTR [rbp-0xc],0x8
   1ded7:	74 19                	je     1def2 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x146>
   1ded9:	83 7d f4 10          	cmp    DWORD PTR [rbp-0xc],0x10
   1dedd:	74 13                	je     1def2 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x146>
   1dedf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1dee3:	48 89 c7             	mov    rdi,rax
   1dee6:	e8 0e 6c fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1deeb:	b8 00 00 00 00       	mov    eax,0x0
   1def0:	eb 38                	jmp    1df2a <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1def2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1def6:	48 89 c7             	mov    rdi,rax
   1def9:	e8 94 88 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1defe:	83 f8 03             	cmp    eax,0x3
   1df01:	0f 95 c0             	setne  al
   1df04:	84 c0                	test   al,al
   1df06:	74 13                	je     1df1b <stbi__psd_info(stbi__context*, int*, int*, int*)+0x16f>
   1df08:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1df0c:	48 89 c7             	mov    rdi,rax
   1df0f:	e8 e5 6b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1df14:	b8 00 00 00 00       	mov    eax,0x0
   1df19:	eb 0f                	jmp    1df2a <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1df1b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1df1f:	c7 00 04 00 00 00    	mov    DWORD PTR [rax],0x4
   1df25:	b8 01 00 00 00       	mov    eax,0x1
   1df2a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1df2e:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1df37:	74 05                	je     1df3e <stbi__psd_info(stbi__context*, int*, int*, int*)+0x192>
   1df39:	e8 72 65 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1df3e:	c9                   	leave  
   1df3f:	c3                   	ret    

000000000001df40 <stbi__psd_is16(stbi__context*)>:
   1df40:	55                   	push   rbp
   1df41:	48 89 e5             	mov    rbp,rsp
   1df44:	48 83 ec 20          	sub    rsp,0x20
   1df48:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1df4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1df50:	48 89 c7             	mov    rdi,rax
   1df53:	e8 78 88 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1df58:	3d 53 50 42 38       	cmp    eax,0x38425053
   1df5d:	0f 95 c0             	setne  al
   1df60:	84 c0                	test   al,al
   1df62:	74 16                	je     1df7a <stbi__psd_is16(stbi__context*)+0x3a>
   1df64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1df68:	48 89 c7             	mov    rdi,rax
   1df6b:	e8 89 6b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1df70:	b8 00 00 00 00       	mov    eax,0x0
   1df75:	e9 b0 00 00 00       	jmp    1e02a <stbi__psd_is16(stbi__context*)+0xea>
   1df7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1df7e:	48 89 c7             	mov    rdi,rax
   1df81:	e8 0c 88 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1df86:	83 f8 01             	cmp    eax,0x1
   1df89:	0f 95 c0             	setne  al
   1df8c:	84 c0                	test   al,al
   1df8e:	74 16                	je     1dfa6 <stbi__psd_is16(stbi__context*)+0x66>
   1df90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1df94:	48 89 c7             	mov    rdi,rax
   1df97:	e8 5d 6b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1df9c:	b8 00 00 00 00       	mov    eax,0x0
   1dfa1:	e9 84 00 00 00       	jmp    1e02a <stbi__psd_is16(stbi__context*)+0xea>
   1dfa6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1dfaa:	be 06 00 00 00       	mov    esi,0x6
   1dfaf:	48 89 c7             	mov    rdi,rax
   1dfb2:	e8 ec 85 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1dfb7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1dfbb:	48 89 c7             	mov    rdi,rax
   1dfbe:	e8 cf 87 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1dfc3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1dfc6:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   1dfca:	78 06                	js     1dfd2 <stbi__psd_is16(stbi__context*)+0x92>
   1dfcc:	83 7d f8 10          	cmp    DWORD PTR [rbp-0x8],0x10
   1dfd0:	7e 13                	jle    1dfe5 <stbi__psd_is16(stbi__context*)+0xa5>
   1dfd2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1dfd6:	48 89 c7             	mov    rdi,rax
   1dfd9:	e8 1b 6b fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1dfde:	b8 00 00 00 00       	mov    eax,0x0
   1dfe3:	eb 45                	jmp    1e02a <stbi__psd_is16(stbi__context*)+0xea>
   1dfe5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1dfe9:	48 89 c7             	mov    rdi,rax
   1dfec:	e8 df 87 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1dff1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1dff5:	48 89 c7             	mov    rdi,rax
   1dff8:	e8 d3 87 fe ff       	call   67d0 <stbi__get32be(stbi__context*)>
   1dffd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e001:	48 89 c7             	mov    rdi,rax
   1e004:	e8 89 87 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1e009:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1e00c:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   1e010:	74 13                	je     1e025 <stbi__psd_is16(stbi__context*)+0xe5>
   1e012:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e016:	48 89 c7             	mov    rdi,rax
   1e019:	e8 db 6a fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e01e:	b8 00 00 00 00       	mov    eax,0x0
   1e023:	eb 05                	jmp    1e02a <stbi__psd_is16(stbi__context*)+0xea>
   1e025:	b8 01 00 00 00       	mov    eax,0x1
   1e02a:	c9                   	leave  
   1e02b:	c3                   	ret    

000000000001e02c <stbi__pic_info(stbi__context*, int*, int*, int*)>:
   1e02c:	55                   	push   rbp
   1e02d:	48 89 e5             	mov    rbp,rsp
   1e030:	48 83 ec 70          	sub    rsp,0x70
   1e034:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   1e038:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   1e03c:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   1e040:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
   1e044:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1e04d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e051:	31 c0                	xor    eax,eax
   1e053:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
   1e05a:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
   1e061:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   1e066:	75 08                	jne    1e070 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x44>
   1e068:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   1e06c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   1e070:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   1e075:	75 08                	jne    1e07f <stbi__pic_info(stbi__context*, int*, int*, int*)+0x53>
   1e077:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   1e07b:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   1e07f:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
   1e084:	75 08                	jne    1e08e <stbi__pic_info(stbi__context*, int*, int*, int*)+0x62>
   1e086:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   1e08a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   1e08e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e092:	48 8d 35 cb d0 01 00 	lea    rsi,[rip+0x1d0cb]        # 3b164 <stbi__depth_scale_table+0x56c>
   1e099:	48 89 c7             	mov    rdi,rax
   1e09c:	e8 f7 ce ff ff       	call   1af98 <stbi__pic_is4(stbi__context*, char const*)>
   1e0a1:	85 c0                	test   eax,eax
   1e0a3:	0f 94 c0             	sete   al
   1e0a6:	84 c0                	test   al,al
   1e0a8:	74 16                	je     1e0c0 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x94>
   1e0aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e0ae:	48 89 c7             	mov    rdi,rax
   1e0b1:	e8 43 6a fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e0b6:	b8 00 00 00 00       	mov    eax,0x0
   1e0bb:	e9 a5 01 00 00       	jmp    1e265 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x239>
   1e0c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e0c4:	be 58 00 00 00       	mov    esi,0x58
   1e0c9:	48 89 c7             	mov    rdi,rax
   1e0cc:	e8 d2 84 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1e0d1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e0d5:	48 89 c7             	mov    rdi,rax
   1e0d8:	e8 b5 86 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1e0dd:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   1e0e1:	89 02                	mov    DWORD PTR [rdx],eax
   1e0e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e0e7:	48 89 c7             	mov    rdi,rax
   1e0ea:	e8 a3 86 fe ff       	call   6792 <stbi__get16be(stbi__context*)>
   1e0ef:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   1e0f3:	89 02                	mov    DWORD PTR [rdx],eax
   1e0f5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e0f9:	48 89 c7             	mov    rdi,rax
   1e0fc:	e8 31 84 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1e101:	85 c0                	test   eax,eax
   1e103:	0f 95 c0             	setne  al
   1e106:	84 c0                	test   al,al
   1e108:	74 16                	je     1e120 <stbi__pic_info(stbi__context*, int*, int*, int*)+0xf4>
   1e10a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e10e:	48 89 c7             	mov    rdi,rax
   1e111:	e8 e3 69 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e116:	b8 00 00 00 00       	mov    eax,0x0
   1e11b:	e9 45 01 00 00       	jmp    1e265 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x239>
   1e120:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1e124:	8b 00                	mov    eax,DWORD PTR [rax]
   1e126:	85 c0                	test   eax,eax
   1e128:	74 30                	je     1e15a <stbi__pic_info(stbi__context*, int*, int*, int*)+0x12e>
   1e12a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1e12e:	8b 08                	mov    ecx,DWORD PTR [rax]
   1e130:	b8 00 00 00 10       	mov    eax,0x10000000
   1e135:	99                   	cdq    
   1e136:	f7 f9                	idiv   ecx
   1e138:	89 c2                	mov    edx,eax
   1e13a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1e13e:	8b 00                	mov    eax,DWORD PTR [rax]
   1e140:	39 c2                	cmp    edx,eax
   1e142:	7d 16                	jge    1e15a <stbi__pic_info(stbi__context*, int*, int*, int*)+0x12e>
   1e144:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e148:	48 89 c7             	mov    rdi,rax
   1e14b:	e8 a9 69 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e150:	b8 00 00 00 00       	mov    eax,0x0
   1e155:	e9 0b 01 00 00       	jmp    1e265 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x239>
   1e15a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e15e:	be 08 00 00 00       	mov    esi,0x8
   1e163:	48 89 c7             	mov    rdi,rax
   1e166:	e8 38 84 fe ff       	call   65a3 <stbi__skip(stbi__context*, int)>
   1e16b:	83 7d c0 0a          	cmp    DWORD PTR [rbp-0x40],0xa
   1e16f:	75 0a                	jne    1e17b <stbi__pic_info(stbi__context*, int*, int*, int*)+0x14f>
   1e171:	b8 00 00 00 00       	mov    eax,0x0
   1e176:	e9 ea 00 00 00       	jmp    1e265 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x239>
   1e17b:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1e17e:	8d 50 01             	lea    edx,[rax+0x1]
   1e181:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
   1e184:	48 8d 4d d0          	lea    rcx,[rbp-0x30]
   1e188:	48 63 d0             	movsxd rdx,eax
   1e18b:	48 89 d0             	mov    rax,rdx
   1e18e:	48 01 c0             	add    rax,rax
   1e191:	48 01 d0             	add    rax,rdx
   1e194:	48 01 c8             	add    rax,rcx
   1e197:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1e19b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e19f:	48 89 c7             	mov    rdi,rax
   1e1a2:	e8 08 83 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e1a7:	0f b6 c0             	movzx  eax,al
   1e1aa:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   1e1ad:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e1b1:	48 89 c7             	mov    rdi,rax
   1e1b4:	e8 f6 82 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e1b9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e1bd:	88 02                	mov    BYTE PTR [rdx],al
   1e1bf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e1c3:	48 89 c7             	mov    rdi,rax
   1e1c6:	e8 e4 82 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e1cb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e1cf:	88 42 01             	mov    BYTE PTR [rdx+0x1],al
   1e1d2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e1d6:	48 89 c7             	mov    rdi,rax
   1e1d9:	e8 d1 82 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e1de:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e1e2:	88 42 02             	mov    BYTE PTR [rdx+0x2],al
   1e1e5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1e1e9:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1e1ed:	0f b6 c0             	movzx  eax,al
   1e1f0:	09 45 bc             	or     DWORD PTR [rbp-0x44],eax
   1e1f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e1f7:	48 89 c7             	mov    rdi,rax
   1e1fa:	e8 33 83 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1e1ff:	85 c0                	test   eax,eax
   1e201:	0f 95 c0             	setne  al
   1e204:	84 c0                	test   al,al
   1e206:	74 13                	je     1e21b <stbi__pic_info(stbi__context*, int*, int*, int*)+0x1ef>
   1e208:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e20c:	48 89 c7             	mov    rdi,rax
   1e20f:	e8 e5 68 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e214:	b8 00 00 00 00       	mov    eax,0x0
   1e219:	eb 4a                	jmp    1e265 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x239>
   1e21b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1e21f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e222:	3c 08                	cmp    al,0x8
   1e224:	74 13                	je     1e239 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x20d>
   1e226:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e22a:	48 89 c7             	mov    rdi,rax
   1e22d:	e8 c7 68 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e232:	b8 00 00 00 00       	mov    eax,0x0
   1e237:	eb 2c                	jmp    1e265 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x239>
   1e239:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
   1e23d:	74 05                	je     1e244 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x218>
   1e23f:	e9 27 ff ff ff       	jmp    1e16b <stbi__pic_info(stbi__context*, int*, int*, int*)+0x13f>
   1e244:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1e247:	83 e0 10             	and    eax,0x10
   1e24a:	85 c0                	test   eax,eax
   1e24c:	74 07                	je     1e255 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x229>
   1e24e:	ba 04 00 00 00       	mov    edx,0x4
   1e253:	eb 05                	jmp    1e25a <stbi__pic_info(stbi__context*, int*, int*, int*)+0x22e>
   1e255:	ba 03 00 00 00       	mov    edx,0x3
   1e25a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   1e25e:	89 10                	mov    DWORD PTR [rax],edx
   1e260:	b8 01 00 00 00       	mov    eax,0x1
   1e265:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1e269:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1e272:	74 05                	je     1e279 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x24d>
   1e274:	e8 37 62 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1e279:	c9                   	leave  
   1e27a:	c3                   	ret    

000000000001e27b <stbi__pnm_test(stbi__context*)>:
   1e27b:	55                   	push   rbp
   1e27c:	48 89 e5             	mov    rbp,rsp
   1e27f:	48 83 ec 20          	sub    rsp,0x20
   1e283:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e287:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e28b:	48 89 c7             	mov    rdi,rax
   1e28e:	e8 1c 82 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e293:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
   1e296:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e29a:	48 89 c7             	mov    rdi,rax
   1e29d:	e8 0d 82 fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e2a2:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
   1e2a5:	80 7d fe 50          	cmp    BYTE PTR [rbp-0x2],0x50
   1e2a9:	75 0c                	jne    1e2b7 <stbi__pnm_test(stbi__context*)+0x3c>
   1e2ab:	80 7d ff 35          	cmp    BYTE PTR [rbp-0x1],0x35
   1e2af:	74 19                	je     1e2ca <stbi__pnm_test(stbi__context*)+0x4f>
   1e2b1:	80 7d ff 36          	cmp    BYTE PTR [rbp-0x1],0x36
   1e2b5:	74 13                	je     1e2ca <stbi__pnm_test(stbi__context*)+0x4f>
   1e2b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2bb:	48 89 c7             	mov    rdi,rax
   1e2be:	e8 36 68 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e2c3:	b8 00 00 00 00       	mov    eax,0x0
   1e2c8:	eb 05                	jmp    1e2cf <stbi__pnm_test(stbi__context*)+0x54>
   1e2ca:	b8 01 00 00 00       	mov    eax,0x1
   1e2cf:	c9                   	leave  
   1e2d0:	c3                   	ret    

000000000001e2d1 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1e2d1:	55                   	push   rbp
   1e2d2:	48 89 e5             	mov    rbp,rsp
   1e2d5:	48 83 ec 40          	sub    rsp,0x40
   1e2d9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e2dd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1e2e1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1e2e5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1e2e9:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
   1e2ed:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   1e2f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2f5:	48 8d 48 08          	lea    rcx,[rax+0x8]
   1e2f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2fd:	48 8d 50 04          	lea    rdx,[rax+0x4]
   1e301:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
   1e305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e309:	48 89 c7             	mov    rdi,rax
   1e30c:	e8 0e 03 00 00       	call   1e61f <stbi__pnm_info(stbi__context*, int*, int*, int*)>
   1e311:	85 c0                	test   eax,eax
   1e313:	0f 94 c0             	sete   al
   1e316:	84 c0                	test   al,al
   1e318:	74 0a                	je     1e324 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x53>
   1e31a:	b8 00 00 00 00       	mov    eax,0x0
   1e31f:	e9 34 01 00 00       	jmp    1e458 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x187>
   1e324:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e328:	8b 00                	mov    eax,DWORD PTR [rax]
   1e32a:	89 c2                	mov    edx,eax
   1e32c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e330:	89 10                	mov    DWORD PTR [rax],edx
   1e332:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e336:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e339:	89 c2                	mov    edx,eax
   1e33b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e33f:	89 10                	mov    DWORD PTR [rax],edx
   1e341:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1e346:	74 0d                	je     1e355 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x84>
   1e348:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e34c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   1e34f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1e353:	89 10                	mov    DWORD PTR [rax],edx
   1e355:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e359:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e35c:	89 c2                	mov    edx,eax
   1e35e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e362:	8b 00                	mov    eax,DWORD PTR [rax]
   1e364:	89 c6                	mov    esi,eax
   1e366:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e36a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e36d:	b9 00 00 00 00       	mov    ecx,0x0
   1e372:	89 c7                	mov    edi,eax
   1e374:	e8 b0 68 fe ff       	call   4c29 <stbi__mad3sizes_valid(int, int, int, int)>
   1e379:	85 c0                	test   eax,eax
   1e37b:	0f 94 c0             	sete   al
   1e37e:	84 c0                	test   al,al
   1e380:	74 16                	je     1e398 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc7>
   1e382:	48 8d 3d c3 c2 01 00 	lea    rdi,[rip+0x1c2c3]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1e389:	e8 b1 67 fe ff       	call   4b3f <stbi__err(char const*)>
   1e38e:	b8 00 00 00 00       	mov    eax,0x0
   1e393:	e9 c0 00 00 00       	jmp    1e458 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x187>
   1e398:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e39c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e39f:	89 c2                	mov    edx,eax
   1e3a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e3a5:	8b 00                	mov    eax,DWORD PTR [rax]
   1e3a7:	89 c6                	mov    esi,eax
   1e3a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e3ad:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e3b0:	b9 00 00 00 00       	mov    ecx,0x0
   1e3b5:	89 c7                	mov    edi,eax
   1e3b7:	e8 b2 69 fe ff       	call   4d6e <stbi__malloc_mad3(int, int, int, int)>
   1e3bc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e3c0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1e3c5:	75 13                	jne    1e3da <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x109>
   1e3c7:	48 8d 3d 65 bc 01 00 	lea    rdi,[rip+0x1bc65]        # 3a033 <_IO_stdin_used+0x33>
   1e3ce:	e8 6c 67 fe ff       	call   4b3f <stbi__err(char const*)>
   1e3d3:	b8 00 00 00 00       	mov    eax,0x0
   1e3d8:	eb 7e                	jmp    1e458 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x187>
   1e3da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e3de:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e3e1:	89 c2                	mov    edx,eax
   1e3e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e3e7:	8b 00                	mov    eax,DWORD PTR [rax]
   1e3e9:	0f af d0             	imul   edx,eax
   1e3ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e3f0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e3f3:	0f af c2             	imul   eax,edx
   1e3f6:	89 c2                	mov    edx,eax
   1e3f8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1e3fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e400:	48 89 ce             	mov    rsi,rcx
   1e403:	48 89 c7             	mov    rdi,rax
   1e406:	e8 53 82 fe ff       	call   665e <stbi__getn(stbi__context*, unsigned char*, int)>
   1e40b:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1e40f:	74 43                	je     1e454 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x183>
   1e411:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e415:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e418:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
   1e41b:	74 37                	je     1e454 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x183>
   1e41d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e421:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   1e424:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e428:	8b 08                	mov    ecx,DWORD PTR [rax]
   1e42a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e42e:	8b 70 08             	mov    esi,DWORD PTR [rax+0x8]
   1e431:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1e434:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e438:	41 89 f8             	mov    r8d,edi
   1e43b:	48 89 c7             	mov    rdi,rax
   1e43e:	e8 5c 84 fe ff       	call   689f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1e443:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e447:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1e44c:	75 06                	jne    1e454 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x183>
   1e44e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e452:	eb 04                	jmp    1e458 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x187>
   1e454:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e458:	c9                   	leave  
   1e459:	c3                   	ret    

000000000001e45a <stbi__pnm_isspace(char)>:
   1e45a:	55                   	push   rbp
   1e45b:	48 89 e5             	mov    rbp,rsp
   1e45e:	89 f8                	mov    eax,edi
   1e460:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
   1e463:	80 7d fc 20          	cmp    BYTE PTR [rbp-0x4],0x20
   1e467:	74 1e                	je     1e487 <stbi__pnm_isspace(char)+0x2d>
   1e469:	80 7d fc 09          	cmp    BYTE PTR [rbp-0x4],0x9
   1e46d:	74 18                	je     1e487 <stbi__pnm_isspace(char)+0x2d>
   1e46f:	80 7d fc 0a          	cmp    BYTE PTR [rbp-0x4],0xa
   1e473:	74 12                	je     1e487 <stbi__pnm_isspace(char)+0x2d>
   1e475:	80 7d fc 0b          	cmp    BYTE PTR [rbp-0x4],0xb
   1e479:	74 0c                	je     1e487 <stbi__pnm_isspace(char)+0x2d>
   1e47b:	80 7d fc 0c          	cmp    BYTE PTR [rbp-0x4],0xc
   1e47f:	74 06                	je     1e487 <stbi__pnm_isspace(char)+0x2d>
   1e481:	80 7d fc 0d          	cmp    BYTE PTR [rbp-0x4],0xd
   1e485:	75 07                	jne    1e48e <stbi__pnm_isspace(char)+0x34>
   1e487:	b8 01 00 00 00       	mov    eax,0x1
   1e48c:	eb 05                	jmp    1e493 <stbi__pnm_isspace(char)+0x39>
   1e48e:	b8 00 00 00 00       	mov    eax,0x0
   1e493:	0f b6 c0             	movzx  eax,al
   1e496:	5d                   	pop    rbp
   1e497:	c3                   	ret    

000000000001e498 <stbi__pnm_skip_whitespace(stbi__context*, char*)>:
   1e498:	55                   	push   rbp
   1e499:	48 89 e5             	mov    rbp,rsp
   1e49c:	48 83 ec 10          	sub    rsp,0x10
   1e4a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1e4a4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1e4a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e4ac:	48 89 c7             	mov    rdi,rax
   1e4af:	e8 7e 80 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1e4b4:	85 c0                	test   eax,eax
   1e4b6:	75 1c                	jne    1e4d4 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x3c>
   1e4b8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e4bc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e4bf:	0f be c0             	movsx  eax,al
   1e4c2:	89 c7                	mov    edi,eax
   1e4c4:	e8 91 ff ff ff       	call   1e45a <stbi__pnm_isspace(char)>
   1e4c9:	85 c0                	test   eax,eax
   1e4cb:	74 07                	je     1e4d4 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x3c>
   1e4cd:	b8 01 00 00 00       	mov    eax,0x1
   1e4d2:	eb 05                	jmp    1e4d9 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x41>
   1e4d4:	b8 00 00 00 00       	mov    eax,0x0
   1e4d9:	84 c0                	test   al,al
   1e4db:	74 16                	je     1e4f3 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x5b>
   1e4dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e4e1:	48 89 c7             	mov    rdi,rax
   1e4e4:	e8 c6 7f fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e4e9:	89 c2                	mov    edx,eax
   1e4eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e4ef:	88 10                	mov    BYTE PTR [rax],dl
   1e4f1:	eb b5                	jmp    1e4a8 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x10>
   1e4f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e4f7:	48 89 c7             	mov    rdi,rax
   1e4fa:	e8 33 80 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1e4ff:	85 c0                	test   eax,eax
   1e501:	75 0b                	jne    1e50e <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x76>
   1e503:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e507:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e50a:	3c 23                	cmp    al,0x23
   1e50c:	74 07                	je     1e515 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x7d>
   1e50e:	b8 01 00 00 00       	mov    eax,0x1
   1e513:	eb 05                	jmp    1e51a <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x82>
   1e515:	b8 00 00 00 00       	mov    eax,0x0
   1e51a:	84 c0                	test   al,al
   1e51c:	75 50                	jne    1e56e <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xd6>
   1e51e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e522:	48 89 c7             	mov    rdi,rax
   1e525:	e8 08 80 fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1e52a:	85 c0                	test   eax,eax
   1e52c:	75 1d                	jne    1e54b <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xb3>
   1e52e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e532:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e535:	3c 0a                	cmp    al,0xa
   1e537:	74 12                	je     1e54b <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xb3>
   1e539:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e53d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e540:	3c 0d                	cmp    al,0xd
   1e542:	74 07                	je     1e54b <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xb3>
   1e544:	b8 01 00 00 00       	mov    eax,0x1
   1e549:	eb 05                	jmp    1e550 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xb8>
   1e54b:	b8 00 00 00 00       	mov    eax,0x0
   1e550:	84 c0                	test   al,al
   1e552:	0f 84 50 ff ff ff    	je     1e4a8 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x10>
   1e558:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e55c:	48 89 c7             	mov    rdi,rax
   1e55f:	e8 4b 7f fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e564:	89 c2                	mov    edx,eax
   1e566:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e56a:	88 10                	mov    BYTE PTR [rax],dl
   1e56c:	eb b0                	jmp    1e51e <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x86>
   1e56e:	90                   	nop
   1e56f:	90                   	nop
   1e570:	c9                   	leave  
   1e571:	c3                   	ret    

000000000001e572 <stbi__pnm_isdigit(char)>:
   1e572:	55                   	push   rbp
   1e573:	48 89 e5             	mov    rbp,rsp
   1e576:	89 f8                	mov    eax,edi
   1e578:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
   1e57b:	80 7d fc 2f          	cmp    BYTE PTR [rbp-0x4],0x2f
   1e57f:	7e 0d                	jle    1e58e <stbi__pnm_isdigit(char)+0x1c>
   1e581:	80 7d fc 39          	cmp    BYTE PTR [rbp-0x4],0x39
   1e585:	7f 07                	jg     1e58e <stbi__pnm_isdigit(char)+0x1c>
   1e587:	b8 01 00 00 00       	mov    eax,0x1
   1e58c:	eb 05                	jmp    1e593 <stbi__pnm_isdigit(char)+0x21>
   1e58e:	b8 00 00 00 00       	mov    eax,0x0
   1e593:	0f b6 c0             	movzx  eax,al
   1e596:	5d                   	pop    rbp
   1e597:	c3                   	ret    

000000000001e598 <stbi__pnm_getinteger(stbi__context*, char*)>:
   1e598:	55                   	push   rbp
   1e599:	48 89 e5             	mov    rbp,rsp
   1e59c:	48 83 ec 20          	sub    rsp,0x20
   1e5a0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e5a4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1e5a8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1e5af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e5b3:	48 89 c7             	mov    rdi,rax
   1e5b6:	e8 77 7f fe ff       	call   6532 <stbi__at_eof(stbi__context*)>
   1e5bb:	85 c0                	test   eax,eax
   1e5bd:	75 1c                	jne    1e5db <stbi__pnm_getinteger(stbi__context*, char*)+0x43>
   1e5bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e5c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e5c6:	0f be c0             	movsx  eax,al
   1e5c9:	89 c7                	mov    edi,eax
   1e5cb:	e8 a2 ff ff ff       	call   1e572 <stbi__pnm_isdigit(char)>
   1e5d0:	85 c0                	test   eax,eax
   1e5d2:	74 07                	je     1e5db <stbi__pnm_getinteger(stbi__context*, char*)+0x43>
   1e5d4:	b8 01 00 00 00       	mov    eax,0x1
   1e5d9:	eb 05                	jmp    1e5e0 <stbi__pnm_getinteger(stbi__context*, char*)+0x48>
   1e5db:	b8 00 00 00 00       	mov    eax,0x0
   1e5e0:	84 c0                	test   al,al
   1e5e2:	74 36                	je     1e61a <stbi__pnm_getinteger(stbi__context*, char*)+0x82>
   1e5e4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1e5e7:	89 d0                	mov    eax,edx
   1e5e9:	c1 e0 02             	shl    eax,0x2
   1e5ec:	01 d0                	add    eax,edx
   1e5ee:	01 c0                	add    eax,eax
   1e5f0:	89 c2                	mov    edx,eax
   1e5f2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e5f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e5f9:	0f be c0             	movsx  eax,al
   1e5fc:	83 e8 30             	sub    eax,0x30
   1e5ff:	01 d0                	add    eax,edx
   1e601:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1e604:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e608:	48 89 c7             	mov    rdi,rax
   1e60b:	e8 9f 7e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e610:	89 c2                	mov    edx,eax
   1e612:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e616:	88 10                	mov    BYTE PTR [rax],dl
   1e618:	eb 95                	jmp    1e5af <stbi__pnm_getinteger(stbi__context*, char*)+0x17>
   1e61a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1e61d:	c9                   	leave  
   1e61e:	c3                   	ret    

000000000001e61f <stbi__pnm_info(stbi__context*, int*, int*, int*)>:
   1e61f:	55                   	push   rbp
   1e620:	48 89 e5             	mov    rbp,rsp
   1e623:	48 83 ec 40          	sub    rsp,0x40
   1e627:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1e62b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1e62f:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1e633:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   1e637:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1e640:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e644:	31 c0                	xor    eax,eax
   1e646:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1e64b:	75 08                	jne    1e655 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x36>
   1e64d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   1e651:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1e655:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1e65a:	75 08                	jne    1e664 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x45>
   1e65c:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   1e660:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1e664:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1e669:	75 08                	jne    1e673 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x54>
   1e66b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   1e66f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1e673:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e677:	48 89 c7             	mov    rdi,rax
   1e67a:	e8 7a 64 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e67f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e683:	48 89 c7             	mov    rdi,rax
   1e686:	e8 24 7e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e68b:	88 45 ee             	mov    BYTE PTR [rbp-0x12],al
   1e68e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e692:	48 89 c7             	mov    rdi,rax
   1e695:	e8 15 7e fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e69a:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
   1e69d:	80 7d ee 50          	cmp    BYTE PTR [rbp-0x12],0x50
   1e6a1:	75 0c                	jne    1e6af <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x90>
   1e6a3:	80 7d ef 35          	cmp    BYTE PTR [rbp-0x11],0x35
   1e6a7:	74 1c                	je     1e6c5 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xa6>
   1e6a9:	80 7d ef 36          	cmp    BYTE PTR [rbp-0x11],0x36
   1e6ad:	74 16                	je     1e6c5 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xa6>
   1e6af:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e6b3:	48 89 c7             	mov    rdi,rax
   1e6b6:	e8 3e 64 fe ff       	call   4af9 <stbi__rewind(stbi__context*)>
   1e6bb:	b8 00 00 00 00       	mov    eax,0x0
   1e6c0:	e9 c4 00 00 00       	jmp    1e789 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x16a>
   1e6c5:	80 7d ef 36          	cmp    BYTE PTR [rbp-0x11],0x36
   1e6c9:	75 07                	jne    1e6d2 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xb3>
   1e6cb:	ba 03 00 00 00       	mov    edx,0x3
   1e6d0:	eb 05                	jmp    1e6d7 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xb8>
   1e6d2:	ba 01 00 00 00       	mov    edx,0x1
   1e6d7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1e6db:	89 10                	mov    DWORD PTR [rax],edx
   1e6dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e6e1:	48 89 c7             	mov    rdi,rax
   1e6e4:	e8 c6 7d fe ff       	call   64af <stbi__get8(stbi__context*)>
   1e6e9:	88 45 ed             	mov    BYTE PTR [rbp-0x13],al
   1e6ec:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1e6f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e6f4:	48 89 d6             	mov    rsi,rdx
   1e6f7:	48 89 c7             	mov    rdi,rax
   1e6fa:	e8 99 fd ff ff       	call   1e498 <stbi__pnm_skip_whitespace(stbi__context*, char*)>
   1e6ff:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1e703:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e707:	48 89 d6             	mov    rsi,rdx
   1e70a:	48 89 c7             	mov    rdi,rax
   1e70d:	e8 86 fe ff ff       	call   1e598 <stbi__pnm_getinteger(stbi__context*, char*)>
   1e712:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   1e716:	89 02                	mov    DWORD PTR [rdx],eax
   1e718:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1e71c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e720:	48 89 d6             	mov    rsi,rdx
   1e723:	48 89 c7             	mov    rdi,rax
   1e726:	e8 6d fd ff ff       	call   1e498 <stbi__pnm_skip_whitespace(stbi__context*, char*)>
   1e72b:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1e72f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e733:	48 89 d6             	mov    rsi,rdx
   1e736:	48 89 c7             	mov    rdi,rax
   1e739:	e8 5a fe ff ff       	call   1e598 <stbi__pnm_getinteger(stbi__context*, char*)>
   1e73e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e742:	89 02                	mov    DWORD PTR [rdx],eax
   1e744:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1e748:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e74c:	48 89 d6             	mov    rsi,rdx
   1e74f:	48 89 c7             	mov    rdi,rax
   1e752:	e8 41 fd ff ff       	call   1e498 <stbi__pnm_skip_whitespace(stbi__context*, char*)>
   1e757:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1e75b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e75f:	48 89 d6             	mov    rsi,rdx
   1e762:	48 89 c7             	mov    rdi,rax
   1e765:	e8 2e fe ff ff       	call   1e598 <stbi__pnm_getinteger(stbi__context*, char*)>
   1e76a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1e76d:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [rbp-0xc],0xff
   1e774:	7e 0e                	jle    1e784 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x165>
   1e776:	48 8d 3d 0b cb 01 00 	lea    rdi,[rip+0x1cb0b]        # 3b288 <stbi__depth_scale_table+0x690>
   1e77d:	e8 bd 63 fe ff       	call   4b3f <stbi__err(char const*)>
   1e782:	eb 05                	jmp    1e789 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x16a>
   1e784:	b8 01 00 00 00       	mov    eax,0x1
   1e789:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1e78d:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1e796:	74 05                	je     1e79d <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x17e>
   1e798:	e8 13 5d fe ff       	call   44b0 <__stack_chk_fail@plt>
   1e79d:	c9                   	leave  
   1e79e:	c3                   	ret    

000000000001e79f <stbi__info_main(stbi__context*, int*, int*, int*)>:
   1e79f:	55                   	push   rbp
   1e7a0:	48 89 e5             	mov    rbp,rsp
   1e7a3:	48 83 ec 20          	sub    rsp,0x20
   1e7a7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1e7ab:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1e7af:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   1e7b3:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   1e7b7:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e7bb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e7bf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e7c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e7c7:	48 89 c7             	mov    rdi,rax
   1e7ca:	e8 ab 4e ff ff       	call   1367a <stbi__jpeg_info(stbi__context*, int*, int*, int*)>
   1e7cf:	85 c0                	test   eax,eax
   1e7d1:	0f 95 c0             	setne  al
   1e7d4:	84 c0                	test   al,al
   1e7d6:	74 0a                	je     1e7e2 <stbi__info_main(stbi__context*, int*, int*, int*)+0x43>
   1e7d8:	b8 01 00 00 00       	mov    eax,0x1
   1e7dd:	e9 5c 01 00 00       	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e7e2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e7e6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e7ea:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e7ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e7f2:	48 89 c7             	mov    rdi,rax
   1e7f5:	e8 ff 97 ff ff       	call   17ff9 <stbi__png_info(stbi__context*, int*, int*, int*)>
   1e7fa:	85 c0                	test   eax,eax
   1e7fc:	0f 95 c0             	setne  al
   1e7ff:	84 c0                	test   al,al
   1e801:	74 0a                	je     1e80d <stbi__info_main(stbi__context*, int*, int*, int*)+0x6e>
   1e803:	b8 01 00 00 00       	mov    eax,0x1
   1e808:	e9 31 01 00 00       	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e80d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e811:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e815:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e819:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e81d:	48 89 c7             	mov    rdi,rax
   1e820:	e8 39 e6 ff ff       	call   1ce5e <stbi__gif_info(stbi__context*, int*, int*, int*)>
   1e825:	85 c0                	test   eax,eax
   1e827:	0f 95 c0             	setne  al
   1e82a:	84 c0                	test   al,al
   1e82c:	74 0a                	je     1e838 <stbi__info_main(stbi__context*, int*, int*, int*)+0x99>
   1e82e:	b8 01 00 00 00       	mov    eax,0x1
   1e833:	e9 06 01 00 00       	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e838:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e83c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e840:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e844:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e848:	48 89 c7             	mov    rdi,rax
   1e84b:	e8 79 f4 ff ff       	call   1dcc9 <stbi__bmp_info(stbi__context*, int*, int*, int*)>
   1e850:	85 c0                	test   eax,eax
   1e852:	0f 95 c0             	setne  al
   1e855:	84 c0                	test   al,al
   1e857:	74 0a                	je     1e863 <stbi__info_main(stbi__context*, int*, int*, int*)+0xc4>
   1e859:	b8 01 00 00 00       	mov    eax,0x1
   1e85e:	e9 db 00 00 00       	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e863:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e867:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e86b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e86f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e873:	48 89 c7             	mov    rdi,rax
   1e876:	e8 31 f5 ff ff       	call   1ddac <stbi__psd_info(stbi__context*, int*, int*, int*)>
   1e87b:	85 c0                	test   eax,eax
   1e87d:	0f 95 c0             	setne  al
   1e880:	84 c0                	test   al,al
   1e882:	74 0a                	je     1e88e <stbi__info_main(stbi__context*, int*, int*, int*)+0xef>
   1e884:	b8 01 00 00 00       	mov    eax,0x1
   1e889:	e9 b0 00 00 00       	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e88e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e892:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e896:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e89a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e89e:	48 89 c7             	mov    rdi,rax
   1e8a1:	e8 86 f7 ff ff       	call   1e02c <stbi__pic_info(stbi__context*, int*, int*, int*)>
   1e8a6:	85 c0                	test   eax,eax
   1e8a8:	0f 95 c0             	setne  al
   1e8ab:	84 c0                	test   al,al
   1e8ad:	74 0a                	je     1e8b9 <stbi__info_main(stbi__context*, int*, int*, int*)+0x11a>
   1e8af:	b8 01 00 00 00       	mov    eax,0x1
   1e8b4:	e9 85 00 00 00       	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e8b9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e8bd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e8c1:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e8c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e8c9:	48 89 c7             	mov    rdi,rax
   1e8cc:	e8 4e fd ff ff       	call   1e61f <stbi__pnm_info(stbi__context*, int*, int*, int*)>
   1e8d1:	85 c0                	test   eax,eax
   1e8d3:	0f 95 c0             	setne  al
   1e8d6:	84 c0                	test   al,al
   1e8d8:	74 07                	je     1e8e1 <stbi__info_main(stbi__context*, int*, int*, int*)+0x142>
   1e8da:	b8 01 00 00 00       	mov    eax,0x1
   1e8df:	eb 5d                	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e8e1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e8e5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e8e9:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e8ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e8f1:	48 89 c7             	mov    rdi,rax
   1e8f4:	e8 58 f1 ff ff       	call   1da51 <stbi__hdr_info(stbi__context*, int*, int*, int*)>
   1e8f9:	85 c0                	test   eax,eax
   1e8fb:	0f 95 c0             	setne  al
   1e8fe:	84 c0                	test   al,al
   1e900:	74 07                	je     1e909 <stbi__info_main(stbi__context*, int*, int*, int*)+0x16a>
   1e902:	b8 01 00 00 00       	mov    eax,0x1
   1e907:	eb 35                	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e909:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1e90d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1e911:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1e915:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e919:	48 89 c7             	mov    rdi,rax
   1e91c:	e8 99 af ff ff       	call   198ba <stbi__tga_info(stbi__context*, int*, int*, int*)>
   1e921:	85 c0                	test   eax,eax
   1e923:	0f 95 c0             	setne  al
   1e926:	84 c0                	test   al,al
   1e928:	74 07                	je     1e931 <stbi__info_main(stbi__context*, int*, int*, int*)+0x192>
   1e92a:	b8 01 00 00 00       	mov    eax,0x1
   1e92f:	eb 0d                	jmp    1e93e <stbi__info_main(stbi__context*, int*, int*, int*)+0x19f>
   1e931:	48 8d 3d e8 b6 01 00 	lea    rdi,[rip+0x1b6e8]        # 3a020 <_IO_stdin_used+0x20>
   1e938:	e8 02 62 fe ff       	call   4b3f <stbi__err(char const*)>
   1e93d:	90                   	nop
   1e93e:	c9                   	leave  
   1e93f:	c3                   	ret    

000000000001e940 <stbi__is_16_main(stbi__context*)>:
   1e940:	55                   	push   rbp
   1e941:	48 89 e5             	mov    rbp,rsp
   1e944:	48 83 ec 10          	sub    rsp,0x10
   1e948:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1e94c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e950:	48 89 c7             	mov    rdi,rax
   1e953:	e8 fe 96 ff ff       	call   18056 <stbi__png_is16(stbi__context*)>
   1e958:	85 c0                	test   eax,eax
   1e95a:	0f 95 c0             	setne  al
   1e95d:	84 c0                	test   al,al
   1e95f:	74 07                	je     1e968 <stbi__is_16_main(stbi__context*)+0x28>
   1e961:	b8 01 00 00 00       	mov    eax,0x1
   1e966:	eb 21                	jmp    1e989 <stbi__is_16_main(stbi__context*)+0x49>
   1e968:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e96c:	48 89 c7             	mov    rdi,rax
   1e96f:	e8 cc f5 ff ff       	call   1df40 <stbi__psd_is16(stbi__context*)>
   1e974:	85 c0                	test   eax,eax
   1e976:	0f 95 c0             	setne  al
   1e979:	84 c0                	test   al,al
   1e97b:	74 07                	je     1e984 <stbi__is_16_main(stbi__context*)+0x44>
   1e97d:	b8 01 00 00 00       	mov    eax,0x1
   1e982:	eb 05                	jmp    1e989 <stbi__is_16_main(stbi__context*)+0x49>
   1e984:	b8 00 00 00 00       	mov    eax,0x0
   1e989:	c9                   	leave  
   1e98a:	c3                   	ret    

000000000001e98b <stbi_info>:
   1e98b:	55                   	push   rbp
   1e98c:	48 89 e5             	mov    rbp,rsp
   1e98f:	48 83 ec 30          	sub    rsp,0x30
   1e993:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e997:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1e99b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1e99f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1e9a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e9a7:	48 8d 35 99 b7 01 00 	lea    rsi,[rip+0x1b799]        # 3a147 <_IO_stdin_used+0x147>
   1e9ae:	48 89 c7             	mov    rdi,rax
   1e9b1:	e8 fe 6d fe ff       	call   57b4 <stbi__fopen(char const*, char const*)>
   1e9b6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e9ba:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1e9bf:	75 0e                	jne    1e9cf <stbi_info+0x44>
   1e9c1:	48 8d 3d 82 b7 01 00 	lea    rdi,[rip+0x1b782]        # 3a14a <_IO_stdin_used+0x14a>
   1e9c8:	e8 72 61 fe ff       	call   4b3f <stbi__err(char const*)>
   1e9cd:	eb 2a                	jmp    1e9f9 <stbi_info+0x6e>
   1e9cf:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1e9d3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1e9d7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   1e9db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e9df:	48 89 c7             	mov    rdi,rax
   1e9e2:	e8 14 00 00 00       	call   1e9fb <stbi_info_from_file>
   1e9e7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1e9ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e9ee:	48 89 c7             	mov    rdi,rax
   1e9f1:	e8 fa 59 fe ff       	call   43f0 <fclose@plt>
   1e9f6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1e9f9:	c9                   	leave  
   1e9fa:	c3                   	ret    

000000000001e9fb <stbi_info_from_file>:
   1e9fb:	55                   	push   rbp
   1e9fc:	48 89 e5             	mov    rbp,rsp
   1e9ff:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   1ea06:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
   1ea0d:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
   1ea14:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
   1ea1b:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
   1ea22:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ea2b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ea2f:	31 c0                	xor    eax,eax
   1ea31:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1ea38:	48 89 c7             	mov    rdi,rax
   1ea3b:	e8 f0 55 fe ff       	call   4030 <ftell@plt>
   1ea40:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
   1ea47:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   1ea4e:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ea55:	48 89 d6             	mov    rsi,rdx
   1ea58:	48 89 c7             	mov    rdi,rax
   1ea5b:	e8 6f 60 fe ff       	call   4acf <stbi__start_file(stbi__context*, _IO_FILE*)>
   1ea60:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
   1ea67:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
   1ea6e:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
   1ea75:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ea7c:	48 89 c7             	mov    rdi,rax
   1ea7f:	e8 1b fd ff ff       	call   1e79f <stbi__info_main(stbi__context*, int*, int*, int*)>
   1ea84:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   1ea8a:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ea91:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1ea98:	ba 00 00 00 00       	mov    edx,0x0
   1ea9d:	48 89 ce             	mov    rsi,rcx
   1eaa0:	48 89 c7             	mov    rdi,rax
   1eaa3:	e8 f8 59 fe ff       	call   44a0 <fseek@plt>
   1eaa8:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   1eaae:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   1eab2:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   1eabb:	74 05                	je     1eac2 <stbi_info_from_file+0xc7>
   1eabd:	e8 ee 59 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1eac2:	c9                   	leave  
   1eac3:	c3                   	ret    

000000000001eac4 <stbi_is_16_bit>:
   1eac4:	55                   	push   rbp
   1eac5:	48 89 e5             	mov    rbp,rsp
   1eac8:	48 83 ec 20          	sub    rsp,0x20
   1eacc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1ead0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ead4:	48 8d 35 6c b6 01 00 	lea    rsi,[rip+0x1b66c]        # 3a147 <_IO_stdin_used+0x147>
   1eadb:	48 89 c7             	mov    rdi,rax
   1eade:	e8 d1 6c fe ff       	call   57b4 <stbi__fopen(char const*, char const*)>
   1eae3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1eae7:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1eaec:	75 0e                	jne    1eafc <stbi_is_16_bit+0x38>
   1eaee:	48 8d 3d 55 b6 01 00 	lea    rdi,[rip+0x1b655]        # 3a14a <_IO_stdin_used+0x14a>
   1eaf5:	e8 45 60 fe ff       	call   4b3f <stbi__err(char const*)>
   1eafa:	eb 1e                	jmp    1eb1a <stbi_is_16_bit+0x56>
   1eafc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eb00:	48 89 c7             	mov    rdi,rax
   1eb03:	e8 14 00 00 00       	call   1eb1c <stbi_is_16_bit_from_file>
   1eb08:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1eb0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eb0f:	48 89 c7             	mov    rdi,rax
   1eb12:	e8 d9 58 fe ff       	call   43f0 <fclose@plt>
   1eb17:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1eb1a:	c9                   	leave  
   1eb1b:	c3                   	ret    

000000000001eb1c <stbi_is_16_bit_from_file>:
   1eb1c:	55                   	push   rbp
   1eb1d:	48 89 e5             	mov    rbp,rsp
   1eb20:	48 81 ec 00 01 00 00 	sub    rsp,0x100
   1eb27:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
   1eb2e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1eb37:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1eb3b:	31 c0                	xor    eax,eax
   1eb3d:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1eb44:	48 89 c7             	mov    rdi,rax
   1eb47:	e8 e4 54 fe ff       	call   4030 <ftell@plt>
   1eb4c:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
   1eb53:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   1eb5a:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1eb61:	48 89 d6             	mov    rsi,rdx
   1eb64:	48 89 c7             	mov    rdi,rax
   1eb67:	e8 63 5f fe ff       	call   4acf <stbi__start_file(stbi__context*, _IO_FILE*)>
   1eb6c:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1eb73:	48 89 c7             	mov    rdi,rax
   1eb76:	e8 c5 fd ff ff       	call   1e940 <stbi__is_16_main(stbi__context*)>
   1eb7b:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   1eb81:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1eb88:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1eb8f:	ba 00 00 00 00       	mov    edx,0x0
   1eb94:	48 89 ce             	mov    rsi,rcx
   1eb97:	48 89 c7             	mov    rdi,rax
   1eb9a:	e8 01 59 fe ff       	call   44a0 <fseek@plt>
   1eb9f:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   1eba5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1eba9:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1ebb2:	74 05                	je     1ebb9 <stbi_is_16_bit_from_file+0x9d>
   1ebb4:	e8 f7 58 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1ebb9:	c9                   	leave  
   1ebba:	c3                   	ret    

000000000001ebbb <stbi_info_from_memory>:
   1ebbb:	55                   	push   rbp
   1ebbc:	48 89 e5             	mov    rbp,rsp
   1ebbf:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   1ebc6:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1ebcd:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
   1ebd3:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
   1ebda:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
   1ebe1:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
   1ebe8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ebf1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ebf5:	31 c0                	xor    eax,eax
   1ebf7:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
   1ebfd:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ec04:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ec0b:	48 89 ce             	mov    rsi,rcx
   1ec0e:	48 89 c7             	mov    rdi,rax
   1ec11:	e8 3a 5d fe ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
   1ec16:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
   1ec1d:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
   1ec24:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
   1ec2b:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ec32:	48 89 c7             	mov    rdi,rax
   1ec35:	e8 65 fb ff ff       	call   1e79f <stbi__info_main(stbi__context*, int*, int*, int*)>
   1ec3a:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   1ec3e:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   1ec47:	74 05                	je     1ec4e <stbi_info_from_memory+0x93>
   1ec49:	e8 62 58 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1ec4e:	c9                   	leave  
   1ec4f:	c3                   	ret    

000000000001ec50 <stbi_info_from_callbacks>:
   1ec50:	55                   	push   rbp
   1ec51:	48 89 e5             	mov    rbp,rsp
   1ec54:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   1ec5b:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1ec62:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
   1ec69:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
   1ec70:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
   1ec77:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
   1ec7e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ec87:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ec8b:	31 c0                	xor    eax,eax
   1ec8d:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   1ec94:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ec9b:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1eca2:	48 89 ce             	mov    rsi,rcx
   1eca5:	48 89 c7             	mov    rdi,rax
   1eca8:	e8 1f 5d fe ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
   1ecad:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
   1ecb4:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
   1ecbb:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
   1ecc2:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ecc9:	48 89 c7             	mov    rdi,rax
   1eccc:	e8 ce fa ff ff       	call   1e79f <stbi__info_main(stbi__context*, int*, int*, int*)>
   1ecd1:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   1ecd5:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   1ecde:	74 05                	je     1ece5 <stbi_info_from_callbacks+0x95>
   1ece0:	e8 cb 57 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1ece5:	c9                   	leave  
   1ece6:	c3                   	ret    

000000000001ece7 <stbi_is_16_bit_from_memory>:
   1ece7:	55                   	push   rbp
   1ece8:	48 89 e5             	mov    rbp,rsp
   1eceb:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   1ecf2:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1ecf9:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
   1ecff:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ed08:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ed0c:	31 c0                	xor    eax,eax
   1ed0e:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
   1ed14:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ed1b:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ed22:	48 89 ce             	mov    rsi,rcx
   1ed25:	48 89 c7             	mov    rdi,rax
   1ed28:	e8 23 5c fe ff       	call   4950 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
   1ed2d:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ed34:	48 89 c7             	mov    rdi,rax
   1ed37:	e8 04 fc ff ff       	call   1e940 <stbi__is_16_main(stbi__context*)>
   1ed3c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1ed40:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1ed49:	74 05                	je     1ed50 <stbi_is_16_bit_from_memory+0x69>
   1ed4b:	e8 60 57 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1ed50:	c9                   	leave  
   1ed51:	c3                   	ret    

000000000001ed52 <stbi_is_16_bit_from_callbacks>:
   1ed52:	55                   	push   rbp
   1ed53:	48 89 e5             	mov    rbp,rsp
   1ed56:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   1ed5d:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1ed64:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
   1ed6b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ed74:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ed78:	31 c0                	xor    eax,eax
   1ed7a:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   1ed81:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ed88:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ed8f:	48 89 ce             	mov    rsi,rcx
   1ed92:	48 89 c7             	mov    rdi,rax
   1ed95:	e8 32 5c fe ff       	call   49cc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
   1ed9a:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1eda1:	48 89 c7             	mov    rdi,rax
   1eda4:	e8 97 fb ff ff       	call   1e940 <stbi__is_16_main(stbi__context*)>
   1eda9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1edad:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   1edb6:	74 05                	je     1edbd <stbi_is_16_bit_from_callbacks+0x6b>
   1edb8:	e8 f3 56 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1edbd:	c9                   	leave  
   1edbe:	c3                   	ret    

000000000001edbf <LDClearErrors()>:
   1edbf:	55                   	push   rbp
   1edc0:	48 89 e5             	mov    rbp,rsp
   1edc3:	48 83 ec 10          	sub    rsp,0x10
   1edc7:	e8 24 54 fe ff       	call   41f0 <dlerror@plt>
   1edcc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1edd0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1edd5:	74 02                	je     1edd9 <LDClearErrors()+0x1a>
   1edd7:	eb ee                	jmp    1edc7 <LDClearErrors()+0x8>
   1edd9:	90                   	nop
   1edda:	c9                   	leave  
   1eddb:	c3                   	ret    

000000000001eddc <LDLogCall(char const*, char const*, int)>:
   1eddc:	55                   	push   rbp
   1eddd:	48 89 e5             	mov    rbp,rsp
   1ede0:	48 83 ec 30          	sub    rsp,0x30
   1ede4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1ede8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1edec:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1edef:	c6 45 f7 01          	mov    BYTE PTR [rbp-0x9],0x1
   1edf3:	e8 f8 53 fe ff       	call   41f0 <dlerror@plt>
   1edf8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1edfc:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1ee01:	0f 84 a4 00 00 00    	je     1eeab <LDLogCall(char const*, char const*, int)+0xcf>
   1ee07:	48 8d 35 be c4 01 00 	lea    rsi,[rip+0x1c4be]        # 3b2cc <NANO_SEC+0x4>
   1ee0e:	48 8d 3d eb c6 02 00 	lea    rdi,[rip+0x2c6eb]        # 4b500 <std::cout@@GLIBCXX_3.4>
   1ee15:	e8 b6 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee1a:	48 89 c2             	mov    rdx,rax
   1ee1d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1ee21:	48 89 c6             	mov    rsi,rax
   1ee24:	48 89 d7             	mov    rdi,rdx
   1ee27:	e8 a4 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee2c:	48 8d 35 a2 c4 01 00 	lea    rsi,[rip+0x1c4a2]        # 3b2d5 <NANO_SEC+0xd>
   1ee33:	48 89 c7             	mov    rdi,rax
   1ee36:	e8 95 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee3b:	48 89 c2             	mov    rdx,rax
   1ee3e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1ee41:	89 c6                	mov    esi,eax
   1ee43:	48 89 d7             	mov    rdi,rdx
   1ee46:	e8 d5 58 fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   1ee4b:	48 8d 35 8a c4 01 00 	lea    rsi,[rip+0x1c48a]        # 3b2dc <NANO_SEC+0x14>
   1ee52:	48 89 c7             	mov    rdi,rax
   1ee55:	e8 76 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee5a:	48 89 c2             	mov    rdx,rax
   1ee5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ee61:	48 89 c6             	mov    rsi,rax
   1ee64:	48 89 d7             	mov    rdi,rdx
   1ee67:	e8 64 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee6c:	48 8d 35 69 c4 01 00 	lea    rsi,[rip+0x1c469]        # 3b2dc <NANO_SEC+0x14>
   1ee73:	48 89 c7             	mov    rdi,rax
   1ee76:	e8 55 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee7b:	48 89 c2             	mov    rdx,rax
   1ee7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ee82:	48 89 c6             	mov    rsi,rax
   1ee85:	48 89 d7             	mov    rdi,rdx
   1ee88:	e8 43 55 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ee8d:	48 89 c2             	mov    rdx,rax
   1ee90:	48 8b 05 29 c1 02 00 	mov    rax,QWORD PTR [rip+0x2c129]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1ee97:	48 89 c6             	mov    rsi,rax
   1ee9a:	48 89 d7             	mov    rdi,rdx
   1ee9d:	e8 8e 55 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1eea2:	c6 45 f7 00          	mov    BYTE PTR [rbp-0x9],0x0
   1eea6:	e9 48 ff ff ff       	jmp    1edf3 <LDLogCall(char const*, char const*, int)+0x17>
   1eeab:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
   1eeaf:	c9                   	leave  
   1eeb0:	c3                   	ret    

000000000001eeb1 <MemSet(void*, signed char, unsigned int)>:
   1eeb1:	55                   	push   rbp
   1eeb2:	48 89 e5             	mov    rbp,rsp
   1eeb5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1eeb9:	89 f0                	mov    eax,esi
   1eebb:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   1eebe:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
   1eec1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1eec8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1eecb:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1eece:	73 16                	jae    1eee6 <MemSet(void*, signed char, unsigned int)+0x35>
   1eed0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1eed3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1eed7:	48 01 c2             	add    rdx,rax
   1eeda:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
   1eede:	88 02                	mov    BYTE PTR [rdx],al
   1eee0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1eee4:	eb e2                	jmp    1eec8 <MemSet(void*, signed char, unsigned int)+0x17>
   1eee6:	90                   	nop
   1eee7:	5d                   	pop    rbp
   1eee8:	c3                   	ret    

000000000001eee9 <MemCpy(void*, void*, unsigned int)>:
   1eee9:	55                   	push   rbp
   1eeea:	48 89 e5             	mov    rbp,rsp
   1eeed:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1eef1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1eef5:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1eef8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1eeff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1ef02:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   1ef05:	73 1f                	jae    1ef26 <MemCpy(void*, void*, unsigned int)+0x3d>
   1ef07:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1ef0a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ef0e:	48 01 d0             	add    rax,rdx
   1ef11:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
   1ef14:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1ef18:	48 01 ca             	add    rdx,rcx
   1ef1b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ef1e:	88 02                	mov    BYTE PTR [rdx],al
   1ef20:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1ef24:	eb d9                	jmp    1eeff <MemCpy(void*, void*, unsigned int)+0x16>
   1ef26:	90                   	nop
   1ef27:	5d                   	pop    rbp
   1ef28:	c3                   	ret    

000000000001ef29 <LoadRendererInterface(RendererInterface&, char const*)>:
   1ef29:	55                   	push   rbp
   1ef2a:	48 89 e5             	mov    rbp,rsp
   1ef2d:	53                   	push   rbx
   1ef2e:	48 83 ec 48          	sub    rsp,0x48
   1ef32:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1ef36:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1ef3a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ef43:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1ef47:	31 c0                	xor    eax,eax
   1ef49:	48 8d 4d b0          	lea    rcx,[rbp-0x50]
   1ef4d:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1ef51:	ba 02 00 00 00       	mov    edx,0x2
   1ef56:	48 89 ce             	mov    rsi,rcx
   1ef59:	48 89 c7             	mov    rdi,rax
   1ef5c:	e8 0b 67 00 00       	call   2566c <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)>
   1ef61:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
   1ef65:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1ef69:	48 89 c7             	mov    rdi,rax
   1ef6c:	e8 cf 53 fe ff       	call   4340 <std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)@plt>
   1ef71:	48 89 83 20 01 00 00 	mov    QWORD PTR [rbx+0x120],rax
   1ef78:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1ef7c:	48 89 c7             	mov    rdi,rax
   1ef7f:	e8 fa 5d 00 00       	call   24d7e <std::filesystem::__cxx11::path::~path()>
   1ef84:	48 8d 35 53 c3 01 00 	lea    rsi,[rip+0x1c353]        # 3b2de <NANO_SEC+0x16>
   1ef8b:	48 8d 3d 6e c5 02 00 	lea    rdi,[rip+0x2c56e]        # 4b500 <std::cout@@GLIBCXX_3.4>
   1ef92:	e8 39 54 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1ef97:	48 89 c2             	mov    rdx,rax
   1ef9a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ef9e:	48 89 c6             	mov    rsi,rax
   1efa1:	48 89 d7             	mov    rdi,rdx
   1efa4:	e8 27 54 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1efa9:	48 89 c2             	mov    rdx,rax
   1efac:	48 8b 05 0d c0 02 00 	mov    rax,QWORD PTR [rip+0x2c00d]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1efb3:	48 89 c6             	mov    rsi,rax
   1efb6:	48 89 d7             	mov    rdi,rdx
   1efb9:	e8 72 54 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1efbe:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1efc2:	be 01 00 00 00       	mov    esi,0x1
   1efc7:	48 89 c7             	mov    rdi,rax
   1efca:	e8 71 56 fe ff       	call   4640 <dlopen@plt>
   1efcf:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1efd3:	48 89 02             	mov    QWORD PTR [rdx],rax
   1efd6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1efda:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1efdd:	48 85 c0             	test   rax,rax
   1efe0:	75 45                	jne    1f027 <LoadRendererInterface(RendererInterface&, char const*)+0xfe>
   1efe2:	48 8d 35 ff c2 01 00 	lea    rsi,[rip+0x1c2ff]        # 3b2e8 <NANO_SEC+0x20>
   1efe9:	48 8d 3d 30 c6 02 00 	lea    rdi,[rip+0x2c630]        # 4b620 <std::cerr@@GLIBCXX_3.4>
   1eff0:	e8 db 53 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1eff5:	48 89 c3             	mov    rbx,rax
   1eff8:	e8 f3 51 fe ff       	call   41f0 <dlerror@plt>
   1effd:	48 89 c6             	mov    rsi,rax
   1f000:	48 89 df             	mov    rdi,rbx
   1f003:	e8 c8 53 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f008:	48 89 c2             	mov    rdx,rax
   1f00b:	48 8b 05 ae bf 02 00 	mov    rax,QWORD PTR [rip+0x2bfae]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1f012:	48 89 c6             	mov    rsi,rax
   1f015:	48 89 d7             	mov    rdi,rdx
   1f018:	e8 13 54 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1f01d:	bf 01 00 00 00       	mov    edi,0x1
   1f022:	e8 e9 54 fe ff       	call   4510 <exit@plt>
   1f027:	48 8d 35 d0 c2 01 00 	lea    rsi,[rip+0x1c2d0]        # 3b2fe <NANO_SEC+0x36>
   1f02e:	48 8d 3d cb c4 02 00 	lea    rdi,[rip+0x2c4cb]        # 4b500 <std::cout@@GLIBCXX_3.4>
   1f035:	e8 96 53 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f03a:	48 89 c2             	mov    rdx,rax
   1f03d:	48 8b 05 7c bf 02 00 	mov    rax,QWORD PTR [rip+0x2bf7c]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1f044:	48 89 c6             	mov    rsi,rax
   1f047:	48 89 d7             	mov    rdi,rdx
   1f04a:	e8 e1 53 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1f04f:	e8 6b fd ff ff       	call   1edbf <LDClearErrors()>
   1f054:	e8 66 fd ff ff       	call   1edbf <LDClearErrors()>
   1f059:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f05d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f060:	48 8d 35 a7 c2 01 00 	lea    rsi,[rip+0x1c2a7]        # 3b30e <NANO_SEC+0x46>
   1f067:	48 89 c7             	mov    rdi,rax
   1f06a:	e8 21 57 fe ff       	call   4790 <dlsym@plt>
   1f06f:	48 89 c2             	mov    rdx,rax
   1f072:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f076:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   1f07a:	ba 81 00 00 00       	mov    edx,0x81
   1f07f:	48 8d 35 9a c2 01 00 	lea    rsi,[rip+0x1c29a]        # 3b320 <NANO_SEC+0x58>
   1f086:	48 8d 3d b3 c2 01 00 	lea    rdi,[rip+0x1c2b3]        # 3b340 <NANO_SEC+0x78>
   1f08d:	e8 4a fd ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f092:	83 f0 01             	xor    eax,0x1
   1f095:	84 c0                	test   al,al
   1f097:	74 02                	je     1f09b <LoadRendererInterface(RendererInterface&, char const*)+0x172>
   1f099:	0f 0b                	ud2    
   1f09b:	e8 1f fd ff ff       	call   1edbf <LDClearErrors()>
   1f0a0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f0a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f0a7:	48 8d 35 fe c2 01 00 	lea    rsi,[rip+0x1c2fe]        # 3b3ac <NANO_SEC+0xe4>
   1f0ae:	48 89 c7             	mov    rdi,rax
   1f0b1:	e8 da 56 fe ff       	call   4790 <dlsym@plt>
   1f0b6:	48 89 c2             	mov    rdx,rax
   1f0b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f0bd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   1f0c1:	ba 82 00 00 00       	mov    edx,0x82
   1f0c6:	48 8d 35 53 c2 01 00 	lea    rsi,[rip+0x1c253]        # 3b320 <NANO_SEC+0x58>
   1f0cd:	48 8d 3d fc c2 01 00 	lea    rdi,[rip+0x1c2fc]        # 3b3d0 <NANO_SEC+0x108>
   1f0d4:	e8 03 fd ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f0d9:	83 f0 01             	xor    eax,0x1
   1f0dc:	84 c0                	test   al,al
   1f0de:	74 02                	je     1f0e2 <LoadRendererInterface(RendererInterface&, char const*)+0x1b9>
   1f0e0:	0f 0b                	ud2    
   1f0e2:	e8 d8 fc ff ff       	call   1edbf <LDClearErrors()>
   1f0e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f0eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f0ee:	48 8d 35 71 c3 01 00 	lea    rsi,[rip+0x1c371]        # 3b466 <NANO_SEC+0x19e>
   1f0f5:	48 89 c7             	mov    rdi,rax
   1f0f8:	e8 93 56 fe ff       	call   4790 <dlsym@plt>
   1f0fd:	48 89 c2             	mov    rdx,rax
   1f100:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f104:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   1f108:	ba 83 00 00 00       	mov    edx,0x83
   1f10d:	48 8d 35 0c c2 01 00 	lea    rsi,[rip+0x1c20c]        # 3b320 <NANO_SEC+0x58>
   1f114:	48 8d 3d 65 c3 01 00 	lea    rdi,[rip+0x1c365]        # 3b480 <NANO_SEC+0x1b8>
   1f11b:	e8 bc fc ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f120:	83 f0 01             	xor    eax,0x1
   1f123:	84 c0                	test   al,al
   1f125:	74 02                	je     1f129 <LoadRendererInterface(RendererInterface&, char const*)+0x200>
   1f127:	0f 0b                	ud2    
   1f129:	e8 91 fc ff ff       	call   1edbf <LDClearErrors()>
   1f12e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f132:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f135:	48 8d 35 bc c3 01 00 	lea    rsi,[rip+0x1c3bc]        # 3b4f8 <NANO_SEC+0x230>
   1f13c:	48 89 c7             	mov    rdi,rax
   1f13f:	e8 4c 56 fe ff       	call   4790 <dlsym@plt>
   1f144:	48 89 c2             	mov    rdx,rax
   1f147:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f14b:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
   1f14f:	ba 85 00 00 00       	mov    edx,0x85
   1f154:	48 8d 35 c5 c1 01 00 	lea    rsi,[rip+0x1c1c5]        # 3b320 <NANO_SEC+0x58>
   1f15b:	48 8d 3d ae c3 01 00 	lea    rdi,[rip+0x1c3ae]        # 3b510 <NANO_SEC+0x248>
   1f162:	e8 75 fc ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f167:	83 f0 01             	xor    eax,0x1
   1f16a:	84 c0                	test   al,al
   1f16c:	74 02                	je     1f170 <LoadRendererInterface(RendererInterface&, char const*)+0x247>
   1f16e:	0f 0b                	ud2    
   1f170:	e8 4a fc ff ff       	call   1edbf <LDClearErrors()>
   1f175:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f179:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f17c:	48 8d 35 ff c3 01 00 	lea    rsi,[rip+0x1c3ff]        # 3b582 <NANO_SEC+0x2ba>
   1f183:	48 89 c7             	mov    rdi,rax
   1f186:	e8 05 56 fe ff       	call   4790 <dlsym@plt>
   1f18b:	48 89 c2             	mov    rdx,rax
   1f18e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f192:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
   1f196:	ba 86 00 00 00       	mov    edx,0x86
   1f19b:	48 8d 35 7e c1 01 00 	lea    rsi,[rip+0x1c17e]        # 3b320 <NANO_SEC+0x58>
   1f1a2:	48 8d 3d ef c3 01 00 	lea    rdi,[rip+0x1c3ef]        # 3b598 <NANO_SEC+0x2d0>
   1f1a9:	e8 2e fc ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f1ae:	83 f0 01             	xor    eax,0x1
   1f1b1:	84 c0                	test   al,al
   1f1b3:	74 02                	je     1f1b7 <LoadRendererInterface(RendererInterface&, char const*)+0x28e>
   1f1b5:	0f 0b                	ud2    
   1f1b7:	e8 03 fc ff ff       	call   1edbf <LDClearErrors()>
   1f1bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f1c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f1c3:	48 8d 35 3a c4 01 00 	lea    rsi,[rip+0x1c43a]        # 3b604 <NANO_SEC+0x33c>
   1f1ca:	48 89 c7             	mov    rdi,rax
   1f1cd:	e8 be 55 fe ff       	call   4790 <dlsym@plt>
   1f1d2:	48 89 c2             	mov    rdx,rax
   1f1d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f1d9:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
   1f1dd:	ba 87 00 00 00       	mov    edx,0x87
   1f1e2:	48 8d 35 37 c1 01 00 	lea    rsi,[rip+0x1c137]        # 3b320 <NANO_SEC+0x58>
   1f1e9:	48 8d 3d 20 c4 01 00 	lea    rdi,[rip+0x1c420]        # 3b610 <NANO_SEC+0x348>
   1f1f0:	e8 e7 fb ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f1f5:	83 f0 01             	xor    eax,0x1
   1f1f8:	84 c0                	test   al,al
   1f1fa:	74 02                	je     1f1fe <LoadRendererInterface(RendererInterface&, char const*)+0x2d5>
   1f1fc:	0f 0b                	ud2    
   1f1fe:	e8 bc fb ff ff       	call   1edbf <LDClearErrors()>
   1f203:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f207:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f20a:	48 8d 35 5f c4 01 00 	lea    rsi,[rip+0x1c45f]        # 3b670 <NANO_SEC+0x3a8>
   1f211:	48 89 c7             	mov    rdi,rax
   1f214:	e8 77 55 fe ff       	call   4790 <dlsym@plt>
   1f219:	48 89 c2             	mov    rdx,rax
   1f21c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f220:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
   1f224:	ba 88 00 00 00       	mov    edx,0x88
   1f229:	48 8d 35 f0 c0 01 00 	lea    rsi,[rip+0x1c0f0]        # 3b320 <NANO_SEC+0x58>
   1f230:	48 8d 3d 59 c4 01 00 	lea    rdi,[rip+0x1c459]        # 3b690 <NANO_SEC+0x3c8>
   1f237:	e8 a0 fb ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f23c:	83 f0 01             	xor    eax,0x1
   1f23f:	84 c0                	test   al,al
   1f241:	74 02                	je     1f245 <LoadRendererInterface(RendererInterface&, char const*)+0x31c>
   1f243:	0f 0b                	ud2    
   1f245:	e8 75 fb ff ff       	call   1edbf <LDClearErrors()>
   1f24a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f24e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f251:	48 8d 35 bf c4 01 00 	lea    rsi,[rip+0x1c4bf]        # 3b717 <NANO_SEC+0x44f>
   1f258:	48 89 c7             	mov    rdi,rax
   1f25b:	e8 30 55 fe ff       	call   4790 <dlsym@plt>
   1f260:	48 89 c2             	mov    rdx,rax
   1f263:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f267:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
   1f26b:	ba 89 00 00 00       	mov    edx,0x89
   1f270:	48 8d 35 a9 c0 01 00 	lea    rsi,[rip+0x1c0a9]        # 3b320 <NANO_SEC+0x58>
   1f277:	48 8d 3d b2 c4 01 00 	lea    rdi,[rip+0x1c4b2]        # 3b730 <NANO_SEC+0x468>
   1f27e:	e8 59 fb ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f283:	83 f0 01             	xor    eax,0x1
   1f286:	84 c0                	test   al,al
   1f288:	74 02                	je     1f28c <LoadRendererInterface(RendererInterface&, char const*)+0x363>
   1f28a:	0f 0b                	ud2    
   1f28c:	e8 2e fb ff ff       	call   1edbf <LDClearErrors()>
   1f291:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f295:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f298:	48 8d 35 18 c5 01 00 	lea    rsi,[rip+0x1c518]        # 3b7b7 <NANO_SEC+0x4ef>
   1f29f:	48 89 c7             	mov    rdi,rax
   1f2a2:	e8 e9 54 fe ff       	call   4790 <dlsym@plt>
   1f2a7:	48 89 c2             	mov    rdx,rax
   1f2aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f2ae:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
   1f2b2:	ba 8a 00 00 00       	mov    edx,0x8a
   1f2b7:	48 8d 35 62 c0 01 00 	lea    rsi,[rip+0x1c062]        # 3b320 <NANO_SEC+0x58>
   1f2be:	48 8d 3d 0b c5 01 00 	lea    rdi,[rip+0x1c50b]        # 3b7d0 <NANO_SEC+0x508>
   1f2c5:	e8 12 fb ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f2ca:	83 f0 01             	xor    eax,0x1
   1f2cd:	84 c0                	test   al,al
   1f2cf:	74 02                	je     1f2d3 <LoadRendererInterface(RendererInterface&, char const*)+0x3aa>
   1f2d1:	0f 0b                	ud2    
   1f2d3:	e8 e7 fa ff ff       	call   1edbf <LDClearErrors()>
   1f2d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f2dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f2df:	48 8d 35 71 c5 01 00 	lea    rsi,[rip+0x1c571]        # 3b857 <NANO_SEC+0x58f>
   1f2e6:	48 89 c7             	mov    rdi,rax
   1f2e9:	e8 a2 54 fe ff       	call   4790 <dlsym@plt>
   1f2ee:	48 89 c2             	mov    rdx,rax
   1f2f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f2f5:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
   1f2f9:	ba 8b 00 00 00       	mov    edx,0x8b
   1f2fe:	48 8d 35 1b c0 01 00 	lea    rsi,[rip+0x1c01b]        # 3b320 <NANO_SEC+0x58>
   1f305:	48 8d 3d 5c c5 01 00 	lea    rdi,[rip+0x1c55c]        # 3b868 <NANO_SEC+0x5a0>
   1f30c:	e8 cb fa ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f311:	83 f0 01             	xor    eax,0x1
   1f314:	84 c0                	test   al,al
   1f316:	74 02                	je     1f31a <LoadRendererInterface(RendererInterface&, char const*)+0x3f1>
   1f318:	0f 0b                	ud2    
   1f31a:	e8 a0 fa ff ff       	call   1edbf <LDClearErrors()>
   1f31f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f323:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f326:	48 8d 35 98 c5 01 00 	lea    rsi,[rip+0x1c598]        # 3b8c5 <NANO_SEC+0x5fd>
   1f32d:	48 89 c7             	mov    rdi,rax
   1f330:	e8 5b 54 fe ff       	call   4790 <dlsym@plt>
   1f335:	48 89 c2             	mov    rdx,rax
   1f338:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f33c:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
   1f340:	ba 8c 00 00 00       	mov    edx,0x8c
   1f345:	48 8d 35 d4 bf 01 00 	lea    rsi,[rip+0x1bfd4]        # 3b320 <NANO_SEC+0x58>
   1f34c:	48 8d 3d 85 c5 01 00 	lea    rdi,[rip+0x1c585]        # 3b8d8 <NANO_SEC+0x610>
   1f353:	e8 84 fa ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f358:	83 f0 01             	xor    eax,0x1
   1f35b:	84 c0                	test   al,al
   1f35d:	74 02                	je     1f361 <LoadRendererInterface(RendererInterface&, char const*)+0x438>
   1f35f:	0f 0b                	ud2    
   1f361:	e8 59 fa ff ff       	call   1edbf <LDClearErrors()>
   1f366:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f36a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f36d:	48 8d 35 c7 c5 01 00 	lea    rsi,[rip+0x1c5c7]        # 3b93b <NANO_SEC+0x673>
   1f374:	48 89 c7             	mov    rdi,rax
   1f377:	e8 14 54 fe ff       	call   4790 <dlsym@plt>
   1f37c:	48 89 c2             	mov    rdx,rax
   1f37f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f383:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
   1f387:	ba 8d 00 00 00       	mov    edx,0x8d
   1f38c:	48 8d 35 8d bf 01 00 	lea    rsi,[rip+0x1bf8d]        # 3b320 <NANO_SEC+0x58>
   1f393:	48 8d 3d ae c5 01 00 	lea    rdi,[rip+0x1c5ae]        # 3b948 <NANO_SEC+0x680>
   1f39a:	e8 3d fa ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f39f:	83 f0 01             	xor    eax,0x1
   1f3a2:	84 c0                	test   al,al
   1f3a4:	74 02                	je     1f3a8 <LoadRendererInterface(RendererInterface&, char const*)+0x47f>
   1f3a6:	0f 0b                	ud2    
   1f3a8:	e8 12 fa ff ff       	call   1edbf <LDClearErrors()>
   1f3ad:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f3b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f3b4:	48 8d 35 f0 c5 01 00 	lea    rsi,[rip+0x1c5f0]        # 3b9ab <NANO_SEC+0x6e3>
   1f3bb:	48 89 c7             	mov    rdi,rax
   1f3be:	e8 cd 53 fe ff       	call   4790 <dlsym@plt>
   1f3c3:	48 89 c2             	mov    rdx,rax
   1f3c6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f3ca:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
   1f3ce:	ba 8e 00 00 00       	mov    edx,0x8e
   1f3d3:	48 8d 35 46 bf 01 00 	lea    rsi,[rip+0x1bf46]        # 3b320 <NANO_SEC+0x58>
   1f3da:	48 8d 3d df c5 01 00 	lea    rdi,[rip+0x1c5df]        # 3b9c0 <NANO_SEC+0x6f8>
   1f3e1:	e8 f6 f9 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f3e6:	83 f0 01             	xor    eax,0x1
   1f3e9:	84 c0                	test   al,al
   1f3eb:	74 02                	je     1f3ef <LoadRendererInterface(RendererInterface&, char const*)+0x4c6>
   1f3ed:	0f 0b                	ud2    
   1f3ef:	e8 cb f9 ff ff       	call   1edbf <LDClearErrors()>
   1f3f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f3f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f3fb:	48 8d 35 24 c6 01 00 	lea    rsi,[rip+0x1c624]        # 3ba26 <NANO_SEC+0x75e>
   1f402:	48 89 c7             	mov    rdi,rax
   1f405:	e8 86 53 fe ff       	call   4790 <dlsym@plt>
   1f40a:	48 89 c2             	mov    rdx,rax
   1f40d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f411:	48 89 50 70          	mov    QWORD PTR [rax+0x70],rdx
   1f415:	ba 8f 00 00 00       	mov    edx,0x8f
   1f41a:	48 8d 35 ff be 01 00 	lea    rsi,[rip+0x1beff]        # 3b320 <NANO_SEC+0x58>
   1f421:	48 8d 3d 18 c6 01 00 	lea    rdi,[rip+0x1c618]        # 3ba40 <NANO_SEC+0x778>
   1f428:	e8 af f9 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f42d:	83 f0 01             	xor    eax,0x1
   1f430:	84 c0                	test   al,al
   1f432:	74 02                	je     1f436 <LoadRendererInterface(RendererInterface&, char const*)+0x50d>
   1f434:	0f 0b                	ud2    
   1f436:	e8 84 f9 ff ff       	call   1edbf <LDClearErrors()>
   1f43b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f43f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f442:	48 8d 35 72 c6 01 00 	lea    rsi,[rip+0x1c672]        # 3babb <NANO_SEC+0x7f3>
   1f449:	48 89 c7             	mov    rdi,rax
   1f44c:	e8 3f 53 fe ff       	call   4790 <dlsym@plt>
   1f451:	48 89 c2             	mov    rdx,rax
   1f454:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f458:	48 89 50 78          	mov    QWORD PTR [rax+0x78],rdx
   1f45c:	ba 90 00 00 00       	mov    edx,0x90
   1f461:	48 8d 35 b8 be 01 00 	lea    rsi,[rip+0x1beb8]        # 3b320 <NANO_SEC+0x58>
   1f468:	48 8d 3d 61 c6 01 00 	lea    rdi,[rip+0x1c661]        # 3bad0 <NANO_SEC+0x808>
   1f46f:	e8 68 f9 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f474:	83 f0 01             	xor    eax,0x1
   1f477:	84 c0                	test   al,al
   1f479:	74 02                	je     1f47d <LoadRendererInterface(RendererInterface&, char const*)+0x554>
   1f47b:	0f 0b                	ud2    
   1f47d:	e8 3d f9 ff ff       	call   1edbf <LDClearErrors()>
   1f482:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f486:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f489:	48 8d 35 b5 c6 01 00 	lea    rsi,[rip+0x1c6b5]        # 3bb45 <NANO_SEC+0x87d>
   1f490:	48 89 c7             	mov    rdi,rax
   1f493:	e8 f8 52 fe ff       	call   4790 <dlsym@plt>
   1f498:	48 89 c2             	mov    rdx,rax
   1f49b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f49f:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
   1f4a6:	ba 91 00 00 00       	mov    edx,0x91
   1f4ab:	48 8d 35 6e be 01 00 	lea    rsi,[rip+0x1be6e]        # 3b320 <NANO_SEC+0x58>
   1f4b2:	48 8d 3d 9f c6 01 00 	lea    rdi,[rip+0x1c69f]        # 3bb58 <NANO_SEC+0x890>
   1f4b9:	e8 1e f9 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f4be:	83 f0 01             	xor    eax,0x1
   1f4c1:	84 c0                	test   al,al
   1f4c3:	74 02                	je     1f4c7 <LoadRendererInterface(RendererInterface&, char const*)+0x59e>
   1f4c5:	0f 0b                	ud2    
   1f4c7:	e8 f3 f8 ff ff       	call   1edbf <LDClearErrors()>
   1f4cc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f4d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f4d3:	48 8d 35 ed c6 01 00 	lea    rsi,[rip+0x1c6ed]        # 3bbc7 <NANO_SEC+0x8ff>
   1f4da:	48 89 c7             	mov    rdi,rax
   1f4dd:	e8 ae 52 fe ff       	call   4790 <dlsym@plt>
   1f4e2:	48 89 c2             	mov    rdx,rax
   1f4e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f4e9:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
   1f4f0:	ba 92 00 00 00       	mov    edx,0x92
   1f4f5:	48 8d 35 24 be 01 00 	lea    rsi,[rip+0x1be24]        # 3b320 <NANO_SEC+0x58>
   1f4fc:	48 8d 3d d5 c6 01 00 	lea    rdi,[rip+0x1c6d5]        # 3bbd8 <NANO_SEC+0x910>
   1f503:	e8 d4 f8 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f508:	83 f0 01             	xor    eax,0x1
   1f50b:	84 c0                	test   al,al
   1f50d:	74 02                	je     1f511 <LoadRendererInterface(RendererInterface&, char const*)+0x5e8>
   1f50f:	0f 0b                	ud2    
   1f511:	e8 a9 f8 ff ff       	call   1edbf <LDClearErrors()>
   1f516:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f51a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f51d:	48 8d 35 1d c7 01 00 	lea    rsi,[rip+0x1c71d]        # 3bc41 <NANO_SEC+0x979>
   1f524:	48 89 c7             	mov    rdi,rax
   1f527:	e8 64 52 fe ff       	call   4790 <dlsym@plt>
   1f52c:	48 89 c2             	mov    rdx,rax
   1f52f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f533:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
   1f53a:	ba 93 00 00 00       	mov    edx,0x93
   1f53f:	48 8d 35 da bd 01 00 	lea    rsi,[rip+0x1bdda]        # 3b320 <NANO_SEC+0x58>
   1f546:	48 8d 3d 0b c7 01 00 	lea    rdi,[rip+0x1c70b]        # 3bc58 <NANO_SEC+0x990>
   1f54d:	e8 8a f8 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f552:	83 f0 01             	xor    eax,0x1
   1f555:	84 c0                	test   al,al
   1f557:	74 02                	je     1f55b <LoadRendererInterface(RendererInterface&, char const*)+0x632>
   1f559:	0f 0b                	ud2    
   1f55b:	e8 5f f8 ff ff       	call   1edbf <LDClearErrors()>
   1f560:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f564:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f567:	48 8d 35 56 c7 01 00 	lea    rsi,[rip+0x1c756]        # 3bcc4 <NANO_SEC+0x9fc>
   1f56e:	48 89 c7             	mov    rdi,rax
   1f571:	e8 1a 52 fe ff       	call   4790 <dlsym@plt>
   1f576:	48 89 c2             	mov    rdx,rax
   1f579:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f57d:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
   1f584:	ba 94 00 00 00       	mov    edx,0x94
   1f589:	48 8d 35 90 bd 01 00 	lea    rsi,[rip+0x1bd90]        # 3b320 <NANO_SEC+0x58>
   1f590:	48 8d 3d 41 c7 01 00 	lea    rdi,[rip+0x1c741]        # 3bcd8 <NANO_SEC+0xa10>
   1f597:	e8 40 f8 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f59c:	83 f0 01             	xor    eax,0x1
   1f59f:	84 c0                	test   al,al
   1f5a1:	74 02                	je     1f5a5 <LoadRendererInterface(RendererInterface&, char const*)+0x67c>
   1f5a3:	0f 0b                	ud2    
   1f5a5:	e8 15 f8 ff ff       	call   1edbf <LDClearErrors()>
   1f5aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f5ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f5b1:	48 8d 35 98 c7 01 00 	lea    rsi,[rip+0x1c798]        # 3bd50 <NANO_SEC+0xa88>
   1f5b8:	48 89 c7             	mov    rdi,rax
   1f5bb:	e8 d0 51 fe ff       	call   4790 <dlsym@plt>
   1f5c0:	48 89 c2             	mov    rdx,rax
   1f5c3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f5c7:	48 89 90 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],rdx
   1f5ce:	ba 95 00 00 00       	mov    edx,0x95
   1f5d3:	48 8d 35 46 bd 01 00 	lea    rsi,[rip+0x1bd46]        # 3b320 <NANO_SEC+0x58>
   1f5da:	48 8d 3d 7f c7 01 00 	lea    rdi,[rip+0x1c77f]        # 3bd60 <NANO_SEC+0xa98>
   1f5e1:	e8 f6 f7 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f5e6:	83 f0 01             	xor    eax,0x1
   1f5e9:	84 c0                	test   al,al
   1f5eb:	74 02                	je     1f5ef <LoadRendererInterface(RendererInterface&, char const*)+0x6c6>
   1f5ed:	0f 0b                	ud2    
   1f5ef:	e8 cb f7 ff ff       	call   1edbf <LDClearErrors()>
   1f5f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f5f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f5fb:	48 8d 35 c1 c7 01 00 	lea    rsi,[rip+0x1c7c1]        # 3bdc3 <NANO_SEC+0xafb>
   1f602:	48 89 c7             	mov    rdi,rax
   1f605:	e8 86 51 fe ff       	call   4790 <dlsym@plt>
   1f60a:	48 89 c2             	mov    rdx,rax
   1f60d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f611:	48 89 90 a8 00 00 00 	mov    QWORD PTR [rax+0xa8],rdx
   1f618:	ba 96 00 00 00       	mov    edx,0x96
   1f61d:	48 8d 35 fc bc 01 00 	lea    rsi,[rip+0x1bcfc]        # 3b320 <NANO_SEC+0x58>
   1f624:	48 8d 3d a5 c7 01 00 	lea    rdi,[rip+0x1c7a5]        # 3bdd0 <NANO_SEC+0xb08>
   1f62b:	e8 ac f7 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f630:	83 f0 01             	xor    eax,0x1
   1f633:	84 c0                	test   al,al
   1f635:	74 02                	je     1f639 <LoadRendererInterface(RendererInterface&, char const*)+0x710>
   1f637:	0f 0b                	ud2    
   1f639:	e8 81 f7 ff ff       	call   1edbf <LDClearErrors()>
   1f63e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f642:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f645:	48 8d 35 e4 c7 01 00 	lea    rsi,[rip+0x1c7e4]        # 3be30 <NANO_SEC+0xb68>
   1f64c:	48 89 c7             	mov    rdi,rax
   1f64f:	e8 3c 51 fe ff       	call   4790 <dlsym@plt>
   1f654:	48 89 c2             	mov    rdx,rax
   1f657:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f65b:	48 89 90 b0 00 00 00 	mov    QWORD PTR [rax+0xb0],rdx
   1f662:	ba 97 00 00 00       	mov    edx,0x97
   1f667:	48 8d 35 b2 bc 01 00 	lea    rsi,[rip+0x1bcb2]        # 3b320 <NANO_SEC+0x58>
   1f66e:	48 8d 3d cb c7 01 00 	lea    rdi,[rip+0x1c7cb]        # 3be40 <NANO_SEC+0xb78>
   1f675:	e8 62 f7 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f67a:	83 f0 01             	xor    eax,0x1
   1f67d:	84 c0                	test   al,al
   1f67f:	74 02                	je     1f683 <LoadRendererInterface(RendererInterface&, char const*)+0x75a>
   1f681:	0f 0b                	ud2    
   1f683:	e8 37 f7 ff ff       	call   1edbf <LDClearErrors()>
   1f688:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f68c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f68f:	48 8d 35 10 c8 01 00 	lea    rsi,[rip+0x1c810]        # 3bea6 <NANO_SEC+0xbde>
   1f696:	48 89 c7             	mov    rdi,rax
   1f699:	e8 f2 50 fe ff       	call   4790 <dlsym@plt>
   1f69e:	48 89 c2             	mov    rdx,rax
   1f6a1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f6a5:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
   1f6ac:	ba 98 00 00 00       	mov    edx,0x98
   1f6b1:	48 8d 35 68 bc 01 00 	lea    rsi,[rip+0x1bc68]        # 3b320 <NANO_SEC+0x58>
   1f6b8:	48 8d 3d f9 c7 01 00 	lea    rdi,[rip+0x1c7f9]        # 3beb8 <NANO_SEC+0xbf0>
   1f6bf:	e8 18 f7 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f6c4:	83 f0 01             	xor    eax,0x1
   1f6c7:	84 c0                	test   al,al
   1f6c9:	74 02                	je     1f6cd <LoadRendererInterface(RendererInterface&, char const*)+0x7a4>
   1f6cb:	0f 0b                	ud2    
   1f6cd:	e8 ed f6 ff ff       	call   1edbf <LDClearErrors()>
   1f6d2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f6d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f6d9:	48 8d 35 3b c8 01 00 	lea    rsi,[rip+0x1c83b]        # 3bf1b <NANO_SEC+0xc53>
   1f6e0:	48 89 c7             	mov    rdi,rax
   1f6e3:	e8 a8 50 fe ff       	call   4790 <dlsym@plt>
   1f6e8:	48 89 c2             	mov    rdx,rax
   1f6eb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f6ef:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
   1f6f6:	ba 99 00 00 00       	mov    edx,0x99
   1f6fb:	48 8d 35 1e bc 01 00 	lea    rsi,[rip+0x1bc1e]        # 3b320 <NANO_SEC+0x58>
   1f702:	48 8d 3d 1f c8 01 00 	lea    rdi,[rip+0x1c81f]        # 3bf28 <NANO_SEC+0xc60>
   1f709:	e8 ce f6 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f70e:	83 f0 01             	xor    eax,0x1
   1f711:	84 c0                	test   al,al
   1f713:	74 02                	je     1f717 <LoadRendererInterface(RendererInterface&, char const*)+0x7ee>
   1f715:	0f 0b                	ud2    
   1f717:	e8 a3 f6 ff ff       	call   1edbf <LDClearErrors()>
   1f71c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f720:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f723:	48 8d 35 5e c8 01 00 	lea    rsi,[rip+0x1c85e]        # 3bf88 <NANO_SEC+0xcc0>
   1f72a:	48 89 c7             	mov    rdi,rax
   1f72d:	e8 5e 50 fe ff       	call   4790 <dlsym@plt>
   1f732:	48 89 c2             	mov    rdx,rax
   1f735:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f739:	48 89 90 c8 00 00 00 	mov    QWORD PTR [rax+0xc8],rdx
   1f740:	ba 9a 00 00 00       	mov    edx,0x9a
   1f745:	48 8d 35 d4 bb 01 00 	lea    rsi,[rip+0x1bbd4]        # 3b320 <NANO_SEC+0x58>
   1f74c:	48 8d 3d 45 c8 01 00 	lea    rdi,[rip+0x1c845]        # 3bf98 <NANO_SEC+0xcd0>
   1f753:	e8 84 f6 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f758:	83 f0 01             	xor    eax,0x1
   1f75b:	84 c0                	test   al,al
   1f75d:	74 02                	je     1f761 <LoadRendererInterface(RendererInterface&, char const*)+0x838>
   1f75f:	0f 0b                	ud2    
   1f761:	e8 59 f6 ff ff       	call   1edbf <LDClearErrors()>
   1f766:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f76a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f76d:	48 8d 35 84 c8 01 00 	lea    rsi,[rip+0x1c884]        # 3bff8 <NANO_SEC+0xd30>
   1f774:	48 89 c7             	mov    rdi,rax
   1f777:	e8 14 50 fe ff       	call   4790 <dlsym@plt>
   1f77c:	48 89 c2             	mov    rdx,rax
   1f77f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f783:	48 89 90 d0 00 00 00 	mov    QWORD PTR [rax+0xd0],rdx
   1f78a:	ba 9b 00 00 00       	mov    edx,0x9b
   1f78f:	48 8d 35 8a bb 01 00 	lea    rsi,[rip+0x1bb8a]        # 3b320 <NANO_SEC+0x58>
   1f796:	48 8d 3d 6b c8 01 00 	lea    rdi,[rip+0x1c86b]        # 3c008 <NANO_SEC+0xd40>
   1f79d:	e8 3a f6 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f7a2:	83 f0 01             	xor    eax,0x1
   1f7a5:	84 c0                	test   al,al
   1f7a7:	74 02                	je     1f7ab <LoadRendererInterface(RendererInterface&, char const*)+0x882>
   1f7a9:	0f 0b                	ud2    
   1f7ab:	e8 0f f6 ff ff       	call   1edbf <LDClearErrors()>
   1f7b0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f7b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f7b7:	48 8d 35 b3 c8 01 00 	lea    rsi,[rip+0x1c8b3]        # 3c071 <NANO_SEC+0xda9>
   1f7be:	48 89 c7             	mov    rdi,rax
   1f7c1:	e8 ca 4f fe ff       	call   4790 <dlsym@plt>
   1f7c6:	48 89 c2             	mov    rdx,rax
   1f7c9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f7cd:	48 89 90 d8 00 00 00 	mov    QWORD PTR [rax+0xd8],rdx
   1f7d4:	ba 9c 00 00 00       	mov    edx,0x9c
   1f7d9:	48 8d 35 40 bb 01 00 	lea    rsi,[rip+0x1bb40]        # 3b320 <NANO_SEC+0x58>
   1f7e0:	48 8d 3d 99 c8 01 00 	lea    rdi,[rip+0x1c899]        # 3c080 <NANO_SEC+0xdb8>
   1f7e7:	e8 f0 f5 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f7ec:	83 f0 01             	xor    eax,0x1
   1f7ef:	84 c0                	test   al,al
   1f7f1:	74 02                	je     1f7f5 <LoadRendererInterface(RendererInterface&, char const*)+0x8cc>
   1f7f3:	0f 0b                	ud2    
   1f7f5:	e8 c5 f5 ff ff       	call   1edbf <LDClearErrors()>
   1f7fa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f7fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f801:	48 8d 35 69 c8 01 00 	lea    rsi,[rip+0x1c869]        # 3c071 <NANO_SEC+0xda9>
   1f808:	48 89 c7             	mov    rdi,rax
   1f80b:	e8 80 4f fe ff       	call   4790 <dlsym@plt>
   1f810:	48 89 c2             	mov    rdx,rax
   1f813:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f817:	48 89 90 d8 00 00 00 	mov    QWORD PTR [rax+0xd8],rdx
   1f81e:	ba 9d 00 00 00       	mov    edx,0x9d
   1f823:	48 8d 35 f6 ba 01 00 	lea    rsi,[rip+0x1baf6]        # 3b320 <NANO_SEC+0x58>
   1f82a:	48 8d 3d 4f c8 01 00 	lea    rdi,[rip+0x1c84f]        # 3c080 <NANO_SEC+0xdb8>
   1f831:	e8 a6 f5 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f836:	83 f0 01             	xor    eax,0x1
   1f839:	84 c0                	test   al,al
   1f83b:	74 02                	je     1f83f <LoadRendererInterface(RendererInterface&, char const*)+0x916>
   1f83d:	0f 0b                	ud2    
   1f83f:	e8 7b f5 ff ff       	call   1edbf <LDClearErrors()>
   1f844:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f848:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f84b:	48 8d 35 94 c8 01 00 	lea    rsi,[rip+0x1c894]        # 3c0e6 <NANO_SEC+0xe1e>
   1f852:	48 89 c7             	mov    rdi,rax
   1f855:	e8 36 4f fe ff       	call   4790 <dlsym@plt>
   1f85a:	48 89 c2             	mov    rdx,rax
   1f85d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f861:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
   1f868:	ba 9e 00 00 00       	mov    edx,0x9e
   1f86d:	48 8d 35 ac ba 01 00 	lea    rsi,[rip+0x1baac]        # 3b320 <NANO_SEC+0x58>
   1f874:	48 8d 3d 85 c8 01 00 	lea    rdi,[rip+0x1c885]        # 3c100 <NANO_SEC+0xe38>
   1f87b:	e8 5c f5 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f880:	83 f0 01             	xor    eax,0x1
   1f883:	84 c0                	test   al,al
   1f885:	74 02                	je     1f889 <LoadRendererInterface(RendererInterface&, char const*)+0x960>
   1f887:	0f 0b                	ud2    
   1f889:	e8 31 f5 ff ff       	call   1edbf <LDClearErrors()>
   1f88e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f892:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f895:	48 8d 35 dc c8 01 00 	lea    rsi,[rip+0x1c8dc]        # 3c178 <NANO_SEC+0xeb0>
   1f89c:	48 89 c7             	mov    rdi,rax
   1f89f:	e8 ec 4e fe ff       	call   4790 <dlsym@plt>
   1f8a4:	48 89 c2             	mov    rdx,rax
   1f8a7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f8ab:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
   1f8b2:	ba 9f 00 00 00       	mov    edx,0x9f
   1f8b7:	48 8d 35 62 ba 01 00 	lea    rsi,[rip+0x1ba62]        # 3b320 <NANO_SEC+0x58>
   1f8be:	48 8d 3d cb c8 01 00 	lea    rdi,[rip+0x1c8cb]        # 3c190 <NANO_SEC+0xec8>
   1f8c5:	e8 12 f5 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f8ca:	83 f0 01             	xor    eax,0x1
   1f8cd:	84 c0                	test   al,al
   1f8cf:	74 02                	je     1f8d3 <LoadRendererInterface(RendererInterface&, char const*)+0x9aa>
   1f8d1:	0f 0b                	ud2    
   1f8d3:	e8 e7 f4 ff ff       	call   1edbf <LDClearErrors()>
   1f8d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f8dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f8df:	48 8d 35 25 c9 01 00 	lea    rsi,[rip+0x1c925]        # 3c20b <NANO_SEC+0xf43>
   1f8e6:	48 89 c7             	mov    rdi,rax
   1f8e9:	e8 a2 4e fe ff       	call   4790 <dlsym@plt>
   1f8ee:	48 89 c2             	mov    rdx,rax
   1f8f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f8f5:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
   1f8fc:	ba a1 00 00 00       	mov    edx,0xa1
   1f901:	48 8d 35 18 ba 01 00 	lea    rsi,[rip+0x1ba18]        # 3b320 <NANO_SEC+0x58>
   1f908:	48 8d 3d 11 c9 01 00 	lea    rdi,[rip+0x1c911]        # 3c220 <NANO_SEC+0xf58>
   1f90f:	e8 c8 f4 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f914:	83 f0 01             	xor    eax,0x1
   1f917:	84 c0                	test   al,al
   1f919:	74 02                	je     1f91d <LoadRendererInterface(RendererInterface&, char const*)+0x9f4>
   1f91b:	0f 0b                	ud2    
   1f91d:	e8 9d f4 ff ff       	call   1edbf <LDClearErrors()>
   1f922:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f926:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f929:	48 8d 35 68 c9 01 00 	lea    rsi,[rip+0x1c968]        # 3c298 <NANO_SEC+0xfd0>
   1f930:	48 89 c7             	mov    rdi,rax
   1f933:	e8 58 4e fe ff       	call   4790 <dlsym@plt>
   1f938:	48 89 c2             	mov    rdx,rax
   1f93b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f93f:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
   1f946:	ba a2 00 00 00       	mov    edx,0xa2
   1f94b:	48 8d 35 ce b9 01 00 	lea    rsi,[rip+0x1b9ce]        # 3b320 <NANO_SEC+0x58>
   1f952:	48 8d 3d 57 c9 01 00 	lea    rdi,[rip+0x1c957]        # 3c2b0 <NANO_SEC+0xfe8>
   1f959:	e8 7e f4 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f95e:	83 f0 01             	xor    eax,0x1
   1f961:	84 c0                	test   al,al
   1f963:	74 02                	je     1f967 <LoadRendererInterface(RendererInterface&, char const*)+0xa3e>
   1f965:	0f 0b                	ud2    
   1f967:	e8 53 f4 ff ff       	call   1edbf <LDClearErrors()>
   1f96c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f970:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f973:	48 8d 35 b7 c9 01 00 	lea    rsi,[rip+0x1c9b7]        # 3c331 <NANO_SEC+0x1069>
   1f97a:	48 89 c7             	mov    rdi,rax
   1f97d:	e8 0e 4e fe ff       	call   4790 <dlsym@plt>
   1f982:	48 89 c2             	mov    rdx,rax
   1f985:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f989:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
   1f990:	ba a4 00 00 00       	mov    edx,0xa4
   1f995:	48 8d 35 84 b9 01 00 	lea    rsi,[rip+0x1b984]        # 3b320 <NANO_SEC+0x58>
   1f99c:	48 8d 3d 9d c9 01 00 	lea    rdi,[rip+0x1c99d]        # 3c340 <NANO_SEC+0x1078>
   1f9a3:	e8 34 f4 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f9a8:	83 f0 01             	xor    eax,0x1
   1f9ab:	84 c0                	test   al,al
   1f9ad:	74 02                	je     1f9b1 <LoadRendererInterface(RendererInterface&, char const*)+0xa88>
   1f9af:	0f 0b                	ud2    
   1f9b1:	e8 09 f4 ff ff       	call   1edbf <LDClearErrors()>
   1f9b6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f9ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f9bd:	48 8d 35 e5 c9 01 00 	lea    rsi,[rip+0x1c9e5]        # 3c3a9 <NANO_SEC+0x10e1>
   1f9c4:	48 89 c7             	mov    rdi,rax
   1f9c7:	e8 c4 4d fe ff       	call   4790 <dlsym@plt>
   1f9cc:	48 89 c2             	mov    rdx,rax
   1f9cf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f9d3:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
   1f9da:	ba a5 00 00 00       	mov    edx,0xa5
   1f9df:	48 8d 35 3a b9 01 00 	lea    rsi,[rip+0x1b93a]        # 3b320 <NANO_SEC+0x58>
   1f9e6:	48 8d 3d cb c9 01 00 	lea    rdi,[rip+0x1c9cb]        # 3c3b8 <NANO_SEC+0x10f0>
   1f9ed:	e8 ea f3 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1f9f2:	83 f0 01             	xor    eax,0x1
   1f9f5:	84 c0                	test   al,al
   1f9f7:	74 02                	je     1f9fb <LoadRendererInterface(RendererInterface&, char const*)+0xad2>
   1f9f9:	0f 0b                	ud2    
   1f9fb:	e8 bf f3 ff ff       	call   1edbf <LDClearErrors()>
   1fa00:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa04:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fa07:	48 8d 35 0d ca 01 00 	lea    rsi,[rip+0x1ca0d]        # 3c41b <NANO_SEC+0x1153>
   1fa0e:	48 89 c7             	mov    rdi,rax
   1fa11:	e8 7a 4d fe ff       	call   4790 <dlsym@plt>
   1fa16:	48 89 c2             	mov    rdx,rax
   1fa19:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa1d:	48 89 90 10 01 00 00 	mov    QWORD PTR [rax+0x110],rdx
   1fa24:	ba a7 00 00 00       	mov    edx,0xa7
   1fa29:	48 8d 35 f0 b8 01 00 	lea    rsi,[rip+0x1b8f0]        # 3b320 <NANO_SEC+0x58>
   1fa30:	48 8d 3d f1 c9 01 00 	lea    rdi,[rip+0x1c9f1]        # 3c428 <NANO_SEC+0x1160>
   1fa37:	e8 a0 f3 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1fa3c:	83 f0 01             	xor    eax,0x1
   1fa3f:	84 c0                	test   al,al
   1fa41:	74 02                	je     1fa45 <LoadRendererInterface(RendererInterface&, char const*)+0xb1c>
   1fa43:	0f 0b                	ud2    
   1fa45:	e8 75 f3 ff ff       	call   1edbf <LDClearErrors()>
   1fa4a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa4e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fa51:	48 8d 35 2a ca 01 00 	lea    rsi,[rip+0x1ca2a]        # 3c482 <NANO_SEC+0x11ba>
   1fa58:	48 89 c7             	mov    rdi,rax
   1fa5b:	e8 30 4d fe ff       	call   4790 <dlsym@plt>
   1fa60:	48 89 c2             	mov    rdx,rax
   1fa63:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa67:	48 89 90 18 01 00 00 	mov    QWORD PTR [rax+0x118],rdx
   1fa6e:	ba a8 00 00 00       	mov    edx,0xa8
   1fa73:	48 8d 35 a6 b8 01 00 	lea    rsi,[rip+0x1b8a6]        # 3b320 <NANO_SEC+0x58>
   1fa7a:	48 8d 3d 0f ca 01 00 	lea    rdi,[rip+0x1ca0f]        # 3c490 <NANO_SEC+0x11c8>
   1fa81:	e8 56 f3 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1fa86:	83 f0 01             	xor    eax,0x1
   1fa89:	84 c0                	test   al,al
   1fa8b:	74 1c                	je     1faa9 <LoadRendererInterface(RendererInterface&, char const*)+0xb80>
   1fa8d:	0f 0b                	ud2    
   1fa8f:	48 89 c3             	mov    rbx,rax
   1fa92:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1fa96:	48 89 c7             	mov    rdi,rax
   1fa99:	e8 e0 52 00 00       	call   24d7e <std::filesystem::__cxx11::path::~path()>
   1fa9e:	48 89 d8             	mov    rax,rbx
   1faa1:	48 89 c7             	mov    rdi,rax
   1faa4:	e8 87 4c fe ff       	call   4730 <_Unwind_Resume@plt>
   1faa9:	90                   	nop
   1faaa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1faae:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   1fab7:	74 05                	je     1fabe <LoadRendererInterface(RendererInterface&, char const*)+0xb95>
   1fab9:	e8 f2 49 fe ff       	call   44b0 <__stack_chk_fail@plt>
   1fabe:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1fac2:	c9                   	leave  
   1fac3:	c3                   	ret    

000000000001fac4 <UnloadRendererInterface(RendererInterface&)>:
   1fac4:	55                   	push   rbp
   1fac5:	48 89 e5             	mov    rbp,rsp
   1fac8:	48 83 ec 20          	sub    rsp,0x20
   1facc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1fad0:	e8 ea f2 ff ff       	call   1edbf <LDClearErrors()>
   1fad5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1fad9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fadc:	48 89 c7             	mov    rdi,rax
   1fadf:	e8 0c 48 fe ff       	call   42f0 <dlclose@plt>
   1fae4:	ba ac 00 00 00       	mov    edx,0xac
   1fae9:	48 8d 35 30 b8 01 00 	lea    rsi,[rip+0x1b830]        # 3b320 <NANO_SEC+0x58>
   1faf0:	48 8d 3d f6 c9 01 00 	lea    rdi,[rip+0x1c9f6]        # 3c4ed <NANO_SEC+0x1225>
   1faf7:	e8 e0 f2 ff ff       	call   1eddc <LDLogCall(char const*, char const*, int)>
   1fafc:	83 f0 01             	xor    eax,0x1
   1faff:	84 c0                	test   al,al
   1fb01:	74 02                	je     1fb05 <UnloadRendererInterface(RendererInterface&)+0x41>
   1fb03:	0f 0b                	ud2    
   1fb05:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1fb0c:	81 7d fc 27 01 00 00 	cmp    DWORD PTR [rbp-0x4],0x127
   1fb13:	77 13                	ja     1fb28 <UnloadRendererInterface(RendererInterface&)+0x64>
   1fb15:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1fb18:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1fb1c:	48 01 d0             	add    rax,rdx
   1fb1f:	c6 00 00             	mov    BYTE PTR [rax],0x0
   1fb22:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1fb26:	eb e4                	jmp    1fb0c <UnloadRendererInterface(RendererInterface&)+0x48>
   1fb28:	90                   	nop
   1fb29:	c9                   	leave  
   1fb2a:	c3                   	ret    

000000000001fb2b <AlsaLogCall(char const*, char const*, int, int)>:
   1fb2b:	55                   	push   rbp
   1fb2c:	48 89 e5             	mov    rbp,rsp
   1fb2f:	53                   	push   rbx
   1fb30:	48 83 ec 28          	sub    rsp,0x28
   1fb34:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1fb38:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1fb3c:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1fb3f:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
   1fb42:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
   1fb46:	0f 89 b0 00 00 00    	jns    1fbfc <AlsaLogCall(char const*, char const*, int, int)+0xd1>
   1fb4c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1fb4f:	89 c6                	mov    esi,eax
   1fb51:	48 8d 3d c8 ba 02 00 	lea    rdi,[rip+0x2bac8]        # 4b620 <std::cerr@@GLIBCXX_3.4>
   1fb58:	e8 c3 4b fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   1fb5d:	48 8d 35 a3 c9 01 00 	lea    rsi,[rip+0x1c9a3]        # 3c507 <NANO_SEC+0x123f>
   1fb64:	48 89 c7             	mov    rdi,rax
   1fb67:	e8 64 48 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fb6c:	48 89 c3             	mov    rbx,rax
   1fb6f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1fb72:	89 c7                	mov    edi,eax
   1fb74:	e8 87 47 fe ff       	call   4300 <snd_strerror@plt>
   1fb79:	48 89 c6             	mov    rsi,rax
   1fb7c:	48 89 df             	mov    rdi,rbx
   1fb7f:	e8 4c 48 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fb84:	48 8d 35 51 b7 01 00 	lea    rsi,[rip+0x1b751]        # 3b2dc <NANO_SEC+0x14>
   1fb8b:	48 89 c7             	mov    rdi,rax
   1fb8e:	e8 3d 48 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fb93:	48 89 c2             	mov    rdx,rax
   1fb96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1fb9a:	48 89 c6             	mov    rsi,rax
   1fb9d:	48 89 d7             	mov    rdi,rdx
   1fba0:	e8 2b 48 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fba5:	48 8d 35 69 c9 01 00 	lea    rsi,[rip+0x1c969]        # 3c515 <NANO_SEC+0x124d>
   1fbac:	48 89 c7             	mov    rdi,rax
   1fbaf:	e8 1c 48 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fbb4:	48 89 c2             	mov    rdx,rax
   1fbb7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1fbbb:	48 89 c6             	mov    rsi,rax
   1fbbe:	48 89 d7             	mov    rdi,rdx
   1fbc1:	e8 0a 48 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fbc6:	48 8d 35 50 c9 01 00 	lea    rsi,[rip+0x1c950]        # 3c51d <NANO_SEC+0x1255>
   1fbcd:	48 89 c7             	mov    rdi,rax
   1fbd0:	e8 fb 47 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1fbd5:	48 89 c2             	mov    rdx,rax
   1fbd8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1fbdb:	89 c6                	mov    esi,eax
   1fbdd:	48 89 d7             	mov    rdi,rdx
   1fbe0:	e8 3b 4b fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   1fbe5:	48 89 c2             	mov    rdx,rax
   1fbe8:	48 8b 05 d1 b3 02 00 	mov    rax,QWORD PTR [rip+0x2b3d1]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1fbef:	48 89 c6             	mov    rsi,rax
   1fbf2:	48 89 d7             	mov    rdi,rdx
   1fbf5:	e8 36 48 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1fbfa:	0f 0b                	ud2    
   1fbfc:	90                   	nop
   1fbfd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1fc01:	c9                   	leave  
   1fc02:	c3                   	ret    

000000000001fc03 <InitSound(SoundSystemState&)>:
   1fc03:	55                   	push   rbp
   1fc04:	48 89 e5             	mov    rbp,rsp
   1fc07:	48 83 ec 50          	sub    rsp,0x50
   1fc0b:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1fc0f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1fc18:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1fc1c:	31 c0                	xor    eax,eax
   1fc1e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fc22:	b9 01 00 00 00       	mov    ecx,0x1
   1fc27:	ba 00 00 00 00       	mov    edx,0x0
   1fc2c:	48 8d 35 f2 c8 01 00 	lea    rsi,[rip+0x1c8f2]        # 3c525 <NANO_SEC+0x125d>
   1fc33:	48 89 c7             	mov    rdi,rax
   1fc36:	e8 55 46 fe ff       	call   4290 <snd_pcm_open@plt>
   1fc3b:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1fc3e:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1fc42:	74 1d                	je     1fc61 <InitSound(SoundSystemState&)+0x5e>
   1fc44:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   1fc47:	89 c1                	mov    ecx,eax
   1fc49:	ba 3c 00 00 00       	mov    edx,0x3c
   1fc4e:	48 8d 35 d8 c8 01 00 	lea    rsi,[rip+0x1c8d8]        # 3c52d <NANO_SEC+0x1265>
   1fc55:	48 8d 3d f4 c8 01 00 	lea    rdi,[rip+0x1c8f4]        # 3c550 <NANO_SEC+0x1288>
   1fc5c:	e8 ca fe ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fc61:	e8 6a 48 fe ff       	call   44d0 <snd_pcm_hw_params_sizeof@plt>
   1fc66:	48 8d 50 08          	lea    rdx,[rax+0x8]
   1fc6a:	b8 10 00 00 00       	mov    eax,0x10
   1fc6f:	48 83 e8 01          	sub    rax,0x1
   1fc73:	48 01 d0             	add    rax,rdx
   1fc76:	b9 10 00 00 00       	mov    ecx,0x10
   1fc7b:	ba 00 00 00 00       	mov    edx,0x0
   1fc80:	48 f7 f1             	div    rcx
   1fc83:	48 6b c0 10          	imul   rax,rax,0x10
   1fc87:	48 29 c4             	sub    rsp,rax
   1fc8a:	48 89 e0             	mov    rax,rsp
   1fc8d:	48 83 c0 0f          	add    rax,0xf
   1fc91:	48 c1 e8 04          	shr    rax,0x4
   1fc95:	48 c1 e0 04          	shl    rax,0x4
   1fc99:	48 89 c2             	mov    rdx,rax
   1fc9c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fca0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   1fca4:	e8 27 48 fe ff       	call   44d0 <snd_pcm_hw_params_sizeof@plt>
   1fca9:	48 89 c2             	mov    rdx,rax
   1fcac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fcb0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1fcb4:	be 00 00 00 00       	mov    esi,0x0
   1fcb9:	48 89 c7             	mov    rdi,rax
   1fcbc:	e8 1f 45 fe ff       	call   41e0 <memset@plt>
   1fcc1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fcc5:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1fcc9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fccd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fcd0:	48 89 d6             	mov    rsi,rdx
   1fcd3:	48 89 c7             	mov    rdi,rax
   1fcd6:	e8 a5 4a fe ff       	call   4780 <snd_pcm_hw_params_any@plt>
   1fcdb:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   1fcde:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
   1fce2:	74 1d                	je     1fd01 <InitSound(SoundSystemState&)+0xfe>
   1fce4:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1fce7:	89 c1                	mov    ecx,eax
   1fce9:	ba 3e 00 00 00       	mov    edx,0x3e
   1fcee:	48 8d 35 38 c8 01 00 	lea    rsi,[rip+0x1c838]        # 3c52d <NANO_SEC+0x1265>
   1fcf5:	48 8d 3d ac c8 01 00 	lea    rdi,[rip+0x1c8ac]        # 3c5a8 <NANO_SEC+0x12e0>
   1fcfc:	e8 2a fe ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fd01:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd05:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   1fd09:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd0d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fd10:	ba 03 00 00 00       	mov    edx,0x3
   1fd15:	48 89 ce             	mov    rsi,rcx
   1fd18:	48 89 c7             	mov    rdi,rax
   1fd1b:	e8 d0 43 fe ff       	call   40f0 <snd_pcm_hw_params_set_access@plt>
   1fd20:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
   1fd23:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
   1fd27:	74 1d                	je     1fd46 <InitSound(SoundSystemState&)+0x143>
   1fd29:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1fd2c:	89 c1                	mov    ecx,eax
   1fd2e:	ba 40 00 00 00       	mov    edx,0x40
   1fd33:	48 8d 35 f3 c7 01 00 	lea    rsi,[rip+0x1c7f3]        # 3c52d <NANO_SEC+0x1265>
   1fd3a:	48 8d 3d 9f c8 01 00 	lea    rdi,[rip+0x1c89f]        # 3c5e0 <NANO_SEC+0x1318>
   1fd41:	e8 e5 fd ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fd46:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd4a:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   1fd4e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd52:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fd55:	ba 02 00 00 00       	mov    edx,0x2
   1fd5a:	48 89 ce             	mov    rsi,rcx
   1fd5d:	48 89 c7             	mov    rdi,rax
   1fd60:	e8 4b 44 fe ff       	call   41b0 <snd_pcm_hw_params_set_format@plt>
   1fd65:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1fd68:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
   1fd6c:	74 1d                	je     1fd8b <InitSound(SoundSystemState&)+0x188>
   1fd6e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1fd71:	89 c1                	mov    ecx,eax
   1fd73:	ba 41 00 00 00       	mov    edx,0x41
   1fd78:	48 8d 35 ae c7 01 00 	lea    rsi,[rip+0x1c7ae]        # 3c52d <NANO_SEC+0x1265>
   1fd7f:	48 8d 3d b2 c8 01 00 	lea    rdi,[rip+0x1c8b2]        # 3c638 <NANO_SEC+0x1370>
   1fd86:	e8 a0 fd ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fd8b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd8f:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   1fd93:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd97:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fd9a:	ba 02 00 00 00       	mov    edx,0x2
   1fd9f:	48 89 ce             	mov    rsi,rcx
   1fda2:	48 89 c7             	mov    rdi,rax
   1fda5:	e8 06 48 fe ff       	call   45b0 <snd_pcm_hw_params_set_channels@plt>
   1fdaa:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1fdad:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
   1fdb1:	74 1d                	je     1fdd0 <InitSound(SoundSystemState&)+0x1cd>
   1fdb3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1fdb6:	89 c1                	mov    ecx,eax
   1fdb8:	ba 42 00 00 00       	mov    edx,0x42
   1fdbd:	48 8d 35 69 c7 01 00 	lea    rsi,[rip+0x1c769]        # 3c52d <NANO_SEC+0x1265>
   1fdc4:	48 8d 3d bd c8 01 00 	lea    rdi,[rip+0x1c8bd]        # 3c688 <NANO_SEC+0x13c0>
   1fdcb:	e8 5b fd ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fdd0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fdd4:	c7 40 24 80 bb 00 00 	mov    DWORD PTR [rax+0x24],0xbb80
   1fddb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fddf:	48 8d 78 24          	lea    rdi,[rax+0x24]
   1fde3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fde7:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
   1fdeb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fdef:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fdf2:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   1fdf6:	48 89 d1             	mov    rcx,rdx
   1fdf9:	48 89 fa             	mov    rdx,rdi
   1fdfc:	48 89 c7             	mov    rdi,rax
   1fdff:	e8 dc 45 fe ff       	call   43e0 <snd_pcm_hw_params_set_rate_near@plt>
   1fe04:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1fe07:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   1fe0b:	74 1d                	je     1fe2a <InitSound(SoundSystemState&)+0x227>
   1fe0d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1fe10:	89 c1                	mov    ecx,eax
   1fe12:	ba 44 00 00 00       	mov    edx,0x44
   1fe17:	48 8d 35 0f c7 01 00 	lea    rsi,[rip+0x1c70f]        # 3c52d <NANO_SEC+0x1265>
   1fe1e:	48 8d 3d a3 c8 01 00 	lea    rdi,[rip+0x1c8a3]        # 3c6c8 <NANO_SEC+0x1400>
   1fe25:	e8 01 fd ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fe2a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe2e:	48 c7 40 10 20 00 00 00 	mov    QWORD PTR [rax+0x10],0x20
   1fe36:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe3a:	48 8d 78 10          	lea    rdi,[rax+0x10]
   1fe3e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe42:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
   1fe46:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fe4d:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   1fe51:	48 89 d1             	mov    rcx,rdx
   1fe54:	48 89 fa             	mov    rdx,rdi
   1fe57:	48 89 c7             	mov    rdi,rax
   1fe5a:	e8 c1 44 fe ff       	call   4320 <snd_pcm_hw_params_set_period_size_near@plt>
   1fe5f:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1fe62:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   1fe66:	74 1d                	je     1fe85 <InitSound(SoundSystemState&)+0x282>
   1fe68:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1fe6b:	89 c1                	mov    ecx,eax
   1fe6d:	ba 47 00 00 00       	mov    edx,0x47
   1fe72:	48 8d 35 b4 c6 01 00 	lea    rsi,[rip+0x1c6b4]        # 3c52d <NANO_SEC+0x1265>
   1fe79:	48 8d 3d a0 c8 01 00 	lea    rdi,[rip+0x1c8a0]        # 3c720 <NANO_SEC+0x1458>
   1fe80:	e8 a6 fc ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fe85:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe89:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1fe8d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe91:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fe94:	48 89 d6             	mov    rsi,rdx
   1fe97:	48 89 c7             	mov    rdi,rax
   1fe9a:	e8 01 45 fe ff       	call   43a0 <snd_pcm_hw_params@plt>
   1fe9f:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   1fea2:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   1fea6:	74 1d                	je     1fec5 <InitSound(SoundSystemState&)+0x2c2>
   1fea8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1feab:	89 c1                	mov    ecx,eax
   1fead:	ba 48 00 00 00       	mov    edx,0x48
   1feb2:	48 8d 35 74 c6 01 00 	lea    rsi,[rip+0x1c674]        # 3c52d <NANO_SEC+0x1265>
   1feb9:	48 8d 3d b8 c8 01 00 	lea    rdi,[rip+0x1c8b8]        # 3c778 <NANO_SEC+0x14b0>
   1fec0:	e8 66 fc ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fec5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fec9:	48 8d 50 18          	lea    rdx,[rax+0x18]
   1fecd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fed1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1fed5:	48 89 d6             	mov    rsi,rdx
   1fed8:	48 89 c7             	mov    rdi,rax
   1fedb:	e8 80 42 fe ff       	call   4160 <snd_pcm_hw_params_get_buffer_size@plt>
   1fee0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1fee3:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   1fee7:	74 1d                	je     1ff06 <InitSound(SoundSystemState&)+0x303>
   1fee9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1feec:	89 c1                	mov    ecx,eax
   1feee:	ba 49 00 00 00       	mov    edx,0x49
   1fef3:	48 8d 35 33 c6 01 00 	lea    rsi,[rip+0x1c633]        # 3c52d <NANO_SEC+0x1265>
   1fefa:	48 8d 3d a7 c8 01 00 	lea    rdi,[rip+0x1c8a7]        # 3c7a8 <NANO_SEC+0x14e0>
   1ff01:	e8 25 fc ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1ff06:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff0a:	48 8d 48 10          	lea    rcx,[rax+0x10]
   1ff0e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff12:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1ff16:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   1ff1a:	48 89 ce             	mov    rsi,rcx
   1ff1d:	48 89 c7             	mov    rdi,rax
   1ff20:	e8 4b 44 fe ff       	call   4370 <snd_pcm_hw_params_get_period_size@plt>
   1ff25:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1ff28:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   1ff2c:	74 1d                	je     1ff4b <InitSound(SoundSystemState&)+0x348>
   1ff2e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1ff31:	89 c1                	mov    ecx,eax
   1ff33:	ba 4a 00 00 00       	mov    edx,0x4a
   1ff38:	48 8d 35 ee c5 01 00 	lea    rsi,[rip+0x1c5ee]        # 3c52d <NANO_SEC+0x1265>
   1ff3f:	48 8d 3d b2 c8 01 00 	lea    rdi,[rip+0x1c8b2]        # 3c7f8 <NANO_SEC+0x1530>
   1ff46:	e8 e0 fb ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1ff4b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff4f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1ff53:	89 c2                	mov    edx,eax
   1ff55:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff59:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   1ff5c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff60:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1ff64:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
   1ff6b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff6f:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   1ff72:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff76:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1ff79:	89 c0                	mov    eax,eax
   1ff7b:	48 89 c6             	mov    rsi,rax
   1ff7e:	bf 10 00 00 00       	mov    edi,0x10
   1ff83:	e8 48 43 fe ff       	call   42d0 <aligned_alloc@plt>
   1ff88:	48 89 c2             	mov    rdx,rax
   1ff8b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff8f:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
   1ff93:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff97:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
   1ff9a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff9e:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
   1ffa2:	be 00 00 00 00       	mov    esi,0x0
   1ffa7:	48 89 c7             	mov    rdi,rax
   1ffaa:	e8 02 ef ff ff       	call   1eeb1 <MemSet(void*, signed char, unsigned int)>
   1ffaf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ffb3:	48 8d 48 2c          	lea    rcx,[rax+0x2c]
   1ffb7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ffbb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1ffbf:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   1ffc3:	48 89 ce             	mov    rsi,rcx
   1ffc6:	48 89 c7             	mov    rdi,rax
   1ffc9:	e8 f2 44 fe ff       	call   44c0 <snd_pcm_hw_params_get_period_time@plt>
   1ffce:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1ffd1:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   1ffd5:	74 1d                	je     1fff4 <InitSound(SoundSystemState&)+0x3f1>
   1ffd7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1ffda:	89 c1                	mov    ecx,eax
   1ffdc:	ba 50 00 00 00       	mov    edx,0x50
   1ffe1:	48 8d 35 45 c5 01 00 	lea    rsi,[rip+0x1c545]        # 3c52d <NANO_SEC+0x1265>
   1ffe8:	48 8d 3d 51 c8 01 00 	lea    rdi,[rip+0x1c851]        # 3c840 <NANO_SEC+0x1578>
   1ffef:	e8 37 fb ff ff       	call   1fb2b <AlsaLogCall(char const*, char const*, int, int)>
   1fff4:	90                   	nop
   1fff5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1fff9:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   20002:	74 05                	je     20009 <InitSound(SoundSystemState&)+0x406>
   20004:	e8 a7 44 fe ff       	call   44b0 <__stack_chk_fail@plt>
   20009:	c9                   	leave  
   2000a:	c3                   	ret    

000000000002000b <PushSound(SoundTable&, SoundInstance)>:
   2000b:	55                   	push   rbp
   2000c:	48 89 e5             	mov    rbp,rsp
   2000f:	48 83 ec 20          	sub    rsp,0x20
   20013:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   20017:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2001b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   2001e:	8d 50 01             	lea    edx,[rax+0x1]
   20021:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20025:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   20028:	39 c2                	cmp    edx,eax
   2002a:	0f 86 c6 00 00 00    	jbe    200f6 <PushSound(SoundTable&, SoundInstance)+0xeb>
   20030:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20034:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   20037:	8d 50 01             	lea    edx,[rax+0x1]
   2003a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2003e:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   20041:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20045:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   20048:	8d 14 00             	lea    edx,[rax+rax*1]
   2004b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2004f:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   20052:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20056:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   20059:	89 c2                	mov    edx,eax
   2005b:	48 89 d0             	mov    rax,rdx
   2005e:	48 01 c0             	add    rax,rax
   20061:	48 01 d0             	add    rax,rdx
   20064:	48 c1 e0 03          	shl    rax,0x3
   20068:	48 89 c7             	mov    rdi,rax
   2006b:	e8 30 45 fe ff       	call   45a0 <malloc@plt>
   20070:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   20074:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   2007b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2007f:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20082:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   20085:	73 53                	jae    200da <PushSound(SoundTable&, SoundInstance)+0xcf>
   20087:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2008b:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2008f:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   20092:	48 89 d0             	mov    rax,rdx
   20095:	48 01 c0             	add    rax,rax
   20098:	48 01 d0             	add    rax,rdx
   2009b:	48 c1 e0 03          	shl    rax,0x3
   2009f:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
   200a3:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   200a6:	48 89 d0             	mov    rax,rdx
   200a9:	48 01 c0             	add    rax,rax
   200ac:	48 01 d0             	add    rax,rdx
   200af:	48 c1 e0 03          	shl    rax,0x3
   200b3:	48 89 c2             	mov    rdx,rax
   200b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   200ba:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   200be:	48 8b 06             	mov    rax,QWORD PTR [rsi]
   200c1:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
   200c5:	48 89 01             	mov    QWORD PTR [rcx],rax
   200c8:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   200cc:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
   200d0:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   200d4:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   200d8:	eb a1                	jmp    2007b <PushSound(SoundTable&, SoundInstance)+0x70>
   200da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   200de:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   200e2:	48 89 c7             	mov    rdi,rax
   200e5:	e8 16 44 fe ff       	call   4500 <free@plt>
   200ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   200ee:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   200f2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   200f6:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   200fa:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   200fd:	83 c2 01             	add    edx,0x1
   20100:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   20103:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20107:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2010b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2010f:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20112:	8d 48 01             	lea    ecx,[rax+0x1]
   20115:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   20119:	89 4a 20             	mov    DWORD PTR [rdx+0x20],ecx
   2011c:	89 c2                	mov    edx,eax
   2011e:	48 89 d0             	mov    rax,rdx
   20121:	48 01 c0             	add    rax,rax
   20124:	48 01 d0             	add    rax,rdx
   20127:	48 c1 e0 03          	shl    rax,0x3
   2012b:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   2012f:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   20133:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
   20137:	48 89 01             	mov    QWORD PTR [rcx],rax
   2013a:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   2013e:	48 8b 45 20          	mov    rax,QWORD PTR [rbp+0x20]
   20142:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   20146:	90                   	nop
   20147:	c9                   	leave  
   20148:	c3                   	ret    

0000000000020149 <FreeSoundAsset(SoundAsset*)>:
   20149:	55                   	push   rbp
   2014a:	48 89 e5             	mov    rbp,rsp
   2014d:	48 83 ec 10          	sub    rsp,0x10
   20151:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   20155:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20159:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2015c:	48 89 c7             	mov    rdi,rax
   2015f:	e8 9c 43 fe ff       	call   4500 <free@plt>
   20164:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20168:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   2016f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20173:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
   2017a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2017e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
   20185:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20189:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
   20190:	90                   	nop
   20191:	c9                   	leave  
   20192:	c3                   	ret    

0000000000020193 <FWide(SoundSystemState&, SoundTable&)>:
   20193:	55                   	push   rbp
   20194:	48 89 e5             	mov    rbp,rsp
   20197:	48 83 ec 30          	sub    rsp,0x30
   2019b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2019f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   201a3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   201aa:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   201ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   201b1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   201b5:	48 39 c2             	cmp    rdx,rax
   201b8:	0f 83 f8 07 00 00    	jae    209b6 <FWide(SoundSystemState&, SoundTable&)+0x823>
   201be:	66 0f ef c0          	pxor   xmm0,xmm0
   201c2:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   201c7:	66 0f ef c0          	pxor   xmm0,xmm0
   201cb:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   201d0:	66 0f ef c0          	pxor   xmm0,xmm0
   201d4:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   201d9:	66 0f ef c0          	pxor   xmm0,xmm0
   201dd:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   201e2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   201e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   201ed:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   201f0:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
   201f3:	0f 83 4f 06 00 00    	jae    20848 <FWide(SoundSystemState&, SoundTable&)+0x6b5>
   201f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   201fd:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20201:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20204:	48 89 d0             	mov    rax,rdx
   20207:	48 01 c0             	add    rax,rax
   2020a:	48 01 d0             	add    rax,rdx
   2020d:	48 c1 e0 03          	shl    rax,0x3
   20211:	48 01 c8             	add    rax,rcx
   20214:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20217:	8d 48 02             	lea    ecx,[rax+0x2]
   2021a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2021e:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20222:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20225:	48 89 d0             	mov    rax,rdx
   20228:	48 01 c0             	add    rax,rax
   2022b:	48 01 d0             	add    rax,rdx
   2022e:	48 c1 e0 03          	shl    rax,0x3
   20232:	48 01 f0             	add    rax,rsi
   20235:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20238:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2023b:	39 c1                	cmp    ecx,eax
   2023d:	0f 82 98 03 00 00    	jb     205db <FWide(SoundSystemState&, SoundTable&)+0x448>
   20243:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20247:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2024b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2024e:	48 89 d0             	mov    rax,rdx
   20251:	48 01 c0             	add    rax,rax
   20254:	48 01 d0             	add    rax,rdx
   20257:	48 c1 e0 03          	shl    rax,0x3
   2025b:	48 01 c8             	add    rax,rcx
   2025e:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
   20262:	84 c0                	test   al,al
   20264:	74 27                	je     2028d <FWide(SoundSystemState&, SoundTable&)+0xfa>
   20266:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2026a:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2026e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20271:	48 89 d0             	mov    rax,rdx
   20274:	48 01 c0             	add    rax,rax
   20277:	48 01 d0             	add    rax,rdx
   2027a:	48 c1 e0 03          	shl    rax,0x3
   2027e:	48 01 c8             	add    rax,rcx
   20281:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
   20288:	e9 b2 05 00 00       	jmp    2083f <FWide(SoundSystemState&, SoundTable&)+0x6ac>
   2028d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20291:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20295:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20298:	48 89 d0             	mov    rax,rdx
   2029b:	48 01 c0             	add    rax,rax
   2029e:	48 01 d0             	add    rax,rdx
   202a1:	48 c1 e0 03          	shl    rax,0x3
   202a5:	48 01 c8             	add    rax,rcx
   202a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   202ab:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   202ae:	83 ea 01             	sub    edx,0x1
   202b1:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   202b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   202b8:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   202bc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   202bf:	48 89 d0             	mov    rax,rdx
   202c2:	48 01 c0             	add    rax,rax
   202c5:	48 01 d0             	add    rax,rdx
   202c8:	48 c1 e0 03          	shl    rax,0x3
   202cc:	48 01 c8             	add    rax,rcx
   202cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   202d2:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   202d5:	85 c0                	test   eax,eax
   202d7:	75 26                	jne    202ff <FWide(SoundSystemState&, SoundTable&)+0x16c>
   202d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   202dd:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   202e1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   202e4:	48 89 d0             	mov    rax,rdx
   202e7:	48 01 c0             	add    rax,rax
   202ea:	48 01 d0             	add    rax,rdx
   202ed:	48 c1 e0 03          	shl    rax,0x3
   202f1:	48 01 c8             	add    rax,rcx
   202f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   202f7:	48 89 c7             	mov    rdi,rax
   202fa:	e8 4a fe ff ff       	call   20149 <FreeSoundAsset(SoundAsset*)>
   202ff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20303:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20307:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2030b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   2030e:	8d 50 ff             	lea    edx,[rax-0x1]
   20311:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20315:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   20318:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2031c:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   2031f:	89 c2                	mov    edx,eax
   20321:	48 89 d0             	mov    rax,rdx
   20324:	48 01 c0             	add    rax,rax
   20327:	48 01 d0             	add    rax,rdx
   2032a:	48 c1 e0 03          	shl    rax,0x3
   2032e:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
   20332:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20336:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2033a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2033d:	48 89 d0             	mov    rax,rdx
   20340:	48 01 c0             	add    rax,rax
   20343:	48 01 d0             	add    rax,rdx
   20346:	48 c1 e0 03          	shl    rax,0x3
   2034a:	48 01 c1             	add    rcx,rax
   2034d:	48 8b 06             	mov    rax,QWORD PTR [rsi]
   20350:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
   20354:	48 89 01             	mov    QWORD PTR [rcx],rax
   20357:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   2035b:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
   2035f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   20363:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20367:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   2036a:	85 c0                	test   eax,eax
   2036c:	0f 84 cd 04 00 00    	je     2083f <FWide(SoundSystemState&, SoundTable&)+0x6ac>
   20372:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20376:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2037a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2037d:	48 89 d0             	mov    rax,rdx
   20380:	48 01 c0             	add    rax,rax
   20383:	48 01 d0             	add    rax,rdx
   20386:	48 c1 e0 03          	shl    rax,0x3
   2038a:	48 01 c8             	add    rax,rcx
   2038d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20390:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20393:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20397:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2039b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2039e:	48 89 d0             	mov    rax,rdx
   203a1:	48 01 c0             	add    rax,rax
   203a4:	48 01 d0             	add    rax,rdx
   203a7:	48 c1 e0 03          	shl    rax,0x3
   203ab:	48 01 f0             	add    rax,rsi
   203ae:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   203b1:	01 c0                	add    eax,eax
   203b3:	89 c0                	mov    eax,eax
   203b5:	48 01 c0             	add    rax,rax
   203b8:	48 01 c8             	add    rax,rcx
   203bb:	0f b7 00             	movzx  eax,WORD PTR [rax]
   203be:	98                   	cwde   
   203bf:	66 0f ef c9          	pxor   xmm1,xmm1
   203c3:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   203c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   203cb:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   203cf:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   203d2:	48 89 d0             	mov    rax,rdx
   203d5:	48 01 c0             	add    rax,rax
   203d8:	48 01 d0             	add    rax,rdx
   203db:	48 c1 e0 03          	shl    rax,0x3
   203df:	48 01 c8             	add    rax,rcx
   203e2:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   203e7:	f3 0f 59 c1          	mulss  xmm0,xmm1
   203eb:	f3 0f 10 4d ec       	movss  xmm1,DWORD PTR [rbp-0x14]
   203f0:	f3 0f 58 c1          	addss  xmm0,xmm1
   203f4:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   203f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   203fd:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20401:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20404:	48 89 d0             	mov    rax,rdx
   20407:	48 01 c0             	add    rax,rax
   2040a:	48 01 d0             	add    rax,rdx
   2040d:	48 c1 e0 03          	shl    rax,0x3
   20411:	48 01 c8             	add    rax,rcx
   20414:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20417:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2041a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2041e:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20422:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20425:	48 89 d0             	mov    rax,rdx
   20428:	48 01 c0             	add    rax,rax
   2042b:	48 01 d0             	add    rax,rdx
   2042e:	48 c1 e0 03          	shl    rax,0x3
   20432:	48 01 f0             	add    rax,rsi
   20435:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20438:	01 c0                	add    eax,eax
   2043a:	83 c0 01             	add    eax,0x1
   2043d:	89 c0                	mov    eax,eax
   2043f:	48 01 c0             	add    rax,rax
   20442:	48 01 c8             	add    rax,rcx
   20445:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20448:	98                   	cwde   
   20449:	66 0f ef c9          	pxor   xmm1,xmm1
   2044d:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20451:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20455:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20459:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2045c:	48 89 d0             	mov    rax,rdx
   2045f:	48 01 c0             	add    rax,rax
   20462:	48 01 d0             	add    rax,rdx
   20465:	48 c1 e0 03          	shl    rax,0x3
   20469:	48 01 c8             	add    rax,rcx
   2046c:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20471:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20475:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   2047a:	f3 0f 58 c1          	addss  xmm0,xmm1
   2047e:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   20483:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20487:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2048b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2048e:	48 89 d0             	mov    rax,rdx
   20491:	48 01 c0             	add    rax,rax
   20494:	48 01 d0             	add    rax,rdx
   20497:	48 c1 e0 03          	shl    rax,0x3
   2049b:	48 01 c8             	add    rax,rcx
   2049e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   204a1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   204a4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   204a8:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   204ac:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   204af:	48 89 d0             	mov    rax,rdx
   204b2:	48 01 c0             	add    rax,rax
   204b5:	48 01 d0             	add    rax,rdx
   204b8:	48 c1 e0 03          	shl    rax,0x3
   204bc:	48 01 f0             	add    rax,rsi
   204bf:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   204c2:	01 c0                	add    eax,eax
   204c4:	83 c0 02             	add    eax,0x2
   204c7:	89 c0                	mov    eax,eax
   204c9:	48 01 c0             	add    rax,rax
   204cc:	48 01 c8             	add    rax,rcx
   204cf:	0f b7 00             	movzx  eax,WORD PTR [rax]
   204d2:	98                   	cwde   
   204d3:	66 0f ef c9          	pxor   xmm1,xmm1
   204d7:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   204db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   204df:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   204e3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   204e6:	48 89 d0             	mov    rax,rdx
   204e9:	48 01 c0             	add    rax,rax
   204ec:	48 01 d0             	add    rax,rdx
   204ef:	48 c1 e0 03          	shl    rax,0x3
   204f3:	48 01 c8             	add    rax,rcx
   204f6:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   204fb:	f3 0f 59 c1          	mulss  xmm0,xmm1
   204ff:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   20504:	f3 0f 58 c1          	addss  xmm0,xmm1
   20508:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2050d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20511:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20515:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20518:	48 89 d0             	mov    rax,rdx
   2051b:	48 01 c0             	add    rax,rax
   2051e:	48 01 d0             	add    rax,rdx
   20521:	48 c1 e0 03          	shl    rax,0x3
   20525:	48 01 c8             	add    rax,rcx
   20528:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2052b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2052e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20532:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20536:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20539:	48 89 d0             	mov    rax,rdx
   2053c:	48 01 c0             	add    rax,rax
   2053f:	48 01 d0             	add    rax,rdx
   20542:	48 c1 e0 03          	shl    rax,0x3
   20546:	48 01 f0             	add    rax,rsi
   20549:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2054c:	01 c0                	add    eax,eax
   2054e:	83 c0 03             	add    eax,0x3
   20551:	89 c0                	mov    eax,eax
   20553:	48 01 c0             	add    rax,rax
   20556:	48 01 c8             	add    rax,rcx
   20559:	0f b7 00             	movzx  eax,WORD PTR [rax]
   2055c:	98                   	cwde   
   2055d:	66 0f ef c9          	pxor   xmm1,xmm1
   20561:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20565:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20569:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2056d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20570:	48 89 d0             	mov    rax,rdx
   20573:	48 01 c0             	add    rax,rax
   20576:	48 01 d0             	add    rax,rdx
   20579:	48 c1 e0 03          	shl    rax,0x3
   2057d:	48 01 c8             	add    rax,rcx
   20580:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20585:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20589:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   2058e:	f3 0f 58 c1          	addss  xmm0,xmm1
   20592:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   20597:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2059b:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2059f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   205a2:	48 89 d0             	mov    rax,rdx
   205a5:	48 01 c0             	add    rax,rax
   205a8:	48 01 d0             	add    rax,rdx
   205ab:	48 c1 e0 03          	shl    rax,0x3
   205af:	48 01 c8             	add    rax,rcx
   205b2:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
   205b5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   205b9:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   205bd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   205c0:	48 89 d0             	mov    rax,rdx
   205c3:	48 01 c0             	add    rax,rax
   205c6:	48 01 d0             	add    rax,rdx
   205c9:	48 c1 e0 03          	shl    rax,0x3
   205cd:	48 01 f0             	add    rax,rsi
   205d0:	8d 51 02             	lea    edx,[rcx+0x2]
   205d3:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   205d6:	e9 64 02 00 00       	jmp    2083f <FWide(SoundSystemState&, SoundTable&)+0x6ac>
   205db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   205df:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   205e3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   205e6:	48 89 d0             	mov    rax,rdx
   205e9:	48 01 c0             	add    rax,rax
   205ec:	48 01 d0             	add    rax,rdx
   205ef:	48 c1 e0 03          	shl    rax,0x3
   205f3:	48 01 c8             	add    rax,rcx
   205f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   205f9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   205fc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20600:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20604:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20607:	48 89 d0             	mov    rax,rdx
   2060a:	48 01 c0             	add    rax,rax
   2060d:	48 01 d0             	add    rax,rdx
   20610:	48 c1 e0 03          	shl    rax,0x3
   20614:	48 01 f0             	add    rax,rsi
   20617:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2061a:	01 c0                	add    eax,eax
   2061c:	89 c0                	mov    eax,eax
   2061e:	48 01 c0             	add    rax,rax
   20621:	48 01 c8             	add    rax,rcx
   20624:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20627:	98                   	cwde   
   20628:	66 0f ef c9          	pxor   xmm1,xmm1
   2062c:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20630:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20634:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20638:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2063b:	48 89 d0             	mov    rax,rdx
   2063e:	48 01 c0             	add    rax,rax
   20641:	48 01 d0             	add    rax,rdx
   20644:	48 c1 e0 03          	shl    rax,0x3
   20648:	48 01 c8             	add    rax,rcx
   2064b:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20650:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20654:	f3 0f 10 4d ec       	movss  xmm1,DWORD PTR [rbp-0x14]
   20659:	f3 0f 58 c1          	addss  xmm0,xmm1
   2065d:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   20662:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20666:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2066a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2066d:	48 89 d0             	mov    rax,rdx
   20670:	48 01 c0             	add    rax,rax
   20673:	48 01 d0             	add    rax,rdx
   20676:	48 c1 e0 03          	shl    rax,0x3
   2067a:	48 01 c8             	add    rax,rcx
   2067d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20680:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20683:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20687:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2068b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2068e:	48 89 d0             	mov    rax,rdx
   20691:	48 01 c0             	add    rax,rax
   20694:	48 01 d0             	add    rax,rdx
   20697:	48 c1 e0 03          	shl    rax,0x3
   2069b:	48 01 f0             	add    rax,rsi
   2069e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   206a1:	01 c0                	add    eax,eax
   206a3:	83 c0 01             	add    eax,0x1
   206a6:	89 c0                	mov    eax,eax
   206a8:	48 01 c0             	add    rax,rax
   206ab:	48 01 c8             	add    rax,rcx
   206ae:	0f b7 00             	movzx  eax,WORD PTR [rax]
   206b1:	98                   	cwde   
   206b2:	66 0f ef c9          	pxor   xmm1,xmm1
   206b6:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   206ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   206be:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   206c2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   206c5:	48 89 d0             	mov    rax,rdx
   206c8:	48 01 c0             	add    rax,rax
   206cb:	48 01 d0             	add    rax,rdx
   206ce:	48 c1 e0 03          	shl    rax,0x3
   206d2:	48 01 c8             	add    rax,rcx
   206d5:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   206da:	f3 0f 59 c1          	mulss  xmm0,xmm1
   206de:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   206e3:	f3 0f 58 c1          	addss  xmm0,xmm1
   206e7:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   206ec:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   206f0:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   206f4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   206f7:	48 89 d0             	mov    rax,rdx
   206fa:	48 01 c0             	add    rax,rax
   206fd:	48 01 d0             	add    rax,rdx
   20700:	48 c1 e0 03          	shl    rax,0x3
   20704:	48 01 c8             	add    rax,rcx
   20707:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2070a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2070d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20711:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20715:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20718:	48 89 d0             	mov    rax,rdx
   2071b:	48 01 c0             	add    rax,rax
   2071e:	48 01 d0             	add    rax,rdx
   20721:	48 c1 e0 03          	shl    rax,0x3
   20725:	48 01 f0             	add    rax,rsi
   20728:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2072b:	01 c0                	add    eax,eax
   2072d:	83 c0 02             	add    eax,0x2
   20730:	89 c0                	mov    eax,eax
   20732:	48 01 c0             	add    rax,rax
   20735:	48 01 c8             	add    rax,rcx
   20738:	0f b7 00             	movzx  eax,WORD PTR [rax]
   2073b:	98                   	cwde   
   2073c:	66 0f ef c9          	pxor   xmm1,xmm1
   20740:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20744:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20748:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2074c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2074f:	48 89 d0             	mov    rax,rdx
   20752:	48 01 c0             	add    rax,rax
   20755:	48 01 d0             	add    rax,rdx
   20758:	48 c1 e0 03          	shl    rax,0x3
   2075c:	48 01 c8             	add    rax,rcx
   2075f:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20764:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20768:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   2076d:	f3 0f 58 c1          	addss  xmm0,xmm1
   20771:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   20776:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2077a:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2077e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20781:	48 89 d0             	mov    rax,rdx
   20784:	48 01 c0             	add    rax,rax
   20787:	48 01 d0             	add    rax,rdx
   2078a:	48 c1 e0 03          	shl    rax,0x3
   2078e:	48 01 c8             	add    rax,rcx
   20791:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20794:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20797:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2079b:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2079f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   207a2:	48 89 d0             	mov    rax,rdx
   207a5:	48 01 c0             	add    rax,rax
   207a8:	48 01 d0             	add    rax,rdx
   207ab:	48 c1 e0 03          	shl    rax,0x3
   207af:	48 01 f0             	add    rax,rsi
   207b2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   207b5:	01 c0                	add    eax,eax
   207b7:	83 c0 03             	add    eax,0x3
   207ba:	89 c0                	mov    eax,eax
   207bc:	48 01 c0             	add    rax,rax
   207bf:	48 01 c8             	add    rax,rcx
   207c2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   207c5:	98                   	cwde   
   207c6:	66 0f ef c9          	pxor   xmm1,xmm1
   207ca:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   207ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   207d2:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   207d6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   207d9:	48 89 d0             	mov    rax,rdx
   207dc:	48 01 c0             	add    rax,rax
   207df:	48 01 d0             	add    rax,rdx
   207e2:	48 c1 e0 03          	shl    rax,0x3
   207e6:	48 01 c8             	add    rax,rcx
   207e9:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   207ee:	f3 0f 59 c1          	mulss  xmm0,xmm1
   207f2:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   207f7:	f3 0f 58 c1          	addss  xmm0,xmm1
   207fb:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   20800:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20804:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20808:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2080b:	48 89 d0             	mov    rax,rdx
   2080e:	48 01 c0             	add    rax,rax
   20811:	48 01 d0             	add    rax,rdx
   20814:	48 c1 e0 03          	shl    rax,0x3
   20818:	48 01 c8             	add    rax,rcx
   2081b:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
   2081e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20822:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20826:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20829:	48 89 d0             	mov    rax,rdx
   2082c:	48 01 c0             	add    rax,rax
   2082f:	48 01 d0             	add    rax,rdx
   20832:	48 c1 e0 03          	shl    rax,0x3
   20836:	48 01 f0             	add    rax,rsi
   20839:	8d 51 02             	lea    edx,[rcx+0x2]
   2083c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   2083f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   20843:	e9 a1 f9 ff ff       	jmp    201e9 <FWide(SoundSystemState&, SoundTable&)+0x56>
   20848:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2084c:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   2084f:	89 c0                	mov    eax,eax
   20851:	48 85 c0             	test   rax,rax
   20854:	78 0b                	js     20861 <FWide(SoundSystemState&, SoundTable&)+0x6ce>
   20856:	66 0f ef c0          	pxor   xmm0,xmm0
   2085a:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   2085f:	eb 19                	jmp    2087a <FWide(SoundSystemState&, SoundTable&)+0x6e7>
   20861:	48 89 c2             	mov    rdx,rax
   20864:	48 d1 ea             	shr    rdx,1
   20867:	83 e0 01             	and    eax,0x1
   2086a:	48 09 c2             	or     rdx,rax
   2086d:	66 0f ef c0          	pxor   xmm0,xmm0
   20871:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20876:	f3 0f 58 c0          	addss  xmm0,xmm0
   2087a:	f3 0f 10 4d ec       	movss  xmm1,DWORD PTR [rbp-0x14]
   2087f:	f3 0f 5e c8          	divss  xmm1,xmm0
   20883:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20887:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   2088b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2088e:	01 c0                	add    eax,eax
   20890:	89 c0                	mov    eax,eax
   20892:	48 01 c0             	add    rax,rax
   20895:	48 01 d0             	add    rax,rdx
   20898:	f3 0f 2c d1          	cvttss2si edx,xmm1
   2089c:	66 89 10             	mov    WORD PTR [rax],dx
   2089f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   208a3:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   208a6:	89 c0                	mov    eax,eax
   208a8:	48 85 c0             	test   rax,rax
   208ab:	78 0b                	js     208b8 <FWide(SoundSystemState&, SoundTable&)+0x725>
   208ad:	66 0f ef c0          	pxor   xmm0,xmm0
   208b1:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   208b6:	eb 19                	jmp    208d1 <FWide(SoundSystemState&, SoundTable&)+0x73e>
   208b8:	48 89 c2             	mov    rdx,rax
   208bb:	48 d1 ea             	shr    rdx,1
   208be:	83 e0 01             	and    eax,0x1
   208c1:	48 09 c2             	or     rdx,rax
   208c4:	66 0f ef c0          	pxor   xmm0,xmm0
   208c8:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   208cd:	f3 0f 58 c0          	addss  xmm0,xmm0
   208d1:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   208d6:	f3 0f 5e c8          	divss  xmm1,xmm0
   208da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   208de:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   208e2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   208e5:	01 c0                	add    eax,eax
   208e7:	83 c0 01             	add    eax,0x1
   208ea:	89 c0                	mov    eax,eax
   208ec:	48 01 c0             	add    rax,rax
   208ef:	48 01 d0             	add    rax,rdx
   208f2:	f3 0f 2c d1          	cvttss2si edx,xmm1
   208f6:	66 89 10             	mov    WORD PTR [rax],dx
   208f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   208fd:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20900:	89 c0                	mov    eax,eax
   20902:	48 85 c0             	test   rax,rax
   20905:	78 0b                	js     20912 <FWide(SoundSystemState&, SoundTable&)+0x77f>
   20907:	66 0f ef c0          	pxor   xmm0,xmm0
   2090b:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   20910:	eb 19                	jmp    2092b <FWide(SoundSystemState&, SoundTable&)+0x798>
   20912:	48 89 c2             	mov    rdx,rax
   20915:	48 d1 ea             	shr    rdx,1
   20918:	83 e0 01             	and    eax,0x1
   2091b:	48 09 c2             	or     rdx,rax
   2091e:	66 0f ef c0          	pxor   xmm0,xmm0
   20922:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20927:	f3 0f 58 c0          	addss  xmm0,xmm0
   2092b:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   20930:	f3 0f 5e c8          	divss  xmm1,xmm0
   20934:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20938:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   2093c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2093f:	83 c0 01             	add    eax,0x1
   20942:	01 c0                	add    eax,eax
   20944:	89 c0                	mov    eax,eax
   20946:	48 01 c0             	add    rax,rax
   20949:	48 01 d0             	add    rax,rdx
   2094c:	f3 0f 2c d1          	cvttss2si edx,xmm1
   20950:	66 89 10             	mov    WORD PTR [rax],dx
   20953:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20957:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   2095a:	89 c0                	mov    eax,eax
   2095c:	48 85 c0             	test   rax,rax
   2095f:	78 0b                	js     2096c <FWide(SoundSystemState&, SoundTable&)+0x7d9>
   20961:	66 0f ef c0          	pxor   xmm0,xmm0
   20965:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   2096a:	eb 19                	jmp    20985 <FWide(SoundSystemState&, SoundTable&)+0x7f2>
   2096c:	48 89 c2             	mov    rdx,rax
   2096f:	48 d1 ea             	shr    rdx,1
   20972:	83 e0 01             	and    eax,0x1
   20975:	48 09 c2             	or     rdx,rax
   20978:	66 0f ef c0          	pxor   xmm0,xmm0
   2097c:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20981:	f3 0f 58 c0          	addss  xmm0,xmm0
   20985:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   2098a:	f3 0f 5e c8          	divss  xmm1,xmm0
   2098e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20992:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   20996:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   20999:	01 c0                	add    eax,eax
   2099b:	83 c0 03             	add    eax,0x3
   2099e:	89 c0                	mov    eax,eax
   209a0:	48 01 c0             	add    rax,rax
   209a3:	48 01 d0             	add    rax,rdx
   209a6:	f3 0f 2c d1          	cvttss2si edx,xmm1
   209aa:	66 89 10             	mov    WORD PTR [rax],dx
   209ad:	83 45 e8 02          	add    DWORD PTR [rbp-0x18],0x2
   209b1:	e9 f4 f7 ff ff       	jmp    201aa <FWide(SoundSystemState&, SoundTable&)+0x17>
   209b6:	90                   	nop
   209b7:	c9                   	leave  
   209b8:	c3                   	ret    

00000000000209b9 <PlaySounds(SoundSystemState&, SoundTable&)>:
   209b9:	55                   	push   rbp
   209ba:	48 89 e5             	mov    rbp,rsp
   209bd:	48 83 ec 20          	sub    rsp,0x20
   209c1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   209c5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   209c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   209cd:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   209d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   209d5:	48 8b 48 38          	mov    rcx,QWORD PTR [rax+0x38]
   209d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   209dd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   209e0:	48 89 ce             	mov    rsi,rcx
   209e3:	48 89 c7             	mov    rdi,rax
   209e6:	e8 a5 39 fe ff       	call   4390 <snd_pcm_writei@plt>
   209eb:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   209ee:	83 7d fc f5          	cmp    DWORD PTR [rbp-0x4],0xfffffff5
   209f2:	74 13                	je     20a07 <PlaySounds(SoundSystemState&, SoundTable&)+0x4e>
   209f4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   209f8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   209fc:	48 89 d6             	mov    rsi,rdx
   209ff:	48 89 c7             	mov    rdi,rax
   20a02:	e8 8c f7 ff ff       	call   20193 <FWide(SoundSystemState&, SoundTable&)>
   20a07:	83 7d fc e0          	cmp    DWORD PTR [rbp-0x4],0xffffffe0
   20a0b:	75 39                	jne    20a46 <PlaySounds(SoundSystemState&, SoundTable&)+0x8d>
   20a0d:	48 8d 35 75 be 01 00 	lea    rsi,[rip+0x1be75]        # 3c889 <NANO_SEC+0x15c1>
   20a14:	48 8d 3d e5 aa 02 00 	lea    rdi,[rip+0x2aae5]        # 4b500 <std::cout@@GLIBCXX_3.4>
   20a1b:	e8 b0 39 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   20a20:	48 89 c2             	mov    rdx,rax
   20a23:	48 8b 05 96 a5 02 00 	mov    rax,QWORD PTR [rip+0x2a596]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   20a2a:	48 89 c6             	mov    rsi,rax
   20a2d:	48 89 d7             	mov    rdi,rdx
   20a30:	e8 fb 39 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   20a35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20a39:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20a3c:	48 89 c7             	mov    rdi,rax
   20a3f:	e8 7c 39 fe ff       	call   43c0 <snd_pcm_prepare@plt>
   20a44:	eb 5d                	jmp    20aa3 <PlaySounds(SoundSystemState&, SoundTable&)+0xea>
   20a46:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   20a4a:	79 0c                	jns    20a58 <PlaySounds(SoundSystemState&, SoundTable&)+0x9f>
   20a4c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   20a4f:	89 c7                	mov    edi,eax
   20a51:	e8 aa 38 fe ff       	call   4300 <snd_strerror@plt>
   20a56:	eb 4b                	jmp    20aa3 <PlaySounds(SoundSystemState&, SoundTable&)+0xea>
   20a58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20a5c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20a60:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
   20a63:	74 3e                	je     20aa3 <PlaySounds(SoundSystemState&, SoundTable&)+0xea>
   20a65:	48 8d 35 26 be 01 00 	lea    rsi,[rip+0x1be26]        # 3c892 <NANO_SEC+0x15ca>
   20a6c:	48 8d 3d 8d aa 02 00 	lea    rdi,[rip+0x2aa8d]        # 4b500 <std::cout@@GLIBCXX_3.4>
   20a73:	e8 58 39 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   20a78:	48 89 c2             	mov    rdx,rax
   20a7b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20a7f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20a83:	48 89 c6             	mov    rsi,rax
   20a86:	48 89 d7             	mov    rdi,rdx
   20a89:	e8 22 36 fe ff       	call   40b0 <std::ostream::operator<<(unsigned long)@plt>
   20a8e:	48 89 c2             	mov    rdx,rax
   20a91:	48 8b 05 28 a5 02 00 	mov    rax,QWORD PTR [rip+0x2a528]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   20a98:	48 89 c6             	mov    rsi,rax
   20a9b:	48 89 d7             	mov    rdi,rdx
   20a9e:	e8 8d 39 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   20aa3:	90                   	nop
   20aa4:	c9                   	leave  
   20aa5:	c3                   	ret    

0000000000020aa6 <LoadSoundAsset(char const*, SoundAsset*)>:
   20aa6:	55                   	push   rbp
   20aa7:	48 89 e5             	mov    rbp,rsp
   20aaa:	48 83 ec 20          	sub    rsp,0x20
   20aae:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   20ab2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   20ab6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20aba:	48 8d 35 df bd 01 00 	lea    rsi,[rip+0x1bddf]        # 3c8a0 <NANO_SEC+0x15d8>
   20ac1:	48 89 c7             	mov    rdi,rax
   20ac4:	e8 27 3a fe ff       	call   44f0 <fopen@plt>
   20ac9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   20acd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20ad1:	ba 02 00 00 00       	mov    edx,0x2
   20ad6:	be 00 00 00 00       	mov    esi,0x0
   20adb:	48 89 c7             	mov    rdi,rax
   20ade:	e8 bd 39 fe ff       	call   44a0 <fseek@plt>
   20ae3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20ae7:	48 89 c7             	mov    rdi,rax
   20aea:	e8 41 35 fe ff       	call   4030 <ftell@plt>
   20aef:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   20af2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   20af5:	c1 e8 02             	shr    eax,0x2
   20af8:	83 c0 01             	add    eax,0x1
   20afb:	83 e0 fe             	and    eax,0xfffffffe
   20afe:	89 c2                	mov    edx,eax
   20b00:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b04:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   20b07:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b0b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20b0e:	c1 e0 02             	shl    eax,0x2
   20b11:	89 c0                	mov    eax,eax
   20b13:	48 89 c6             	mov    rsi,rax
   20b16:	bf 10 00 00 00       	mov    edi,0x10
   20b1b:	e8 b0 37 fe ff       	call   42d0 <aligned_alloc@plt>
   20b20:	48 89 c2             	mov    rdx,rax
   20b23:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b27:	48 89 10             	mov    QWORD PTR [rax],rdx
   20b2a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b2e:	c7 40 0c 80 bb 00 00 	mov    DWORD PTR [rax+0xc],0xbb80
   20b35:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b39:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
   20b40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20b44:	ba 00 00 00 00       	mov    edx,0x0
   20b49:	be 2c 00 00 00       	mov    esi,0x2c
   20b4e:	48 89 c7             	mov    rdi,rax
   20b51:	e8 4a 39 fe ff       	call   44a0 <fseek@plt>
   20b56:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
   20b59:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b5d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20b60:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   20b64:	48 89 d1             	mov    rcx,rdx
   20b67:	ba 01 00 00 00       	mov    edx,0x1
   20b6c:	48 89 c7             	mov    rdi,rax
   20b6f:	e8 dc 3a fe ff       	call   4650 <fread@plt>
   20b74:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b78:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   20b7b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20b7f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20b82:	01 c0                	add    eax,eax
   20b84:	83 e8 02             	sub    eax,0x2
   20b87:	89 c0                	mov    eax,eax
   20b89:	48 01 c0             	add    rax,rax
   20b8c:	48 01 d0             	add    rax,rdx
   20b8f:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20b92:	98                   	cwde   
   20b93:	66 0f ef c9          	pxor   xmm1,xmm1
   20b97:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20b9b:	f2 0f 10 05 cd c1 01 00 	movsd  xmm0,QWORD PTR [rip+0x1c1cd]        # 3cd70 <NANO_SEC+0x1aa8>
   20ba3:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20ba7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20bab:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   20bae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20bb2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20bb5:	01 c0                	add    eax,eax
   20bb7:	83 e8 01             	sub    eax,0x1
   20bba:	89 c0                	mov    eax,eax
   20bbc:	48 01 c0             	add    rax,rax
   20bbf:	48 01 d0             	add    rax,rdx
   20bc2:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   20bc6:	66 89 10             	mov    WORD PTR [rax],dx
   20bc9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20bcd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   20bd0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20bd4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20bd7:	01 c0                	add    eax,eax
   20bd9:	83 e8 01             	sub    eax,0x1
   20bdc:	89 c0                	mov    eax,eax
   20bde:	48 01 c0             	add    rax,rax
   20be1:	48 01 d0             	add    rax,rdx
   20be4:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20be7:	98                   	cwde   
   20be8:	66 0f ef c9          	pxor   xmm1,xmm1
   20bec:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20bf0:	f2 0f 10 05 78 c1 01 00 	movsd  xmm0,QWORD PTR [rip+0x1c178]        # 3cd70 <NANO_SEC+0x1aa8>
   20bf8:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20bfc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20c00:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   20c03:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20c07:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20c0a:	01 c0                	add    eax,eax
   20c0c:	89 c0                	mov    eax,eax
   20c0e:	48 01 c0             	add    rax,rax
   20c11:	48 01 d0             	add    rax,rdx
   20c14:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   20c18:	66 89 10             	mov    WORD PTR [rax],dx
   20c1b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20c1f:	48 89 c7             	mov    rdi,rax
   20c22:	e8 c9 37 fe ff       	call   43f0 <fclose@plt>
   20c27:	90                   	nop
   20c28:	c9                   	leave  
   20c29:	c3                   	ret    

0000000000020c2a <MoveCameraAlong(Camera&)>:
   20c2a:	55                   	push   rbp
   20c2b:	48 89 e5             	mov    rbp,rsp
   20c2e:	48 83 ec 40          	sub    rsp,0x40
   20c32:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   20c36:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   20c3f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   20c43:	31 c0                	xor    eax,eax
   20c45:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20c49:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
   20c4d:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
   20c50:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   20c54:	83 e0 01             	and    eax,0x1
   20c57:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
   20c5a:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   20c5e:	d0 e8                	shr    al,1
   20c60:	83 e0 01             	and    eax,0x1
   20c63:	88 45 dd             	mov    BYTE PTR [rbp-0x23],al
   20c66:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   20c6a:	c0 e8 02             	shr    al,0x2
   20c6d:	83 e0 01             	and    eax,0x1
   20c70:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
   20c73:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   20c77:	c0 e8 03             	shr    al,0x3
   20c7a:	83 e0 01             	and    eax,0x1
   20c7d:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
   20c80:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   20c84:	c0 e8 04             	shr    al,0x4
   20c87:	83 e0 01             	and    eax,0x1
   20c8a:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
   20c8d:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   20c91:	c0 e8 05             	shr    al,0x5
   20c94:	83 e0 01             	and    eax,0x1
   20c97:	88 45 e1             	mov    BYTE PTR [rbp-0x1f],al
   20c9a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20c9e:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   20ca1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20ca5:	f3 0f 10 40 14       	movss  xmm0,DWORD PTR [rax+0x14]
   20caa:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   20cae:	0f 28 c8             	movaps xmm1,xmm0
   20cb1:	66 0f 6e c2          	movd   xmm0,edx
   20cb5:	48 89 c7             	mov    rdi,rax
   20cb8:	e8 63 41 00 00       	call   24e20 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   20cbd:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   20cc1:	48 89 c7             	mov    rdi,rax
   20cc4:	e8 a6 4a 00 00       	call   2576f <glm::vec<2, float, (glm::qualifier)0> glm::normalize<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&)>
   20cc9:	66 48 0f 7e c0       	movq   rax,xmm0
   20cce:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   20cd2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   20cd5:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   20cda:	f3 0f 10 0d 9e c0 01 00 	movss  xmm1,DWORD PTR [rip+0x1c09e]        # 3cd80 <NANO_SEC+0x1ab8>
   20ce2:	0f 57 c1             	xorps  xmm0,xmm1
   20ce5:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   20ce9:	0f 28 c8             	movaps xmm1,xmm0
   20cec:	66 0f 6e c2          	movd   xmm0,edx
   20cf0:	48 89 c7             	mov    rdi,rax
   20cf3:	e8 28 41 00 00       	call   24e20 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   20cf8:	0f b6 45 dc          	movzx  eax,BYTE PTR [rbp-0x24]
   20cfc:	2a 45 de             	sub    al,BYTE PTR [rbp-0x22]
   20cff:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
   20d02:	0f b6 45 dd          	movzx  eax,BYTE PTR [rbp-0x23]
   20d06:	2a 45 df             	sub    al,BYTE PTR [rbp-0x21]
   20d09:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
   20d0c:	f3 0f 10 05 7c c0 01 00 	movss  xmm0,DWORD PTR [rip+0x1c07c]        # 3cd90 <NANO_SEC+0x1ac8>
   20d14:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   20d19:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20d1d:	f3 0f 10 48 18       	movss  xmm1,DWORD PTR [rax+0x18]
   20d22:	f3 0f 10 55 e8       	movss  xmm2,DWORD PTR [rbp-0x18]
   20d27:	0f be 45 e2          	movsx  eax,BYTE PTR [rbp-0x1e]
   20d2b:	66 0f ef c0          	pxor   xmm0,xmm0
   20d2f:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   20d33:	f3 0f 59 d0          	mulss  xmm2,xmm0
   20d37:	f3 0f 10 05 51 c0 01 00 	movss  xmm0,DWORD PTR [rip+0x1c051]        # 3cd90 <NANO_SEC+0x1ac8>
   20d3f:	f3 0f 59 d0          	mulss  xmm2,xmm0
   20d43:	f3 0f 10 5d f0       	movss  xmm3,DWORD PTR [rbp-0x10]
   20d48:	0f be 45 e3          	movsx  eax,BYTE PTR [rbp-0x1d]
   20d4c:	66 0f ef c0          	pxor   xmm0,xmm0
   20d50:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   20d54:	f3 0f 59 d8          	mulss  xmm3,xmm0
   20d58:	f3 0f 10 05 30 c0 01 00 	movss  xmm0,DWORD PTR [rip+0x1c030]        # 3cd90 <NANO_SEC+0x1ac8>
   20d60:	f3 0f 59 c3          	mulss  xmm0,xmm3
   20d64:	f3 0f 58 c2          	addss  xmm0,xmm2
   20d68:	f3 0f 58 c1          	addss  xmm0,xmm1
   20d6c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20d70:	f3 0f 11 40 18       	movss  DWORD PTR [rax+0x18],xmm0
   20d75:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20d79:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
   20d7e:	f3 0f 10 55 ec       	movss  xmm2,DWORD PTR [rbp-0x14]
   20d83:	0f be 45 e2          	movsx  eax,BYTE PTR [rbp-0x1e]
   20d87:	66 0f ef c0          	pxor   xmm0,xmm0
   20d8b:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   20d8f:	f3 0f 59 d0          	mulss  xmm2,xmm0
   20d93:	f3 0f 10 05 f5 bf 01 00 	movss  xmm0,DWORD PTR [rip+0x1bff5]        # 3cd90 <NANO_SEC+0x1ac8>
   20d9b:	f3 0f 59 d0          	mulss  xmm2,xmm0
   20d9f:	f3 0f 10 5d f4       	movss  xmm3,DWORD PTR [rbp-0xc]
   20da4:	0f be 45 e3          	movsx  eax,BYTE PTR [rbp-0x1d]
   20da8:	66 0f ef c0          	pxor   xmm0,xmm0
   20dac:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   20db0:	f3 0f 59 d8          	mulss  xmm3,xmm0
   20db4:	f3 0f 10 05 d4 bf 01 00 	movss  xmm0,DWORD PTR [rip+0x1bfd4]        # 3cd90 <NANO_SEC+0x1ac8>
   20dbc:	f3 0f 59 c3          	mulss  xmm0,xmm3
   20dc0:	f3 0f 58 c2          	addss  xmm0,xmm2
   20dc4:	f3 0f 58 c1          	addss  xmm0,xmm1
   20dc8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20dcc:	f3 0f 11 40 20       	movss  DWORD PTR [rax+0x20],xmm0
   20dd1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   20dd5:	c6 40 24 00          	mov    BYTE PTR [rax+0x24],0x0
   20dd9:	90                   	nop
   20dda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20dde:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   20de7:	74 05                	je     20dee <MoveCameraAlong(Camera&)+0x1c4>
   20de9:	e8 c2 36 fe ff       	call   44b0 <__stack_chk_fail@plt>
   20dee:	c9                   	leave  
   20def:	c3                   	ret    

0000000000020df0 <RotateCamera(Camera&, float, float)>:
   20df0:	55                   	push   rbp
   20df1:	48 89 e5             	mov    rbp,rsp
   20df4:	53                   	push   rbx
   20df5:	48 83 ec 68          	sub    rsp,0x68
   20df9:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   20dfd:	f3 0f 11 45 94       	movss  DWORD PTR [rbp-0x6c],xmm0
   20e02:	f3 0f 11 4d 90       	movss  DWORD PTR [rbp-0x70],xmm1
   20e07:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   20e10:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   20e14:	31 c0                	xor    eax,eax
   20e16:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   20e19:	66 0f 6e c0          	movd   xmm0,eax
   20e1d:	e8 2e 3e 00 00       	call   24c50 <std::cos(float)>
   20e22:	66 0f 7e c0          	movd   eax,xmm0
   20e26:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   20e29:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   20e2c:	66 0f 6e c0          	movd   xmm0,eax
   20e30:	e8 81 3e 00 00       	call   24cb6 <std::sin(float)>
   20e35:	66 0f 7e c0          	movd   eax,xmm0
   20e39:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   20e3c:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   20e3f:	66 0f 6e c0          	movd   xmm0,eax
   20e43:	e8 08 3e 00 00       	call   24c50 <std::cos(float)>
   20e48:	66 0f 7e c0          	movd   eax,xmm0
   20e4c:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   20e4f:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   20e52:	66 0f 6e c0          	movd   xmm0,eax
   20e56:	e8 5b 3e 00 00       	call   24cb6 <std::sin(float)>
   20e5b:	66 0f 7e c0          	movd   eax,xmm0
   20e5f:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   20e62:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20e66:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20e6b:	f3 0f 59 45 a8       	mulss  xmm0,DWORD PTR [rbp-0x58]
   20e70:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20e74:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   20e79:	f3 0f 59 4d ac       	mulss  xmm1,DWORD PTR [rbp-0x54]
   20e7e:	f3 0f 5c c1          	subss  xmm0,xmm1
   20e82:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20e86:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   20e8b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20e8f:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20e94:	0f 28 c8             	movaps xmm1,xmm0
   20e97:	f3 0f 59 4d ac       	mulss  xmm1,DWORD PTR [rbp-0x54]
   20e9c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20ea0:	f3 0f 10 40 14       	movss  xmm0,DWORD PTR [rax+0x14]
   20ea5:	f3 0f 59 45 a8       	mulss  xmm0,DWORD PTR [rbp-0x58]
   20eaa:	f3 0f 58 c1          	addss  xmm0,xmm1
   20eae:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20eb2:	f3 0f 11 40 14       	movss  DWORD PTR [rax+0x14],xmm0
   20eb7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20ebb:	48 83 c0 0c          	add    rax,0xc
   20ebf:	48 8b 5d 98          	mov    rbx,QWORD PTR [rbp-0x68]
   20ec3:	48 89 c7             	mov    rdi,rax
   20ec6:	e8 c8 48 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   20ecb:	66 48 0f 7e c0       	movq   rax,xmm0
   20ed0:	0f 28 c1             	movaps xmm0,xmm1
   20ed3:	48 89 43 0c          	mov    QWORD PTR [rbx+0xc],rax
   20ed7:	f3 0f 11 43 14       	movss  DWORD PTR [rbx+0x14],xmm0
   20edc:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   20ee0:	b9 00 00 00 00       	mov    ecx,0x0
   20ee5:	ba 01 00 00 00       	mov    edx,0x1
   20eea:	be 00 00 00 00       	mov    esi,0x0
   20eef:	48 89 c7             	mov    rdi,rax
   20ef2:	e8 63 41 00 00       	call   2505a <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, int>(int, int, int)>
   20ef7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20efb:	48 8d 50 0c          	lea    rdx,[rax+0xc]
   20eff:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   20f03:	48 89 c6             	mov    rsi,rax
   20f06:	48 89 d7             	mov    rdi,rdx
   20f09:	e8 c1 48 00 00       	call   257cf <glm::vec<3, float, (glm::qualifier)0> glm::cross<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   20f0e:	66 48 0f 7e c0       	movq   rax,xmm0
   20f13:	0f 28 c1             	movaps xmm0,xmm1
   20f16:	48 89 45 dc          	mov    QWORD PTR [rbp-0x24],rax
   20f1a:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   20f1f:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   20f23:	48 89 c7             	mov    rdi,rax
   20f26:	e8 68 48 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   20f2b:	66 48 0f 7e c0       	movq   rax,xmm0
   20f30:	0f 28 c1             	movaps xmm0,xmm1
   20f33:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   20f37:	f3 0f 11 45 c0       	movss  DWORD PTR [rbp-0x40],xmm0
   20f3c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20f40:	48 8d 50 0c          	lea    rdx,[rax+0xc]
   20f44:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   20f48:	48 89 d6             	mov    rsi,rdx
   20f4b:	48 89 c7             	mov    rdi,rax
   20f4e:	e8 7c 48 00 00       	call   257cf <glm::vec<3, float, (glm::qualifier)0> glm::cross<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   20f53:	66 48 0f 7e c0       	movq   rax,xmm0
   20f58:	0f 28 c1             	movaps xmm0,xmm1
   20f5b:	48 89 45 dc          	mov    QWORD PTR [rbp-0x24],rax
   20f5f:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   20f64:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   20f68:	48 89 c7             	mov    rdi,rax
   20f6b:	e8 23 48 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   20f70:	66 48 0f 7e c0       	movq   rax,xmm0
   20f75:	0f 28 c1             	movaps xmm0,xmm1
   20f78:	48 89 45 c4          	mov    QWORD PTR [rbp-0x3c],rax
   20f7c:	f3 0f 11 45 cc       	movss  DWORD PTR [rbp-0x34],xmm0
   20f81:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   20f84:	66 0f 6e c0          	movd   xmm0,eax
   20f88:	e8 29 3d 00 00       	call   24cb6 <std::sin(float)>
   20f8d:	66 0f 7e c0          	movd   eax,xmm0
   20f91:	48 8d 55 c4          	lea    rdx,[rbp-0x3c]
   20f95:	66 0f 6e c0          	movd   xmm0,eax
   20f99:	48 89 d7             	mov    rdi,rdx
   20f9c:	e8 75 48 00 00       	call   25816 <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, float)>
   20fa1:	66 48 0f 7e c0       	movq   rax,xmm0
   20fa6:	0f 28 c1             	movaps xmm0,xmm1
   20fa9:	48 89 45 dc          	mov    QWORD PTR [rbp-0x24],rax
   20fad:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   20fb2:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   20fb5:	66 0f 6e c0          	movd   xmm0,eax
   20fb9:	e8 92 3c 00 00       	call   24c50 <std::cos(float)>
   20fbe:	66 0f 7e c0          	movd   eax,xmm0
   20fc2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   20fc6:	48 83 c2 0c          	add    rdx,0xc
   20fca:	66 0f 6e c0          	movd   xmm0,eax
   20fce:	48 89 d7             	mov    rdi,rdx
   20fd1:	e8 40 48 00 00       	call   25816 <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, float)>
   20fd6:	66 48 0f 7e c0       	movq   rax,xmm0
   20fdb:	0f 28 c1             	movaps xmm0,xmm1
   20fde:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   20fe2:	f3 0f 11 45 d8       	movss  DWORD PTR [rbp-0x28],xmm0
   20fe7:	48 8b 5d 98          	mov    rbx,QWORD PTR [rbp-0x68]
   20feb:	48 8d 55 dc          	lea    rdx,[rbp-0x24]
   20fef:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   20ff3:	48 89 d6             	mov    rsi,rdx
   20ff6:	48 89 c7             	mov    rdi,rax
   20ff9:	e8 b0 48 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   20ffe:	66 48 0f 7e c0       	movq   rax,xmm0
   21003:	0f 28 c1             	movaps xmm0,xmm1
   21006:	48 89 43 0c          	mov    QWORD PTR [rbx+0xc],rax
   2100a:	f3 0f 11 43 14       	movss  DWORD PTR [rbx+0x14],xmm0
   2100f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   21013:	48 83 c0 0c          	add    rax,0xc
   21017:	48 8b 5d 98          	mov    rbx,QWORD PTR [rbp-0x68]
   2101b:	48 89 c7             	mov    rdi,rax
   2101e:	e8 70 47 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   21023:	66 48 0f 7e c0       	movq   rax,xmm0
   21028:	0f 28 c1             	movaps xmm0,xmm1
   2102b:	48 89 43 0c          	mov    QWORD PTR [rbx+0xc],rax
   2102f:	f3 0f 11 43 14       	movss  DWORD PTR [rbx+0x14],xmm0
   21034:	90                   	nop
   21035:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   21039:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   21042:	74 05                	je     21049 <RotateCamera(Camera&, float, float)+0x259>
   21044:	e8 67 34 fe ff       	call   44b0 <__stack_chk_fail@plt>
   21049:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2104d:	c9                   	leave  
   2104e:	c3                   	ret    

000000000002104f <LookAt(glm::vec<3, float, (glm::qualifier)0>, glm::vec<3, float, (glm::qualifier)0>, glm::vec<3, float, (glm::qualifier)0>)>:
   2104f:	55                   	push   rbp
   21050:	48 89 e5             	mov    rbp,rsp
   21053:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
   2105a:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   2105e:	66 48 0f 7e c0       	movq   rax,xmm0
   21063:	0f 28 f9             	movaps xmm7,xmm1
   21066:	66 0f 6f f2          	movdqa xmm6,xmm2
   2106a:	0f 28 d3             	movaps xmm2,xmm3
   2106d:	66 0f 6f cc          	movdqa xmm1,xmm4
   21071:	0f 28 c5             	movaps xmm0,xmm5
   21074:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   21078:	f3 0f 11 7d 90       	movss  DWORD PTR [rbp-0x70],xmm7
   2107d:	66 0f d6 b5 78 ff ff ff 	movq   QWORD PTR [rbp-0x88],xmm6
   21085:	f3 0f 11 55 80       	movss  DWORD PTR [rbp-0x80],xmm2
   2108a:	66 0f d6 8d 68 ff ff ff 	movq   QWORD PTR [rbp-0x98],xmm1
   21092:	f3 0f 11 85 70 ff ff ff 	movss  DWORD PTR [rbp-0x90],xmm0
   2109a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   210a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   210a7:	31 c0                	xor    eax,eax
   210a9:	48 8d 55 88          	lea    rdx,[rbp-0x78]
   210ad:	48 8d 85 78 ff ff ff 	lea    rax,[rbp-0x88]
   210b4:	48 89 d6             	mov    rsi,rdx
   210b7:	48 89 c7             	mov    rdi,rax
   210ba:	e8 fd 3d 00 00       	call   24ebc <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   210bf:	66 48 0f 7e c0       	movq   rax,xmm0
   210c4:	0f 28 c1             	movaps xmm0,xmm1
   210c7:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   210cb:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   210d0:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   210d4:	48 89 c7             	mov    rdi,rax
   210d7:	e8 b7 46 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   210dc:	66 48 0f 7e c0       	movq   rax,xmm0
   210e1:	0f 28 c1             	movaps xmm0,xmm1
   210e4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   210e8:	f3 0f 11 45 d0       	movss  DWORD PTR [rbp-0x30],xmm0
   210ed:	48 8d 95 68 ff ff ff 	lea    rdx,[rbp-0x98]
   210f4:	48 8d 45 c8          	lea    rax,[rbp-0x38]
   210f8:	48 89 d6             	mov    rsi,rdx
   210fb:	48 89 c7             	mov    rdi,rax
   210fe:	e8 cc 46 00 00       	call   257cf <glm::vec<3, float, (glm::qualifier)0> glm::cross<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21103:	66 48 0f 7e c0       	movq   rax,xmm0
   21108:	0f 28 c1             	movaps xmm0,xmm1
   2110b:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2110f:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   21114:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   21118:	48 89 c7             	mov    rdi,rax
   2111b:	e8 73 46 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   21120:	66 48 0f 7e c0       	movq   rax,xmm0
   21125:	0f 28 c1             	movaps xmm0,xmm1
   21128:	48 89 45 d4          	mov    QWORD PTR [rbp-0x2c],rax
   2112c:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   21131:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   21135:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   21139:	48 89 d6             	mov    rsi,rdx
   2113c:	48 89 c7             	mov    rdi,rax
   2113f:	e8 8b 46 00 00       	call   257cf <glm::vec<3, float, (glm::qualifier)0> glm::cross<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21144:	66 48 0f 7e c0       	movq   rax,xmm0
   21149:	0f 28 c1             	movaps xmm0,xmm1
   2114c:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   21150:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   21155:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   21159:	48 89 c7             	mov    rdi,rax
   2115c:	e8 32 46 00 00       	call   25793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>
   21161:	66 48 0f 7e c0       	movq   rax,xmm0
   21166:	0f 28 c1             	movaps xmm0,xmm1
   21169:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2116d:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   21172:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   21177:	f3 0f 10 0d 01 bc 01 00 	movss  xmm1,DWORD PTR [rip+0x1bc01]        # 3cd80 <NANO_SEC+0x1ab8>
   2117f:	0f 57 c1             	xorps  xmm0,xmm1
   21182:	f3 0f 11 45 a4       	movss  DWORD PTR [rbp-0x5c],xmm0
   21187:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   2118e:	f3 0f 10 45 cc       	movss  xmm0,DWORD PTR [rbp-0x34]
   21193:	f3 0f 10 0d e5 bb 01 00 	movss  xmm1,DWORD PTR [rip+0x1bbe5]        # 3cd80 <NANO_SEC+0x1ab8>
   2119b:	0f 57 c1             	xorps  xmm0,xmm1
   2119e:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   211a3:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   211aa:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   211af:	f3 0f 10 0d c9 bb 01 00 	movss  xmm1,DWORD PTR [rip+0x1bbc9]        # 3cd80 <NANO_SEC+0x1ab8>
   211b7:	0f 57 c1             	xorps  xmm0,xmm1
   211ba:	f3 0f 11 45 b4       	movss  DWORD PTR [rbp-0x4c],xmm0
   211bf:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   211c6:	48 8d 55 88          	lea    rdx,[rbp-0x78]
   211ca:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   211ce:	48 89 d6             	mov    rsi,rdx
   211d1:	48 89 c7             	mov    rdi,rax
   211d4:	e8 86 47 00 00       	call   2595f <float glm::dot<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   211d9:	66 0f 7e c0          	movd   eax,xmm0
   211dd:	f3 0f 10 05 9b bb 01 00 	movss  xmm0,DWORD PTR [rip+0x1bb9b]        # 3cd80 <NANO_SEC+0x1ab8>
   211e5:	66 0f 6e d8          	movd   xmm3,eax
   211e9:	0f 57 d8             	xorps  xmm3,xmm0
   211ec:	0f 28 c3             	movaps xmm0,xmm3
   211ef:	f3 0f 11 45 bc       	movss  DWORD PTR [rbp-0x44],xmm0
   211f4:	48 8d 55 88          	lea    rdx,[rbp-0x78]
   211f8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   211fc:	48 89 d6             	mov    rsi,rdx
   211ff:	48 89 c7             	mov    rdi,rax
   21202:	e8 58 47 00 00       	call   2595f <float glm::dot<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21207:	66 0f 7e c0          	movd   eax,xmm0
   2120b:	f3 0f 10 05 6d bb 01 00 	movss  xmm0,DWORD PTR [rip+0x1bb6d]        # 3cd80 <NANO_SEC+0x1ab8>
   21213:	66 0f 6e e0          	movd   xmm4,eax
   21217:	0f 57 e0             	xorps  xmm4,xmm0
   2121a:	0f 28 c4             	movaps xmm0,xmm4
   2121d:	f3 0f 11 45 c0       	movss  DWORD PTR [rbp-0x40],xmm0
   21222:	48 8d 55 88          	lea    rdx,[rbp-0x78]
   21226:	48 8d 45 c8          	lea    rax,[rbp-0x38]
   2122a:	48 89 d6             	mov    rsi,rdx
   2122d:	48 89 c7             	mov    rdi,rax
   21230:	e8 2a 47 00 00       	call   2595f <float glm::dot<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21235:	66 0f 7e c0          	movd   eax,xmm0
   21239:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   2123c:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
   21243:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   21247:	4c 8d 48 04          	lea    r9,[rax+0x4]
   2124b:	4c 8d 45 a8          	lea    r8,[rbp-0x58]
   2124f:	48 8d 4d a4          	lea    rcx,[rbp-0x5c]
   21253:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   21257:	48 8d 75 d4          	lea    rsi,[rbp-0x2c]
   2125b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2125f:	48 83 ec 08          	sub    rsp,0x8
   21263:	48 8d 7d ec          	lea    rdi,[rbp-0x14]
   21267:	57                   	push   rdi
   21268:	48 8d 7d c4          	lea    rdi,[rbp-0x3c]
   2126c:	57                   	push   rdi
   2126d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
   21271:	57                   	push   rdi
   21272:	48 8d 7d bc          	lea    rdi,[rbp-0x44]
   21276:	57                   	push   rdi
   21277:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
   2127b:	57                   	push   rdi
   2127c:	48 8d 7d b4          	lea    rdi,[rbp-0x4c]
   21280:	57                   	push   rdi
   21281:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
   21285:	48 83 c7 08          	add    rdi,0x8
   21289:	57                   	push   rdi
   2128a:	48 8d 7d d4          	lea    rdi,[rbp-0x2c]
   2128e:	48 83 c7 08          	add    rdi,0x8
   21292:	57                   	push   rdi
   21293:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
   21297:	57                   	push   rdi
   21298:	48 8d 7d ac          	lea    rdi,[rbp-0x54]
   2129c:	57                   	push   rdi
   2129d:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
   212a1:	48 83 c7 04          	add    rdi,0x4
   212a5:	57                   	push   rdi
   212a6:	48 89 c7             	mov    rdi,rax
   212a9:	e8 2e 47 00 00       	call   259dc <glm::mat<4, 4, float, (glm::qualifier)0>::mat<float, float, float, int, float, float, float, int, float, float, float, int, float, float, float, int>(float const&, float const&, float const&, int const&, float const&, float const&, float const&, int const&, float const&, float const&, float const&, int const&, float const&, float const&, float const&, int const&)>
   212ae:	48 83 c4 60          	add    rsp,0x60
   212b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   212b6:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   212bf:	74 05                	je     212c6 <LookAt(glm::vec<3, float, (glm::qualifier)0>, glm::vec<3, float, (glm::qualifier)0>, glm::vec<3, float, (glm::qualifier)0>)+0x277>
   212c1:	e8 ea 31 fe ff       	call   44b0 <__stack_chk_fail@plt>
   212c6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   212ca:	c9                   	leave  
   212cb:	c3                   	ret    

00000000000212cc <PerspectiveMatrix(float, float, float, float)>:
   212cc:	55                   	push   rbp
   212cd:	48 89 e5             	mov    rbp,rsp
   212d0:	48 83 ec 70          	sub    rsp,0x70
   212d4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   212d8:	f3 0f 11 45 a4       	movss  DWORD PTR [rbp-0x5c],xmm0
   212dd:	f3 0f 11 4d a0       	movss  DWORD PTR [rbp-0x60],xmm1
   212e2:	f3 0f 11 55 9c       	movss  DWORD PTR [rbp-0x64],xmm2
   212e7:	f3 0f 11 5d 98       	movss  DWORD PTR [rbp-0x68],xmm3
   212ec:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   212f5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   212f9:	31 c0                	xor    eax,eax
   212fb:	66 0f ef c9          	pxor   xmm1,xmm1
   212ff:	f3 0f 5a 4d a4       	cvtss2sd xmm1,DWORD PTR [rbp-0x5c]
   21304:	f2 0f 10 05 8c ba 01 00 	movsd  xmm0,QWORD PTR [rip+0x1ba8c]        # 3cd98 <NANO_SEC+0x1ad0>
   2130c:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   21310:	66 48 0f 7e c8       	movq   rax,xmm1
   21315:	66 48 0f 6e c0       	movq   xmm0,rax
   2131a:	e8 e1 2e fe ff       	call   4200 <tan@plt>
   2131f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   21323:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   21328:	f3 0f 10 45 a0       	movss  xmm0,DWORD PTR [rbp-0x60]
   2132d:	0f 28 c8             	movaps xmm1,xmm0
   21330:	f3 0f 59 4d f4       	mulss  xmm1,DWORD PTR [rbp-0xc]
   21335:	f3 0f 10 05 1f ba 01 00 	movss  xmm0,DWORD PTR [rip+0x1ba1f]        # 3cd5c <NANO_SEC+0x1a94>
   2133d:	f3 0f 5e c1          	divss  xmm0,xmm1
   21341:	f3 0f 11 45 b4       	movss  DWORD PTR [rbp-0x4c],xmm0
   21346:	f3 0f 10 05 0e ba 01 00 	movss  xmm0,DWORD PTR [rip+0x1ba0e]        # 3cd5c <NANO_SEC+0x1a94>
   2134e:	f3 0f 5e 45 f4       	divss  xmm0,DWORD PTR [rbp-0xc]
   21353:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   21358:	f3 0f 10 45 98       	movss  xmm0,DWORD PTR [rbp-0x68]
   2135d:	f3 0f 58 45 9c       	addss  xmm0,DWORD PTR [rbp-0x64]
   21362:	f3 0f 10 0d 16 ba 01 00 	movss  xmm1,DWORD PTR [rip+0x1ba16]        # 3cd80 <NANO_SEC+0x1ab8>
   2136a:	0f 57 c1             	xorps  xmm0,xmm1
   2136d:	f3 0f 10 4d 98       	movss  xmm1,DWORD PTR [rbp-0x68]
   21372:	f3 0f 5c 4d 9c       	subss  xmm1,DWORD PTR [rbp-0x64]
   21377:	f3 0f 5e c1          	divss  xmm0,xmm1
   2137b:	f3 0f 11 45 bc       	movss  DWORD PTR [rbp-0x44],xmm0
   21380:	f3 0f 10 4d 98       	movss  xmm1,DWORD PTR [rbp-0x68]
   21385:	f3 0f 10 05 13 ba 01 00 	movss  xmm0,DWORD PTR [rip+0x1ba13]        # 3cda0 <NANO_SEC+0x1ad8>
   2138d:	f3 0f 59 c1          	mulss  xmm0,xmm1
   21391:	f3 0f 59 45 9c       	mulss  xmm0,DWORD PTR [rbp-0x64]
   21396:	f3 0f 10 4d 98       	movss  xmm1,DWORD PTR [rbp-0x68]
   2139b:	f3 0f 5c 4d 9c       	subss  xmm1,DWORD PTR [rbp-0x64]
   213a0:	f3 0f 5e c1          	divss  xmm0,xmm1
   213a4:	f3 0f 11 45 c0       	movss  DWORD PTR [rbp-0x40],xmm0
   213a9:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
   213b0:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
   213b7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
   213be:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
   213c5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   213cc:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   213d3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   213da:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   213e1:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
   213e8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   213ef:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   213f6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   213fd:	4c 8d 4d d0          	lea    r9,[rbp-0x30]
   21401:	4c 8d 45 cc          	lea    r8,[rbp-0x34]
   21405:	48 8d 4d c8          	lea    rcx,[rbp-0x38]
   21409:	48 8d 55 c4          	lea    rdx,[rbp-0x3c]
   2140d:	48 8d 75 b4          	lea    rsi,[rbp-0x4c]
   21411:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   21415:	48 83 ec 08          	sub    rsp,0x8
   21419:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
   2141d:	57                   	push   rdi
   2141e:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
   21422:	57                   	push   rdi
   21423:	48 8d 7d ec          	lea    rdi,[rbp-0x14]
   21427:	57                   	push   rdi
   21428:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
   2142c:	57                   	push   rdi
   2142d:	48 8d 7d e4          	lea    rdi,[rbp-0x1c]
   21431:	57                   	push   rdi
   21432:	48 8d 7d bc          	lea    rdi,[rbp-0x44]
   21436:	57                   	push   rdi
   21437:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
   2143b:	57                   	push   rdi
   2143c:	48 8d 7d dc          	lea    rdi,[rbp-0x24]
   21440:	57                   	push   rdi
   21441:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
   21445:	57                   	push   rdi
   21446:	48 8d 7d d4          	lea    rdi,[rbp-0x2c]
   2144a:	57                   	push   rdi
   2144b:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
   2144f:	57                   	push   rdi
   21450:	48 89 c7             	mov    rdi,rax
   21453:	e8 98 47 00 00       	call   25bf0 <glm::mat<4, 4, float, (glm::qualifier)0>::mat<float, int, int, int, int, float, int, int, int, int, float, int, int, int, float, int>(float const&, int const&, int const&, int const&, int const&, float const&, int const&, int const&, int const&, int const&, float const&, int const&, int const&, int const&, float const&, int const&)>
   21458:	48 83 c4 60          	add    rsp,0x60
   2145c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21460:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   21469:	74 05                	je     21470 <PerspectiveMatrix(float, float, float, float)+0x1a4>
   2146b:	e8 40 30 fe ff       	call   44b0 <__stack_chk_fail@plt>
   21470:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   21474:	c9                   	leave  
   21475:	c3                   	ret    

0000000000021476 <RendererAllocate(void*, unsigned int)>:
   21476:	55                   	push   rbp
   21477:	48 89 e5             	mov    rbp,rsp
   2147a:	48 83 ec 10          	sub    rsp,0x10
   2147e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21482:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   21485:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   21488:	48 89 c7             	mov    rdi,rax
   2148b:	e8 10 31 fe ff       	call   45a0 <malloc@plt>
   21490:	c9                   	leave  
   21491:	c3                   	ret    

0000000000021492 <RendererAlignedAllocate(void*, unsigned int, unsigned int)>:
   21492:	55                   	push   rbp
   21493:	48 89 e5             	mov    rbp,rsp
   21496:	48 83 ec 10          	sub    rsp,0x10
   2149a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2149e:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   214a1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   214a4:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   214a7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   214aa:	48 89 d6             	mov    rsi,rdx
   214ad:	48 89 c7             	mov    rdi,rax
   214b0:	e8 1b 2e fe ff       	call   42d0 <aligned_alloc@plt>
   214b5:	c9                   	leave  
   214b6:	c3                   	ret    

00000000000214b7 <RendererFree(void*, void*)>:
   214b7:	55                   	push   rbp
   214b8:	48 89 e5             	mov    rbp,rsp
   214bb:	48 83 ec 10          	sub    rsp,0x10
   214bf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   214c3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   214c7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   214cb:	48 89 c7             	mov    rdi,rax
   214ce:	e8 2d 30 fe ff       	call   4500 <free@plt>
   214d3:	90                   	nop
   214d4:	c9                   	leave  
   214d5:	c3                   	ret    

00000000000214d6 <GetFileSize(char const*)>:
   214d6:	55                   	push   rbp
   214d7:	48 89 e5             	mov    rbp,rsp
   214da:	48 83 ec 20          	sub    rsp,0x20
   214de:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   214e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   214e6:	48 8d 35 b3 b3 01 00 	lea    rsi,[rip+0x1b3b3]        # 3c8a0 <NANO_SEC+0x15d8>
   214ed:	48 89 c7             	mov    rdi,rax
   214f0:	e8 fb 2f fe ff       	call   44f0 <fopen@plt>
   214f5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   214f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   214fd:	ba 02 00 00 00       	mov    edx,0x2
   21502:	be 00 00 00 00       	mov    esi,0x0
   21507:	48 89 c7             	mov    rdi,rax
   2150a:	e8 91 2f fe ff       	call   44a0 <fseek@plt>
   2150f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21513:	48 89 c7             	mov    rdi,rax
   21516:	e8 15 2b fe ff       	call   4030 <ftell@plt>
   2151b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2151e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21522:	48 89 c7             	mov    rdi,rax
   21525:	e8 c6 2e fe ff       	call   43f0 <fclose@plt>
   2152a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2152d:	c9                   	leave  
   2152e:	c3                   	ret    

000000000002152f <OnResize(void*, unsigned int, unsigned int)>:
   2152f:	55                   	push   rbp
   21530:	48 89 e5             	mov    rbp,rsp
   21533:	48 83 ec 20          	sub    rsp,0x20
   21537:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2153b:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   2153e:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   21541:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   21545:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   21549:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2154d:	4c 8b 48 50          	mov    r9,QWORD PTR [rax+0x50]
   21551:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21555:	48 8b 00             	mov    rax,QWORD PTR [rax]
   21558:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
   2155b:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   2155e:	41 89 c8             	mov    r8d,ecx
   21561:	89 d1                	mov    ecx,edx
   21563:	ba 00 00 00 00       	mov    edx,0x0
   21568:	be 00 00 00 00       	mov    esi,0x0
   2156d:	48 89 c7             	mov    rdi,rax
   21570:	41 ff d1             	call   r9
   21573:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   21576:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2157a:	89 90 34 01 00 00    	mov    DWORD PTR [rax+0x134],edx
   21580:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   21583:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21587:	89 90 30 01 00 00    	mov    DWORD PTR [rax+0x130],edx
   2158d:	90                   	nop
   2158e:	c9                   	leave  
   2158f:	c3                   	ret    

0000000000021590 <OnClose(void*)>:
   21590:	55                   	push   rbp
   21591:	48 89 e5             	mov    rbp,rsp
   21594:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21598:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2159c:	c6 80 b0 01 00 00 00 	mov    BYTE PTR [rax+0x1b0],0x0
   215a3:	90                   	nop
   215a4:	5d                   	pop    rbp
   215a5:	c3                   	ret    

00000000000215a6 <W(void*)>:
   215a6:	55                   	push   rbp
   215a7:	48 89 e5             	mov    rbp,rsp
   215aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   215ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   215b2:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   215b9:	83 c8 01             	or     eax,0x1
   215bc:	89 c2                	mov    edx,eax
   215be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   215c2:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   215c8:	90                   	nop
   215c9:	5d                   	pop    rbp
   215ca:	c3                   	ret    

00000000000215cb <A(void*)>:
   215cb:	55                   	push   rbp
   215cc:	48 89 e5             	mov    rbp,rsp
   215cf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   215d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   215d7:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   215de:	83 c8 02             	or     eax,0x2
   215e1:	89 c2                	mov    edx,eax
   215e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   215e7:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   215ed:	90                   	nop
   215ee:	5d                   	pop    rbp
   215ef:	c3                   	ret    

00000000000215f0 <S(void*)>:
   215f0:	55                   	push   rbp
   215f1:	48 89 e5             	mov    rbp,rsp
   215f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   215f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   215fc:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21603:	83 c8 04             	or     eax,0x4
   21606:	89 c2                	mov    edx,eax
   21608:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2160c:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21612:	90                   	nop
   21613:	5d                   	pop    rbp
   21614:	c3                   	ret    

0000000000021615 <D(void*)>:
   21615:	55                   	push   rbp
   21616:	48 89 e5             	mov    rbp,rsp
   21619:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2161d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21621:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21628:	83 c8 08             	or     eax,0x8
   2162b:	89 c2                	mov    edx,eax
   2162d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21631:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21637:	90                   	nop
   21638:	5d                   	pop    rbp
   21639:	c3                   	ret    

000000000002163a <Space(void*)>:
   2163a:	55                   	push   rbp
   2163b:	48 89 e5             	mov    rbp,rsp
   2163e:	48 83 ec 30          	sub    rsp,0x30
   21642:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   21646:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2164f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   21653:	31 c0                	xor    eax,eax
   21655:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21659:	f3 0f 10 88 8c 01 00 00 	movss  xmm1,DWORD PTR [rax+0x18c]
   21661:	f3 0f 10 05 3b b7 01 00 	movss  xmm0,DWORD PTR [rip+0x1b73b]        # 3cda4 <NANO_SEC+0x1adc>
   21669:	0f 2f c1             	comiss xmm0,xmm1
   2166c:	73 02                	jae    21670 <Space(void*)+0x36>
   2166e:	eb 3c                	jmp    216ac <Space(void*)+0x72>
   21670:	48 8b 0d 31 b7 01 00 	mov    rcx,QWORD PTR [rip+0x1b731]        # 3cda8 <NANO_SEC+0x1ae0>
   21677:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   2167b:	ba 00 00 00 00       	mov    edx,0x0
   21680:	66 48 0f 6e c1       	movq   xmm0,rcx
   21685:	be 00 00 00 00       	mov    esi,0x0
   2168a:	48 89 c7             	mov    rdi,rax
   2168d:	e8 2a 46 00 00       	call   25cbc <glm::vec<3, float, (glm::qualifier)0>::vec<int, double, int>(int, double, int)>
   21692:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21696:	48 8d 90 a0 01 00 00 	lea    rdx,[rax+0x1a0]
   2169d:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   216a1:	48 89 c6             	mov    rsi,rax
   216a4:	48 89 d7             	mov    rdi,rdx
   216a7:	e8 a4 37 00 00       	call   24e50 <glm::vec<3, float, (glm::qualifier)0>& glm::vec<3, float, (glm::qualifier)0>::operator+=<float>(glm::vec<3, float, (glm::qualifier)0> const&)>
   216ac:	90                   	nop
   216ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   216b1:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   216ba:	74 05                	je     216c1 <Space(void*)+0x87>
   216bc:	e8 ef 2d fe ff       	call   44b0 <__stack_chk_fail@plt>
   216c1:	c9                   	leave  
   216c2:	c3                   	ret    

00000000000216c3 <Shift(void*)>:
   216c3:	55                   	push   rbp
   216c4:	48 89 e5             	mov    rbp,rsp
   216c7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   216cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   216cf:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   216d6:	83 c8 20             	or     eax,0x20
   216d9:	89 c2                	mov    edx,eax
   216db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   216df:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   216e5:	90                   	nop
   216e6:	5d                   	pop    rbp
   216e7:	c3                   	ret    

00000000000216e8 <MousePosCallBack(void*, double, double)>:
   216e8:	55                   	push   rbp
   216e9:	48 89 e5             	mov    rbp,rsp
   216ec:	48 83 ec 30          	sub    rsp,0x30
   216f0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   216f4:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   216f9:	f2 0f 11 4d d8       	movsd  QWORD PTR [rbp-0x28],xmm1
   216fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   21702:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   21706:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2170a:	8b 80 34 01 00 00    	mov    eax,DWORD PTR [rax+0x134]
   21710:	66 0f ef c9          	pxor   xmm1,xmm1
   21714:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   21718:	f3 0f 10 05 44 b6 01 00 	movss  xmm0,DWORD PTR [rip+0x1b644]        # 3cd64 <NANO_SEC+0x1a9c>
   21720:	f3 0f 59 c1          	mulss  xmm0,xmm1
   21724:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   21728:	f2 0f 5c 45 d8       	subsd  xmm0,QWORD PTR [rbp-0x28]
   2172d:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   21731:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21735:	8b 80 34 01 00 00    	mov    eax,DWORD PTR [rax+0x134]
   2173b:	66 0f ef d2          	pxor   xmm2,xmm2
   2173f:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
   21743:	f3 0f 10 0d 19 b6 01 00 	movss  xmm1,DWORD PTR [rip+0x1b619]        # 3cd64 <NANO_SEC+0x1a9c>
   2174b:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2174f:	f3 0f 5e c1          	divss  xmm0,xmm1
   21753:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   21758:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2175c:	8b 80 30 01 00 00    	mov    eax,DWORD PTR [rax+0x130]
   21762:	66 0f ef c9          	pxor   xmm1,xmm1
   21766:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   2176a:	f3 0f 10 05 f2 b5 01 00 	movss  xmm0,DWORD PTR [rip+0x1b5f2]        # 3cd64 <NANO_SEC+0x1a9c>
   21772:	f3 0f 59 c1          	mulss  xmm0,xmm1
   21776:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   2177a:	f2 0f 5c 45 e0       	subsd  xmm0,QWORD PTR [rbp-0x20]
   2177f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   21783:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21787:	8b 80 30 01 00 00    	mov    eax,DWORD PTR [rax+0x130]
   2178d:	66 0f ef d2          	pxor   xmm2,xmm2
   21791:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
   21795:	f3 0f 10 0d c7 b5 01 00 	movss  xmm1,DWORD PTR [rip+0x1b5c7]        # 3cd64 <NANO_SEC+0x1a9c>
   2179d:	f3 0f 59 ca          	mulss  xmm1,xmm2
   217a1:	f3 0f 5e c1          	divss  xmm0,xmm1
   217a5:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   217aa:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   217af:	f3 0f 10 0d c9 b5 01 00 	movss  xmm1,DWORD PTR [rip+0x1b5c9]        # 3cd80 <NANO_SEC+0x1ab8>
   217b7:	0f 57 c1             	xorps  xmm0,xmm1
   217ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   217be:	48 8d 90 88 01 00 00 	lea    rdx,[rax+0x188]
   217c5:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   217c8:	0f 28 c8             	movaps xmm1,xmm0
   217cb:	66 0f 6e c0          	movd   xmm0,eax
   217cf:	48 89 d7             	mov    rdi,rdx
   217d2:	e8 19 f6 ff ff       	call   20df0 <RotateCamera(Camera&, float, float)>
   217d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   217db:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
   217df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   217e3:	8b 80 34 01 00 00    	mov    eax,DWORD PTR [rax+0x134]
   217e9:	89 c2                	mov    edx,eax
   217eb:	c1 ea 1f             	shr    edx,0x1f
   217ee:	01 d0                	add    eax,edx
   217f0:	d1 f8                	sar    eax,1
   217f2:	66 0f ef c0          	pxor   xmm0,xmm0
   217f6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   217fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   217fe:	8b 80 30 01 00 00    	mov    eax,DWORD PTR [rax+0x130]
   21804:	89 c2                	mov    edx,eax
   21806:	c1 ea 1f             	shr    edx,0x1f
   21809:	01 d0                	add    eax,edx
   2180b:	d1 f8                	sar    eax,1
   2180d:	66 0f ef db          	pxor   xmm3,xmm3
   21811:	f2 0f 2a d8          	cvtsi2sd xmm3,eax
   21815:	66 48 0f 7e da       	movq   rdx,xmm3
   2181a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2181e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   21821:	66 0f 28 c8          	movapd xmm1,xmm0
   21825:	66 48 0f 6e c2       	movq   xmm0,rdx
   2182a:	48 89 c7             	mov    rdi,rax
   2182d:	ff d1                	call   rcx
   2182f:	90                   	nop
   21830:	c9                   	leave  
   21831:	c3                   	ret    

0000000000021832 <MakeLinesFromAABB(AABB, Line*, glm::vec<3, float, (glm::qualifier)0>)>:
   21832:	55                   	push   rbp
   21833:	48 89 e5             	mov    rbp,rsp
   21836:	53                   	push   rbx
   21837:	48 83 ec 48          	sub    rsp,0x48
   2183b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2183f:	66 48 0f 7e c0       	movq   rax,xmm0
   21844:	0f 28 c1             	movaps xmm0,xmm1
   21847:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   2184b:	f3 0f 11 45 c0       	movss  DWORD PTR [rbp-0x40],xmm0
   21850:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   21859:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2185d:	31 c0                	xor    eax,eax
   2185f:	48 8d 45 1c          	lea    rax,[rbp+0x1c]
   21863:	48 8d 75 10          	lea    rsi,[rbp+0x10]
   21867:	48 89 c7             	mov    rdi,rax
   2186a:	e8 4d 36 00 00       	call   24ebc <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2186f:	66 48 0f 7e c0       	movq   rax,xmm0
   21874:	0f 28 c1             	movaps xmm0,xmm1
   21877:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2187b:	f3 0f 11 45 d8       	movss  DWORD PTR [rbp-0x28],xmm0
   21880:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21884:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
   21888:	48 89 10             	mov    QWORD PTR [rax],rdx
   2188b:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
   2188e:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   21891:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
   21894:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21898:	ba 00 00 00 00       	mov    edx,0x0
   2189d:	be 00 00 00 00       	mov    esi,0x0
   218a2:	66 0f 6e c1          	movd   xmm0,ecx
   218a6:	48 89 c7             	mov    rdi,rax
   218a9:	e8 5a 44 00 00       	call   25d08 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>
   218ae:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   218b2:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   218b6:	48 89 c6             	mov    rsi,rax
   218b9:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   218bd:	e8 ec 3f 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   218c2:	66 48 0f 7e c0       	movq   rax,xmm0
   218c7:	0f 28 c1             	movaps xmm0,xmm1
   218ca:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   218ce:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   218d3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   218d7:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   218db:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   218df:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   218e2:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   218e5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   218e9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   218ed:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   218f1:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   218f4:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   218f7:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
   218fa:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   218fe:	ba 00 00 00 00       	mov    edx,0x0
   21903:	be 00 00 00 00       	mov    esi,0x0
   21908:	66 0f 6e c1          	movd   xmm0,ecx
   2190c:	48 89 c7             	mov    rdi,rax
   2190f:	e8 f4 43 00 00       	call   25d08 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>
   21914:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21918:	48 8d 58 30          	lea    rbx,[rax+0x30]
   2191c:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21920:	48 89 c6             	mov    rsi,rax
   21923:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21927:	e8 82 3f 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2192c:	66 48 0f 7e c0       	movq   rax,xmm0
   21931:	0f 28 c1             	movaps xmm0,xmm1
   21934:	48 89 03             	mov    QWORD PTR [rbx],rax
   21937:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   2193c:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   21941:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21944:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21948:	0f 28 c8             	movaps xmm1,xmm0
   2194b:	be 00 00 00 00       	mov    esi,0x0
   21950:	66 0f 6e c2          	movd   xmm0,edx
   21954:	48 89 c7             	mov    rdi,rax
   21957:	e8 f4 43 00 00       	call   25d50 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>
   2195c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21960:	48 8d 58 30          	lea    rbx,[rax+0x30]
   21964:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21968:	48 89 c6             	mov    rsi,rax
   2196b:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2196f:	e8 3a 3f 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21974:	66 48 0f 7e c0       	movq   rax,xmm0
   21979:	0f 28 c1             	movaps xmm0,xmm1
   2197c:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21980:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21985:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21989:	48 83 c0 30          	add    rax,0x30
   2198d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21991:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21995:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21998:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2199b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2199f:	48 83 c0 30          	add    rax,0x30
   219a3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   219a7:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   219ab:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   219ae:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   219b1:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   219b6:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   219b9:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   219bd:	0f 28 c8             	movaps xmm1,xmm0
   219c0:	be 00 00 00 00       	mov    esi,0x0
   219c5:	66 0f 6e c2          	movd   xmm0,edx
   219c9:	48 89 c7             	mov    rdi,rax
   219cc:	e8 7f 43 00 00       	call   25d50 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>
   219d1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   219d5:	48 8d 58 60          	lea    rbx,[rax+0x60]
   219d9:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   219dd:	48 89 c6             	mov    rsi,rax
   219e0:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   219e4:	e8 c5 3e 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   219e9:	66 48 0f 7e c0       	movq   rax,xmm0
   219ee:	0f 28 c1             	movaps xmm0,xmm1
   219f1:	48 89 03             	mov    QWORD PTR [rbx],rax
   219f4:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   219f9:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   219fc:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21a00:	66 0f 6e c2          	movd   xmm0,edx
   21a04:	ba 00 00 00 00       	mov    edx,0x0
   21a09:	be 00 00 00 00       	mov    esi,0x0
   21a0e:	48 89 c7             	mov    rdi,rax
   21a11:	e8 80 43 00 00       	call   25d96 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>
   21a16:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21a1a:	48 8d 58 60          	lea    rbx,[rax+0x60]
   21a1e:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21a22:	48 89 c6             	mov    rsi,rax
   21a25:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21a29:	e8 80 3e 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21a2e:	66 48 0f 7e c0       	movq   rax,xmm0
   21a33:	0f 28 c1             	movaps xmm0,xmm1
   21a36:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21a3a:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21a3f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21a43:	48 83 c0 60          	add    rax,0x60
   21a47:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21a4b:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21a4f:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21a52:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21a55:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21a59:	48 83 c0 60          	add    rax,0x60
   21a5d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21a61:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21a65:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21a68:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21a6b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   21a6e:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21a72:	66 0f 6e c2          	movd   xmm0,edx
   21a76:	ba 00 00 00 00       	mov    edx,0x0
   21a7b:	be 00 00 00 00       	mov    esi,0x0
   21a80:	48 89 c7             	mov    rdi,rax
   21a83:	e8 0e 43 00 00       	call   25d96 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>
   21a88:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21a8c:	48 8d 98 90 00 00 00 	lea    rbx,[rax+0x90]
   21a93:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21a97:	48 89 c6             	mov    rsi,rax
   21a9a:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21a9e:	e8 0b 3e 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21aa3:	66 48 0f 7e c0       	movq   rax,xmm0
   21aa8:	0f 28 c1             	movaps xmm0,xmm1
   21aab:	48 89 03             	mov    QWORD PTR [rbx],rax
   21aae:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21ab3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21ab7:	48 05 90 00 00 00    	add    rax,0x90
   21abd:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
   21ac1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   21ac5:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
   21ac8:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   21acb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21acf:	48 05 90 00 00 00    	add    rax,0x90
   21ad5:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21ad9:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21add:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21ae0:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21ae3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21ae7:	48 05 90 00 00 00    	add    rax,0x90
   21aed:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21af1:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21af5:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21af8:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21afb:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   21afe:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21b02:	ba 00 00 00 00       	mov    edx,0x0
   21b07:	66 0f 6e c1          	movd   xmm0,ecx
   21b0b:	be 00 00 00 00       	mov    esi,0x0
   21b10:	48 89 c7             	mov    rdi,rax
   21b13:	e8 c6 42 00 00       	call   25dde <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>
   21b18:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21b1c:	48 8d 98 c0 00 00 00 	lea    rbx,[rax+0xc0]
   21b23:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21b27:	48 89 c6             	mov    rsi,rax
   21b2a:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21b2e:	e8 7b 3d 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21b33:	66 48 0f 7e c0       	movq   rax,xmm0
   21b38:	0f 28 c1             	movaps xmm0,xmm1
   21b3b:	48 89 03             	mov    QWORD PTR [rbx],rax
   21b3e:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21b43:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21b48:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21b4b:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21b4f:	be 00 00 00 00       	mov    esi,0x0
   21b54:	0f 28 c8             	movaps xmm1,xmm0
   21b57:	66 0f 6e c2          	movd   xmm0,edx
   21b5b:	48 89 c7             	mov    rdi,rax
   21b5e:	e8 c3 42 00 00       	call   25e26 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>
   21b63:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21b67:	48 8d 98 c0 00 00 00 	lea    rbx,[rax+0xc0]
   21b6e:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21b72:	48 89 c6             	mov    rsi,rax
   21b75:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21b79:	e8 30 3d 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21b7e:	66 48 0f 7e c0       	movq   rax,xmm0
   21b83:	0f 28 c1             	movaps xmm0,xmm1
   21b86:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21b8a:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21b8f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21b93:	48 05 c0 00 00 00    	add    rax,0xc0
   21b99:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21b9d:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21ba1:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21ba4:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21ba7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21bab:	48 05 c0 00 00 00    	add    rax,0xc0
   21bb1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21bb5:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21bb9:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21bbc:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21bbf:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21bc4:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21bc7:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21bcb:	be 00 00 00 00       	mov    esi,0x0
   21bd0:	0f 28 c8             	movaps xmm1,xmm0
   21bd3:	66 0f 6e c2          	movd   xmm0,edx
   21bd7:	48 89 c7             	mov    rdi,rax
   21bda:	e8 47 42 00 00       	call   25e26 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>
   21bdf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21be3:	48 8d 98 f0 00 00 00 	lea    rbx,[rax+0xf0]
   21bea:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21bee:	48 89 c6             	mov    rsi,rax
   21bf1:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21bf5:	e8 b4 3c 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21bfa:	66 48 0f 7e c0       	movq   rax,xmm0
   21bff:	0f 28 c1             	movaps xmm0,xmm1
   21c02:	48 89 03             	mov    QWORD PTR [rbx],rax
   21c05:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21c0a:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   21c0f:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21c14:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21c17:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21c1b:	0f 28 d1             	movaps xmm2,xmm1
   21c1e:	0f 28 c8             	movaps xmm1,xmm0
   21c21:	66 0f 6e c2          	movd   xmm0,edx
   21c25:	48 89 c7             	mov    rdi,rax
   21c28:	e8 41 33 00 00       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   21c2d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21c31:	48 8d 98 f0 00 00 00 	lea    rbx,[rax+0xf0]
   21c38:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21c3c:	48 89 c6             	mov    rsi,rax
   21c3f:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21c43:	e8 66 3c 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21c48:	66 48 0f 7e c0       	movq   rax,xmm0
   21c4d:	0f 28 c1             	movaps xmm0,xmm1
   21c50:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21c54:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21c59:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21c5d:	48 05 f0 00 00 00    	add    rax,0xf0
   21c63:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21c67:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21c6b:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21c6e:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21c71:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21c75:	48 05 f0 00 00 00    	add    rax,0xf0
   21c7b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21c7f:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21c83:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21c86:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21c89:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   21c8e:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21c93:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21c96:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21c9a:	0f 28 d1             	movaps xmm2,xmm1
   21c9d:	0f 28 c8             	movaps xmm1,xmm0
   21ca0:	66 0f 6e c2          	movd   xmm0,edx
   21ca4:	48 89 c7             	mov    rdi,rax
   21ca7:	e8 c2 32 00 00       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   21cac:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21cb0:	48 8d 98 20 01 00 00 	lea    rbx,[rax+0x120]
   21cb7:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21cbb:	48 89 c6             	mov    rsi,rax
   21cbe:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21cc2:	e8 e7 3b 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21cc7:	66 48 0f 7e c0       	movq   rax,xmm0
   21ccc:	0f 28 c1             	movaps xmm0,xmm1
   21ccf:	48 89 03             	mov    QWORD PTR [rbx],rax
   21cd2:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21cd7:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   21cdc:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   21cdf:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21ce3:	0f 28 c8             	movaps xmm1,xmm0
   21ce6:	66 0f 6e c2          	movd   xmm0,edx
   21cea:	be 00 00 00 00       	mov    esi,0x0
   21cef:	48 89 c7             	mov    rdi,rax
   21cf2:	e8 75 41 00 00       	call   25e6c <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>
   21cf7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21cfb:	48 8d 98 20 01 00 00 	lea    rbx,[rax+0x120]
   21d02:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21d06:	48 89 c6             	mov    rsi,rax
   21d09:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21d0d:	e8 9c 3b 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21d12:	66 48 0f 7e c0       	movq   rax,xmm0
   21d17:	0f 28 c1             	movaps xmm0,xmm1
   21d1a:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21d1e:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21d23:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21d27:	48 05 20 01 00 00    	add    rax,0x120
   21d2d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21d31:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21d35:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21d38:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21d3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21d3f:	48 05 20 01 00 00    	add    rax,0x120
   21d45:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21d49:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21d4d:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21d50:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21d53:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   21d58:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   21d5b:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21d5f:	0f 28 c8             	movaps xmm1,xmm0
   21d62:	66 0f 6e c2          	movd   xmm0,edx
   21d66:	be 00 00 00 00       	mov    esi,0x0
   21d6b:	48 89 c7             	mov    rdi,rax
   21d6e:	e8 f9 40 00 00       	call   25e6c <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>
   21d73:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21d77:	48 8d 98 50 01 00 00 	lea    rbx,[rax+0x150]
   21d7e:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21d82:	48 89 c6             	mov    rsi,rax
   21d85:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21d89:	e8 20 3b 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21d8e:	66 48 0f 7e c0       	movq   rax,xmm0
   21d93:	0f 28 c1             	movaps xmm0,xmm1
   21d96:	48 89 03             	mov    QWORD PTR [rbx],rax
   21d99:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21d9e:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   21da1:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21da5:	ba 00 00 00 00       	mov    edx,0x0
   21daa:	66 0f 6e c1          	movd   xmm0,ecx
   21dae:	be 00 00 00 00       	mov    esi,0x0
   21db3:	48 89 c7             	mov    rdi,rax
   21db6:	e8 23 40 00 00       	call   25dde <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>
   21dbb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21dbf:	48 8d 98 50 01 00 00 	lea    rbx,[rax+0x150]
   21dc6:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21dca:	48 89 c6             	mov    rsi,rax
   21dcd:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21dd1:	e8 d8 3a 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21dd6:	66 48 0f 7e c0       	movq   rax,xmm0
   21ddb:	0f 28 c1             	movaps xmm0,xmm1
   21dde:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21de2:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21de7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21deb:	48 05 50 01 00 00    	add    rax,0x150
   21df1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21df5:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21df9:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21dfc:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21dff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21e03:	48 05 50 01 00 00    	add    rax,0x150
   21e09:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21e0d:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21e11:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21e14:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21e17:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21e1b:	48 05 80 01 00 00    	add    rax,0x180
   21e21:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
   21e25:	48 89 10             	mov    QWORD PTR [rax],rdx
   21e28:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
   21e2b:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   21e2e:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   21e31:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21e35:	ba 00 00 00 00       	mov    edx,0x0
   21e3a:	66 0f 6e c1          	movd   xmm0,ecx
   21e3e:	be 00 00 00 00       	mov    esi,0x0
   21e43:	48 89 c7             	mov    rdi,rax
   21e46:	e8 93 3f 00 00       	call   25dde <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>
   21e4b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21e4f:	48 8d 98 80 01 00 00 	lea    rbx,[rax+0x180]
   21e56:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21e5a:	48 89 c6             	mov    rsi,rax
   21e5d:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21e61:	e8 48 3a 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21e66:	66 48 0f 7e c0       	movq   rax,xmm0
   21e6b:	0f 28 c1             	movaps xmm0,xmm1
   21e6e:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21e72:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21e77:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21e7b:	48 05 80 01 00 00    	add    rax,0x180
   21e81:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21e85:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21e89:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21e8c:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21e8f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21e93:	48 05 80 01 00 00    	add    rax,0x180
   21e99:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21e9d:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21ea1:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21ea4:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21ea7:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
   21eaa:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21eae:	ba 00 00 00 00       	mov    edx,0x0
   21eb3:	be 00 00 00 00       	mov    esi,0x0
   21eb8:	66 0f 6e c1          	movd   xmm0,ecx
   21ebc:	48 89 c7             	mov    rdi,rax
   21ebf:	e8 44 3e 00 00       	call   25d08 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>
   21ec4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21ec8:	48 8d 98 b0 01 00 00 	lea    rbx,[rax+0x1b0]
   21ecf:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21ed3:	48 89 c6             	mov    rsi,rax
   21ed6:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21eda:	e8 cf 39 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21edf:	66 48 0f 7e c0       	movq   rax,xmm0
   21ee4:	0f 28 c1             	movaps xmm0,xmm1
   21ee7:	48 89 03             	mov    QWORD PTR [rbx],rax
   21eea:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21eef:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21ef4:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21ef7:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21efb:	be 00 00 00 00       	mov    esi,0x0
   21f00:	0f 28 c8             	movaps xmm1,xmm0
   21f03:	66 0f 6e c2          	movd   xmm0,edx
   21f07:	48 89 c7             	mov    rdi,rax
   21f0a:	e8 17 3f 00 00       	call   25e26 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>
   21f0f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21f13:	48 8d 98 b0 01 00 00 	lea    rbx,[rax+0x1b0]
   21f1a:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21f1e:	48 89 c6             	mov    rsi,rax
   21f21:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21f25:	e8 84 39 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21f2a:	66 48 0f 7e c0       	movq   rax,xmm0
   21f2f:	0f 28 c1             	movaps xmm0,xmm1
   21f32:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21f36:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21f3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21f3f:	48 05 b0 01 00 00    	add    rax,0x1b0
   21f45:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21f49:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21f4d:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21f50:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   21f53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21f57:	48 05 b0 01 00 00    	add    rax,0x1b0
   21f5d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21f61:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   21f65:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21f68:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   21f6b:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   21f70:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21f73:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21f77:	0f 28 c8             	movaps xmm1,xmm0
   21f7a:	be 00 00 00 00       	mov    esi,0x0
   21f7f:	66 0f 6e c2          	movd   xmm0,edx
   21f83:	48 89 c7             	mov    rdi,rax
   21f86:	e8 c5 3d 00 00       	call   25d50 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>
   21f8b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21f8f:	48 8d 98 e0 01 00 00 	lea    rbx,[rax+0x1e0]
   21f96:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21f9a:	48 89 c6             	mov    rsi,rax
   21f9d:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21fa1:	e8 08 39 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21fa6:	66 48 0f 7e c0       	movq   rax,xmm0
   21fab:	0f 28 c1             	movaps xmm0,xmm1
   21fae:	48 89 03             	mov    QWORD PTR [rbx],rax
   21fb1:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   21fb6:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   21fbb:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21fc0:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   21fc3:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21fc7:	0f 28 d1             	movaps xmm2,xmm1
   21fca:	0f 28 c8             	movaps xmm1,xmm0
   21fcd:	66 0f 6e c2          	movd   xmm0,edx
   21fd1:	48 89 c7             	mov    rdi,rax
   21fd4:	e8 95 2f 00 00       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   21fd9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21fdd:	48 8d 98 e0 01 00 00 	lea    rbx,[rax+0x1e0]
   21fe4:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21fe8:	48 89 c6             	mov    rsi,rax
   21feb:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21fef:	e8 ba 38 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21ff4:	66 48 0f 7e c0       	movq   rax,xmm0
   21ff9:	0f 28 c1             	movaps xmm0,xmm1
   21ffc:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   22000:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   22005:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22009:	48 05 e0 01 00 00    	add    rax,0x1e0
   2200f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22013:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   22017:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2201a:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2201d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22021:	48 05 e0 01 00 00    	add    rax,0x1e0
   22027:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2202b:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   2202f:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22032:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22035:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   22038:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2203c:	66 0f 6e c2          	movd   xmm0,edx
   22040:	ba 00 00 00 00       	mov    edx,0x0
   22045:	be 00 00 00 00       	mov    esi,0x0
   2204a:	48 89 c7             	mov    rdi,rax
   2204d:	e8 44 3d 00 00       	call   25d96 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>
   22052:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22056:	48 8d 98 10 02 00 00 	lea    rbx,[rax+0x210]
   2205d:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22061:	48 89 c6             	mov    rsi,rax
   22064:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22068:	e8 41 38 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2206d:	66 48 0f 7e c0       	movq   rax,xmm0
   22072:	0f 28 c1             	movaps xmm0,xmm1
   22075:	48 89 03             	mov    QWORD PTR [rbx],rax
   22078:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   2207d:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   22082:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   22085:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22089:	0f 28 c8             	movaps xmm1,xmm0
   2208c:	66 0f 6e c2          	movd   xmm0,edx
   22090:	be 00 00 00 00       	mov    esi,0x0
   22095:	48 89 c7             	mov    rdi,rax
   22098:	e8 cf 3d 00 00       	call   25e6c <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>
   2209d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   220a1:	48 8d 98 10 02 00 00 	lea    rbx,[rax+0x210]
   220a8:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   220ac:	48 89 c6             	mov    rsi,rax
   220af:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   220b3:	e8 f6 37 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   220b8:	66 48 0f 7e c0       	movq   rax,xmm0
   220bd:	0f 28 c1             	movaps xmm0,xmm1
   220c0:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   220c4:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   220c9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   220cd:	48 05 10 02 00 00    	add    rax,0x210
   220d3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   220d7:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   220db:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   220de:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   220e1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   220e5:	48 05 10 02 00 00    	add    rax,0x210
   220eb:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   220ef:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   220f3:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   220f6:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   220f9:	90                   	nop
   220fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   220fe:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   22107:	74 05                	je     2210e <MakeLinesFromAABB(AABB, Line*, glm::vec<3, float, (glm::qualifier)0>)+0x8dc>
   22109:	e8 a2 23 fe ff       	call   44b0 <__stack_chk_fail@plt>
   2210e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   22112:	c9                   	leave  
   22113:	c3                   	ret    

0000000000022114 <LoadSponza(RendererInterface*, Renderer*, Scene&)>:
   22114:	55                   	push   rbp
   22115:	48 89 e5             	mov    rbp,rsp
   22118:	41 57                	push   r15
   2211a:	41 56                	push   r14
   2211c:	41 55                	push   r13
   2211e:	41 54                	push   r12
   22120:	53                   	push   rbx
   22121:	48 81 ec a8 01 00 00 	sub    rsp,0x1a8
   22128:	48 89 bd 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdi
   2212f:	48 89 b5 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rsi
   22136:	48 89 95 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdx
   2213d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   22146:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2214a:	31 c0                	xor    eax,eax
   2214c:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22153:	48 89 c7             	mov    rdi,rax
   22156:	e8 81 b0 00 00       	call   2d1dc <objl::Loader::Loader()>
   2215b:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22162:	48 89 c7             	mov    rdi,rax
   22165:	e8 d6 25 fe ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2216a:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   22171:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22175:	48 8d 35 26 a7 01 00 	lea    rsi,[rip+0x1a726]        # 3c8a2 <NANO_SEC+0x15da>
   2217c:	48 89 c7             	mov    rdi,rax
   2217f:	e8 2e 3d 00 00       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   22184:	48 8d 55 a0          	lea    rdx,[rbp-0x60]
   22188:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2218f:	48 89 d6             	mov    rsi,rdx
   22192:	48 89 c7             	mov    rdi,rax
   22195:	e8 e6 b0 00 00       	call   2d280 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2219a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2219e:	48 89 c7             	mov    rdi,rax
   221a1:	e8 ba 20 fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   221a6:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   221ad:	48 89 c7             	mov    rdi,rax
   221b0:	e8 ab 22 fe ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   221b5:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   221bc:	48 89 c7             	mov    rdi,rax
   221bf:	e8 26 2e 00 00       	call   24fea <std::vector<Tex, std::allocator<Tex> >::vector()>
   221c4:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   221cb:	48 89 c7             	mov    rdi,rax
   221ce:	e8 6b 2e 00 00       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   221d3:	c7 85 78 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x188],0x0
   221dd:	c7 85 74 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x18c],0x0
   221e7:	8b 9d 74 fe ff ff    	mov    ebx,DWORD PTR [rbp-0x18c]
   221ed:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   221f4:	48 89 c7             	mov    rdi,rax
   221f7:	e8 06 3f 00 00       	call   26102 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   221fc:	48 39 c3             	cmp    rbx,rax
   221ff:	0f 92 c0             	setb   al
   22202:	84 c0                	test   al,al
   22204:	0f 84 94 0c 00 00    	je     22e9e <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd8a>
   2220a:	48 89 e0             	mov    rax,rsp
   2220d:	48 89 c3             	mov    rbx,rax
   22210:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22216:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2221d:	48 89 d6             	mov    rsi,rdx
   22220:	48 89 c7             	mov    rdi,rax
   22223:	e8 0e 3f 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22228:	48 83 c0 20          	add    rax,0x20
   2222c:	48 89 c7             	mov    rdi,rax
   2222f:	e8 26 3f 00 00       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   22234:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
   2223b:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22241:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22248:	48 89 d6             	mov    rsi,rdx
   2224b:	48 89 c7             	mov    rdi,rax
   2224e:	e8 e3 3e 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22253:	48 83 c0 38          	add    rax,0x38
   22257:	48 89 c7             	mov    rdi,rax
   2225a:	e8 1f 3f 00 00       	call   2617e <std::vector<unsigned int, std::allocator<unsigned int> >::data()>
   2225f:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
   22266:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2226c:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22273:	48 89 d6             	mov    rsi,rdx
   22276:	48 89 c7             	mov    rdi,rax
   22279:	e8 b8 3e 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2227e:	48 83 c0 38          	add    rax,0x38
   22282:	48 89 c7             	mov    rdi,rax
   22285:	e8 18 3f 00 00       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2228a:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
   22291:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
   22298:	48 89 d0             	mov    rax,rdx
   2229b:	48 c1 e0 02          	shl    rax,0x2
   2229f:	48 01 c2             	add    rdx,rax
   222a2:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   222a9:	48 01 d0             	add    rax,rdx
   222ac:	c1 e0 02             	shl    eax,0x2
   222af:	01 85 78 fe ff ff    	add    DWORD PTR [rbp-0x188],eax
   222b5:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
   222bc:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   222c0:	48 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rcx
   222c7:	48 89 c8             	mov    rax,rcx
   222ca:	48 83 c0 01          	add    rax,0x1
   222ce:	49 89 c4             	mov    r12,rax
   222d1:	41 bd 00 00 00 00    	mov    r13d,0x0
   222d7:	49 69 d5 a0 00 00 00 	imul   rdx,r13,0xa0
   222de:	49 6b c4 00          	imul   rax,r12,0x0
   222e2:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   222e6:	b8 a0 00 00 00       	mov    eax,0xa0
   222eb:	49 f7 e4             	mul    r12
   222ee:	48 01 d6             	add    rsi,rdx
   222f1:	48 89 f2             	mov    rdx,rsi
   222f4:	48 89 c8             	mov    rax,rcx
   222f7:	48 8d 50 01          	lea    rdx,[rax+0x1]
   222fb:	48 89 d0             	mov    rax,rdx
   222fe:	48 c1 e0 02          	shl    rax,0x2
   22302:	48 01 d0             	add    rax,rdx
   22305:	48 c1 e0 02          	shl    rax,0x2
   22309:	48 89 c8             	mov    rax,rcx
   2230c:	48 83 c0 01          	add    rax,0x1
   22310:	49 89 c6             	mov    r14,rax
   22313:	41 bf 00 00 00 00    	mov    r15d,0x0
   22319:	49 69 d7 a0 00 00 00 	imul   rdx,r15,0xa0
   22320:	49 6b c6 00          	imul   rax,r14,0x0
   22324:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   22328:	b8 a0 00 00 00       	mov    eax,0xa0
   2232d:	49 f7 e6             	mul    r14
   22330:	48 01 d6             	add    rsi,rdx
   22333:	48 89 f2             	mov    rdx,rsi
   22336:	48 89 c8             	mov    rax,rcx
   22339:	48 8d 50 01          	lea    rdx,[rax+0x1]
   2233d:	48 89 d0             	mov    rax,rdx
   22340:	48 c1 e0 02          	shl    rax,0x2
   22344:	48 01 d0             	add    rax,rdx
   22347:	48 c1 e0 02          	shl    rax,0x2
   2234b:	48 89 c2             	mov    rdx,rax
   2234e:	b8 10 00 00 00       	mov    eax,0x10
   22353:	48 83 e8 01          	sub    rax,0x1
   22357:	48 01 d0             	add    rax,rdx
   2235a:	be 10 00 00 00       	mov    esi,0x10
   2235f:	ba 00 00 00 00       	mov    edx,0x0
   22364:	48 f7 f6             	div    rsi
   22367:	48 6b c0 10          	imul   rax,rax,0x10
   2236b:	48 29 c4             	sub    rsp,rax
   2236e:	48 89 e0             	mov    rax,rsp
   22371:	48 83 c0 03          	add    rax,0x3
   22375:	48 c1 e8 02          	shr    rax,0x2
   22379:	48 c1 e0 02          	shl    rax,0x2
   2237d:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
   22384:	48 85 c9             	test   rcx,rcx
   22387:	78 06                	js     2238f <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x27b>
   22389:	48 83 e9 01          	sub    rcx,0x1
   2238d:	eb f5                	jmp    22384 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x270>
   2238f:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22395:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2239c:	48 89 d6             	mov    rsi,rdx
   2239f:	48 89 c7             	mov    rdi,rax
   223a2:	e8 8f 3d 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   223a7:	48 83 c0 20          	add    rax,0x20
   223ab:	be 00 00 00 00       	mov    esi,0x0
   223b0:	48 89 c7             	mov    rdi,rax
   223b3:	e8 0e 3e 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   223b8:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   223bc:	66 0f ef c9          	pxor   xmm1,xmm1
   223c0:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   223c4:	f2 0f 10 05 e4 a9 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a9e4]        # 3cdb0 <NANO_SEC+0x1ae8>
   223cc:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   223d0:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   223d4:	f3 0f 11 85 a8 fe ff ff 	movss  DWORD PTR [rbp-0x158],xmm0
   223dc:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   223e2:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   223e9:	48 89 d6             	mov    rsi,rdx
   223ec:	48 89 c7             	mov    rdi,rax
   223ef:	e8 42 3d 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   223f4:	48 83 c0 20          	add    rax,0x20
   223f8:	be 00 00 00 00       	mov    esi,0x0
   223fd:	48 89 c7             	mov    rdi,rax
   22400:	e8 c1 3d 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22405:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2240a:	66 0f ef c9          	pxor   xmm1,xmm1
   2240e:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22412:	f2 0f 10 05 96 a9 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a996]        # 3cdb0 <NANO_SEC+0x1ae8>
   2241a:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2241e:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22422:	f3 0f 11 85 ac fe ff ff 	movss  DWORD PTR [rbp-0x154],xmm0
   2242a:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22430:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22437:	48 89 d6             	mov    rsi,rdx
   2243a:	48 89 c7             	mov    rdi,rax
   2243d:	e8 f4 3c 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22442:	48 83 c0 20          	add    rax,0x20
   22446:	be 00 00 00 00       	mov    esi,0x0
   2244b:	48 89 c7             	mov    rdi,rax
   2244e:	e8 73 3d 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22453:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   22458:	66 0f ef c9          	pxor   xmm1,xmm1
   2245c:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22460:	f2 0f 10 05 48 a9 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a948]        # 3cdb0 <NANO_SEC+0x1ae8>
   22468:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2246c:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22470:	f3 0f 11 85 b0 fe ff ff 	movss  DWORD PTR [rbp-0x150],xmm0
   22478:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2247e:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22485:	48 89 d6             	mov    rsi,rdx
   22488:	48 89 c7             	mov    rdi,rax
   2248b:	e8 a6 3c 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22490:	48 83 c0 20          	add    rax,0x20
   22494:	be 00 00 00 00       	mov    esi,0x0
   22499:	48 89 c7             	mov    rdi,rax
   2249c:	e8 25 3d 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   224a1:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   224a5:	66 0f ef c9          	pxor   xmm1,xmm1
   224a9:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   224ad:	f2 0f 10 05 fb a8 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a8fb]        # 3cdb0 <NANO_SEC+0x1ae8>
   224b5:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   224b9:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   224bd:	f3 0f 11 85 b4 fe ff ff 	movss  DWORD PTR [rbp-0x14c],xmm0
   224c5:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   224cb:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   224d2:	48 89 d6             	mov    rsi,rdx
   224d5:	48 89 c7             	mov    rdi,rax
   224d8:	e8 59 3c 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   224dd:	48 83 c0 20          	add    rax,0x20
   224e1:	be 00 00 00 00       	mov    esi,0x0
   224e6:	48 89 c7             	mov    rdi,rax
   224e9:	e8 d8 3c 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   224ee:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   224f3:	66 0f ef c9          	pxor   xmm1,xmm1
   224f7:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   224fb:	f2 0f 10 05 ad a8 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a8ad]        # 3cdb0 <NANO_SEC+0x1ae8>
   22503:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22507:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   2250b:	f3 0f 11 85 b8 fe ff ff 	movss  DWORD PTR [rbp-0x148],xmm0
   22513:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22519:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22520:	48 89 d6             	mov    rsi,rdx
   22523:	48 89 c7             	mov    rdi,rax
   22526:	e8 0b 3c 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2252b:	48 83 c0 20          	add    rax,0x20
   2252f:	be 00 00 00 00       	mov    esi,0x0
   22534:	48 89 c7             	mov    rdi,rax
   22537:	e8 8a 3c 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2253c:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   22541:	66 0f ef c9          	pxor   xmm1,xmm1
   22545:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22549:	f2 0f 10 05 5f a8 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a85f]        # 3cdb0 <NANO_SEC+0x1ae8>
   22551:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22555:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22559:	f3 0f 11 85 bc fe ff ff 	movss  DWORD PTR [rbp-0x144],xmm0
   22561:	c7 85 70 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x190],0x0
   2256b:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22571:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   22578:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2257e:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22585:	48 89 d6             	mov    rsi,rdx
   22588:	48 89 c7             	mov    rdi,rax
   2258b:	e8 a6 3b 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22590:	48 83 c0 20          	add    rax,0x20
   22594:	48 89 c7             	mov    rdi,rax
   22597:	e8 be 3b 00 00       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2259c:	48 39 85 40 fe ff ff 	cmp    QWORD PTR [rbp-0x1c0],rax
   225a3:	0f 92 c0             	setb   al
   225a6:	84 c0                	test   al,al
   225a8:	0f 84 f1 03 00 00    	je     2299f <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x88b>
   225ae:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   225b4:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   225bb:	48 89 d6             	mov    rsi,rdx
   225be:	48 89 c7             	mov    rdi,rax
   225c1:	e8 70 3b 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   225c6:	48 8d 50 20          	lea    rdx,[rax+0x20]
   225ca:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   225d0:	48 89 c6             	mov    rsi,rax
   225d3:	48 89 d7             	mov    rdi,rdx
   225d6:	e8 eb 3b 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   225db:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   225df:	66 0f ef c9          	pxor   xmm1,xmm1
   225e3:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   225e7:	f2 0f 10 05 c1 a7 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a7c1]        # 3cdb0 <NANO_SEC+0x1ae8>
   225ef:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   225f3:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   225f7:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   225fe:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22604:	48 89 d0             	mov    rax,rdx
   22607:	48 c1 e0 02          	shl    rax,0x2
   2260b:	48 01 d0             	add    rax,rdx
   2260e:	48 c1 e0 02          	shl    rax,0x2
   22612:	48 01 c8             	add    rax,rcx
   22615:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22619:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2261f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22626:	48 89 d6             	mov    rsi,rdx
   22629:	48 89 c7             	mov    rdi,rax
   2262c:	e8 05 3b 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22631:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22635:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   2263b:	48 89 c6             	mov    rsi,rax
   2263e:	48 89 d7             	mov    rdi,rdx
   22641:	e8 80 3b 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22646:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2264b:	66 0f ef c9          	pxor   xmm1,xmm1
   2264f:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22653:	f2 0f 10 05 55 a7 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a755]        # 3cdb0 <NANO_SEC+0x1ae8>
   2265b:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2265f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22663:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   2266a:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22670:	48 89 d0             	mov    rax,rdx
   22673:	48 c1 e0 02          	shl    rax,0x2
   22677:	48 01 d0             	add    rax,rdx
   2267a:	48 c1 e0 02          	shl    rax,0x2
   2267e:	48 01 c8             	add    rax,rcx
   22681:	48 83 c0 04          	add    rax,0x4
   22685:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22689:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2268f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22696:	48 89 d6             	mov    rsi,rdx
   22699:	48 89 c7             	mov    rdi,rax
   2269c:	e8 95 3a 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   226a1:	48 8d 50 20          	lea    rdx,[rax+0x20]
   226a5:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   226ab:	48 89 c6             	mov    rsi,rax
   226ae:	48 89 d7             	mov    rdi,rdx
   226b1:	e8 10 3b 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   226b6:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   226bb:	66 0f ef c9          	pxor   xmm1,xmm1
   226bf:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   226c3:	f2 0f 10 05 e5 a6 01 00 	movsd  xmm0,QWORD PTR [rip+0x1a6e5]        # 3cdb0 <NANO_SEC+0x1ae8>
   226cb:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   226cf:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   226d3:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   226da:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   226e0:	48 89 d0             	mov    rax,rdx
   226e3:	48 c1 e0 02          	shl    rax,0x2
   226e7:	48 01 d0             	add    rax,rdx
   226ea:	48 c1 e0 02          	shl    rax,0x2
   226ee:	48 01 c8             	add    rax,rcx
   226f1:	48 83 c0 08          	add    rax,0x8
   226f5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   226f9:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   226ff:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22706:	48 89 d6             	mov    rsi,rdx
   22709:	48 89 c7             	mov    rdi,rax
   2270c:	e8 25 3a 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22711:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22715:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   2271b:	48 89 c6             	mov    rsi,rax
   2271e:	48 89 d7             	mov    rdi,rdx
   22721:	e8 a0 3a 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22726:	f3 0f 10 40 18       	movss  xmm0,DWORD PTR [rax+0x18]
   2272b:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22732:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22738:	48 89 d0             	mov    rax,rdx
   2273b:	48 c1 e0 02          	shl    rax,0x2
   2273f:	48 01 d0             	add    rax,rdx
   22742:	48 c1 e0 02          	shl    rax,0x2
   22746:	48 01 c8             	add    rax,rcx
   22749:	48 83 c0 0c          	add    rax,0xc
   2274d:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22751:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22757:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2275e:	48 89 d6             	mov    rsi,rdx
   22761:	48 89 c7             	mov    rdi,rax
   22764:	e8 cd 39 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22769:	48 8d 50 20          	lea    rdx,[rax+0x20]
   2276d:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22773:	48 89 c6             	mov    rsi,rax
   22776:	48 89 d7             	mov    rdi,rdx
   22779:	e8 48 3a 00 00       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2277e:	f3 0f 10 40 1c       	movss  xmm0,DWORD PTR [rax+0x1c]
   22783:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   2278a:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22790:	48 89 d0             	mov    rax,rdx
   22793:	48 c1 e0 02          	shl    rax,0x2
   22797:	48 01 d0             	add    rax,rdx
   2279a:	48 c1 e0 02          	shl    rax,0x2
   2279e:	48 01 c8             	add    rax,rcx
   227a1:	48 83 c0 10          	add    rax,0x10
   227a5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   227a9:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   227b0:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   227b6:	48 89 d0             	mov    rax,rdx
   227b9:	48 c1 e0 02          	shl    rax,0x2
   227bd:	48 01 d0             	add    rax,rdx
   227c0:	48 c1 e0 02          	shl    rax,0x2
   227c4:	48 01 c8             	add    rax,rcx
   227c7:	48 83 c0 08          	add    rax,0x8
   227cb:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   227cf:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
   227d5:	0f 28 c8             	movaps xmm1,xmm0
   227d8:	66 0f 6e c0          	movd   xmm0,eax
   227dc:	e8 05 3a 00 00       	call   261e6 <float min<float>(float, float)>
   227e1:	f3 0f 11 85 40 fe ff ff 	movss  DWORD PTR [rbp-0x1c0],xmm0
   227e9:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   227f0:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   227f6:	48 89 d0             	mov    rax,rdx
   227f9:	48 c1 e0 02          	shl    rax,0x2
   227fd:	48 01 d0             	add    rax,rdx
   22800:	48 c1 e0 02          	shl    rax,0x2
   22804:	48 01 c8             	add    rax,rcx
   22807:	48 83 c0 04          	add    rax,0x4
   2280b:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2280f:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
   22815:	0f 28 c8             	movaps xmm1,xmm0
   22818:	66 0f 6e c0          	movd   xmm0,eax
   2281c:	e8 c5 39 00 00       	call   261e6 <float min<float>(float, float)>
   22821:	f3 0f 11 85 3c fe ff ff 	movss  DWORD PTR [rbp-0x1c4],xmm0
   22829:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22830:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22836:	48 89 d0             	mov    rax,rdx
   22839:	48 c1 e0 02          	shl    rax,0x2
   2283d:	48 01 d0             	add    rax,rdx
   22840:	48 c1 e0 02          	shl    rax,0x2
   22844:	48 01 c8             	add    rax,rcx
   22847:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2284b:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
   22851:	0f 28 c8             	movaps xmm1,xmm0
   22854:	66 0f 6e c0          	movd   xmm0,eax
   22858:	e8 89 39 00 00       	call   261e6 <float min<float>(float, float)>
   2285d:	66 0f 7e c0          	movd   eax,xmm0
   22861:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   22868:	f3 0f 10 95 40 fe ff ff 	movss  xmm2,DWORD PTR [rbp-0x1c0]
   22870:	f3 0f 10 8d 3c fe ff ff 	movss  xmm1,DWORD PTR [rbp-0x1c4]
   22878:	66 0f 6e c0          	movd   xmm0,eax
   2287c:	48 89 d7             	mov    rdi,rdx
   2287f:	e8 ea 26 00 00       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   22884:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   2288b:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
   22892:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   22898:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
   2289e:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   228a5:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   228ab:	48 89 d0             	mov    rax,rdx
   228ae:	48 c1 e0 02          	shl    rax,0x2
   228b2:	48 01 d0             	add    rax,rdx
   228b5:	48 c1 e0 02          	shl    rax,0x2
   228b9:	48 01 c8             	add    rax,rcx
   228bc:	48 83 c0 08          	add    rax,0x8
   228c0:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   228c4:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   228ca:	0f 28 c8             	movaps xmm1,xmm0
   228cd:	66 0f 6e c0          	movd   xmm0,eax
   228d1:	e8 37 39 00 00       	call   2620d <float max<float>(float, float)>
   228d6:	f3 0f 11 85 40 fe ff ff 	movss  DWORD PTR [rbp-0x1c0],xmm0
   228de:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   228e5:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   228eb:	48 89 d0             	mov    rax,rdx
   228ee:	48 c1 e0 02          	shl    rax,0x2
   228f2:	48 01 d0             	add    rax,rdx
   228f5:	48 c1 e0 02          	shl    rax,0x2
   228f9:	48 01 c8             	add    rax,rcx
   228fc:	48 83 c0 04          	add    rax,0x4
   22900:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22904:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   2290a:	0f 28 c8             	movaps xmm1,xmm0
   2290d:	66 0f 6e c0          	movd   xmm0,eax
   22911:	e8 f7 38 00 00       	call   2620d <float max<float>(float, float)>
   22916:	f3 0f 11 85 3c fe ff ff 	movss  DWORD PTR [rbp-0x1c4],xmm0
   2291e:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22925:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   2292b:	48 89 d0             	mov    rax,rdx
   2292e:	48 c1 e0 02          	shl    rax,0x2
   22932:	48 01 d0             	add    rax,rdx
   22935:	48 c1 e0 02          	shl    rax,0x2
   22939:	48 01 c8             	add    rax,rcx
   2293c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22940:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
   22946:	0f 28 c8             	movaps xmm1,xmm0
   22949:	66 0f 6e c0          	movd   xmm0,eax
   2294d:	e8 bb 38 00 00       	call   2620d <float max<float>(float, float)>
   22952:	66 0f 7e c0          	movd   eax,xmm0
   22956:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   2295d:	f3 0f 10 95 40 fe ff ff 	movss  xmm2,DWORD PTR [rbp-0x1c0]
   22965:	f3 0f 10 8d 3c fe ff ff 	movss  xmm1,DWORD PTR [rbp-0x1c4]
   2296d:	66 0f 6e c0          	movd   xmm0,eax
   22971:	48 89 d7             	mov    rdi,rdx
   22974:	e8 f5 25 00 00       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   22979:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   22980:	48 89 85 b4 fe ff ff 	mov    QWORD PTR [rbp-0x14c],rax
   22987:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2298d:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
   22993:	83 85 70 fe ff ff 01 	add    DWORD PTR [rbp-0x190],0x1
   2299a:	e9 cc fb ff ff       	jmp    2256b <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x457>
   2299f:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   229a6:	48 8d 50 48          	lea    rdx,[rax+0x48]
   229aa:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   229b1:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
   229b8:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
   229be:	89 85 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],eax
   229c4:	48 8b 85 b4 fe ff ff 	mov    rax,QWORD PTR [rbp-0x14c]
   229cb:	48 89 85 0c ff ff ff 	mov    QWORD PTR [rbp-0xf4],rax
   229d2:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   229d8:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   229de:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   229e5:	48 89 c6             	mov    rsi,rax
   229e8:	48 89 d7             	mov    rdi,rdx
   229eb:	e8 44 38 00 00       	call   26234 <std::vector<AABB, std::allocator<AABB> >::push_back(AABB&&)>
   229f0:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   229f7:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   229fe:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22a05:	4c 8b 90 00 01 00 00 	mov    r10,QWORD PTR [rax+0x100]
   22a0c:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   22a13:	8d 0c 85 00 00 00 00 	lea    ecx,[rax*4+0x0]
   22a1a:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
   22a21:	89 c2                	mov    edx,eax
   22a23:	89 d0                	mov    eax,edx
   22a25:	c1 e0 02             	shl    eax,0x2
   22a28:	01 d0                	add    eax,edx
   22a2a:	c1 e0 02             	shl    eax,0x2
   22a2d:	89 c7                	mov    edi,eax
   22a2f:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
   22a36:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
   22a3d:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
   22a44:	41 b9 00 00 00 00    	mov    r9d,0x0
   22a4a:	41 89 c8             	mov    r8d,ecx
   22a4d:	48 89 d1             	mov    rcx,rdx
   22a50:	89 fa                	mov    edx,edi
   22a52:	48 89 c7             	mov    rdi,rax
   22a55:	41 ff d2             	call   r10
   22a58:	89 85 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],eax
   22a5e:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22a65:	48 89 c6             	mov    rsi,rax
   22a68:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
   22a6f:	e8 f2 37 00 00       	call   26266 <std::vector<Mesh, std::allocator<Mesh> >::push_back(Mesh&&)>
   22a74:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   22a7b:	48 8d 50 30          	lea    rdx,[rax+0x30]
   22a7f:	66 0f ef c0          	pxor   xmm0,xmm0
   22a83:	f3 0f 11 85 00 ff ff ff 	movss  DWORD PTR [rbp-0x100],xmm0
   22a8b:	66 0f ef c0          	pxor   xmm0,xmm0
   22a8f:	f3 0f 11 85 04 ff ff ff 	movss  DWORD PTR [rbp-0xfc],xmm0
   22a97:	66 0f ef c0          	pxor   xmm0,xmm0
   22a9b:	f3 0f 11 85 08 ff ff ff 	movss  DWORD PTR [rbp-0xf8],xmm0
   22aa3:	66 0f ef c0          	pxor   xmm0,xmm0
   22aa7:	f3 0f 11 85 0c ff ff ff 	movss  DWORD PTR [rbp-0xf4],xmm0
   22aaf:	66 0f ef c0          	pxor   xmm0,xmm0
   22ab3:	f3 0f 11 85 10 ff ff ff 	movss  DWORD PTR [rbp-0xf0],xmm0
   22abb:	66 0f ef c0          	pxor   xmm0,xmm0
   22abf:	f3 0f 11 85 14 ff ff ff 	movss  DWORD PTR [rbp-0xec],xmm0
   22ac7:	f3 0f 10 05 8d a2 01 00 	movss  xmm0,DWORD PTR [rip+0x1a28d]        # 3cd5c <NANO_SEC+0x1a94>
   22acf:	f3 0f 11 85 18 ff ff ff 	movss  DWORD PTR [rbp-0xe8],xmm0
   22ad7:	f3 0f 10 05 7d a2 01 00 	movss  xmm0,DWORD PTR [rip+0x1a27d]        # 3cd5c <NANO_SEC+0x1a94>
   22adf:	f3 0f 11 85 1c ff ff ff 	movss  DWORD PTR [rbp-0xe4],xmm0
   22ae7:	f3 0f 10 05 6d a2 01 00 	movss  xmm0,DWORD PTR [rip+0x1a26d]        # 3cd5c <NANO_SEC+0x1a94>
   22aef:	f3 0f 11 85 20 ff ff ff 	movss  DWORD PTR [rbp-0xe0],xmm0
   22af7:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22afe:	48 89 c6             	mov    rsi,rax
   22b01:	48 89 d7             	mov    rdi,rdx
   22b04:	e8 8f 37 00 00       	call   26298 <std::vector<Transform, std::allocator<Transform> >::push_back(Transform&&)>
   22b09:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22b0f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22b16:	48 89 d6             	mov    rsi,rdx
   22b19:	48 89 c7             	mov    rdi,rax
   22b1c:	e8 15 36 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22b21:	48 05 c8 00 00 00    	add    rax,0xc8
   22b27:	48 8d 35 51 86 01 00 	lea    rsi,[rip+0x18651]        # 3b17f <stbi__depth_scale_table+0x587>
   22b2e:	48 89 c7             	mov    rdi,rax
   22b31:	e8 93 37 00 00       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   22b36:	84 c0                	test   al,al
   22b38:	74 2c                	je     22b66 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xa52>
   22b3a:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   22b41:	48 8d 50 18          	lea    rdx,[rax+0x18]
   22b45:	c7 85 00 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x100],0x0
   22b4f:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22b56:	48 89 c6             	mov    rsi,rax
   22b59:	48 89 d7             	mov    rdi,rdx
   22b5c:	e8 93 37 00 00       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   22b61:	e9 29 03 00 00       	jmp    22e8f <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd7b>
   22b66:	c6 85 63 fe ff ff 00 	mov    BYTE PTR [rbp-0x19d],0x0
   22b6d:	c7 85 7c fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x184],0x0
   22b77:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
   22b7d:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   22b84:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   22b8b:	48 89 c7             	mov    rdi,rax
   22b8e:	e8 93 37 00 00       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   22b93:	48 39 85 40 fe ff ff 	cmp    QWORD PTR [rbp-0x1c0],rax
   22b9a:	0f 92 c0             	setb   al
   22b9d:	84 c0                	test   al,al
   22b9f:	0f 84 a2 00 00 00    	je     22c47 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xb33>
   22ba5:	8b 95 7c fe ff ff    	mov    edx,DWORD PTR [rbp-0x184]
   22bab:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   22bb2:	48 89 d6             	mov    rsi,rdx
   22bb5:	48 89 c7             	mov    rdi,rax
   22bb8:	e8 8d 37 00 00       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   22bbd:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   22bc4:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22bca:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22bd1:	48 89 d6             	mov    rsi,rdx
   22bd4:	48 89 c7             	mov    rdi,rax
   22bd7:	e8 5a 35 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22bdc:	48 05 c8 00 00 00    	add    rax,0xc8
   22be2:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
   22be9:	48 89 c7             	mov    rdi,rax
   22bec:	e8 79 37 00 00       	call   2636a <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   22bf1:	84 c0                	test   al,al
   22bf3:	74 46                	je     22c3b <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xb27>
   22bf5:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   22bfc:	48 83 c0 18          	add    rax,0x18
   22c00:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   22c07:	8b 95 7c fe ff ff    	mov    edx,DWORD PTR [rbp-0x184]
   22c0d:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   22c14:	48 89 d6             	mov    rsi,rdx
   22c17:	48 89 c7             	mov    rdi,rax
   22c1a:	e8 cf 37 00 00       	call   263ee <std::vector<Tex, std::allocator<Tex> >::operator[](unsigned long)>
   22c1f:	48 83 c0 10          	add    rax,0x10
   22c23:	48 89 c6             	mov    rsi,rax
   22c26:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
   22c2d:	e8 e6 37 00 00       	call   26418 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   22c32:	c6 85 63 fe ff ff 01 	mov    BYTE PTR [rbp-0x19d],0x1
   22c39:	eb 0c                	jmp    22c47 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xb33>
   22c3b:	83 85 7c fe ff ff 01 	add    DWORD PTR [rbp-0x184],0x1
   22c42:	e9 30 ff ff ff       	jmp    22b77 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xa63>
   22c47:	0f b6 85 63 fe ff ff 	movzx  eax,BYTE PTR [rbp-0x19d]
   22c4e:	83 f0 01             	xor    eax,0x1
   22c51:	84 c0                	test   al,al
   22c53:	0f 84 31 02 00 00    	je     22e8a <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd76>
   22c59:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22c5f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22c66:	48 89 d6             	mov    rsi,rdx
   22c69:	48 89 c7             	mov    rdi,rax
   22c6c:	e8 c5 34 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22c71:	48 8d 90 c8 00 00 00 	lea    rdx,[rax+0xc8]
   22c78:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   22c7f:	48 89 d6             	mov    rsi,rdx
   22c82:	48 89 c7             	mov    rdi,rax
   22c85:	e8 0a 38 00 00       	call   26494 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   22c8a:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22c90:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22c97:	48 89 d6             	mov    rsi,rdx
   22c9a:	48 89 c7             	mov    rdi,rax
   22c9d:	e8 94 34 00 00       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22ca2:	48 8d 90 c8 00 00 00 	lea    rdx,[rax+0xc8]
   22ca9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22cad:	48 8d 35 07 9c 01 00 	lea    rsi,[rip+0x19c07]        # 3c8bb <NANO_SEC+0x15f3>
   22cb4:	48 89 c7             	mov    rdi,rax
   22cb7:	e8 53 38 00 00       	call   2650f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   22cbc:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22cc0:	48 89 c7             	mov    rdi,rax
   22cc3:	e8 58 15 fe ff       	call   4220 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()@plt>
   22cc8:	48 89 c7             	mov    rdi,rax
   22ccb:	48 8d 8d 6c fe ff ff 	lea    rcx,[rbp-0x194]
   22cd2:	48 8d 95 68 fe ff ff 	lea    rdx,[rbp-0x198]
   22cd9:	48 8d 85 64 fe ff ff 	lea    rax,[rbp-0x19c]
   22ce0:	41 b8 04 00 00 00    	mov    r8d,0x4
   22ce6:	48 89 c6             	mov    rsi,rax
   22ce9:	e8 f3 2a fe ff       	call   57e1 <stbi_load>
   22cee:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
   22cf5:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22cfc:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
   22d03:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22d0a:	48 89 c7             	mov    rdi,rax
   22d0d:	ff d2                	call   rdx
   22d0f:	c7 45 90 01 28 00 00 	mov    DWORD PTR [rbp-0x70],0x2801
   22d16:	c7 45 94 00 28 00 00 	mov    DWORD PTR [rbp-0x6c],0x2800
   22d1d:	c7 45 98 03 27 00 00 	mov    DWORD PTR [rbp-0x68],0x2703
   22d24:	c7 45 9c 01 26 00 00 	mov    DWORD PTR [rbp-0x64],0x2601
   22d2b:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22d32:	4c 8b 80 e8 00 00 00 	mov    r8,QWORD PTR [rax+0xe8]
   22d39:	48 8d 55 98          	lea    rdx,[rbp-0x68]
   22d3d:	48 8d 75 90          	lea    rsi,[rbp-0x70]
   22d41:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22d48:	b9 02 00 00 00       	mov    ecx,0x2
   22d4d:	48 89 c7             	mov    rdi,rax
   22d50:	41 ff d0             	call   r8
   22d53:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22d5a:	4c 8b 90 d0 00 00 00 	mov    r10,QWORD PTR [rax+0xd0]
   22d61:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
   22d67:	89 c1                	mov    ecx,eax
   22d69:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
   22d6f:	89 c2                	mov    edx,eax
   22d71:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22d78:	48 83 ec 08          	sub    rsp,0x8
   22d7c:	6a 01                	push   0x1
   22d7e:	41 89 c9             	mov    r9d,ecx
   22d81:	41 89 d0             	mov    r8d,edx
   22d84:	b9 05 00 00 00       	mov    ecx,0x5
   22d89:	ba 58 80 00 00       	mov    edx,0x8058
   22d8e:	be 00 00 00 00       	mov    esi,0x0
   22d93:	48 89 c7             	mov    rdi,rax
   22d96:	41 ff d2             	call   r10
   22d99:	48 83 c4 10          	add    rsp,0x10
   22d9d:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22da4:	4c 8b 90 d8 00 00 00 	mov    r10,QWORD PTR [rax+0xd8]
   22dab:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
   22db1:	89 c6                	mov    esi,eax
   22db3:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
   22db9:	89 c1                	mov    ecx,eax
   22dbb:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   22dc2:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22dc9:	48 83 ec 08          	sub    rsp,0x8
   22dcd:	6a 01                	push   0x1
   22dcf:	56                   	push   rsi
   22dd0:	51                   	push   rcx
   22dd1:	41 b9 00 00 00 00    	mov    r9d,0x0
   22dd7:	41 b8 01 14 00 00    	mov    r8d,0x1401
   22ddd:	b9 08 19 00 00       	mov    ecx,0x1908
   22de2:	be 00 00 00 00       	mov    esi,0x0
   22de7:	48 89 c7             	mov    rdi,rax
   22dea:	41 ff d2             	call   r10
   22ded:	48 83 c4 20          	add    rsp,0x20
   22df1:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22df8:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
   22dff:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22e06:	48 89 c7             	mov    rdi,rax
   22e09:	ff d2                	call   rdx
   22e0b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   22e12:	48 89 c7             	mov    rdi,rax
   22e15:	e8 0e 20 fe ff       	call   4e28 <stbi_image_free>
   22e1a:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   22e21:	48 8b 88 f0 00 00 00 	mov    rcx,QWORD PTR [rax+0xf0]
   22e28:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   22e2f:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
   22e36:	48 89 d6             	mov    rsi,rdx
   22e39:	48 89 c7             	mov    rdi,rax
   22e3c:	ff d1                	call   rcx
   22e3e:	89 85 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],eax
   22e44:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   22e4b:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   22e52:	48 89 d6             	mov    rsi,rdx
   22e55:	48 89 c7             	mov    rdi,rax
   22e58:	e8 d7 37 00 00       	call   26634 <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)>
   22e5d:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   22e64:	48 83 c0 18          	add    rax,0x18
   22e68:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   22e6f:	48 83 c2 10          	add    rdx,0x10
   22e73:	48 89 d6             	mov    rsi,rdx
   22e76:	48 89 c7             	mov    rdi,rax
   22e79:	e8 9a 35 00 00       	call   26418 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   22e7e:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22e82:	48 89 c7             	mov    rdi,rax
   22e85:	e8 d6 13 fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   22e8a:	48 89 dc             	mov    rsp,rbx
   22e8d:	eb 03                	jmp    22e92 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd7e>
   22e8f:	48 89 dc             	mov    rsp,rbx
   22e92:	83 85 74 fe ff ff 01 	add    DWORD PTR [rbp-0x18c],0x1
   22e99:	e9 49 f3 ff ff       	jmp    221e7 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd3>
   22e9e:	48 8d 35 25 9a 01 00 	lea    rsi,[rip+0x19a25]        # 3c8ca <NANO_SEC+0x1602>
   22ea5:	48 8d 3d 54 86 02 00 	lea    rdi,[rip+0x28654]        # 4b500 <std::cout@@GLIBCXX_3.4>
   22eac:	e8 1f 15 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   22eb1:	48 89 c2             	mov    rdx,rax
   22eb4:	8b 85 78 fe ff ff    	mov    eax,DWORD PTR [rbp-0x188]
   22eba:	89 c6                	mov    esi,eax
   22ebc:	48 89 d7             	mov    rdi,rdx
   22ebf:	e8 fc 16 fe ff       	call   45c0 <std::ostream::operator<<(unsigned int)@plt>
   22ec4:	48 8d 35 11 84 01 00 	lea    rsi,[rip+0x18411]        # 3b2dc <NANO_SEC+0x14>
   22ecb:	48 89 c7             	mov    rdi,rax
   22ece:	e8 fd 14 fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   22ed3:	48 89 c3             	mov    rbx,rax
   22ed6:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   22edd:	48 89 c7             	mov    rdi,rax
   22ee0:	e8 cb 37 00 00       	call   266b0 <std::vector<Tex, std::allocator<Tex> >::size() const>
   22ee5:	48 89 c6             	mov    rsi,rax
   22ee8:	48 89 df             	mov    rdi,rbx
   22eeb:	e8 c0 11 fe ff       	call   40b0 <std::ostream::operator<<(unsigned long)@plt>
   22ef0:	48 89 c2             	mov    rdx,rax
   22ef3:	48 8b 05 c6 80 02 00 	mov    rax,QWORD PTR [rip+0x280c6]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   22efa:	48 89 c6             	mov    rsi,rax
   22efd:	48 89 d7             	mov    rdi,rdx
   22f00:	e8 2b 15 fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   22f05:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   22f0c:	48 89 c7             	mov    rdi,rax
   22f0f:	e8 aa 31 00 00       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   22f14:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   22f1b:	48 89 c7             	mov    rdi,rax
   22f1e:	e8 c5 30 00 00       	call   25fe8 <std::vector<Tex, std::allocator<Tex> >::~vector()>
   22f23:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22f2a:	48 89 c7             	mov    rdi,rax
   22f2d:	e8 f6 a2 00 00       	call   2d228 <objl::Loader::~Loader()>
   22f32:	90                   	nop
   22f33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22f37:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   22f40:	0f 84 83 00 00 00    	je     22fc9 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xeb5>
   22f46:	eb 7c                	jmp    22fc4 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xeb0>
   22f48:	48 89 c3             	mov    rbx,rax
   22f4b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22f4f:	48 89 c7             	mov    rdi,rax
   22f52:	e8 09 13 fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   22f57:	eb 03                	jmp    22f5c <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xe48>
   22f59:	48 89 c3             	mov    rbx,rax
   22f5c:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   22f63:	48 89 c7             	mov    rdi,rax
   22f66:	e8 f5 14 fe ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   22f6b:	eb 3d                	jmp    22faa <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xe96>
   22f6d:	49 89 c4             	mov    r12,rax
   22f70:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22f74:	48 89 c7             	mov    rdi,rax
   22f77:	e8 e4 12 fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   22f7c:	4c 89 e0             	mov    rax,r12
   22f7f:	eb 00                	jmp    22f81 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xe6d>
   22f81:	48 89 dc             	mov    rsp,rbx
   22f84:	48 89 c3             	mov    rbx,rax
   22f87:	eb 03                	jmp    22f8c <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xe78>
   22f89:	48 89 c3             	mov    rbx,rax
   22f8c:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   22f93:	48 89 c7             	mov    rdi,rax
   22f96:	e8 23 31 00 00       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   22f9b:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   22fa2:	48 89 c7             	mov    rdi,rax
   22fa5:	e8 3e 30 00 00       	call   25fe8 <std::vector<Tex, std::allocator<Tex> >::~vector()>
   22faa:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22fb1:	48 89 c7             	mov    rdi,rax
   22fb4:	e8 6f a2 00 00       	call   2d228 <objl::Loader::~Loader()>
   22fb9:	48 89 d8             	mov    rax,rbx
   22fbc:	48 89 c7             	mov    rdi,rax
   22fbf:	e8 6c 17 fe ff       	call   4730 <_Unwind_Resume@plt>
   22fc4:	e8 e7 14 fe ff       	call   44b0 <__stack_chk_fail@plt>
   22fc9:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
   22fcd:	5b                   	pop    rbx
   22fce:	41 5c                	pop    r12
   22fd0:	41 5d                	pop    r13
   22fd2:	41 5e                	pop    r14
   22fd4:	41 5f                	pop    r15
   22fd6:	5d                   	pop    rbp
   22fd7:	c3                   	ret    

0000000000022fd8 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)>:
   22fd8:	55                   	push   rbp
   22fd9:	48 89 e5             	mov    rbp,rsp
   22fdc:	48 83 ec 60          	sub    rsp,0x60
   22fe0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   22fe4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   22fe8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   22fec:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   22ff0:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   22ff4:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
   22ff8:	c7 45 e8 04 00 00 00 	mov    DWORD PTR [rbp-0x18],0x4
   22fff:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   23002:	8d 50 ff             	lea    edx,[rax-0x1]
   23005:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
   23008:	85 c0                	test   eax,eax
   2300a:	0f 95 c0             	setne  al
   2300d:	84 c0                	test   al,al
   2300f:	74 69                	je     2307a <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0xa2>
   23011:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   23014:	89 c6                	mov    esi,eax
   23016:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2301a:	e8 4b 37 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   2301f:	be 03 00 00 00       	mov    esi,0x3
   23024:	48 89 c7             	mov    rdi,rax
   23027:	e8 c4 36 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   2302c:	f3 0f 10 20          	movss  xmm4,DWORD PTR [rax]
   23030:	f3 0f 11 65 ac       	movss  DWORD PTR [rbp-0x54],xmm4
   23035:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   23038:	89 c6                	mov    esi,eax
   2303a:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2303e:	e8 27 37 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   23043:	be 00 00 00 00       	mov    esi,0x0
   23048:	48 89 c7             	mov    rdi,rax
   2304b:	e8 a0 36 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23050:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   23054:	f3 0f 58 45 ac       	addss  xmm0,DWORD PTR [rbp-0x54]
   23059:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   2305e:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   23061:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   23065:	89 d6                	mov    esi,edx
   23067:	48 89 c7             	mov    rdi,rax
   2306a:	e8 81 36 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   2306f:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   23074:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   23078:	eb 85                	jmp    22fff <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x27>
   2307a:	c7 45 ec 04 00 00 00 	mov    DWORD PTR [rbp-0x14],0x4
   23081:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   23084:	8d 50 ff             	lea    edx,[rax-0x1]
   23087:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   2308a:	85 c0                	test   eax,eax
   2308c:	0f 95 c0             	setne  al
   2308f:	84 c0                	test   al,al
   23091:	74 6d                	je     23100 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x128>
   23093:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   23096:	89 c6                	mov    esi,eax
   23098:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2309c:	e8 c9 36 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   230a1:	be 03 00 00 00       	mov    esi,0x3
   230a6:	48 89 c7             	mov    rdi,rax
   230a9:	e8 42 36 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   230ae:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   230b2:	f3 0f 11 4d ac       	movss  DWORD PTR [rbp-0x54],xmm1
   230b7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   230ba:	89 c6                	mov    esi,eax
   230bc:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   230c0:	e8 a5 36 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   230c5:	be 00 00 00 00       	mov    esi,0x0
   230ca:	48 89 c7             	mov    rdi,rax
   230cd:	e8 1e 36 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   230d2:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   230d6:	f3 0f 10 4d ac       	movss  xmm1,DWORD PTR [rbp-0x54]
   230db:	f3 0f 5c c8          	subss  xmm1,xmm0
   230df:	f3 0f 11 4d ac       	movss  DWORD PTR [rbp-0x54],xmm1
   230e4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   230e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   230eb:	89 d6                	mov    esi,edx
   230ed:	48 89 c7             	mov    rdi,rax
   230f0:	e8 fb 35 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   230f5:	f3 0f 10 4d ac       	movss  xmm1,DWORD PTR [rbp-0x54]
   230fa:	f3 0f 11 08          	movss  DWORD PTR [rax],xmm1
   230fe:	eb 81                	jmp    23081 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0xa9>
   23100:	c7 45 f0 04 00 00 00 	mov    DWORD PTR [rbp-0x10],0x4
   23107:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2310a:	8d 50 ff             	lea    edx,[rax-0x1]
   2310d:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   23110:	85 c0                	test   eax,eax
   23112:	0f 95 c0             	setne  al
   23115:	84 c0                	test   al,al
   23117:	74 69                	je     23182 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x1aa>
   23119:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2311c:	89 c6                	mov    esi,eax
   2311e:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23122:	e8 43 36 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   23127:	be 03 00 00 00       	mov    esi,0x3
   2312c:	48 89 c7             	mov    rdi,rax
   2312f:	e8 bc 35 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23134:	f3 0f 10 28          	movss  xmm5,DWORD PTR [rax]
   23138:	f3 0f 11 6d ac       	movss  DWORD PTR [rbp-0x54],xmm5
   2313d:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   23140:	89 c6                	mov    esi,eax
   23142:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23146:	e8 1f 36 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   2314b:	be 01 00 00 00       	mov    esi,0x1
   23150:	48 89 c7             	mov    rdi,rax
   23153:	e8 98 35 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23158:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2315c:	f3 0f 58 45 ac       	addss  xmm0,DWORD PTR [rbp-0x54]
   23161:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   23166:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   23169:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2316d:	89 d6                	mov    esi,edx
   2316f:	48 89 c7             	mov    rdi,rax
   23172:	e8 79 35 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23177:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   2317c:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   23180:	eb 85                	jmp    23107 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x12f>
   23182:	c7 45 f4 04 00 00 00 	mov    DWORD PTR [rbp-0xc],0x4
   23189:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2318c:	8d 50 ff             	lea    edx,[rax-0x1]
   2318f:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   23192:	85 c0                	test   eax,eax
   23194:	0f 95 c0             	setne  al
   23197:	84 c0                	test   al,al
   23199:	74 6d                	je     23208 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x230>
   2319b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2319e:	89 c6                	mov    esi,eax
   231a0:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   231a4:	e8 c1 35 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   231a9:	be 03 00 00 00       	mov    esi,0x3
   231ae:	48 89 c7             	mov    rdi,rax
   231b1:	e8 3a 35 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   231b6:	f3 0f 10 10          	movss  xmm2,DWORD PTR [rax]
   231ba:	f3 0f 11 55 ac       	movss  DWORD PTR [rbp-0x54],xmm2
   231bf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   231c2:	89 c6                	mov    esi,eax
   231c4:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   231c8:	e8 9d 35 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   231cd:	be 01 00 00 00       	mov    esi,0x1
   231d2:	48 89 c7             	mov    rdi,rax
   231d5:	e8 16 35 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   231da:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   231de:	f3 0f 10 55 ac       	movss  xmm2,DWORD PTR [rbp-0x54]
   231e3:	f3 0f 5c d0          	subss  xmm2,xmm0
   231e7:	f3 0f 11 55 ac       	movss  DWORD PTR [rbp-0x54],xmm2
   231ec:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   231ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   231f3:	89 d6                	mov    esi,edx
   231f5:	48 89 c7             	mov    rdi,rax
   231f8:	e8 f3 34 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   231fd:	f3 0f 10 55 ac       	movss  xmm2,DWORD PTR [rbp-0x54]
   23202:	f3 0f 11 10          	movss  DWORD PTR [rax],xmm2
   23206:	eb 81                	jmp    23189 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x1b1>
   23208:	c7 45 f8 04 00 00 00 	mov    DWORD PTR [rbp-0x8],0x4
   2320f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   23212:	8d 50 ff             	lea    edx,[rax-0x1]
   23215:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   23218:	85 c0                	test   eax,eax
   2321a:	0f 95 c0             	setne  al
   2321d:	84 c0                	test   al,al
   2321f:	74 69                	je     2328a <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x2b2>
   23221:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   23224:	89 c6                	mov    esi,eax
   23226:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2322a:	e8 3b 35 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   2322f:	be 03 00 00 00       	mov    esi,0x3
   23234:	48 89 c7             	mov    rdi,rax
   23237:	e8 b4 34 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   2323c:	f3 0f 10 30          	movss  xmm6,DWORD PTR [rax]
   23240:	f3 0f 11 75 ac       	movss  DWORD PTR [rbp-0x54],xmm6
   23245:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   23248:	89 c6                	mov    esi,eax
   2324a:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2324e:	e8 17 35 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   23253:	be 02 00 00 00       	mov    esi,0x2
   23258:	48 89 c7             	mov    rdi,rax
   2325b:	e8 90 34 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23260:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   23264:	f3 0f 58 45 ac       	addss  xmm0,DWORD PTR [rbp-0x54]
   23269:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   2326e:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   23271:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   23275:	89 d6                	mov    esi,edx
   23277:	48 89 c7             	mov    rdi,rax
   2327a:	e8 71 34 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   2327f:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   23284:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   23288:	eb 85                	jmp    2320f <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x237>
   2328a:	c7 45 fc 04 00 00 00 	mov    DWORD PTR [rbp-0x4],0x4
   23291:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   23294:	8d 50 ff             	lea    edx,[rax-0x1]
   23297:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
   2329a:	85 c0                	test   eax,eax
   2329c:	0f 95 c0             	setne  al
   2329f:	84 c0                	test   al,al
   232a1:	74 6d                	je     23310 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x338>
   232a3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   232a6:	89 c6                	mov    esi,eax
   232a8:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   232ac:	e8 b9 34 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   232b1:	be 03 00 00 00       	mov    esi,0x3
   232b6:	48 89 c7             	mov    rdi,rax
   232b9:	e8 32 34 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   232be:	f3 0f 10 18          	movss  xmm3,DWORD PTR [rax]
   232c2:	f3 0f 11 5d ac       	movss  DWORD PTR [rbp-0x54],xmm3
   232c7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   232ca:	89 c6                	mov    esi,eax
   232cc:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   232d0:	e8 95 34 00 00       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   232d5:	be 02 00 00 00       	mov    esi,0x2
   232da:	48 89 c7             	mov    rdi,rax
   232dd:	e8 0e 34 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   232e2:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   232e6:	f3 0f 10 5d ac       	movss  xmm3,DWORD PTR [rbp-0x54]
   232eb:	f3 0f 5c d8          	subss  xmm3,xmm0
   232ef:	f3 0f 11 5d ac       	movss  DWORD PTR [rbp-0x54],xmm3
   232f4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   232f7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   232fb:	89 d6                	mov    esi,edx
   232fd:	48 89 c7             	mov    rdi,rax
   23300:	e8 eb 33 00 00       	call   266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23305:	f3 0f 10 5d ac       	movss  xmm3,DWORD PTR [rbp-0x54]
   2330a:	f3 0f 11 18          	movss  DWORD PTR [rax],xmm3
   2330e:	eb 81                	jmp    23291 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x2b9>
   23310:	90                   	nop
   23311:	c9                   	leave  
   23312:	c3                   	ret    

0000000000023313 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)>:
   23313:	55                   	push   rbp
   23314:	48 89 e5             	mov    rbp,rsp
   23317:	48 83 ec 40          	sub    rsp,0x40
   2331b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2331f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   23323:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2332c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   23330:	31 c0                	xor    eax,eax
   23332:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   23339:	83 7d d8 05          	cmp    DWORD PTR [rbp-0x28],0x5
   2333d:	0f 87 51 03 00 00    	ja     23694 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x381>
   23343:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   2334a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2334e:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23353:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23357:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2335c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23360:	8b 10                	mov    edx,DWORD PTR [rax]
   23362:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23366:	f3 0f 10 1d ee 99 01 00 	movss  xmm3,DWORD PTR [rip+0x199ee]        # 3cd5c <NANO_SEC+0x1a94>
   2336e:	0f 28 d1             	movaps xmm2,xmm1
   23371:	0f 28 c8             	movaps xmm1,xmm0
   23374:	66 0f 6e c2          	movd   xmm0,edx
   23378:	48 89 c7             	mov    rdi,rax
   2337b:	e8 38 34 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23380:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23383:	48 c1 e0 04          	shl    rax,0x4
   23387:	48 89 c2             	mov    rdx,rax
   2338a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2338e:	48 01 c2             	add    rdx,rax
   23391:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23395:	48 89 c6             	mov    rsi,rax
   23398:	48 89 d7             	mov    rdi,rdx
   2339b:	e8 6e 34 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   233a0:	66 0f ef c9          	pxor   xmm1,xmm1
   233a4:	0f 2f c8             	comiss xmm1,xmm0
   233a7:	0f 97 c0             	seta   al
   233aa:	0f b6 c0             	movzx  eax,al
   233ad:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   233b0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   233b4:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   233b9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   233bd:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   233c2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   233c6:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   233c9:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   233cd:	f3 0f 10 1d 87 99 01 00 	movss  xmm3,DWORD PTR [rip+0x19987]        # 3cd5c <NANO_SEC+0x1a94>
   233d5:	0f 28 d1             	movaps xmm2,xmm1
   233d8:	0f 28 c8             	movaps xmm1,xmm0
   233db:	66 0f 6e c2          	movd   xmm0,edx
   233df:	48 89 c7             	mov    rdi,rax
   233e2:	e8 d1 33 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   233e7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   233ea:	48 c1 e0 04          	shl    rax,0x4
   233ee:	48 89 c2             	mov    rdx,rax
   233f1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   233f5:	48 01 c2             	add    rdx,rax
   233f8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   233fc:	48 89 c6             	mov    rsi,rax
   233ff:	48 89 d7             	mov    rdi,rdx
   23402:	e8 07 34 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23407:	66 0f ef c9          	pxor   xmm1,xmm1
   2340b:	0f 2f c8             	comiss xmm1,xmm0
   2340e:	0f 97 c0             	seta   al
   23411:	0f b6 c0             	movzx  eax,al
   23414:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23417:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2341b:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23420:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23424:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   23429:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2342d:	8b 10                	mov    edx,DWORD PTR [rax]
   2342f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23433:	f3 0f 10 1d 21 99 01 00 	movss  xmm3,DWORD PTR [rip+0x19921]        # 3cd5c <NANO_SEC+0x1a94>
   2343b:	0f 28 d1             	movaps xmm2,xmm1
   2343e:	0f 28 c8             	movaps xmm1,xmm0
   23441:	66 0f 6e c2          	movd   xmm0,edx
   23445:	48 89 c7             	mov    rdi,rax
   23448:	e8 6b 33 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   2344d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23450:	48 c1 e0 04          	shl    rax,0x4
   23454:	48 89 c2             	mov    rdx,rax
   23457:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2345b:	48 01 c2             	add    rdx,rax
   2345e:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23462:	48 89 c6             	mov    rsi,rax
   23465:	48 89 d7             	mov    rdi,rdx
   23468:	e8 a1 33 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2346d:	66 0f ef c9          	pxor   xmm1,xmm1
   23471:	0f 2f c8             	comiss xmm1,xmm0
   23474:	0f 97 c0             	seta   al
   23477:	0f b6 c0             	movzx  eax,al
   2347a:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   2347d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23481:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23486:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2348a:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   2348f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23493:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23496:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2349a:	f3 0f 10 1d ba 98 01 00 	movss  xmm3,DWORD PTR [rip+0x198ba]        # 3cd5c <NANO_SEC+0x1a94>
   234a2:	0f 28 d1             	movaps xmm2,xmm1
   234a5:	0f 28 c8             	movaps xmm1,xmm0
   234a8:	66 0f 6e c2          	movd   xmm0,edx
   234ac:	48 89 c7             	mov    rdi,rax
   234af:	e8 04 33 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   234b4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   234b7:	48 c1 e0 04          	shl    rax,0x4
   234bb:	48 89 c2             	mov    rdx,rax
   234be:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   234c2:	48 01 c2             	add    rdx,rax
   234c5:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   234c9:	48 89 c6             	mov    rsi,rax
   234cc:	48 89 d7             	mov    rdi,rdx
   234cf:	e8 3a 33 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   234d4:	66 0f ef c9          	pxor   xmm1,xmm1
   234d8:	0f 2f c8             	comiss xmm1,xmm0
   234db:	0f 97 c0             	seta   al
   234de:	0f b6 c0             	movzx  eax,al
   234e1:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   234e4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   234e8:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   234ed:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   234f1:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   234f6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   234fa:	8b 10                	mov    edx,DWORD PTR [rax]
   234fc:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23500:	f3 0f 10 1d 54 98 01 00 	movss  xmm3,DWORD PTR [rip+0x19854]        # 3cd5c <NANO_SEC+0x1a94>
   23508:	0f 28 d1             	movaps xmm2,xmm1
   2350b:	0f 28 c8             	movaps xmm1,xmm0
   2350e:	66 0f 6e c2          	movd   xmm0,edx
   23512:	48 89 c7             	mov    rdi,rax
   23515:	e8 9e 32 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   2351a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   2351d:	48 c1 e0 04          	shl    rax,0x4
   23521:	48 89 c2             	mov    rdx,rax
   23524:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23528:	48 01 c2             	add    rdx,rax
   2352b:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2352f:	48 89 c6             	mov    rsi,rax
   23532:	48 89 d7             	mov    rdi,rdx
   23535:	e8 d4 32 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2353a:	66 0f ef c9          	pxor   xmm1,xmm1
   2353e:	0f 2f c8             	comiss xmm1,xmm0
   23541:	0f 97 c0             	seta   al
   23544:	0f b6 c0             	movzx  eax,al
   23547:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   2354a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2354e:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   23553:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23557:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2355c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23560:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23563:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23567:	f3 0f 10 1d ed 97 01 00 	movss  xmm3,DWORD PTR [rip+0x197ed]        # 3cd5c <NANO_SEC+0x1a94>
   2356f:	0f 28 d1             	movaps xmm2,xmm1
   23572:	0f 28 c8             	movaps xmm1,xmm0
   23575:	66 0f 6e c2          	movd   xmm0,edx
   23579:	48 89 c7             	mov    rdi,rax
   2357c:	e8 37 32 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23581:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23584:	48 c1 e0 04          	shl    rax,0x4
   23588:	48 89 c2             	mov    rdx,rax
   2358b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2358f:	48 01 c2             	add    rdx,rax
   23592:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23596:	48 89 c6             	mov    rsi,rax
   23599:	48 89 d7             	mov    rdi,rdx
   2359c:	e8 6d 32 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   235a1:	66 0f ef c9          	pxor   xmm1,xmm1
   235a5:	0f 2f c8             	comiss xmm1,xmm0
   235a8:	0f 97 c0             	seta   al
   235ab:	0f b6 c0             	movzx  eax,al
   235ae:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   235b1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   235b5:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   235ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   235be:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   235c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   235c7:	8b 10                	mov    edx,DWORD PTR [rax]
   235c9:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   235cd:	f3 0f 10 1d 87 97 01 00 	movss  xmm3,DWORD PTR [rip+0x19787]        # 3cd5c <NANO_SEC+0x1a94>
   235d5:	0f 28 d1             	movaps xmm2,xmm1
   235d8:	0f 28 c8             	movaps xmm1,xmm0
   235db:	66 0f 6e c2          	movd   xmm0,edx
   235df:	48 89 c7             	mov    rdi,rax
   235e2:	e8 d1 31 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   235e7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   235ea:	48 c1 e0 04          	shl    rax,0x4
   235ee:	48 89 c2             	mov    rdx,rax
   235f1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   235f5:	48 01 c2             	add    rdx,rax
   235f8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   235fc:	48 89 c6             	mov    rsi,rax
   235ff:	48 89 d7             	mov    rdi,rdx
   23602:	e8 07 32 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23607:	66 0f ef c9          	pxor   xmm1,xmm1
   2360b:	0f 2f c8             	comiss xmm1,xmm0
   2360e:	0f 97 c0             	seta   al
   23611:	0f b6 c0             	movzx  eax,al
   23614:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23617:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2361b:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   23620:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23624:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   23629:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2362d:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23630:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23634:	f3 0f 10 1d 20 97 01 00 	movss  xmm3,DWORD PTR [rip+0x19720]        # 3cd5c <NANO_SEC+0x1a94>
   2363c:	0f 28 d1             	movaps xmm2,xmm1
   2363f:	0f 28 c8             	movaps xmm1,xmm0
   23642:	66 0f 6e c2          	movd   xmm0,edx
   23646:	48 89 c7             	mov    rdi,rax
   23649:	e8 6a 31 00 00       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   2364e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23651:	48 c1 e0 04          	shl    rax,0x4
   23655:	48 89 c2             	mov    rdx,rax
   23658:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2365c:	48 01 c2             	add    rdx,rax
   2365f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23663:	48 89 c6             	mov    rsi,rax
   23666:	48 89 d7             	mov    rdi,rdx
   23669:	e8 a0 31 00 00       	call   2680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2366e:	66 0f ef c9          	pxor   xmm1,xmm1
   23672:	0f 2f c8             	comiss xmm1,xmm0
   23675:	0f 97 c0             	seta   al
   23678:	0f b6 c0             	movzx  eax,al
   2367b:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   2367e:	83 7d dc 08          	cmp    DWORD PTR [rbp-0x24],0x8
   23682:	75 07                	jne    2368b <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x378>
   23684:	b8 00 00 00 00       	mov    eax,0x0
   23689:	eb 0e                	jmp    23699 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x386>
   2368b:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   2368f:	e9 a5 fc ff ff       	jmp    23339 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x26>
   23694:	b8 01 00 00 00       	mov    eax,0x1
   23699:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2369d:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   236a6:	74 05                	je     236ad <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x39a>
   236a8:	e8 03 0e fe ff       	call   44b0 <__stack_chk_fail@plt>
   236ad:	c9                   	leave  
   236ae:	c3                   	ret    

00000000000236af <main>:
   236af:	55                   	push   rbp
   236b0:	48 89 e5             	mov    rbp,rsp
   236b3:	41 57                	push   r15
   236b5:	41 56                	push   r14
   236b7:	41 55                	push   r13
   236b9:	41 54                	push   r12
   236bb:	53                   	push   rbx
   236bc:	48 81 ec 68 06 00 00 	sub    rsp,0x668
   236c3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   236cc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   236d0:	31 c0                	xor    eax,eax
   236d2:	48 89 e0             	mov    rax,rsp
   236d5:	48 89 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],rax
   236dc:	c7 85 7c fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x584],0x0
   236e6:	c7 85 80 fa ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x580],0x1
   236f0:	c7 85 84 fa ff ff 03 00 00 00 	mov    DWORD PTR [rbp-0x57c],0x3
   236fa:	8b 85 7c fa ff ff    	mov    eax,DWORD PTR [rbp-0x584]
   23700:	d1 f8                	sar    eax,1
   23702:	89 c6                	mov    esi,eax
   23704:	48 8d 3d f5 7d 02 00 	lea    rdi,[rip+0x27df5]        # 4b500 <std::cout@@GLIBCXX_3.4>
   2370b:	e8 10 10 fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   23710:	48 8d 35 c5 7b 01 00 	lea    rsi,[rip+0x17bc5]        # 3b2dc <NANO_SEC+0x14>
   23717:	48 89 c7             	mov    rdi,rax
   2371a:	e8 b1 0c fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   2371f:	48 89 c2             	mov    rdx,rax
   23722:	8b 85 7c fa ff ff    	mov    eax,DWORD PTR [rbp-0x584]
   23728:	c1 f8 05             	sar    eax,0x5
   2372b:	89 c6                	mov    esi,eax
   2372d:	48 89 d7             	mov    rdi,rdx
   23730:	e8 eb 0f fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   23735:	48 8d 35 a0 7b 01 00 	lea    rsi,[rip+0x17ba0]        # 3b2dc <NANO_SEC+0x14>
   2373c:	48 89 c7             	mov    rdi,rax
   2373f:	e8 8c 0c fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   23744:	48 89 c2             	mov    rdx,rax
   23747:	8b 85 80 fa ff ff    	mov    eax,DWORD PTR [rbp-0x580]
   2374d:	d1 f8                	sar    eax,1
   2374f:	89 c6                	mov    esi,eax
   23751:	48 89 d7             	mov    rdi,rdx
   23754:	e8 c7 0f fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   23759:	48 8d 35 7c 7b 01 00 	lea    rsi,[rip+0x17b7c]        # 3b2dc <NANO_SEC+0x14>
   23760:	48 89 c7             	mov    rdi,rax
   23763:	e8 68 0c fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   23768:	48 89 c2             	mov    rdx,rax
   2376b:	8b 85 80 fa ff ff    	mov    eax,DWORD PTR [rbp-0x580]
   23771:	c1 f8 05             	sar    eax,0x5
   23774:	89 c6                	mov    esi,eax
   23776:	48 89 d7             	mov    rdi,rdx
   23779:	e8 a2 0f fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   2377e:	48 8d 35 57 7b 01 00 	lea    rsi,[rip+0x17b57]        # 3b2dc <NANO_SEC+0x14>
   23785:	48 89 c7             	mov    rdi,rax
   23788:	e8 43 0c fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   2378d:	48 89 c2             	mov    rdx,rax
   23790:	8b 85 84 fa ff ff    	mov    eax,DWORD PTR [rbp-0x57c]
   23796:	d1 f8                	sar    eax,1
   23798:	89 c6                	mov    esi,eax
   2379a:	48 89 d7             	mov    rdi,rdx
   2379d:	e8 7e 0f fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   237a2:	48 8d 35 33 7b 01 00 	lea    rsi,[rip+0x17b33]        # 3b2dc <NANO_SEC+0x14>
   237a9:	48 89 c7             	mov    rdi,rax
   237ac:	e8 1f 0c fe ff       	call   43d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   237b1:	48 89 c2             	mov    rdx,rax
   237b4:	8b 85 84 fa ff ff    	mov    eax,DWORD PTR [rbp-0x57c]
   237ba:	c1 f8 05             	sar    eax,0x5
   237bd:	89 c6                	mov    esi,eax
   237bf:	48 89 d7             	mov    rdi,rdx
   237c2:	e8 59 0f fe ff       	call   4720 <std::ostream::operator<<(int)@plt>
   237c7:	48 89 c2             	mov    rdx,rax
   237ca:	48 8b 05 ef 77 02 00 	mov    rax,QWORD PTR [rip+0x277ef]        # 4afc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   237d1:	48 89 c6             	mov    rsi,rax
   237d4:	48 89 d7             	mov    rdi,rdx
   237d7:	e8 54 0c fe ff       	call   4430 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   237dc:	48 c7 85 70 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x490],0x0
   237e7:	48 c7 85 78 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x488],0x0
   237f2:	48 c7 85 80 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x480],0x0
   237fd:	48 c7 85 88 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x478],0x0
   23808:	48 c7 85 90 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x470],0x0
   23813:	48 c7 85 a0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x460],0x0
   2381e:	48 c7 85 a8 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x458],0x0
   23829:	48 c7 85 b0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x450],0x0
   23834:	48 c7 85 b8 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x448],0x0
   2383f:	48 c7 85 c0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x440],0x0
   2384a:	48 c7 85 c8 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x438],0x0
   23855:	48 c7 85 d0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x430],0x0
   23860:	48 c7 85 d8 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x428],0x0
   2386b:	48 8d 85 a0 fb ff ff 	lea    rax,[rbp-0x460]
   23872:	48 89 c7             	mov    rdi,rax
   23875:	e8 89 c3 ff ff       	call   1fc03 <InitSound(SoundSystemState&)>
   2387a:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   23881:	48 89 c6             	mov    rsi,rax
   23884:	48 8d 3d 4e 90 01 00 	lea    rdi,[rip+0x1904e]        # 3c8d9 <NANO_SEC+0x1611>
   2388b:	e8 16 d2 ff ff       	call   20aa6 <LoadSoundAsset(char const*, SoundAsset*)>
   23890:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23897:	48 89 c7             	mov    rdi,rax
   2389a:	e8 31 18 00 00       	call   250d0 <CommonData::CommonData()>
   2389f:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   238a6:	48 83 c0 08          	add    rax,0x8
   238aa:	48 8d 35 41 90 01 00 	lea    rsi,[rip+0x19041]        # 3c8f2 <NANO_SEC+0x162a>
   238b1:	48 89 c7             	mov    rdi,rax
   238b4:	e8 70 b6 ff ff       	call   1ef29 <LoadRendererInterface(RendererInterface&, char const*)>
   238b9:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
   238c0:	ff d0                	call   rax
   238c2:	89 85 88 fa ff ff    	mov    DWORD PTR [rbp-0x578],eax
   238c8:	8b 85 88 fa ff ff    	mov    eax,DWORD PTR [rbp-0x578]
   238ce:	48 83 e8 01          	sub    rax,0x1
   238d2:	48 89 85 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rax
   238d9:	8b 85 88 fa ff ff    	mov    eax,DWORD PTR [rbp-0x578]
   238df:	89 c0                	mov    eax,eax
   238e1:	48 89 85 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rax
   238e8:	48 c7 85 f8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x608],0x0
   238f3:	8b 85 88 fa ff ff    	mov    eax,DWORD PTR [rbp-0x578]
   238f9:	89 c0                	mov    eax,eax
   238fb:	48 89 85 e0 f9 ff ff 	mov    QWORD PTR [rbp-0x620],rax
   23902:	48 c7 85 e8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x618],0x0
   2390d:	8b 95 88 fa ff ff    	mov    edx,DWORD PTR [rbp-0x578]
   23913:	b8 10 00 00 00       	mov    eax,0x10
   23918:	48 83 e8 01          	sub    rax,0x1
   2391c:	48 01 d0             	add    rax,rdx
   2391f:	bb 10 00 00 00       	mov    ebx,0x10
   23924:	ba 00 00 00 00       	mov    edx,0x0
   23929:	48 f7 f3             	div    rbx
   2392c:	48 6b c0 10          	imul   rax,rax,0x10
   23930:	48 29 c4             	sub    rsp,rax
   23933:	48 89 e0             	mov    rax,rsp
   23936:	48 83 c0 00          	add    rax,0x0
   2393a:	48 89 85 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rax
   23941:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
   23948:	8b 85 88 fa ff ff    	mov    eax,DWORD PTR [rbp-0x578]
   2394e:	48 83 e8 01          	sub    rax,0x1
   23952:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   23955:	48 83 c2 01          	add    rdx,0x1
   23959:	48 83 e8 01          	sub    rax,0x1
   2395d:	48 85 c0             	test   rax,rax
   23960:	78 0d                	js     2396f <main+0x2c0>
   23962:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   23965:	48 83 c2 01          	add    rdx,0x1
   23969:	48 83 e8 01          	sub    rax,0x1
   2396d:	eb ee                	jmp    2395d <main+0x2ae>
   2396f:	f3 0f 10 05 41 94 01 00 	movss  xmm0,DWORD PTR [rip+0x19441]        # 3cdb8 <NANO_SEC+0x1af0>
   23977:	f3 0f 11 85 e0 fb ff ff 	movss  DWORD PTR [rbp-0x420],xmm0
   2397f:	66 0f ef c0          	pxor   xmm0,xmm0
   23983:	f3 0f 11 85 e4 fb ff ff 	movss  DWORD PTR [rbp-0x41c],xmm0
   2398b:	66 0f ef c0          	pxor   xmm0,xmm0
   2398f:	f3 0f 11 85 e8 fb ff ff 	movss  DWORD PTR [rbp-0x418],xmm0
   23997:	f3 0f 10 05 bd 93 01 00 	movss  xmm0,DWORD PTR [rip+0x193bd]        # 3cd5c <NANO_SEC+0x1a94>
   2399f:	f3 0f 11 85 ec fb ff ff 	movss  DWORD PTR [rbp-0x414],xmm0
   239a7:	66 0f ef c0          	pxor   xmm0,xmm0
   239ab:	f3 0f 11 85 f0 fb ff ff 	movss  DWORD PTR [rbp-0x410],xmm0
   239b3:	66 0f ef c0          	pxor   xmm0,xmm0
   239b7:	f3 0f 11 85 f4 fb ff ff 	movss  DWORD PTR [rbp-0x40c],xmm0
   239bf:	66 0f ef c0          	pxor   xmm0,xmm0
   239c3:	f3 0f 11 85 f8 fb ff ff 	movss  DWORD PTR [rbp-0x408],xmm0
   239cb:	66 0f ef c0          	pxor   xmm0,xmm0
   239cf:	f3 0f 11 85 fc fb ff ff 	movss  DWORD PTR [rbp-0x404],xmm0
   239d7:	66 0f ef c0          	pxor   xmm0,xmm0
   239db:	f3 0f 11 85 00 fc ff ff 	movss  DWORD PTR [rbp-0x400],xmm0
   239e3:	c6 85 04 fc ff ff 00 	mov    BYTE PTR [rbp-0x3fc],0x0
   239ea:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   239f1:	48 8b 95 e8 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x418]
   239f8:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
   239ff:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
   23a06:	48 8b 85 f0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x410]
   23a0d:	48 8b 95 f8 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x408]
   23a14:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
   23a1b:	48 89 95 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rdx
   23a22:	8b 85 00 fc ff ff    	mov    eax,DWORD PTR [rbp-0x400]
   23a28:	89 85 e8 fd ff ff    	mov    DWORD PTR [rbp-0x218],eax
   23a2e:	0f b6 85 04 fc ff ff 	movzx  eax,BYTE PTR [rbp-0x3fc]
   23a35:	88 85 ec fd ff ff    	mov    BYTE PTR [rbp-0x214],al
   23a3b:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23a42:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   23a49:	48 8d 05 56 db ff ff 	lea    rax,[rip+0xffffffffffffdb56]        # 215a6 <W(void*)>
   23a50:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
   23a57:	c7 85 40 ff ff ff 57 00 00 00 	mov    DWORD PTR [rbp-0xc0],0x57
   23a61:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23a68:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
   23a6f:	48 8d 05 55 db ff ff 	lea    rax,[rip+0xffffffffffffdb55]        # 215cb <A(void*)>
   23a76:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   23a7d:	c7 85 58 ff ff ff 41 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x41
   23a87:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23a8e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
   23a95:	48 8d 05 54 db ff ff 	lea    rax,[rip+0xffffffffffffdb54]        # 215f0 <S(void*)>
   23a9c:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
   23aa3:	c7 85 70 ff ff ff 53 00 00 00 	mov    DWORD PTR [rbp-0x90],0x53
   23aad:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23ab4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   23ab8:	48 8d 05 56 db ff ff 	lea    rax,[rip+0xffffffffffffdb56]        # 21615 <D(void*)>
   23abf:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
   23ac6:	c7 45 88 44 00 00 00 	mov    DWORD PTR [rbp-0x78],0x44
   23acd:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23ad4:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   23ad8:	48 8d 05 5b db ff ff 	lea    rax,[rip+0xffffffffffffdb5b]        # 2163a <Space(void*)>
   23adf:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   23ae3:	c7 45 a0 20 00 00 00 	mov    DWORD PTR [rbp-0x60],0x20
   23aea:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23af1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   23af5:	48 8d 05 c7 db ff ff 	lea    rax,[rip+0xffffffffffffdbc7]        # 216c3 <Shift(void*)>
   23afc:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   23b00:	c7 45 b8 54 01 00 00 	mov    DWORD PTR [rbp-0x48],0x154
   23b07:	c6 85 f0 fd ff ff 01 	mov    BYTE PTR [rbp-0x210],0x1
   23b0e:	c7 85 74 fd ff ff 38 04 00 00 	mov    DWORD PTR [rbp-0x28c],0x438
   23b18:	c7 85 70 fd ff ff 80 07 00 00 	mov    DWORD PTR [rbp-0x290],0x780
   23b22:	48 8d 05 d7 8d 01 00 	lea    rax,[rip+0x18dd7]        # 3c900 <NANO_SEC+0x1638>
   23b29:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
   23b30:	48 8d 05 3f d9 ff ff 	lea    rax,[rip+0xffffffffffffd93f]        # 21476 <RendererAllocate(void*, unsigned int)>
   23b37:	48 89 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rax
   23b3e:	48 8d 05 4d d9 ff ff 	lea    rax,[rip+0xffffffffffffd94d]        # 21492 <RendererAlignedAllocate(void*, unsigned int, unsigned int)>
   23b45:	48 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rax
   23b4c:	48 8d 05 64 d9 ff ff 	lea    rax,[rip+0xffffffffffffd964]        # 214b7 <RendererFree(void*, void*)>
   23b53:	48 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rax
   23b5a:	48 8d 05 2f da ff ff 	lea    rax,[rip+0xffffffffffffda2f]        # 21590 <OnClose(void*)>
   23b61:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
   23b68:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23b6f:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
   23b76:	48 8d 05 6b db ff ff 	lea    rax,[rip+0xffffffffffffdb6b]        # 216e8 <MousePosCallBack(void*, double, double)>
   23b7d:	48 89 85 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rax
   23b84:	48 8d 05 a4 d9 ff ff 	lea    rax,[rip+0xffffffffffffd9a4]        # 2152f <OnResize(void*, unsigned int, unsigned int)>
   23b8b:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
   23b92:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   23b99:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
   23ba0:	c7 85 88 fd ff ff 06 00 00 00 	mov    DWORD PTR [rbp-0x278],0x6
   23baa:	48 8b 8d 68 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x398]
   23bb1:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23bb8:	48 8d 90 30 01 00 00 	lea    rdx,[rax+0x130]
   23bbf:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   23bc6:	48 89 d6             	mov    rsi,rdx
   23bc9:	48 89 c7             	mov    rdi,rax
   23bcc:	ff d1                	call   rcx
   23bce:	48 89 85 a0 fa ff ff 	mov    QWORD PTR [rbp-0x560],rax
   23bd5:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23bdc:	48 89 85 40 fc ff ff 	mov    QWORD PTR [rbp-0x3c0],rax
   23be3:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
   23bea:	ff d0                	call   rax
   23bec:	89 85 8c fa ff ff    	mov    DWORD PTR [rbp-0x574],eax
   23bf2:	8b 85 8c fa ff ff    	mov    eax,DWORD PTR [rbp-0x574]
   23bf8:	01 c0                	add    eax,eax
   23bfa:	89 c0                	mov    eax,eax
   23bfc:	48 83 e8 01          	sub    rax,0x1
   23c00:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
   23c07:	8b 85 8c fa ff ff    	mov    eax,DWORD PTR [rbp-0x574]
   23c0d:	01 c0                	add    eax,eax
   23c0f:	89 c0                	mov    eax,eax
   23c11:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
   23c18:	48 c7 85 d8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x628],0x0
   23c23:	8b 85 8c fa ff ff    	mov    eax,DWORD PTR [rbp-0x574]
   23c29:	01 c0                	add    eax,eax
   23c2b:	89 c0                	mov    eax,eax
   23c2d:	48 89 85 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rax
   23c34:	48 c7 85 c8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x638],0x0
   23c3f:	8b 85 8c fa ff ff    	mov    eax,DWORD PTR [rbp-0x574]
   23c45:	01 c0                	add    eax,eax
   23c47:	89 c2                	mov    edx,eax
   23c49:	b8 10 00 00 00       	mov    eax,0x10
   23c4e:	48 83 e8 01          	sub    rax,0x1
   23c52:	48 01 d0             	add    rax,rdx
   23c55:	bb 10 00 00 00       	mov    ebx,0x10
   23c5a:	ba 00 00 00 00       	mov    edx,0x0
   23c5f:	48 f7 f3             	div    rbx
   23c62:	48 6b c0 10          	imul   rax,rax,0x10
   23c66:	48 29 c4             	sub    rsp,rax
   23c69:	48 89 e0             	mov    rax,rsp
   23c6c:	48 83 c0 00          	add    rax,0x0
   23c70:	48 89 85 b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rax
   23c77:	48 8b 95 b0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x550]
   23c7e:	8b 85 8c fa ff ff    	mov    eax,DWORD PTR [rbp-0x574]
   23c84:	01 c0                	add    eax,eax
   23c86:	89 c0                	mov    eax,eax
   23c88:	48 83 e8 01          	sub    rax,0x1
   23c8c:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   23c8f:	48 83 c2 01          	add    rdx,0x1
   23c93:	48 83 e8 01          	sub    rax,0x1
   23c97:	48 85 c0             	test   rax,rax
   23c9a:	78 0d                	js     23ca9 <main+0x5fa>
   23c9c:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   23c9f:	48 83 c2 01          	add    rdx,0x1
   23ca3:	48 83 e8 01          	sub    rax,0x1
   23ca7:	eb ee                	jmp    23c97 <main+0x5e8>
   23ca9:	48 8b 8d b8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x348]
   23cb0:	48 8b 95 a0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x560]
   23cb7:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
   23cbe:	48 89 d6             	mov    rsi,rdx
   23cc1:	48 89 c7             	mov    rdi,rax
   23cc4:	ff d1                	call   rcx
   23cc6:	48 89 85 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],rax
   23ccd:	48 8b 8d b8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x348]
   23cd4:	8b 95 8c fa ff ff    	mov    edx,DWORD PTR [rbp-0x574]
   23cda:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
   23ce1:	48 01 c2             	add    rdx,rax
   23ce4:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23ceb:	48 89 c6             	mov    rsi,rax
   23cee:	48 89 d7             	mov    rdi,rdx
   23cf1:	ff d1                	call   rcx
   23cf3:	48 89 85 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rax
   23cfa:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   23d01:	48 89 c7             	mov    rdi,rax
   23d04:	e8 37 15 00 00       	call   25240 <Scene::Scene()>
   23d09:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
   23d10:	48 8b 8d a0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x560]
   23d17:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   23d1e:	48 83 c0 08          	add    rax,0x8
   23d22:	48 89 ce             	mov    rsi,rcx
   23d25:	48 89 c7             	mov    rdi,rax
   23d28:	e8 e7 e3 ff ff       	call   22114 <LoadSponza(RendererInterface*, Renderer*, Scene&)>
   23d2d:	48 8b 8d c8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x338]
   23d34:	48 8b 95 b8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x548]
   23d3b:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23d42:	48 89 d6             	mov    rsi,rdx
   23d45:	48 89 c7             	mov    rdi,rax
   23d48:	ff d1                	call   rcx
   23d4a:	48 8b 95 d8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x328]
   23d51:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
   23d58:	48 89 c7             	mov    rdi,rax
   23d5b:	ff d2                	call   rdx
   23d5d:	48 89 85 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],rax
   23d64:	48 8b 85 c8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x538]
   23d6b:	ba c0 00 00 00       	mov    edx,0xc0
   23d70:	be 00 00 00 00       	mov    esi,0x0
   23d75:	48 89 c7             	mov    rdi,rax
   23d78:	e8 34 b1 ff ff       	call   1eeb1 <MemSet(void*, signed char, unsigned int)>
   23d7d:	f3 0f 10 05 d7 8f 01 00 	movss  xmm0,DWORD PTR [rip+0x18fd7]        # 3cd5c <NANO_SEC+0x1a94>
   23d85:	f3 0f 11 85 50 fb ff ff 	movss  DWORD PTR [rbp-0x4b0],xmm0
   23d8d:	48 8d 95 50 fb ff ff 	lea    rdx,[rbp-0x4b0]
   23d94:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   23d9b:	48 89 d6             	mov    rsi,rdx
   23d9e:	48 89 c7             	mov    rdi,rax
   23da1:	e8 82 2e 00 00       	call   26c28 <glm::mat<4, 4, float, (glm::qualifier)0>::mat(float const&)>
   23da6:	48 8b 8d c8 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x538]
   23dad:	48 8b 85 10 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f0]
   23db4:	48 8b 95 18 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e8]
   23dbb:	48 89 01             	mov    QWORD PTR [rcx],rax
   23dbe:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   23dc2:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
   23dc9:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
   23dd0:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   23dd4:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   23dd8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
   23ddf:	48 8b 95 38 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c8]
   23de6:	48 89 41 20          	mov    QWORD PTR [rcx+0x20],rax
   23dea:	48 89 51 28          	mov    QWORD PTR [rcx+0x28],rdx
   23dee:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
   23df5:	48 8b 95 48 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1b8]
   23dfc:	48 89 41 30          	mov    QWORD PTR [rcx+0x30],rax
   23e00:	48 89 51 38          	mov    QWORD PTR [rcx+0x38],rdx
   23e04:	48 8b 95 e0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x320]
   23e0b:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
   23e12:	48 89 c7             	mov    rdi,rax
   23e15:	ff d2                	call   rdx
   23e17:	48 8b 95 e8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x318]
   23e1e:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
   23e25:	48 89 c7             	mov    rdi,rax
   23e28:	ff d2                	call   rdx
   23e2a:	48 8b 8d d0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x330]
   23e31:	48 8b 95 b8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x548]
   23e38:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23e3f:	48 89 d6             	mov    rsi,rdx
   23e42:	48 89 c7             	mov    rdi,rax
   23e45:	ff d1                	call   rcx
   23e47:	48 8b 8d c8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x338]
   23e4e:	48 8b 95 c0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x540]
   23e55:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23e5c:	48 89 d6             	mov    rsi,rdx
   23e5f:	48 89 c7             	mov    rdi,rax
   23e62:	ff d1                	call   rcx
   23e64:	48 8b 95 d8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x328]
   23e6b:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   23e72:	48 89 c7             	mov    rdi,rax
   23e75:	ff d2                	call   rdx
   23e77:	48 89 85 d0 fa ff ff 	mov    QWORD PTR [rbp-0x530],rax
   23e7e:	48 8b 85 d0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x530]
   23e85:	ba c0 00 00 00       	mov    edx,0xc0
   23e8a:	be 00 00 00 00       	mov    esi,0x0
   23e8f:	48 89 c7             	mov    rdi,rax
   23e92:	e8 1a b0 ff ff       	call   1eeb1 <MemSet(void*, signed char, unsigned int)>
   23e97:	f3 0f 10 05 bd 8e 01 00 	movss  xmm0,DWORD PTR [rip+0x18ebd]        # 3cd5c <NANO_SEC+0x1a94>
   23e9f:	f3 0f 11 85 50 fb ff ff 	movss  DWORD PTR [rbp-0x4b0],xmm0
   23ea7:	48 8d 95 50 fb ff ff 	lea    rdx,[rbp-0x4b0]
   23eae:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
   23eb5:	48 89 d6             	mov    rsi,rdx
   23eb8:	48 89 c7             	mov    rdi,rax
   23ebb:	e8 68 2d 00 00       	call   26c28 <glm::mat<4, 4, float, (glm::qualifier)0>::mat(float const&)>
   23ec0:	48 8b 8d d0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x530]
   23ec7:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   23ece:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
   23ed5:	48 89 01             	mov    QWORD PTR [rcx],rax
   23ed8:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   23edc:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
   23ee3:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
   23eea:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   23eee:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   23ef2:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
   23ef9:	48 8b 95 b8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x148]
   23f00:	48 89 41 20          	mov    QWORD PTR [rcx+0x20],rax
   23f04:	48 89 51 28          	mov    QWORD PTR [rcx+0x28],rdx
   23f08:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
   23f0f:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
   23f16:	48 89 41 30          	mov    QWORD PTR [rcx+0x30],rax
   23f1a:	48 89 51 38          	mov    QWORD PTR [rcx+0x38],rdx
   23f1e:	48 8b 95 e0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x320]
   23f25:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   23f2c:	48 89 c7             	mov    rdi,rax
   23f2f:	ff d2                	call   rdx
   23f31:	48 8b 95 e8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x318]
   23f38:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   23f3f:	48 89 c7             	mov    rdi,rax
   23f42:	ff d2                	call   rdx
   23f44:	48 8b 8d d0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x330]
   23f4b:	48 8b 95 c0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x540]
   23f52:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23f59:	48 89 d6             	mov    rsi,rdx
   23f5c:	48 89 c7             	mov    rdi,rax
   23f5f:	ff d1                	call   rcx
   23f61:	48 8b 8d f0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x310]
   23f68:	48 8b 95 b8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x548]
   23f6f:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23f76:	48 89 d6             	mov    rsi,rdx
   23f79:	48 89 c7             	mov    rdi,rax
   23f7c:	ff d1                	call   rcx
   23f7e:	48 8b 95 f8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x308]
   23f85:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   23f8c:	48 89 c7             	mov    rdi,rax
   23f8f:	ff d2                	call   rdx
   23f91:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
   23f98:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
   23f9f:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   23fa6:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
   23fad:	c6 85 6b fa ff ff 01 	mov    BYTE PTR [rbp-0x595],0x1
   23fb4:	c7 85 78 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x588],0x0
   23fbe:	48 8d 85 50 fe ff ff 	lea    rax,[rbp-0x1b0]
   23fc5:	f3 0f 10 1d ef 8d 01 00 	movss  xmm3,DWORD PTR [rip+0x18def]        # 3cdbc <NANO_SEC+0x1af4>
   23fcd:	f3 0f 10 15 eb 8d 01 00 	movss  xmm2,DWORD PTR [rip+0x18deb]        # 3cdc0 <NANO_SEC+0x1af8>
   23fd5:	f3 0f 10 0d e7 8d 01 00 	movss  xmm1,DWORD PTR [rip+0x18de7]        # 3cdc4 <NANO_SEC+0x1afc>
   23fdd:	f3 0f 10 05 e3 8d 01 00 	movss  xmm0,DWORD PTR [rip+0x18de3]        # 3cdc8 <NANO_SEC+0x1b00>
   23fe5:	48 89 c7             	mov    rdi,rax
   23fe8:	e8 df d2 ff ff       	call   212cc <PerspectiveMatrix(float, float, float, float)>
   23fed:	c7 85 74 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x58c],0x0
   23ff7:	83 bd 74 fa ff ff 00 	cmp    DWORD PTR [rbp-0x58c],0x0
   23ffe:	75 61                	jne    24061 <main+0x9b2>
   24000:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   24007:	48 89 85 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rax
   2400e:	c7 85 58 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a8],0x0
   24018:	c6 85 60 fb ff ff 01 	mov    BYTE PTR [rbp-0x4a0],0x1
   2401f:	f3 0f 10 05 a5 8d 01 00 	movss  xmm0,DWORD PTR [rip+0x18da5]        # 3cdcc <NANO_SEC+0x1b04>
   24027:	f3 0f 11 85 5c fb ff ff 	movss  DWORD PTR [rbp-0x4a4],xmm0
   2402f:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   24036:	48 83 ec 08          	sub    rsp,0x8
   2403a:	ff b5 60 fb ff ff    	push   QWORD PTR [rbp-0x4a0]
   24040:	ff b5 58 fb ff ff    	push   QWORD PTR [rbp-0x4a8]
   24046:	ff b5 50 fb ff ff    	push   QWORD PTR [rbp-0x4b0]
   2404c:	48 89 c7             	mov    rdi,rax
   2404f:	e8 b7 bf ff ff       	call   2000b <PushSound(SoundTable&, SoundInstance)>
   24054:	48 83 c4 20          	add    rsp,0x20
   24058:	83 85 74 fa ff ff 01 	add    DWORD PTR [rbp-0x58c],0x1
   2405f:	eb 96                	jmp    23ff7 <main+0x948>
   24061:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   24068:	48 83 c0 48          	add    rax,0x48
   2406c:	48 89 c7             	mov    rdi,rax
   2406f:	e8 5e 2c 00 00       	call   26cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>
   24074:	48 89 c2             	mov    rdx,rax
   24077:	48 89 d0             	mov    rax,rdx
   2407a:	48 01 c0             	add    rax,rax
   2407d:	48 01 d0             	add    rax,rdx
   24080:	48 c1 e0 02          	shl    rax,0x2
   24084:	48 8d 70 ff          	lea    rsi,[rax-0x1]
   24088:	48 89 b5 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],rsi
   2408f:	48 89 f0             	mov    rax,rsi
   24092:	48 83 c0 01          	add    rax,0x1
   24096:	49 89 c4             	mov    r12,rax
   24099:	41 bd 00 00 00 00    	mov    r13d,0x0
   2409f:	49 69 d5 80 01 00 00 	imul   rdx,r13,0x180
   240a6:	49 6b c4 00          	imul   rax,r12,0x0
   240aa:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   240ae:	b8 80 01 00 00       	mov    eax,0x180
   240b3:	49 f7 e4             	mul    r12
   240b6:	48 01 d1             	add    rcx,rdx
   240b9:	48 89 ca             	mov    rdx,rcx
   240bc:	48 89 f0             	mov    rax,rsi
   240bf:	48 8d 50 01          	lea    rdx,[rax+0x1]
   240c3:	48 89 d0             	mov    rax,rdx
   240c6:	48 01 c0             	add    rax,rax
   240c9:	48 01 d0             	add    rax,rdx
   240cc:	48 c1 e0 04          	shl    rax,0x4
   240d0:	48 89 f0             	mov    rax,rsi
   240d3:	48 83 c0 01          	add    rax,0x1
   240d7:	49 89 c6             	mov    r14,rax
   240da:	41 bf 00 00 00 00    	mov    r15d,0x0
   240e0:	49 69 d7 80 01 00 00 	imul   rdx,r15,0x180
   240e7:	49 6b c6 00          	imul   rax,r14,0x0
   240eb:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   240ef:	b8 80 01 00 00       	mov    eax,0x180
   240f4:	49 f7 e6             	mul    r14
   240f7:	48 01 d1             	add    rcx,rdx
   240fa:	48 89 ca             	mov    rdx,rcx
   240fd:	48 89 f0             	mov    rax,rsi
   24100:	48 8d 50 01          	lea    rdx,[rax+0x1]
   24104:	48 89 d0             	mov    rax,rdx
   24107:	48 01 c0             	add    rax,rax
   2410a:	48 01 d0             	add    rax,rdx
   2410d:	48 c1 e0 04          	shl    rax,0x4
   24111:	48 89 c2             	mov    rdx,rax
   24114:	b8 10 00 00 00       	mov    eax,0x10
   24119:	48 83 e8 01          	sub    rax,0x1
   2411d:	48 01 d0             	add    rax,rdx
   24120:	bb 10 00 00 00       	mov    ebx,0x10
   24125:	ba 00 00 00 00       	mov    edx,0x0
   2412a:	48 f7 f3             	div    rbx
   2412d:	48 6b c0 10          	imul   rax,rax,0x10
   24131:	48 29 c4             	sub    rsp,rax
   24134:	48 89 e0             	mov    rax,rsp
   24137:	48 83 c0 03          	add    rax,0x3
   2413b:	48 c1 e8 02          	shr    rax,0x2
   2413f:	48 c1 e0 02          	shl    rax,0x2
   24143:	48 89 85 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],rax
   2414a:	48 85 f6             	test   rsi,rsi
   2414d:	78 06                	js     24155 <main+0xaa6>
   2414f:	48 83 ee 01          	sub    rsi,0x1
   24153:	eb f5                	jmp    2414a <main+0xa9b>
   24155:	b8 05 00 00 00       	mov    eax,0x5
   2415a:	48 85 c0             	test   rax,rax
   2415d:	78 06                	js     24165 <main+0xab6>
   2415f:	48 83 e8 01          	sub    rax,0x1
   24163:	eb f5                	jmp    2415a <main+0xaab>
   24165:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   2416c:	48 83 c0 18          	add    rax,0x18
   24170:	48 89 c7             	mov    rdi,rax
   24173:	e8 2a 20 00 00       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   24178:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   2417c:	48 89 95 e8 fa ff ff 	mov    QWORD PTR [rbp-0x518],rdx
   24183:	48 89 d0             	mov    rax,rdx
   24186:	48 83 c0 01          	add    rax,0x1
   2418a:	48 89 85 b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rax
   24191:	48 c7 85 b8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x648],0x0
   2419c:	48 89 d0             	mov    rax,rdx
   2419f:	48 83 c0 01          	add    rax,0x1
   241a3:	48 89 85 a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rax
   241aa:	48 c7 85 a8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x658],0x0
   241b5:	48 89 d0             	mov    rax,rdx
   241b8:	48 83 c0 01          	add    rax,0x1
   241bc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   241c4:	b8 10 00 00 00       	mov    eax,0x10
   241c9:	48 83 e8 01          	sub    rax,0x1
   241cd:	48 01 d0             	add    rax,rdx
   241d0:	bb 10 00 00 00       	mov    ebx,0x10
   241d5:	ba 00 00 00 00       	mov    edx,0x0
   241da:	48 f7 f3             	div    rbx
   241dd:	48 6b c0 10          	imul   rax,rax,0x10
   241e1:	48 29 c4             	sub    rsp,rax
   241e4:	48 89 e0             	mov    rax,rsp
   241e7:	48 83 c0 03          	add    rax,0x3
   241eb:	48 c1 e8 02          	shr    rax,0x2
   241ef:	48 c1 e0 02          	shl    rax,0x2
   241f3:	48 89 85 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rax
   241fa:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   24201:	48 89 c7             	mov    rdi,rax
   24204:	e8 fd 2a 00 00       	call   26d06 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   24209:	48 83 e8 01          	sub    rax,0x1
   2420d:	48 89 85 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rax
   24214:	48 89 c2             	mov    rdx,rax
   24217:	48 83 c2 01          	add    rdx,0x1
   2421b:	48 89 95 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rdx
   24222:	48 c7 85 98 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x668],0x0
   2422d:	48 89 c2             	mov    rdx,rax
   24230:	48 83 c2 01          	add    rdx,0x1
   24234:	48 89 95 80 f9 ff ff 	mov    QWORD PTR [rbp-0x680],rdx
   2423b:	48 c7 85 88 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x678],0x0
   24246:	48 83 c0 01          	add    rax,0x1
   2424a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24252:	b8 10 00 00 00       	mov    eax,0x10
   24257:	48 83 e8 01          	sub    rax,0x1
   2425b:	48 01 d0             	add    rax,rdx
   2425e:	bb 10 00 00 00       	mov    ebx,0x10
   24263:	ba 00 00 00 00       	mov    edx,0x0
   24268:	48 f7 f3             	div    rbx
   2426b:	48 6b c0 10          	imul   rax,rax,0x10
   2426f:	48 29 c4             	sub    rsp,rax
   24272:	48 89 e0             	mov    rax,rsp
   24275:	48 83 c0 03          	add    rax,0x3
   24279:	48 c1 e8 02          	shr    rax,0x2
   2427d:	48 c1 e0 02          	shl    rax,0x2
   24281:	48 89 85 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rax
   24288:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   2428f:	48 83 c0 30          	add    rax,0x30
   24293:	48 89 c7             	mov    rdi,rax
   24296:	e8 8f 2a 00 00       	call   26d2a <std::vector<Transform, std::allocator<Transform> >::size() const>
   2429b:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   2429f:	48 89 8d 08 fb ff ff 	mov    QWORD PTR [rbp-0x4f8],rcx
   242a6:	48 89 c8             	mov    rax,rcx
   242a9:	48 83 c0 01          	add    rax,0x1
   242ad:	48 89 85 10 fa ff ff 	mov    QWORD PTR [rbp-0x5f0],rax
   242b4:	48 c7 85 18 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5e8],0x0
   242bf:	4c 8b b5 10 fa ff ff 	mov    r14,QWORD PTR [rbp-0x5f0]
   242c6:	4c 8b bd 18 fa ff ff 	mov    r15,QWORD PTR [rbp-0x5e8]
   242cd:	49 69 d7 20 01 00 00 	imul   rdx,r15,0x120
   242d4:	49 6b c6 00          	imul   rax,r14,0x0
   242d8:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   242dc:	b8 20 01 00 00       	mov    eax,0x120
   242e1:	49 f7 e6             	mul    r14
   242e4:	48 01 d6             	add    rsi,rdx
   242e7:	48 89 f2             	mov    rdx,rsi
   242ea:	48 89 c8             	mov    rax,rcx
   242ed:	48 8d 50 01          	lea    rdx,[rax+0x1]
   242f1:	48 89 d0             	mov    rax,rdx
   242f4:	48 c1 e0 03          	shl    rax,0x3
   242f8:	48 01 d0             	add    rax,rdx
   242fb:	48 c1 e0 02          	shl    rax,0x2
   242ff:	48 89 c8             	mov    rax,rcx
   24302:	48 83 c0 01          	add    rax,0x1
   24306:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
   2430d:	48 c7 85 08 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5f8],0x0
   24318:	4c 8b 9d 00 fa ff ff 	mov    r11,QWORD PTR [rbp-0x600]
   2431f:	4c 8b a5 08 fa ff ff 	mov    r12,QWORD PTR [rbp-0x5f8]
   24326:	49 69 d4 20 01 00 00 	imul   rdx,r12,0x120
   2432d:	49 6b c3 00          	imul   rax,r11,0x0
   24331:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   24335:	b8 20 01 00 00       	mov    eax,0x120
   2433a:	49 f7 e3             	mul    r11
   2433d:	48 01 d6             	add    rsi,rdx
   24340:	48 89 f2             	mov    rdx,rsi
   24343:	48 89 c8             	mov    rax,rcx
   24346:	48 8d 50 01          	lea    rdx,[rax+0x1]
   2434a:	48 89 d0             	mov    rax,rdx
   2434d:	48 c1 e0 03          	shl    rax,0x3
   24351:	48 01 d0             	add    rax,rdx
   24354:	48 c1 e0 02          	shl    rax,0x2
   24358:	48 89 c2             	mov    rdx,rax
   2435b:	b8 10 00 00 00       	mov    eax,0x10
   24360:	48 83 e8 01          	sub    rax,0x1
   24364:	48 01 d0             	add    rax,rdx
   24367:	bb 10 00 00 00       	mov    ebx,0x10
   2436c:	ba 00 00 00 00       	mov    edx,0x0
   24371:	48 f7 f3             	div    rbx
   24374:	48 6b c0 10          	imul   rax,rax,0x10
   24378:	48 29 c4             	sub    rsp,rax
   2437b:	48 89 e0             	mov    rax,rsp
   2437e:	48 83 c0 03          	add    rax,0x3
   24382:	48 c1 e8 02          	shr    rax,0x2
   24386:	48 c1 e0 02          	shl    rax,0x2
   2438a:	48 89 85 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],rax
   24391:	48 85 c9             	test   rcx,rcx
   24394:	78 06                	js     2439c <main+0xced>
   24396:	48 83 e9 01          	sub    rcx,0x1
   2439a:	eb f5                	jmp    24391 <main+0xce2>
   2439c:	0f b6 85 f0 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x210]
   243a3:	84 c0                	test   al,al
   243a5:	0f 84 a2 06 00 00    	je     24a4d <main+0x139e>
   243ab:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
   243b2:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   243b9:	48 89 c7             	mov    rdi,rax
   243bc:	ff d2                	call   rdx
   243be:	84 c0                	test   al,al
   243c0:	0f 84 0c 05 00 00    	je     248d2 <main+0x1223>
   243c6:	48 8b 8d c8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x338]
   243cd:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   243d4:	48 98                	cdqe   
   243d6:	48 8b 94 c5 00 fe ff ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x200]
   243de:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   243e5:	48 89 d6             	mov    rsi,rdx
   243e8:	48 89 c7             	mov    rdi,rax
   243eb:	ff d1                	call   rcx
   243ed:	48 8b 95 d8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x328]
   243f4:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   243fb:	48 98                	cdqe   
   243fd:	48 8b 84 c5 00 fe ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x200]
   24405:	48 89 c7             	mov    rdi,rax
   24408:	ff d2                	call   rdx
   2440a:	48 89 85 18 fb ff ff 	mov    QWORD PTR [rbp-0x4e8],rax
   24411:	48 8d 85 24 fb ff ff 	lea    rax,[rbp-0x4dc]
   24418:	b9 00 00 00 00       	mov    ecx,0x0
   2441d:	ba 01 00 00 00       	mov    edx,0x1
   24422:	be 00 00 00 00       	mov    esi,0x0
   24427:	48 89 c7             	mov    rdi,rax
   2442a:	e8 2b 0c 00 00       	call   2505a <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, int>(int, int, int)>
   2442f:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   24436:	48 8d 90 94 01 00 00 	lea    rdx,[rax+0x194]
   2443d:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   24444:	48 05 88 01 00 00    	add    rax,0x188
   2444a:	48 89 d6             	mov    rsi,rdx
   2444d:	48 89 c7             	mov    rdi,rax
   24450:	e8 59 14 00 00       	call   258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   24455:	66 48 0f 7e c0       	movq   rax,xmm0
   2445a:	0f 28 c1             	movaps xmm0,xmm1
   2445d:	48 89 85 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rax
   24464:	f3 0f 11 85 58 fb ff ff 	movss  DWORD PTR [rbp-0x4a8],xmm0
   2446c:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
   24473:	48 8b b5 24 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x4dc]
   2447a:	f3 0f 10 95 2c fb ff ff 	movss  xmm2,DWORD PTR [rbp-0x4d4]
   24482:	48 8b 8d 50 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4b0]
   24489:	f3 0f 10 85 58 fb ff ff 	movss  xmm0,DWORD PTR [rbp-0x4a8]
   24491:	48 8b 95 c8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x238]
   24498:	f3 0f 10 8d d0 fd ff ff 	movss  xmm1,DWORD PTR [rbp-0x230]
   244a0:	66 48 0f 6e e6       	movq   xmm4,rsi
   244a5:	0f 28 ea             	movaps xmm5,xmm2
   244a8:	66 48 0f 6e d1       	movq   xmm2,rcx
   244ad:	0f 28 d8             	movaps xmm3,xmm0
   244b0:	66 48 0f 6e c2       	movq   xmm0,rdx
   244b5:	48 89 c7             	mov    rdi,rax
   244b8:	e8 92 cb ff ff       	call   2104f <LookAt(glm::vec<3, float, (glm::qualifier)0>, glm::vec<3, float, (glm::qualifier)0>, glm::vec<3, float, (glm::qualifier)0>)>
   244bd:	48 8b 9d 18 fb ff ff 	mov    rbx,QWORD PTR [rbp-0x4e8]
   244c4:	48 8d 85 20 fa ff ff 	lea    rax,[rbp-0x5e0]
   244cb:	48 8d 95 90 fe ff ff 	lea    rdx,[rbp-0x170]
   244d2:	48 8d 8d 50 fe ff ff 	lea    rcx,[rbp-0x1b0]
   244d9:	48 89 ce             	mov    rsi,rcx
   244dc:	48 89 c7             	mov    rdi,rax
   244df:	e8 d3 28 00 00       	call   26db7 <glm::mat<4, 4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::mat<4, 4, float, (glm::qualifier)0> const&, glm::mat<4, 4, float, (glm::qualifier)0> const&)>
   244e4:	48 8b 85 20 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5e0]
   244eb:	48 8b 95 28 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5d8]
   244f2:	48 89 03             	mov    QWORD PTR [rbx],rax
   244f5:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
   244f9:	48 8b 85 30 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d0]
   24500:	48 8b 95 38 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5c8]
   24507:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
   2450b:	48 89 53 18          	mov    QWORD PTR [rbx+0x18],rdx
   2450f:	48 8b 85 40 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5c0]
   24516:	48 8b 95 48 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5b8]
   2451d:	48 89 43 20          	mov    QWORD PTR [rbx+0x20],rax
   24521:	48 89 53 28          	mov    QWORD PTR [rbx+0x28],rdx
   24525:	48 8b 85 50 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5b0]
   2452c:	48 8b 95 58 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5a8]
   24533:	48 89 43 30          	mov    QWORD PTR [rbx+0x30],rax
   24537:	48 89 53 38          	mov    QWORD PTR [rbx+0x38],rdx
   2453b:	4c 8d 8d d0 fe ff ff 	lea    r9,[rbp-0x130]
   24542:	49 83 c1 50          	add    r9,0x50
   24546:	4c 8d 85 d0 fe ff ff 	lea    r8,[rbp-0x130]
   2454d:	49 83 c0 40          	add    r8,0x40
   24551:	48 8d 8d d0 fe ff ff 	lea    rcx,[rbp-0x130]
   24558:	48 83 c1 30          	add    rcx,0x30
   2455c:	48 8d bd d0 fe ff ff 	lea    rdi,[rbp-0x130]
   24563:	48 83 c7 20          	add    rdi,0x20
   24567:	48 8d b5 d0 fe ff ff 	lea    rsi,[rbp-0x130]
   2456e:	48 83 c6 10          	add    rsi,0x10
   24572:	48 8d 9d d0 fe ff ff 	lea    rbx,[rbp-0x130]
   24579:	48 8b 85 18 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4e8]
   24580:	48 83 ec 40          	sub    rsp,0x40
   24584:	48 89 e2             	mov    rdx,rsp
   24587:	4c 8b 10             	mov    r10,QWORD PTR [rax]
   2458a:	4c 8b 58 08          	mov    r11,QWORD PTR [rax+0x8]
   2458e:	4c 89 12             	mov    QWORD PTR [rdx],r10
   24591:	4c 89 5a 08          	mov    QWORD PTR [rdx+0x8],r11
   24595:	4c 8b 50 10          	mov    r10,QWORD PTR [rax+0x10]
   24599:	4c 8b 58 18          	mov    r11,QWORD PTR [rax+0x18]
   2459d:	4c 89 52 10          	mov    QWORD PTR [rdx+0x10],r10
   245a1:	4c 89 5a 18          	mov    QWORD PTR [rdx+0x18],r11
   245a5:	4c 8b 50 20          	mov    r10,QWORD PTR [rax+0x20]
   245a9:	4c 8b 58 28          	mov    r11,QWORD PTR [rax+0x28]
   245ad:	4c 89 52 20          	mov    QWORD PTR [rdx+0x20],r10
   245b1:	4c 89 5a 28          	mov    QWORD PTR [rdx+0x28],r11
   245b5:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
   245b9:	4c 8b 58 38          	mov    r11,QWORD PTR [rax+0x38]
   245bd:	4c 89 52 30          	mov    QWORD PTR [rdx+0x30],r10
   245c1:	4c 89 5a 38          	mov    QWORD PTR [rdx+0x38],r11
   245c5:	48 89 fa             	mov    rdx,rdi
   245c8:	48 89 df             	mov    rdi,rbx
   245cb:	e8 08 ea ff ff       	call   22fd8 <extract_planes_from_projmat(glm::mat<4, 4, float, (glm::qualifier)0>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)>
   245d0:	48 83 c4 40          	add    rsp,0x40
   245d4:	48 8b 95 e0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x320]
   245db:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   245e2:	48 98                	cdqe   
   245e4:	48 8b 84 c5 00 fe ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x200]
   245ec:	48 89 c7             	mov    rdi,rax
   245ef:	ff d2                	call   rdx
   245f1:	c7 85 70 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x590],0x0
   245fb:	c7 85 6c fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x594],0x0
   24605:	8b 9d 6c fa ff ff    	mov    ebx,DWORD PTR [rbp-0x594]
   2460b:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   24612:	48 83 c0 48          	add    rax,0x48
   24616:	48 89 c7             	mov    rdi,rax
   24619:	e8 b4 26 00 00       	call   26cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>
   2461e:	48 39 c3             	cmp    rbx,rax
   24621:	0f 92 c0             	setb   al
   24624:	84 c0                	test   al,al
   24626:	0f 84 af 01 00 00    	je     247db <main+0x112c>
   2462c:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   24632:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
   24639:	48 83 c2 48          	add    rdx,0x48
   2463d:	48 89 c6             	mov    rsi,rax
   24640:	48 89 d7             	mov    rdi,rdx
   24643:	e8 f4 2e 00 00       	call   2753c <std::vector<AABB, std::allocator<AABB> >::operator[](unsigned long)>
   24648:	48 89 c2             	mov    rdx,rax
   2464b:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]
   24652:	48 89 d6             	mov    rsi,rdx
   24655:	48 89 c7             	mov    rdi,rax
   24658:	e8 b6 ec ff ff       	call   23313 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)>
   2465d:	84 c0                	test   al,al
   2465f:	0f 84 6a 01 00 00    	je     247cf <main+0x1120>
   24665:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   2466b:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
   24672:	48 83 c2 18          	add    rdx,0x18
   24676:	48 89 c6             	mov    rsi,rax
   24679:	48 89 d7             	mov    rdi,rdx
   2467c:	e8 e5 2e 00 00       	call   27566 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>
   24681:	8b 08                	mov    ecx,DWORD PTR [rax]
   24683:	48 8b 85 f0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x510]
   2468a:	8b 95 70 fa ff ff    	mov    edx,DWORD PTR [rbp-0x590]
   24690:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
   24693:	8b 95 6c fa ff ff    	mov    edx,DWORD PTR [rbp-0x594]
   24699:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   246a0:	48 89 d6             	mov    rsi,rdx
   246a3:	48 89 c7             	mov    rdi,rax
   246a6:	e8 db 2e 00 00       	call   27586 <std::vector<Mesh, std::allocator<Mesh> >::operator[](unsigned long)>
   246ab:	48 8b 95 00 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x500]
   246b2:	8b 8d 70 fa ff ff    	mov    ecx,DWORD PTR [rbp-0x590]
   246b8:	8b 00                	mov    eax,DWORD PTR [rax]
   246ba:	89 04 8a             	mov    DWORD PTR [rdx+rcx*4],eax
   246bd:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   246c3:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
   246ca:	48 83 c2 30          	add    rdx,0x30
   246ce:	48 89 c6             	mov    rsi,rax
   246d1:	48 89 d7             	mov    rdi,rdx
   246d4:	e8 cd 2e 00 00       	call   275a6 <std::vector<Transform, std::allocator<Transform> >::operator[](unsigned long)>
   246d9:	48 89 c2             	mov    rdx,rax
   246dc:	48 8b b5 10 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x4f0]
   246e3:	8b 8d 70 fa ff ff    	mov    ecx,DWORD PTR [rbp-0x590]
   246e9:	48 89 c8             	mov    rax,rcx
   246ec:	48 c1 e0 03          	shl    rax,0x3
   246f0:	48 01 c8             	add    rax,rcx
   246f3:	48 c1 e0 02          	shl    rax,0x2
   246f7:	48 01 f0             	add    rax,rsi
   246fa:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   246fd:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
   24701:	48 89 08             	mov    QWORD PTR [rax],rcx
   24704:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
   24708:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   2470c:	48 8b 5a 18          	mov    rbx,QWORD PTR [rdx+0x18]
   24710:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
   24714:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
   24718:	8b 52 20             	mov    edx,DWORD PTR [rdx+0x20]
   2471b:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   2471e:	48 8d 85 24 fb ff ff 	lea    rax,[rbp-0x4dc]
   24725:	b9 00 00 00 00       	mov    ecx,0x0
   2472a:	ba 00 00 00 00       	mov    edx,0x0
   2472f:	be 01 00 00 00       	mov    esi,0x1
   24734:	48 89 c7             	mov    rdi,rax
   24737:	e8 1e 09 00 00       	call   2505a <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, int>(int, int, int)>
   2473c:	8b 95 70 fa ff ff    	mov    edx,DWORD PTR [rbp-0x590]
   24742:	89 d0                	mov    eax,edx
   24744:	01 c0                	add    eax,eax
   24746:	01 d0                	add    eax,edx
   24748:	c1 e0 02             	shl    eax,0x2
   2474b:	89 c2                	mov    edx,eax
   2474d:	48 89 d0             	mov    rax,rdx
   24750:	48 01 c0             	add    rax,rax
   24753:	48 01 d0             	add    rax,rdx
   24756:	48 c1 e0 04          	shl    rax,0x4
   2475a:	48 89 c2             	mov    rdx,rax
   2475d:	48 8b 85 e0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x520]
   24764:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   24768:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   2476e:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
   24775:	48 83 c2 48          	add    rdx,0x48
   24779:	48 89 c6             	mov    rsi,rax
   2477c:	48 89 d7             	mov    rdi,rdx
   2477f:	e8 b8 2d 00 00       	call   2753c <std::vector<AABB, std::allocator<AABB> >::operator[](unsigned long)>
   24784:	48 89 c1             	mov    rcx,rax
   24787:	48 8b bd 24 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x4dc]
   2478e:	f3 0f 10 8d 2c fb ff ff 	movss  xmm1,DWORD PTR [rbp-0x4d4]
   24796:	48 83 ec 08          	sub    rsp,0x8
   2479a:	48 83 ec 18          	sub    rsp,0x18
   2479e:	48 89 e6             	mov    rsi,rsp
   247a1:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   247a4:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   247a8:	48 89 06             	mov    QWORD PTR [rsi],rax
   247ab:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
   247af:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   247b3:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
   247b7:	66 48 0f 6e c7       	movq   xmm0,rdi
   247bc:	48 89 df             	mov    rdi,rbx
   247bf:	e8 6e d0 ff ff       	call   21832 <MakeLinesFromAABB(AABB, Line*, glm::vec<3, float, (glm::qualifier)0>)>
   247c4:	48 83 c4 20          	add    rsp,0x20
   247c8:	83 85 70 fa ff ff 01 	add    DWORD PTR [rbp-0x590],0x1
   247cf:	83 85 6c fa ff ff 01 	add    DWORD PTR [rbp-0x594],0x1
   247d6:	e9 2a fe ff ff       	jmp    24605 <main+0xf56>
   247db:	4c 8b 8d 60 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a0]
   247e2:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   247e9:	48 98                	cdqe   
   247eb:	48 8b 84 c5 00 fe ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x200]
   247f3:	8b bd 70 fa ff ff    	mov    edi,DWORD PTR [rbp-0x590]
   247f9:	48 8b 8d 10 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f0]
   24800:	48 8b 95 f0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x510]
   24807:	48 8b b5 00 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x500]
   2480e:	41 89 f8             	mov    r8d,edi
   24811:	48 89 c7             	mov    rdi,rax
   24814:	41 ff d1             	call   r9
   24817:	4c 8b 85 58 fd ff ff 	mov    r8,QWORD PTR [rbp-0x2a8]
   2481e:	8b 95 70 fa ff ff    	mov    edx,DWORD PTR [rbp-0x590]
   24824:	89 d0                	mov    eax,edx
   24826:	01 c0                	add    eax,eax
   24828:	01 d0                	add    eax,edx
   2482a:	c1 e0 02             	shl    eax,0x2
   2482d:	89 c2                	mov    edx,eax
   2482f:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   24836:	48 98                	cdqe   
   24838:	48 8b 84 c5 00 fe ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x200]
   24840:	48 8b 8d e0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x520]
   24847:	48 89 ce             	mov    rsi,rcx
   2484a:	48 89 c7             	mov    rdi,rax
   2484d:	41 ff d0             	call   r8
   24850:	48 8b 95 e8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x318]
   24857:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   2485e:	48 98                	cdqe   
   24860:	48 8b 84 c5 00 fe ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x200]
   24868:	48 89 c7             	mov    rdi,rax
   2486b:	ff d2                	call   rdx
   2486d:	48 8b 8d d0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x330]
   24874:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   2487b:	48 98                	cdqe   
   2487d:	48 8b 94 c5 00 fe ff ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x200]
   24885:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   2488c:	48 89 d6             	mov    rsi,rdx
   2488f:	48 89 c7             	mov    rdi,rax
   24892:	ff d1                	call   rcx
   24894:	48 8b 8d f0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x310]
   2489b:	0f be 85 6b fa ff ff 	movsx  eax,BYTE PTR [rbp-0x595]
   248a2:	48 98                	cdqe   
   248a4:	48 8b 94 c5 00 fe ff ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x200]
   248ac:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   248b3:	48 89 d6             	mov    rsi,rdx
   248b6:	48 89 c7             	mov    rdi,rax
   248b9:	ff d1                	call   rcx
   248bb:	0f b6 85 6b fa ff ff 	movzx  eax,BYTE PTR [rbp-0x595]
   248c2:	83 c0 01             	add    eax,0x1
   248c5:	88 85 6b fa ff ff    	mov    BYTE PTR [rbp-0x595],al
   248cb:	80 a5 6b fa ff ff 01 	and    BYTE PTR [rbp-0x595],0x1
   248d2:	48 8d 95 70 fb ff ff 	lea    rdx,[rbp-0x490]
   248d9:	48 8d 85 a0 fb ff ff 	lea    rax,[rbp-0x460]
   248e0:	48 89 d6             	mov    rsi,rdx
   248e3:	48 89 c7             	mov    rdi,rax
   248e6:	e8 ce c0 ff ff       	call   209b9 <PlaySounds(SoundSystemState&, SoundTable&)>
   248eb:	48 8b 95 98 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x368]
   248f2:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   248f9:	48 89 c7             	mov    rdi,rax
   248fc:	ff d2                	call   rdx
   248fe:	48 8b 0d cb 84 01 00 	mov    rcx,QWORD PTR [rip+0x184cb]        # 3cdd0 <NANO_SEC+0x1b08>
   24905:	48 8d 85 24 fb ff ff 	lea    rax,[rbp-0x4dc]
   2490c:	ba 00 00 00 00       	mov    edx,0x0
   24911:	66 48 0f 6e c1       	movq   xmm0,rcx
   24916:	be 00 00 00 00       	mov    esi,0x0
   2491b:	48 89 c7             	mov    rdi,rax
   2491e:	e8 99 13 00 00       	call   25cbc <glm::vec<3, float, (glm::qualifier)0>::vec<int, double, int>(int, double, int)>
   24923:	48 8d 85 24 fb ff ff 	lea    rax,[rbp-0x4dc]
   2492a:	48 8d 95 40 fc ff ff 	lea    rdx,[rbp-0x3c0]
   24931:	48 81 c2 a0 01 00 00 	add    rdx,0x1a0
   24938:	48 89 c6             	mov    rsi,rax
   2493b:	48 89 d7             	mov    rdi,rdx
   2493e:	e8 0d 05 00 00       	call   24e50 <glm::vec<3, float, (glm::qualifier)0>& glm::vec<3, float, (glm::qualifier)0>::operator+=<float>(glm::vec<3, float, (glm::qualifier)0> const&)>
   24943:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   2494a:	48 8d 90 a0 01 00 00 	lea    rdx,[rax+0x1a0]
   24951:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   24958:	48 05 88 01 00 00    	add    rax,0x188
   2495e:	48 89 d6             	mov    rsi,rdx
   24961:	48 89 c7             	mov    rdi,rax
   24964:	e8 e7 04 00 00       	call   24e50 <glm::vec<3, float, (glm::qualifier)0>& glm::vec<3, float, (glm::qualifier)0>::operator+=<float>(glm::vec<3, float, (glm::qualifier)0> const&)>
   24969:	f3 0f 10 8d cc fd ff ff 	movss  xmm1,DWORD PTR [rbp-0x234]
   24971:	f3 0f 10 05 2b 84 01 00 	movss  xmm0,DWORD PTR [rip+0x1842b]        # 3cda4 <NANO_SEC+0x1adc>
   24979:	0f 2f c1             	comiss xmm0,xmm1
   2497c:	76 66                	jbe    249e4 <main+0x1335>
   2497e:	66 0f ef c0          	pxor   xmm0,xmm0
   24982:	f3 0f 11 85 e4 fd ff ff 	movss  DWORD PTR [rbp-0x21c],xmm0
   2498a:	f3 0f 10 85 e0 fd ff ff 	movss  xmm0,DWORD PTR [rbp-0x220]
   24992:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   24996:	f2 0f 10 0d 3a 84 01 00 	movsd  xmm1,QWORD PTR [rip+0x1843a]        # 3cdd8 <NANO_SEC+0x1b10>
   2499e:	f2 0f 5e c1          	divsd  xmm0,xmm1
   249a2:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   249a6:	f3 0f 11 85 e0 fd ff ff 	movss  DWORD PTR [rbp-0x220],xmm0
   249ae:	f3 0f 10 85 e8 fd ff ff 	movss  xmm0,DWORD PTR [rbp-0x218]
   249b6:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   249ba:	f2 0f 10 0d 16 84 01 00 	movsd  xmm1,QWORD PTR [rip+0x18416]        # 3cdd8 <NANO_SEC+0x1b10>
   249c2:	f2 0f 5e c1          	divsd  xmm0,xmm1
   249c6:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   249ca:	f3 0f 11 85 e8 fd ff ff 	movss  DWORD PTR [rbp-0x218],xmm0
   249d2:	f3 0f 10 05 ca 83 01 00 	movss  xmm0,DWORD PTR [rip+0x183ca]        # 3cda4 <NANO_SEC+0x1adc>
   249da:	f3 0f 11 85 cc fd ff ff 	movss  DWORD PTR [rbp-0x234],xmm0
   249e2:	eb 48                	jmp    24a2c <main+0x137d>
   249e4:	f3 0f 10 85 e0 fd ff ff 	movss  xmm0,DWORD PTR [rbp-0x220]
   249ec:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   249f0:	f2 0f 10 0d e8 83 01 00 	movsd  xmm1,QWORD PTR [rip+0x183e8]        # 3cde0 <NANO_SEC+0x1b18>
   249f8:	f2 0f 5e c1          	divsd  xmm0,xmm1
   249fc:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   24a00:	f3 0f 11 85 e0 fd ff ff 	movss  DWORD PTR [rbp-0x220],xmm0
   24a08:	f3 0f 10 85 e8 fd ff ff 	movss  xmm0,DWORD PTR [rbp-0x218]
   24a10:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   24a14:	f2 0f 10 0d c4 83 01 00 	movsd  xmm1,QWORD PTR [rip+0x183c4]        # 3cde0 <NANO_SEC+0x1b18>
   24a1c:	f2 0f 5e c1          	divsd  xmm0,xmm1
   24a20:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   24a24:	f3 0f 11 85 e8 fd ff ff 	movss  DWORD PTR [rbp-0x218],xmm0
   24a2c:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   24a33:	48 05 88 01 00 00    	add    rax,0x188
   24a39:	48 89 c7             	mov    rdi,rax
   24a3c:	e8 e9 c1 ff ff       	call   20c2a <MoveCameraAlong(Camera&)>
   24a41:	83 85 78 fa ff ff 01 	add    DWORD PTR [rbp-0x588],0x1
   24a48:	e9 4f f9 ff ff       	jmp    2439c <main+0xced>
   24a4d:	48 8b 8d c0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x340]
   24a54:	48 8b 95 c0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x540]
   24a5b:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   24a62:	48 89 d6             	mov    rsi,rdx
   24a65:	48 89 c7             	mov    rdi,rax
   24a68:	ff d1                	call   rcx
   24a6a:	48 8b 8d c0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x340]
   24a71:	48 8b 95 b8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x548]
   24a78:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   24a7f:	48 89 d6             	mov    rsi,rdx
   24a82:	48 89 c7             	mov    rdi,rax
   24a85:	ff d1                	call   rcx
   24a87:	48 8b 95 70 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x390]
   24a8e:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   24a95:	48 89 c7             	mov    rdi,rax
   24a98:	ff d2                	call   rdx
   24a9a:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
   24aa1:	48 83 c0 08          	add    rax,0x8
   24aa5:	48 89 c7             	mov    rdi,rax
   24aa8:	e8 17 b0 ff ff       	call   1fac4 <UnloadRendererInterface(RendererInterface&)>
   24aad:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
   24ab4:	48 89 c7             	mov    rdi,rax
   24ab7:	e8 c4 fa fd ff       	call   4580 <snd_pcm_drain@plt>
   24abc:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
   24ac3:	48 89 c7             	mov    rdi,rax
   24ac6:	e8 85 fa fd ff       	call   4550 <snd_pcm_close@plt>
   24acb:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   24ad2:	48 89 c7             	mov    rdi,rax
   24ad5:	e8 26 fa fd ff       	call   4500 <free@plt>
   24ada:	bb 00 00 00 00       	mov    ebx,0x0
   24adf:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   24ae6:	48 89 c7             	mov    rdi,rax
   24ae9:	e8 9e 07 00 00       	call   2528c <Scene::~Scene()>
   24aee:	48 8b a5 78 f9 ff ff 	mov    rsp,QWORD PTR [rbp-0x688]
   24af5:	89 d8                	mov    eax,ebx
   24af7:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   24afb:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   24b04:	74 24                	je     24b2a <main+0x147b>
   24b06:	eb 1d                	jmp    24b25 <main+0x1476>
   24b08:	48 89 c3             	mov    rbx,rax
   24b0b:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   24b12:	48 89 c7             	mov    rdi,rax
   24b15:	e8 72 07 00 00       	call   2528c <Scene::~Scene()>
   24b1a:	48 89 d8             	mov    rax,rbx
   24b1d:	48 89 c7             	mov    rdi,rax
   24b20:	e8 0b fc fd ff       	call   4730 <_Unwind_Resume@plt>
   24b25:	e8 86 f9 fd ff       	call   44b0 <__stack_chk_fail@plt>
   24b2a:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
   24b2e:	5b                   	pop    rbx
   24b2f:	41 5c                	pop    r12
   24b31:	41 5d                	pop    r13
   24b33:	41 5e                	pop    r14
   24b35:	41 5f                	pop    r15
   24b37:	5d                   	pop    rbp
   24b38:	c3                   	ret    

0000000000024b39 <__static_initialization_and_destruction_0(int, int)>:
   24b39:	55                   	push   rbp
   24b3a:	48 89 e5             	mov    rbp,rsp
   24b3d:	48 83 ec 10          	sub    rsp,0x10
   24b41:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   24b44:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   24b47:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   24b4b:	75 32                	jne    24b7f <__static_initialization_and_destruction_0(int, int)+0x46>
   24b4d:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
   24b54:	75 29                	jne    24b7f <__static_initialization_and_destruction_0(int, int)+0x46>
   24b56:	48 8d 3d e3 6b 02 00 	lea    rdi,[rip+0x26be3]        # 4b740 <std::__ioinit>
   24b5d:	e8 fe fa fd ff       	call   4660 <std::ios_base::Init::Init()@plt>
   24b62:	48 8d 15 9f 68 02 00 	lea    rdx,[rip+0x2689f]        # 4b408 <__dso_handle>
   24b69:	48 8d 35 d0 6b 02 00 	lea    rsi,[rip+0x26bd0]        # 4b740 <std::__ioinit>
   24b70:	48 8b 05 81 64 02 00 	mov    rax,QWORD PTR [rip+0x26481]        # 4aff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
   24b77:	48 89 c7             	mov    rdi,rax
   24b7a:	e8 31 f8 fd ff       	call   43b0 <__cxa_atexit@plt>
   24b7f:	90                   	nop
   24b80:	c9                   	leave  
   24b81:	c3                   	ret    

0000000000024b82 <_GLOBAL__sub_I_stbi_failure_reason>:
   24b82:	55                   	push   rbp
   24b83:	48 89 e5             	mov    rbp,rsp
   24b86:	be ff ff 00 00       	mov    esi,0xffff
   24b8b:	bf 01 00 00 00       	mov    edi,0x1
   24b90:	e8 a4 ff ff ff       	call   24b39 <__static_initialization_and_destruction_0(int, int)>
   24b95:	5d                   	pop    rbp
   24b96:	c3                   	ret    

0000000000024b97 <operator new(unsigned long, void*)>:
   24b97:	55                   	push   rbp
   24b98:	48 89 e5             	mov    rbp,rsp
   24b9b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24b9f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   24ba3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24ba7:	5d                   	pop    rbp
   24ba8:	c3                   	ret    

0000000000024ba9 <operator delete(void*, void*)>:
   24ba9:	55                   	push   rbp
   24baa:	48 89 e5             	mov    rbp,rsp
   24bad:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24bb1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   24bb5:	90                   	nop
   24bb6:	5d                   	pop    rbp
   24bb7:	c3                   	ret    

0000000000024bb8 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
   24bb8:	55                   	push   rbp
   24bb9:	48 89 e5             	mov    rbp,rsp
   24bbc:	48 83 ec 20          	sub    rsp,0x20
   24bc0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24bc4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   24bc8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   24bcc:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   24bd1:	75 07                	jne    24bda <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x22>
   24bd3:	b8 00 00 00 00       	mov    eax,0x0
   24bd8:	eb 3a                	jmp    24c14 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x5c>
   24bda:	b8 00 00 00 00       	mov    eax,0x0
   24bdf:	84 c0                	test   al,al
   24be1:	74 19                	je     24bfc <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x44>
   24be3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   24be7:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   24beb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24bef:	48 89 ce             	mov    rsi,rcx
   24bf2:	48 89 c7             	mov    rdi,rax
   24bf5:	e8 fe 06 00 00       	call   252f8 <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)>
   24bfa:	eb 18                	jmp    24c14 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x5c>
   24bfc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   24c00:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   24c04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24c08:	48 89 ce             	mov    rsi,rcx
   24c0b:	48 89 c7             	mov    rdi,rax
   24c0e:	e8 7d f5 fd ff       	call   4190 <memcmp@plt>
   24c13:	90                   	nop
   24c14:	c9                   	leave  
   24c15:	c3                   	ret    

0000000000024c16 <std::char_traits<char>::length(char const*)>:
   24c16:	55                   	push   rbp
   24c17:	48 89 e5             	mov    rbp,rsp
   24c1a:	48 83 ec 20          	sub    rsp,0x20
   24c1e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   24c22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   24c26:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   24c2a:	b8 00 00 00 00       	mov    eax,0x0
   24c2f:	84 c0                	test   al,al
   24c31:	74 0e                	je     24c41 <std::char_traits<char>::length(char const*)+0x2b>
   24c33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   24c37:	48 89 c7             	mov    rdi,rax
   24c3a:	e8 67 07 00 00       	call   253a6 <__gnu_cxx::char_traits<char>::length(char const*)>
   24c3f:	eb 0d                	jmp    24c4e <std::char_traits<char>::length(char const*)+0x38>
   24c41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   24c45:	48 89 c7             	mov    rdi,rax
   24c48:	e8 33 f5 fd ff       	call   4180 <strlen@plt>
   24c4d:	90                   	nop
   24c4e:	c9                   	leave  
   24c4f:	c3                   	ret    

0000000000024c50 <std::cos(float)>:
   24c50:	55                   	push   rbp
   24c51:	48 89 e5             	mov    rbp,rsp
   24c54:	48 83 ec 10          	sub    rsp,0x10
   24c58:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   24c5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   24c60:	66 0f 6e c0          	movd   xmm0,eax
   24c64:	e8 77 f6 fd ff       	call   42e0 <cosf@plt>
   24c69:	c9                   	leave  
   24c6a:	c3                   	ret    

0000000000024c6b <std::ldexp(float, int)>:
   24c6b:	55                   	push   rbp
   24c6c:	48 89 e5             	mov    rbp,rsp
   24c6f:	48 83 ec 10          	sub    rsp,0x10
   24c73:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   24c78:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
   24c7b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   24c7e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   24c81:	89 d7                	mov    edi,edx
   24c83:	66 0f 6e c0          	movd   xmm0,eax
   24c87:	e8 44 f9 fd ff       	call   45d0 <ldexpf@plt>
   24c8c:	c9                   	leave  
   24c8d:	c3                   	ret    

0000000000024c8e <std::pow(float, float)>:
   24c8e:	55                   	push   rbp
   24c8f:	48 89 e5             	mov    rbp,rsp
   24c92:	48 83 ec 10          	sub    rsp,0x10
   24c96:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   24c9b:	f3 0f 11 4d f8       	movss  DWORD PTR [rbp-0x8],xmm1
   24ca0:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   24ca5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   24ca8:	0f 28 c8             	movaps xmm1,xmm0
   24cab:	66 0f 6e c0          	movd   xmm0,eax
   24caf:	e8 cc f9 fd ff       	call   4680 <powf@plt>
   24cb4:	c9                   	leave  
   24cb5:	c3                   	ret    

0000000000024cb6 <std::sin(float)>:
   24cb6:	55                   	push   rbp
   24cb7:	48 89 e5             	mov    rbp,rsp
   24cba:	48 83 ec 10          	sub    rsp,0x10
   24cbe:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   24cc3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   24cc6:	66 0f 6e c0          	movd   xmm0,eax
   24cca:	e8 91 f6 fd ff       	call   4360 <sinf@plt>
   24ccf:	c9                   	leave  
   24cd0:	c3                   	ret    

0000000000024cd1 <std::sqrt(float)>:
   24cd1:	55                   	push   rbp
   24cd2:	48 89 e5             	mov    rbp,rsp
   24cd5:	48 83 ec 10          	sub    rsp,0x10
   24cd9:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   24cde:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   24ce1:	66 0f 6e c0          	movd   xmm0,eax
   24ce5:	e8 86 fa fd ff       	call   4770 <sqrtf@plt>
   24cea:	c9                   	leave  
   24ceb:	c3                   	ret    

0000000000024cec <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::zero()>:
   24cec:	55                   	push   rbp
   24ced:	48 89 e5             	mov    rbp,rsp
   24cf0:	48 83 ec 20          	sub    rsp,0x20
   24cf4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   24cfd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   24d01:	31 c0                	xor    eax,eax
   24d03:	e8 4f 00 00 00       	call   24d57 <std::chrono::duration_values<long>::zero()>
   24d08:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   24d0c:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   24d10:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   24d14:	48 89 d6             	mov    rsi,rdx
   24d17:	48 89 c7             	mov    rdi,rax
   24d1a:	e8 1b 00 00 00       	call   24d3a <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)>
   24d1f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24d23:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   24d27:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   24d30:	74 05                	je     24d37 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::zero()+0x4b>
   24d32:	e8 79 f7 fd ff       	call   44b0 <__stack_chk_fail@plt>
   24d37:	c9                   	leave  
   24d38:	c3                   	ret    
   24d39:	90                   	nop

0000000000024d3a <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)>:
   24d3a:	55                   	push   rbp
   24d3b:	48 89 e5             	mov    rbp,rsp
   24d3e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24d42:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   24d46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24d4a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   24d4d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24d51:	48 89 10             	mov    QWORD PTR [rax],rdx
   24d54:	90                   	nop
   24d55:	5d                   	pop    rbp
   24d56:	c3                   	ret    

0000000000024d57 <std::chrono::duration_values<long>::zero()>:
   24d57:	55                   	push   rbp
   24d58:	48 89 e5             	mov    rbp,rsp
   24d5b:	b8 00 00 00 00       	mov    eax,0x0
   24d60:	5d                   	pop    rbp
   24d61:	c3                   	ret    

0000000000024d62 <std::filesystem::__cxx11::path::_List::~_List()>:
   24d62:	55                   	push   rbp
   24d63:	48 89 e5             	mov    rbp,rsp
   24d66:	48 83 ec 10          	sub    rsp,0x10
   24d6a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24d6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24d72:	48 89 c7             	mov    rdi,rax
   24d75:	e8 b2 06 00 00       	call   2542c <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()>
   24d7a:	90                   	nop
   24d7b:	c9                   	leave  
   24d7c:	c3                   	ret    
   24d7d:	90                   	nop

0000000000024d7e <std::filesystem::__cxx11::path::~path()>:
   24d7e:	55                   	push   rbp
   24d7f:	48 89 e5             	mov    rbp,rsp
   24d82:	48 83 ec 10          	sub    rsp,0x10
   24d86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24d8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24d8e:	48 83 c0 20          	add    rax,0x20
   24d92:	48 89 c7             	mov    rdi,rax
   24d95:	e8 c8 ff ff ff       	call   24d62 <std::filesystem::__cxx11::path::_List::~_List()>
   24d9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24d9e:	48 89 c7             	mov    rdi,rax
   24da1:	e8 ba f4 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   24da6:	90                   	nop
   24da7:	c9                   	leave  
   24da8:	c3                   	ret    

0000000000024da9 <std::filesystem::__cxx11::path::_S_convert(char const*, std::filesystem::__cxx11::__detail::__null_terminated)>:
   24da9:	55                   	push   rbp
   24daa:	48 89 e5             	mov    rbp,rsp
   24dad:	48 83 ec 30          	sub    rsp,0x30
   24db1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   24db5:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   24dbe:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   24dc2:	31 c0                	xor    eax,eax
   24dc4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   24dc8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   24dcc:	48 89 d6             	mov    rsi,rdx
   24dcf:	48 89 c7             	mov    rdi,rax
   24dd2:	e8 49 07 00 00       	call   25520 <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>
   24dd7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   24ddb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   24ddf:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   24de3:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   24dec:	74 05                	je     24df3 <std::filesystem::__cxx11::path::_S_convert(char const*, std::filesystem::__cxx11::__detail::__null_terminated)+0x4a>
   24dee:	e8 bd f6 fd ff       	call   44b0 <__stack_chk_fail@plt>
   24df3:	c9                   	leave  
   24df4:	c3                   	ret    

0000000000024df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
   24df5:	55                   	push   rbp
   24df6:	48 89 e5             	mov    rbp,rsp
   24df9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24dfd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   24e01:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24e05:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   24e08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   24e0f:	48 39 c2             	cmp    rdx,rax
   24e12:	73 06                	jae    24e1a <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
   24e14:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24e18:	eb 04                	jmp    24e1e <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
   24e1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e1e:	5d                   	pop    rbp
   24e1f:	c3                   	ret    

0000000000024e20 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>:
   24e20:	55                   	push   rbp
   24e21:	48 89 e5             	mov    rbp,rsp
   24e24:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24e28:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   24e2d:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   24e32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e36:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   24e3b:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   24e3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e43:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   24e48:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   24e4d:	90                   	nop
   24e4e:	5d                   	pop    rbp
   24e4f:	c3                   	ret    

0000000000024e50 <glm::vec<3, float, (glm::qualifier)0>& glm::vec<3, float, (glm::qualifier)0>::operator+=<float>(glm::vec<3, float, (glm::qualifier)0> const&)>:
   24e50:	55                   	push   rbp
   24e51:	48 89 e5             	mov    rbp,rsp
   24e54:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24e58:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   24e5c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e60:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   24e64:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24e68:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   24e6c:	f3 0f 58 c1          	addss  xmm0,xmm1
   24e70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e74:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   24e78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e7c:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   24e81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24e85:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   24e8a:	f3 0f 58 c1          	addss  xmm0,xmm1
   24e8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e92:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   24e97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24e9b:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   24ea0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   24ea4:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   24ea9:	f3 0f 58 c1          	addss  xmm0,xmm1
   24ead:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24eb1:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   24eb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24eba:	5d                   	pop    rbp
   24ebb:	c3                   	ret    

0000000000024ebc <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   24ebc:	55                   	push   rbp
   24ebd:	48 89 e5             	mov    rbp,rsp
   24ec0:	48 83 ec 40          	sub    rsp,0x40
   24ec4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   24ec8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   24ecc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   24ed5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   24ed9:	31 c0                	xor    eax,eax
   24edb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   24edf:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   24ee4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   24ee8:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   24eed:	0f 28 d0             	movaps xmm2,xmm0
   24ef0:	f3 0f 5c d1          	subss  xmm2,xmm1
   24ef4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   24ef8:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   24efd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   24f01:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   24f06:	0f 28 d8             	movaps xmm3,xmm0
   24f09:	f3 0f 5c d9          	subss  xmm3,xmm1
   24f0d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   24f11:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   24f15:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   24f19:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   24f1d:	f3 0f 5c c1          	subss  xmm0,xmm1
   24f21:	66 0f 7e c2          	movd   edx,xmm0
   24f25:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   24f29:	0f 28 cb             	movaps xmm1,xmm3
   24f2c:	66 0f 6e c2          	movd   xmm0,edx
   24f30:	48 89 c7             	mov    rdi,rax
   24f33:	e8 36 00 00 00       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   24f38:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   24f3c:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   24f40:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   24f43:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   24f46:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   24f4a:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   24f4f:	0f 28 c8             	movaps xmm1,xmm0
   24f52:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   24f56:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   24f5f:	74 05                	je     24f66 <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)+0xaa>
   24f61:	e8 4a f5 fd ff       	call   44b0 <__stack_chk_fail@plt>
   24f66:	66 48 0f 6e c0       	movq   xmm0,rax
   24f6b:	c9                   	leave  
   24f6c:	c3                   	ret    
   24f6d:	90                   	nop

0000000000024f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>:
   24f6e:	55                   	push   rbp
   24f6f:	48 89 e5             	mov    rbp,rsp
   24f72:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24f76:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   24f7b:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   24f80:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   24f85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24f89:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   24f8e:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   24f92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24f96:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   24f9b:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   24fa0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24fa4:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   24fa9:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   24fae:	90                   	nop
   24faf:	5d                   	pop    rbp
   24fb0:	c3                   	ret    
   24fb1:	90                   	nop

0000000000024fb2 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::~_Vector_impl()>:
   24fb2:	55                   	push   rbp
   24fb3:	48 89 e5             	mov    rbp,rsp
   24fb6:	48 83 ec 10          	sub    rsp,0x10
   24fba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24fbe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24fc2:	48 89 c7             	mov    rdi,rax
   24fc5:	e8 a4 0f 00 00       	call   25f6e <std::allocator<Tex>::~allocator()>
   24fca:	90                   	nop
   24fcb:	c9                   	leave  
   24fcc:	c3                   	ret    
   24fcd:	90                   	nop

0000000000024fce <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_base()>:
   24fce:	55                   	push   rbp
   24fcf:	48 89 e5             	mov    rbp,rsp
   24fd2:	48 83 ec 10          	sub    rsp,0x10
   24fd6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24fda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24fde:	48 89 c7             	mov    rdi,rax
   24fe1:	e8 60 0f 00 00       	call   25f46 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::_Vector_impl()>
   24fe6:	90                   	nop
   24fe7:	c9                   	leave  
   24fe8:	c3                   	ret    
   24fe9:	90                   	nop

0000000000024fea <std::vector<Tex, std::allocator<Tex> >::vector()>:
   24fea:	55                   	push   rbp
   24feb:	48 89 e5             	mov    rbp,rsp
   24fee:	48 83 ec 10          	sub    rsp,0x10
   24ff2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   24ff6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   24ffa:	48 89 c7             	mov    rdi,rax
   24ffd:	e8 cc ff ff ff       	call   24fce <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_base()>
   25002:	90                   	nop
   25003:	c9                   	leave  
   25004:	c3                   	ret    
   25005:	90                   	nop

0000000000025006 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>:
   25006:	55                   	push   rbp
   25007:	48 89 e5             	mov    rbp,rsp
   2500a:	48 83 ec 10          	sub    rsp,0x10
   2500e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25012:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25016:	48 89 c7             	mov    rdi,rax
   25019:	e8 36 10 00 00       	call   26054 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>
   2501e:	90                   	nop
   2501f:	c9                   	leave  
   25020:	c3                   	ret    
   25021:	90                   	nop

0000000000025022 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base()>:
   25022:	55                   	push   rbp
   25023:	48 89 e5             	mov    rbp,rsp
   25026:	48 83 ec 10          	sub    rsp,0x10
   2502a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2502e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25032:	48 89 c7             	mov    rdi,rax
   25035:	e8 f2 0f 00 00       	call   2602c <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::_Vector_impl()>
   2503a:	90                   	nop
   2503b:	c9                   	leave  
   2503c:	c3                   	ret    
   2503d:	90                   	nop

000000000002503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>:
   2503e:	55                   	push   rbp
   2503f:	48 89 e5             	mov    rbp,rsp
   25042:	48 83 ec 10          	sub    rsp,0x10
   25046:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2504a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2504e:	48 89 c7             	mov    rdi,rax
   25051:	e8 cc ff ff ff       	call   25022 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base()>
   25056:	90                   	nop
   25057:	c9                   	leave  
   25058:	c3                   	ret    
   25059:	90                   	nop

000000000002505a <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, int>(int, int, int)>:
   2505a:	55                   	push   rbp
   2505b:	48 89 e5             	mov    rbp,rsp
   2505e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25062:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25065:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   25068:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
   2506b:	66 0f ef c0          	pxor   xmm0,xmm0
   2506f:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25074:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25078:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2507c:	66 0f ef c0          	pxor   xmm0,xmm0
   25080:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25085:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25089:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2508e:	66 0f ef c0          	pxor   xmm0,xmm0
   25092:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   25097:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2509b:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   250a0:	90                   	nop
   250a1:	5d                   	pop    rbp
   250a2:	c3                   	ret    
   250a3:	90                   	nop

00000000000250a4 <RendererInterface::RendererInterface()>:
   250a4:	55                   	push   rbp
   250a5:	48 89 e5             	mov    rbp,rsp
   250a8:	48 83 ec 10          	sub    rsp,0x10
   250ac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   250b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   250b4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   250bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   250bf:	48 05 20 01 00 00    	add    rax,0x120
   250c5:	48 89 c7             	mov    rdi,rax
   250c8:	e8 67 17 00 00       	call   26834 <std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_point()>
   250cd:	90                   	nop
   250ce:	c9                   	leave  
   250cf:	c3                   	ret    

00000000000250d0 <CommonData::CommonData()>:
   250d0:	55                   	push   rbp
   250d1:	48 89 e5             	mov    rbp,rsp
   250d4:	48 83 ec 10          	sub    rsp,0x10
   250d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   250dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   250e0:	48 83 c0 08          	add    rax,0x8
   250e4:	48 89 c7             	mov    rdi,rax
   250e7:	e8 b8 ff ff ff       	call   250a4 <RendererInterface::RendererInterface()>
   250ec:	90                   	nop
   250ed:	c9                   	leave  
   250ee:	c3                   	ret    
   250ef:	90                   	nop

00000000000250f0 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::~_Vector_impl()>:
   250f0:	55                   	push   rbp
   250f1:	48 89 e5             	mov    rbp,rsp
   250f4:	48 83 ec 10          	sub    rsp,0x10
   250f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   250fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25100:	48 89 c7             	mov    rdi,rax
   25103:	e8 74 17 00 00       	call   2687c <std::allocator<Mesh>::~allocator()>
   25108:	90                   	nop
   25109:	c9                   	leave  
   2510a:	c3                   	ret    
   2510b:	90                   	nop

000000000002510c <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_base()>:
   2510c:	55                   	push   rbp
   2510d:	48 89 e5             	mov    rbp,rsp
   25110:	48 83 ec 10          	sub    rsp,0x10
   25114:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25118:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2511c:	48 89 c7             	mov    rdi,rax
   2511f:	e8 30 17 00 00       	call   26854 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::_Vector_impl()>
   25124:	90                   	nop
   25125:	c9                   	leave  
   25126:	c3                   	ret    
   25127:	90                   	nop

0000000000025128 <std::vector<Mesh, std::allocator<Mesh> >::vector()>:
   25128:	55                   	push   rbp
   25129:	48 89 e5             	mov    rbp,rsp
   2512c:	48 83 ec 10          	sub    rsp,0x10
   25130:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25134:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25138:	48 89 c7             	mov    rdi,rax
   2513b:	e8 cc ff ff ff       	call   2510c <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_base()>
   25140:	90                   	nop
   25141:	c9                   	leave  
   25142:	c3                   	ret    
   25143:	90                   	nop

0000000000025144 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()>:
   25144:	55                   	push   rbp
   25145:	48 89 e5             	mov    rbp,rsp
   25148:	48 83 ec 10          	sub    rsp,0x10
   2514c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25150:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25154:	48 89 c7             	mov    rdi,rax
   25157:	e8 f6 17 00 00       	call   26952 <std::allocator<unsigned int>::~allocator()>
   2515c:	90                   	nop
   2515d:	c9                   	leave  
   2515e:	c3                   	ret    
   2515f:	90                   	nop

0000000000025160 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base()>:
   25160:	55                   	push   rbp
   25161:	48 89 e5             	mov    rbp,rsp
   25164:	48 83 ec 10          	sub    rsp,0x10
   25168:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2516c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25170:	48 89 c7             	mov    rdi,rax
   25173:	e8 b2 17 00 00       	call   2692a <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl()>
   25178:	90                   	nop
   25179:	c9                   	leave  
   2517a:	c3                   	ret    
   2517b:	90                   	nop

000000000002517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>:
   2517c:	55                   	push   rbp
   2517d:	48 89 e5             	mov    rbp,rsp
   25180:	48 83 ec 10          	sub    rsp,0x10
   25184:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25188:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2518c:	48 89 c7             	mov    rdi,rax
   2518f:	e8 cc ff ff ff       	call   25160 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base()>
   25194:	90                   	nop
   25195:	c9                   	leave  
   25196:	c3                   	ret    
   25197:	90                   	nop

0000000000025198 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::~_Vector_impl()>:
   25198:	55                   	push   rbp
   25199:	48 89 e5             	mov    rbp,rsp
   2519c:	48 83 ec 10          	sub    rsp,0x10
   251a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   251a8:	48 89 c7             	mov    rdi,rax
   251ab:	e8 78 18 00 00       	call   26a28 <std::allocator<Transform>::~allocator()>
   251b0:	90                   	nop
   251b1:	c9                   	leave  
   251b2:	c3                   	ret    
   251b3:	90                   	nop

00000000000251b4 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_base()>:
   251b4:	55                   	push   rbp
   251b5:	48 89 e5             	mov    rbp,rsp
   251b8:	48 83 ec 10          	sub    rsp,0x10
   251bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   251c4:	48 89 c7             	mov    rdi,rax
   251c7:	e8 34 18 00 00       	call   26a00 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::_Vector_impl()>
   251cc:	90                   	nop
   251cd:	c9                   	leave  
   251ce:	c3                   	ret    
   251cf:	90                   	nop

00000000000251d0 <std::vector<Transform, std::allocator<Transform> >::vector()>:
   251d0:	55                   	push   rbp
   251d1:	48 89 e5             	mov    rbp,rsp
   251d4:	48 83 ec 10          	sub    rsp,0x10
   251d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   251e0:	48 89 c7             	mov    rdi,rax
   251e3:	e8 cc ff ff ff       	call   251b4 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_base()>
   251e8:	90                   	nop
   251e9:	c9                   	leave  
   251ea:	c3                   	ret    
   251eb:	90                   	nop

00000000000251ec <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::~_Vector_impl()>:
   251ec:	55                   	push   rbp
   251ed:	48 89 e5             	mov    rbp,rsp
   251f0:	48 83 ec 10          	sub    rsp,0x10
   251f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   251fc:	48 89 c7             	mov    rdi,rax
   251ff:	e8 0a 19 00 00       	call   26b0e <std::allocator<AABB>::~allocator()>
   25204:	90                   	nop
   25205:	c9                   	leave  
   25206:	c3                   	ret    
   25207:	90                   	nop

0000000000025208 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_base()>:
   25208:	55                   	push   rbp
   25209:	48 89 e5             	mov    rbp,rsp
   2520c:	48 83 ec 10          	sub    rsp,0x10
   25210:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25214:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25218:	48 89 c7             	mov    rdi,rax
   2521b:	e8 c6 18 00 00       	call   26ae6 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::_Vector_impl()>
   25220:	90                   	nop
   25221:	c9                   	leave  
   25222:	c3                   	ret    
   25223:	90                   	nop

0000000000025224 <std::vector<AABB, std::allocator<AABB> >::vector()>:
   25224:	55                   	push   rbp
   25225:	48 89 e5             	mov    rbp,rsp
   25228:	48 83 ec 10          	sub    rsp,0x10
   2522c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25230:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25234:	48 89 c7             	mov    rdi,rax
   25237:	e8 cc ff ff ff       	call   25208 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_base()>
   2523c:	90                   	nop
   2523d:	c9                   	leave  
   2523e:	c3                   	ret    
   2523f:	90                   	nop

0000000000025240 <Scene::Scene()>:
   25240:	55                   	push   rbp
   25241:	48 89 e5             	mov    rbp,rsp
   25244:	48 83 ec 10          	sub    rsp,0x10
   25248:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2524c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25250:	48 89 c7             	mov    rdi,rax
   25253:	e8 d0 fe ff ff       	call   25128 <std::vector<Mesh, std::allocator<Mesh> >::vector()>
   25258:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2525c:	48 83 c0 18          	add    rax,0x18
   25260:	48 89 c7             	mov    rdi,rax
   25263:	e8 14 ff ff ff       	call   2517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   25268:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2526c:	48 83 c0 30          	add    rax,0x30
   25270:	48 89 c7             	mov    rdi,rax
   25273:	e8 58 ff ff ff       	call   251d0 <std::vector<Transform, std::allocator<Transform> >::vector()>
   25278:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2527c:	48 83 c0 48          	add    rax,0x48
   25280:	48 89 c7             	mov    rdi,rax
   25283:	e8 9c ff ff ff       	call   25224 <std::vector<AABB, std::allocator<AABB> >::vector()>
   25288:	90                   	nop
   25289:	c9                   	leave  
   2528a:	c3                   	ret    
   2528b:	90                   	nop

000000000002528c <Scene::~Scene()>:
   2528c:	55                   	push   rbp
   2528d:	48 89 e5             	mov    rbp,rsp
   25290:	48 83 ec 10          	sub    rsp,0x10
   25294:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25298:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2529c:	48 83 c0 48          	add    rax,0x48
   252a0:	48 89 c7             	mov    rdi,rax
   252a3:	e8 e0 18 00 00       	call   26b88 <std::vector<AABB, std::allocator<AABB> >::~vector()>
   252a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   252ac:	48 83 c0 30          	add    rax,0x30
   252b0:	48 89 c7             	mov    rdi,rax
   252b3:	e8 ea 17 00 00       	call   26aa2 <std::vector<Transform, std::allocator<Transform> >::~vector()>
   252b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   252bc:	48 83 c0 18          	add    rax,0x18
   252c0:	48 89 c7             	mov    rdi,rax
   252c3:	e8 f4 16 00 00       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   252c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   252cc:	48 89 c7             	mov    rdi,rax
   252cf:	e8 12 16 00 00       	call   268e6 <std::vector<Mesh, std::allocator<Mesh> >::~vector()>
   252d4:	90                   	nop
   252d5:	c9                   	leave  
   252d6:	c3                   	ret    

00000000000252d7 <__gnu_cxx::char_traits<char>::lt(char const&, char const&)>:
   252d7:	55                   	push   rbp
   252d8:	48 89 e5             	mov    rbp,rsp
   252db:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   252df:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   252e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   252e7:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   252ea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   252ee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   252f1:	38 c2                	cmp    dl,al
   252f3:	0f 9c c0             	setl   al
   252f6:	5d                   	pop    rbp
   252f7:	c3                   	ret    

00000000000252f8 <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)>:
   252f8:	55                   	push   rbp
   252f9:	48 89 e5             	mov    rbp,rsp
   252fc:	48 83 ec 30          	sub    rsp,0x30
   25300:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   25304:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   25308:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2530c:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   25314:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25318:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
   2531c:	73 5f                	jae    2537d <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)+0x85>
   2531e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   25322:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25326:	48 01 c2             	add    rdx,rax
   25329:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2532d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25331:	48 01 c8             	add    rax,rcx
   25334:	48 89 d6             	mov    rsi,rdx
   25337:	48 89 c7             	mov    rdi,rax
   2533a:	e8 98 ff ff ff       	call   252d7 <__gnu_cxx::char_traits<char>::lt(char const&, char const&)>
   2533f:	84 c0                	test   al,al
   25341:	74 07                	je     2534a <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)+0x52>
   25343:	b8 ff ff ff ff       	mov    eax,0xffffffff
   25348:	eb 38                	jmp    25382 <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)+0x8a>
   2534a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2534e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25352:	48 01 c2             	add    rdx,rax
   25355:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   25359:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2535d:	48 01 c8             	add    rax,rcx
   25360:	48 89 d6             	mov    rsi,rdx
   25363:	48 89 c7             	mov    rdi,rax
   25366:	e8 6c ff ff ff       	call   252d7 <__gnu_cxx::char_traits<char>::lt(char const&, char const&)>
   2536b:	84 c0                	test   al,al
   2536d:	74 07                	je     25376 <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)+0x7e>
   2536f:	b8 01 00 00 00       	mov    eax,0x1
   25374:	eb 0c                	jmp    25382 <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)+0x8a>
   25376:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
   2537b:	eb 97                	jmp    25314 <__gnu_cxx::char_traits<char>::compare(char const*, char const*, unsigned long)+0x1c>
   2537d:	b8 00 00 00 00       	mov    eax,0x0
   25382:	c9                   	leave  
   25383:	c3                   	ret    

0000000000025384 <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>:
   25384:	55                   	push   rbp
   25385:	48 89 e5             	mov    rbp,rsp
   25388:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2538c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   25390:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25394:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   25397:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2539b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2539e:	38 c2                	cmp    dl,al
   253a0:	0f 94 c0             	sete   al
   253a3:	5d                   	pop    rbp
   253a4:	c3                   	ret    
   253a5:	90                   	nop

00000000000253a6 <__gnu_cxx::char_traits<char>::length(char const*)>:
   253a6:	55                   	push   rbp
   253a7:	48 89 e5             	mov    rbp,rsp
   253aa:	48 83 ec 30          	sub    rsp,0x30
   253ae:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   253b2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   253bb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   253bf:	31 c0                	xor    eax,eax
   253c1:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
   253c9:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
   253cd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   253d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   253d5:	48 01 c2             	add    rdx,rax
   253d8:	48 8d 45 ef          	lea    rax,[rbp-0x11]
   253dc:	48 89 c6             	mov    rsi,rax
   253df:	48 89 d7             	mov    rdi,rdx
   253e2:	e8 9d ff ff ff       	call   25384 <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>
   253e7:	83 f0 01             	xor    eax,0x1
   253ea:	84 c0                	test   al,al
   253ec:	74 07                	je     253f5 <__gnu_cxx::char_traits<char>::length(char const*)+0x4f>
   253ee:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
   253f3:	eb d4                	jmp    253c9 <__gnu_cxx::char_traits<char>::length(char const*)+0x23>
   253f5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   253f9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   253fd:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   25406:	74 05                	je     2540d <__gnu_cxx::char_traits<char>::length(char const*)+0x67>
   25408:	e8 a3 f0 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2540d:	c9                   	leave  
   2540e:	c3                   	ret    
   2540f:	90                   	nop

0000000000025410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
   25410:	55                   	push   rbp
   25411:	48 89 e5             	mov    rbp,rsp
   25414:	48 83 ec 10          	sub    rsp,0x10
   25418:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2541c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25420:	48 89 c7             	mov    rdi,rax
   25423:	e8 58 ec fd ff       	call   4080 <std::allocator<char>::~allocator()@plt>
   25428:	90                   	nop
   25429:	c9                   	leave  
   2542a:	c3                   	ret    
   2542b:	90                   	nop

000000000002542c <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()>:
   2542c:	55                   	push   rbp
   2542d:	48 89 e5             	mov    rbp,rsp
   25430:	53                   	push   rbx
   25431:	48 83 ec 28          	sub    rsp,0x28
   25435:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25439:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2543d:	48 89 c7             	mov    rdi,rax
   25440:	e8 b9 21 00 00       	call   275fe <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr()>
   25445:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   25449:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2544d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   25450:	48 85 c0             	test   rax,rax
   25453:	74 29                	je     2547e <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()+0x52>
   25455:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25459:	48 89 c7             	mov    rdi,rax
   2545c:	e8 b7 21 00 00       	call   27618 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter()>
   25461:	48 89 c3             	mov    rbx,rax
   25464:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25468:	48 89 c7             	mov    rdi,rax
   2546b:	e8 c2 21 00 00       	call   27632 <std::remove_reference<std::filesystem::__cxx11::path::_List::_Impl*&>::type&& std::move<std::filesystem::__cxx11::path::_List::_Impl*&>(std::filesystem::__cxx11::path::_List::_Impl*&)>
   25470:	48 8b 00             	mov    rax,QWORD PTR [rax]
   25473:	48 89 c6             	mov    rsi,rax
   25476:	48 89 df             	mov    rdi,rbx
   25479:	e8 52 ec fd ff       	call   40d0 <std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const@plt>
   2547e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25482:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   25489:	90                   	nop
   2548a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2548e:	c9                   	leave  
   2548f:	c3                   	ret    

0000000000025490 <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   25490:	55                   	push   rbp
   25491:	48 89 e5             	mov    rbp,rsp
   25494:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25498:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2549c:	5d                   	pop    rbp
   2549d:	c3                   	ret    

000000000002549e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::basic_string_view<char, std::char_traits<char> >, void>(std::basic_string_view<char, std::char_traits<char> > const&, std::allocator<char> const&)>:
   2549e:	55                   	push   rbp
   2549f:	48 89 e5             	mov    rbp,rsp
   254a2:	53                   	push   rbx
   254a3:	48 83 ec 48          	sub    rsp,0x48
   254a7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   254ab:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   254af:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   254b3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   254bc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   254c0:	31 c0                	xor    eax,eax
   254c2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   254c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   254c9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   254cd:	48 89 d7             	mov    rdi,rdx
   254d0:	48 89 c6             	mov    rsi,rax
   254d3:	e8 58 f1 fd ff       	call   4630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)@plt>
   254d8:	48 89 c1             	mov    rcx,rax
   254db:	48 89 d3             	mov    rbx,rdx
   254de:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   254e2:	48 89 ce             	mov    rsi,rcx
   254e5:	48 89 c7             	mov    rdi,rax
   254e8:	e8 43 ec fd ff       	call   4130 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)@plt>
   254ed:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
   254f1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   254f5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   254f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   254fd:	48 89 c7             	mov    rdi,rax
   25500:	e8 9b f2 fd ff       	call   47a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)@plt>
   25505:	90                   	nop
   25506:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2550a:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25513:	74 05                	je     2551a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::basic_string_view<char, std::char_traits<char> >, void>(std::basic_string_view<char, std::char_traits<char> > const&, std::allocator<char> const&)+0x7c>
   25515:	e8 96 ef fd ff       	call   44b0 <__stack_chk_fail@plt>
   2551a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2551e:	c9                   	leave  
   2551f:	c3                   	ret    

0000000000025520 <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>:
   25520:	55                   	push   rbp
   25521:	48 89 e5             	mov    rbp,rsp
   25524:	48 83 ec 10          	sub    rsp,0x10
   25528:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2552c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   25530:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25534:	48 89 c7             	mov    rdi,rax
   25537:	e8 da f6 ff ff       	call   24c16 <std::char_traits<char>::length(char const*)>
   2553c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   25540:	48 89 02             	mov    QWORD PTR [rdx],rax
   25543:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25547:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2554b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   2554f:	90                   	nop
   25550:	c9                   	leave  
   25551:	c3                   	ret    

0000000000025552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
   25552:	55                   	push   rbp
   25553:	48 89 e5             	mov    rbp,rsp
   25556:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2555a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2555e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25562:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   25565:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25569:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2556c:	48 39 c2             	cmp    rdx,rax
   2556f:	73 06                	jae    25577 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
   25571:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25575:	eb 04                	jmp    2557b <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
   25577:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2557b:	5d                   	pop    rbp
   2557c:	c3                   	ret    

000000000002557d <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, float)>:
   2557d:	55                   	push   rbp
   2557e:	48 89 e5             	mov    rbp,rsp
   25581:	48 83 ec 20          	sub    rsp,0x20
   25585:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   25589:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   2558e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25597:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2559b:	31 c0                	xor    eax,eax
   2559d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   255a1:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   255a6:	0f 28 c8             	movaps xmm1,xmm0
   255a9:	f3 0f 59 4d e4       	mulss  xmm1,DWORD PTR [rbp-0x1c]
   255ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   255b2:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   255b6:	f3 0f 59 45 e4       	mulss  xmm0,DWORD PTR [rbp-0x1c]
   255bb:	66 0f 7e c2          	movd   edx,xmm0
   255bf:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   255c3:	66 0f 6e c2          	movd   xmm0,edx
   255c7:	48 89 c7             	mov    rdi,rax
   255ca:	e8 51 f8 ff ff       	call   24e20 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   255cf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   255d3:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   255d7:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   255e0:	74 05                	je     255e7 <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, float)+0x6a>
   255e2:	e8 c9 ee fd ff       	call   44b0 <__stack_chk_fail@plt>
   255e7:	66 48 0f 6e c0       	movq   xmm0,rax
   255ec:	c9                   	leave  
   255ed:	c3                   	ret    

00000000000255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>:
   255ee:	55                   	push   rbp
   255ef:	48 89 e5             	mov    rbp,rsp
   255f2:	53                   	push   rbx
   255f3:	48 83 ec 38          	sub    rsp,0x38
   255f7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   255fb:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   255ff:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25608:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2560c:	31 c0                	xor    eax,eax
   2560e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   25612:	8b 08                	mov    ecx,DWORD PTR [rax]
   25614:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   25618:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2561c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2561f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   25623:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   25627:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   2562b:	66 0f 6e c1          	movd   xmm0,ecx
   2562f:	48 89 c7             	mov    rdi,rax
   25632:	e8 b7 20 00 00       	call   276ee <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(float)>
   25637:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2563b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2563e:	48 89 c1             	mov    rcx,rax
   25641:	48 89 d3             	mov    rbx,rdx
   25644:	48 89 d0             	mov    rax,rdx
   25647:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2564b:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   25654:	74 05                	je     2565b <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)+0x6d>
   25656:	e8 55 ee fd ff       	call   44b0 <__stack_chk_fail@plt>
   2565b:	66 48 0f 6e c1       	movq   xmm0,rcx
   25660:	66 48 0f 6e c8       	movq   xmm1,rax
   25665:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   25669:	c9                   	leave  
   2566a:	c3                   	ret    
   2566b:	90                   	nop

000000000002566c <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)>:
   2566c:	55                   	push   rbp
   2566d:	48 89 e5             	mov    rbp,rsp
   25670:	53                   	push   rbx
   25671:	48 83 ec 58          	sub    rsp,0x58
   25675:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   25679:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   2567d:	89 d0                	mov    eax,edx
   2567f:	88 45 ac             	mov    BYTE PTR [rbp-0x54],al
   25682:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2568b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2568f:	31 c0                	xor    eax,eax
   25691:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
   25695:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   25699:	48 89 c7             	mov    rdi,rax
   2569c:	e8 9f f0 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   256a1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   256a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   256a8:	48 89 c7             	mov    rdi,rax
   256ab:	e8 c1 20 00 00       	call   27771 <std::filesystem::__cxx11::__detail::__null_terminated std::filesystem::__cxx11::__detail::_S_range_end<char const*>(char const*)>
   256b0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   256b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   256b7:	48 89 c7             	mov    rdi,rax
   256ba:	e8 a4 20 00 00       	call   27763 <char const* std::filesystem::__cxx11::__detail::_S_range_begin<char const*>(char const*)>
   256bf:	48 89 c7             	mov    rdi,rax
   256c2:	e8 e2 f6 ff ff       	call   24da9 <std::filesystem::__cxx11::path::_S_convert(char const*, std::filesystem::__cxx11::__detail::__null_terminated)>
   256c7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   256cb:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   256cf:	48 8d 55 cf          	lea    rdx,[rbp-0x31]
   256d3:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   256d7:	48 89 c6             	mov    rsi,rax
   256da:	48 89 df             	mov    rdi,rbx
   256dd:	e8 bc fd ff ff       	call   2549e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::basic_string_view<char, std::char_traits<char> >, void>(std::basic_string_view<char, std::char_traits<char> > const&, std::allocator<char> const&)>
   256e2:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   256e6:	48 89 c7             	mov    rdi,rax
   256e9:	e8 72 ed fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   256ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   256f2:	48 83 c0 20          	add    rax,0x20
   256f6:	48 89 c7             	mov    rdi,rax
   256f9:	e8 e2 e9 fd ff       	call   40e0 <std::filesystem::__cxx11::path::_List::_List()@plt>
   256fe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   25702:	48 89 c7             	mov    rdi,rax
   25705:	e8 06 ec fd ff       	call   4310 <std::filesystem::__cxx11::path::_M_split_cmpts()@plt>
   2570a:	eb 49                	jmp    25755 <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)+0xe9>
   2570c:	48 89 c3             	mov    rbx,rax
   2570f:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   25713:	48 89 c7             	mov    rdi,rax
   25716:	e8 45 ed fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2571b:	48 89 d8             	mov    rax,rbx
   2571e:	48 89 c7             	mov    rdi,rax
   25721:	e8 0a f0 fd ff       	call   4730 <_Unwind_Resume@plt>
   25726:	48 89 c3             	mov    rbx,rax
   25729:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2572d:	48 83 c0 20          	add    rax,0x20
   25731:	48 89 c7             	mov    rdi,rax
   25734:	e8 29 f6 ff ff       	call   24d62 <std::filesystem::__cxx11::path::_List::~_List()>
   25739:	eb 03                	jmp    2573e <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)+0xd2>
   2573b:	48 89 c3             	mov    rbx,rax
   2573e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   25742:	48 89 c7             	mov    rdi,rax
   25745:	e8 16 eb fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2574a:	48 89 d8             	mov    rax,rbx
   2574d:	48 89 c7             	mov    rdi,rax
   25750:	e8 db ef fd ff       	call   4730 <_Unwind_Resume@plt>
   25755:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25759:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25762:	74 05                	je     25769 <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)+0xfd>
   25764:	e8 47 ed fd ff       	call   44b0 <__stack_chk_fail@plt>
   25769:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2576d:	c9                   	leave  
   2576e:	c3                   	ret    

000000000002576f <glm::vec<2, float, (glm::qualifier)0> glm::normalize<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&)>:
   2576f:	55                   	push   rbp
   25770:	48 89 e5             	mov    rbp,rsp
   25773:	48 83 ec 10          	sub    rsp,0x10
   25777:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2577b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2577f:	48 89 c7             	mov    rdi,rax
   25782:	e8 f5 1f 00 00       	call   2777c <glm::detail::compute_normalize<2, float, (glm::qualifier)0, false>::call(glm::vec<2, float, (glm::qualifier)0> const&)>
   25787:	66 48 0f 7e c0       	movq   rax,xmm0
   2578c:	66 48 0f 6e c0       	movq   xmm0,rax
   25791:	c9                   	leave  
   25792:	c3                   	ret    

0000000000025793 <glm::vec<3, float, (glm::qualifier)0> glm::normalize<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&)>:
   25793:	55                   	push   rbp
   25794:	48 89 e5             	mov    rbp,rsp
   25797:	48 83 ec 30          	sub    rsp,0x30
   2579b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2579f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   257a3:	48 89 c7             	mov    rdi,rax
   257a6:	e8 1d 20 00 00       	call   277c8 <glm::detail::compute_normalize<3, float, (glm::qualifier)0, false>::call(glm::vec<3, float, (glm::qualifier)0> const&)>
   257ab:	66 48 0f 7e c0       	movq   rax,xmm0
   257b0:	0f 28 c1             	movaps xmm0,xmm1
   257b3:	48 89 45 f4          	mov    QWORD PTR [rbp-0xc],rax
   257b7:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   257bc:	48 8b 45 f4          	mov    rax,QWORD PTR [rbp-0xc]
   257c0:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   257c5:	0f 28 c8             	movaps xmm1,xmm0
   257c8:	66 48 0f 6e c0       	movq   xmm0,rax
   257cd:	c9                   	leave  
   257ce:	c3                   	ret    

00000000000257cf <glm::vec<3, float, (glm::qualifier)0> glm::cross<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   257cf:	55                   	push   rbp
   257d0:	48 89 e5             	mov    rbp,rsp
   257d3:	48 83 ec 30          	sub    rsp,0x30
   257d7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   257db:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   257df:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   257e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   257e7:	48 89 d6             	mov    rsi,rdx
   257ea:	48 89 c7             	mov    rdi,rax
   257ed:	e8 3a 20 00 00       	call   2782c <glm::detail::compute_cross<float, (glm::qualifier)0, false>::call(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   257f2:	66 48 0f 7e c0       	movq   rax,xmm0
   257f7:	0f 28 c1             	movaps xmm0,xmm1
   257fa:	48 89 45 f4          	mov    QWORD PTR [rbp-0xc],rax
   257fe:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   25803:	48 8b 45 f4          	mov    rax,QWORD PTR [rbp-0xc]
   25807:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2580c:	0f 28 c8             	movaps xmm1,xmm0
   2580f:	66 48 0f 6e c0       	movq   xmm0,rax
   25814:	c9                   	leave  
   25815:	c3                   	ret    

0000000000025816 <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, float)>:
   25816:	55                   	push   rbp
   25817:	48 89 e5             	mov    rbp,rsp
   2581a:	48 83 ec 40          	sub    rsp,0x40
   2581e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25822:	f3 0f 11 45 d4       	movss  DWORD PTR [rbp-0x2c],xmm0
   25827:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25830:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25834:	31 c0                	xor    eax,eax
   25836:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2583a:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2583f:	0f 28 d0             	movaps xmm2,xmm0
   25842:	f3 0f 59 55 d4       	mulss  xmm2,DWORD PTR [rbp-0x2c]
   25847:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2584b:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   25850:	0f 28 c8             	movaps xmm1,xmm0
   25853:	f3 0f 59 4d d4       	mulss  xmm1,DWORD PTR [rbp-0x2c]
   25858:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2585c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25860:	f3 0f 59 45 d4       	mulss  xmm0,DWORD PTR [rbp-0x2c]
   25865:	66 0f 7e c2          	movd   edx,xmm0
   25869:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2586d:	66 0f 6e c2          	movd   xmm0,edx
   25871:	48 89 c7             	mov    rdi,rax
   25874:	e8 f5 f6 ff ff       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   25879:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2587d:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   25881:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   25884:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   25887:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2588b:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25890:	0f 28 c8             	movaps xmm1,xmm0
   25893:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   25897:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   258a0:	74 05                	je     258a7 <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, float)+0x91>
   258a2:	e8 09 ec fd ff       	call   44b0 <__stack_chk_fail@plt>
   258a7:	66 48 0f 6e c0       	movq   xmm0,rax
   258ac:	c9                   	leave  
   258ad:	c3                   	ret    

00000000000258ae <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   258ae:	55                   	push   rbp
   258af:	48 89 e5             	mov    rbp,rsp
   258b2:	48 83 ec 40          	sub    rsp,0x40
   258b6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   258ba:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   258be:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   258c7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   258cb:	31 c0                	xor    eax,eax
   258cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   258d1:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   258d6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   258da:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   258df:	0f 28 d1             	movaps xmm2,xmm1
   258e2:	f3 0f 58 d0          	addss  xmm2,xmm0
   258e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   258ea:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   258ef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   258f3:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   258f8:	0f 28 d9             	movaps xmm3,xmm1
   258fb:	f3 0f 58 d8          	addss  xmm3,xmm0
   258ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25903:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   25907:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2590b:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2590f:	f3 0f 58 c8          	addss  xmm1,xmm0
   25913:	66 0f 7e ca          	movd   edx,xmm1
   25917:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2591b:	0f 28 cb             	movaps xmm1,xmm3
   2591e:	66 0f 6e c2          	movd   xmm0,edx
   25922:	48 89 c7             	mov    rdi,rax
   25925:	e8 44 f6 ff ff       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   2592a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2592e:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   25932:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   25935:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   25938:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2593c:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25941:	0f 28 c8             	movaps xmm1,xmm0
   25944:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   25948:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   25951:	74 05                	je     25958 <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)+0xaa>
   25953:	e8 58 eb fd ff       	call   44b0 <__stack_chk_fail@plt>
   25958:	66 48 0f 6e c0       	movq   xmm0,rax
   2595d:	c9                   	leave  
   2595e:	c3                   	ret    

000000000002595f <float glm::dot<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   2595f:	55                   	push   rbp
   25960:	48 89 e5             	mov    rbp,rsp
   25963:	48 83 ec 10          	sub    rsp,0x10
   25967:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2596b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2596f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   25973:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25977:	48 89 d6             	mov    rsi,rdx
   2597a:	48 89 c7             	mov    rdi,rax
   2597d:	e8 5b 20 00 00       	call   279dd <glm::detail::compute_dot<glm::vec<3, float, (glm::qualifier)0>, float, false>::call(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   25982:	c9                   	leave  
   25983:	c3                   	ret    

0000000000025984 <glm::vec<4, float, (glm::qualifier)0>::vec<float, float, float, int>(float, float, float, int)>:
   25984:	55                   	push   rbp
   25985:	48 89 e5             	mov    rbp,rsp
   25988:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2598c:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25991:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   25996:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   2599b:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   2599e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   259a2:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   259a7:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   259ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   259af:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   259b4:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   259b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   259bd:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   259c2:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   259c7:	66 0f ef c0          	pxor   xmm0,xmm0
   259cb:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   259d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   259d4:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   259d9:	90                   	nop
   259da:	5d                   	pop    rbp
   259db:	c3                   	ret    

00000000000259dc <glm::mat<4, 4, float, (glm::qualifier)0>::mat<float, float, float, int, float, float, float, int, float, float, float, int, float, float, float, int>(float const&, float const&, float const&, int const&, float const&, float const&, float const&, int const&, float const&, float const&, float const&, int const&, float const&, float const&, float const&, int const&)>:
   259dc:	55                   	push   rbp
   259dd:	48 89 e5             	mov    rbp,rsp
   259e0:	48 83 ec 30          	sub    rsp,0x30
   259e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   259e8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   259ec:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   259f0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   259f4:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
   259f8:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
   259fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25a00:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   25a04:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   25a06:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   25a0a:	f3 0f 10 0a          	movss  xmm1,DWORD PTR [rdx]
   25a0e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   25a12:	f3 0f 10 02          	movss  xmm0,DWORD PTR [rdx]
   25a16:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   25a1a:	8b 12                	mov    edx,DWORD PTR [rdx]
   25a1c:	89 ce                	mov    esi,ecx
   25a1e:	0f 28 d1             	movaps xmm2,xmm1
   25a21:	0f 28 c8             	movaps xmm1,xmm0
   25a24:	66 0f 6e c2          	movd   xmm0,edx
   25a28:	48 89 c7             	mov    rdi,rax
   25a2b:	e8 54 ff ff ff       	call   25984 <glm::vec<4, float, (glm::qualifier)0>::vec<float, float, float, int>(float, float, float, int)>
   25a30:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25a34:	48 8d 48 10          	lea    rcx,[rax+0x10]
   25a38:	48 8b 45 20          	mov    rax,QWORD PTR [rbp+0x20]
   25a3c:	8b 10                	mov    edx,DWORD PTR [rax]
   25a3e:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
   25a42:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   25a46:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   25a4a:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25a4e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   25a52:	8b 00                	mov    eax,DWORD PTR [rax]
   25a54:	89 d6                	mov    esi,edx
   25a56:	0f 28 d1             	movaps xmm2,xmm1
   25a59:	0f 28 c8             	movaps xmm1,xmm0
   25a5c:	66 0f 6e c0          	movd   xmm0,eax
   25a60:	48 89 cf             	mov    rdi,rcx
   25a63:	e8 1c ff ff ff       	call   25984 <glm::vec<4, float, (glm::qualifier)0>::vec<float, float, float, int>(float, float, float, int)>
   25a68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25a6c:	48 8d 48 20          	lea    rcx,[rax+0x20]
   25a70:	48 8b 45 40          	mov    rax,QWORD PTR [rbp+0x40]
   25a74:	8b 10                	mov    edx,DWORD PTR [rax]
   25a76:	48 8b 45 38          	mov    rax,QWORD PTR [rbp+0x38]
   25a7a:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   25a7e:	48 8b 45 30          	mov    rax,QWORD PTR [rbp+0x30]
   25a82:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25a86:	48 8b 45 28          	mov    rax,QWORD PTR [rbp+0x28]
   25a8a:	8b 00                	mov    eax,DWORD PTR [rax]
   25a8c:	89 d6                	mov    esi,edx
   25a8e:	0f 28 d1             	movaps xmm2,xmm1
   25a91:	0f 28 c8             	movaps xmm1,xmm0
   25a94:	66 0f 6e c0          	movd   xmm0,eax
   25a98:	48 89 cf             	mov    rdi,rcx
   25a9b:	e8 e4 fe ff ff       	call   25984 <glm::vec<4, float, (glm::qualifier)0>::vec<float, float, float, int>(float, float, float, int)>
   25aa0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25aa4:	48 8d 48 30          	lea    rcx,[rax+0x30]
   25aa8:	48 8b 45 60          	mov    rax,QWORD PTR [rbp+0x60]
   25aac:	8b 10                	mov    edx,DWORD PTR [rax]
   25aae:	48 8b 45 58          	mov    rax,QWORD PTR [rbp+0x58]
   25ab2:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   25ab6:	48 8b 45 50          	mov    rax,QWORD PTR [rbp+0x50]
   25aba:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25abe:	48 8b 45 48          	mov    rax,QWORD PTR [rbp+0x48]
   25ac2:	8b 00                	mov    eax,DWORD PTR [rax]
   25ac4:	89 d6                	mov    esi,edx
   25ac6:	0f 28 d1             	movaps xmm2,xmm1
   25ac9:	0f 28 c8             	movaps xmm1,xmm0
   25acc:	66 0f 6e c0          	movd   xmm0,eax
   25ad0:	48 89 cf             	mov    rdi,rcx
   25ad3:	e8 ac fe ff ff       	call   25984 <glm::vec<4, float, (glm::qualifier)0>::vec<float, float, float, int>(float, float, float, int)>
   25ad8:	90                   	nop
   25ad9:	c9                   	leave  
   25ada:	c3                   	ret    
   25adb:	90                   	nop

0000000000025adc <glm::vec<4, float, (glm::qualifier)0>::vec<float, int, int, int>(float, int, int, int)>:
   25adc:	55                   	push   rbp
   25add:	48 89 e5             	mov    rbp,rsp
   25ae0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25ae4:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25ae9:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
   25aec:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   25aef:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   25af2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25af6:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25afb:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25aff:	66 0f ef c0          	pxor   xmm0,xmm0
   25b03:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25b08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b0c:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25b11:	66 0f ef c0          	pxor   xmm0,xmm0
   25b15:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   25b1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b1e:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25b23:	66 0f ef c0          	pxor   xmm0,xmm0
   25b27:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   25b2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b30:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   25b35:	90                   	nop
   25b36:	5d                   	pop    rbp
   25b37:	c3                   	ret    

0000000000025b38 <glm::vec<4, float, (glm::qualifier)0>::vec<int, float, int, int>(int, float, int, int)>:
   25b38:	55                   	push   rbp
   25b39:	48 89 e5             	mov    rbp,rsp
   25b3c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25b40:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25b43:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25b48:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   25b4b:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   25b4e:	66 0f ef c0          	pxor   xmm0,xmm0
   25b52:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25b57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b5b:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25b5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b63:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   25b68:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25b6d:	66 0f ef c0          	pxor   xmm0,xmm0
   25b71:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   25b76:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b7a:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25b7f:	66 0f ef c0          	pxor   xmm0,xmm0
   25b83:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   25b88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b8c:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   25b91:	90                   	nop
   25b92:	5d                   	pop    rbp
   25b93:	c3                   	ret    

0000000000025b94 <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, float, int>(int, int, float, int)>:
   25b94:	55                   	push   rbp
   25b95:	48 89 e5             	mov    rbp,rsp
   25b98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25b9c:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25b9f:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   25ba2:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   25ba7:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   25baa:	66 0f ef c0          	pxor   xmm0,xmm0
   25bae:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25bb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25bb7:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25bbb:	66 0f ef c0          	pxor   xmm0,xmm0
   25bbf:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25bc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25bc8:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25bcd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25bd1:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   25bd6:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25bdb:	66 0f ef c0          	pxor   xmm0,xmm0
   25bdf:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   25be4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25be8:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   25bed:	90                   	nop
   25bee:	5d                   	pop    rbp
   25bef:	c3                   	ret    

0000000000025bf0 <glm::mat<4, 4, float, (glm::qualifier)0>::mat<float, int, int, int, int, float, int, int, int, int, float, int, int, int, float, int>(float const&, int const&, int const&, int const&, int const&, float const&, int const&, int const&, int const&, int const&, float const&, int const&, int const&, int const&, float const&, int const&)>:
   25bf0:	55                   	push   rbp
   25bf1:	48 89 e5             	mov    rbp,rsp
   25bf4:	48 83 ec 30          	sub    rsp,0x30
   25bf8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25bfc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   25c00:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   25c04:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   25c08:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
   25c0c:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
   25c10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25c14:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   25c18:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   25c1a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   25c1e:	8b 12                	mov    edx,DWORD PTR [rdx]
   25c20:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
   25c24:	8b 36                	mov    esi,DWORD PTR [rsi]
   25c26:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
   25c2a:	8b 3f                	mov    edi,DWORD PTR [rdi]
   25c2c:	66 0f 6e c7          	movd   xmm0,edi
   25c30:	48 89 c7             	mov    rdi,rax
   25c33:	e8 a4 fe ff ff       	call   25adc <glm::vec<4, float, (glm::qualifier)0>::vec<float, int, int, int>(float, int, int, int)>
   25c38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25c3c:	48 8d 78 10          	lea    rdi,[rax+0x10]
   25c40:	48 8b 45 20          	mov    rax,QWORD PTR [rbp+0x20]
   25c44:	8b 08                	mov    ecx,DWORD PTR [rax]
   25c46:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
   25c4a:	8b 10                	mov    edx,DWORD PTR [rax]
   25c4c:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   25c50:	8b 30                	mov    esi,DWORD PTR [rax]
   25c52:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   25c56:	8b 00                	mov    eax,DWORD PTR [rax]
   25c58:	66 0f 6e c6          	movd   xmm0,esi
   25c5c:	89 c6                	mov    esi,eax
   25c5e:	e8 d5 fe ff ff       	call   25b38 <glm::vec<4, float, (glm::qualifier)0>::vec<int, float, int, int>(int, float, int, int)>
   25c63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25c67:	48 8d 78 20          	lea    rdi,[rax+0x20]
   25c6b:	48 8b 45 40          	mov    rax,QWORD PTR [rbp+0x40]
   25c6f:	8b 08                	mov    ecx,DWORD PTR [rax]
   25c71:	48 8b 45 38          	mov    rax,QWORD PTR [rbp+0x38]
   25c75:	8b 30                	mov    esi,DWORD PTR [rax]
   25c77:	48 8b 45 30          	mov    rax,QWORD PTR [rbp+0x30]
   25c7b:	8b 10                	mov    edx,DWORD PTR [rax]
   25c7d:	48 8b 45 28          	mov    rax,QWORD PTR [rbp+0x28]
   25c81:	8b 00                	mov    eax,DWORD PTR [rax]
   25c83:	66 0f 6e c6          	movd   xmm0,esi
   25c87:	89 c6                	mov    esi,eax
   25c89:	e8 06 ff ff ff       	call   25b94 <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, float, int>(int, int, float, int)>
   25c8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25c92:	48 8d 78 30          	lea    rdi,[rax+0x30]
   25c96:	48 8b 45 60          	mov    rax,QWORD PTR [rbp+0x60]
   25c9a:	8b 08                	mov    ecx,DWORD PTR [rax]
   25c9c:	48 8b 45 58          	mov    rax,QWORD PTR [rbp+0x58]
   25ca0:	8b 30                	mov    esi,DWORD PTR [rax]
   25ca2:	48 8b 45 50          	mov    rax,QWORD PTR [rbp+0x50]
   25ca6:	8b 10                	mov    edx,DWORD PTR [rax]
   25ca8:	48 8b 45 48          	mov    rax,QWORD PTR [rbp+0x48]
   25cac:	8b 00                	mov    eax,DWORD PTR [rax]
   25cae:	66 0f 6e c6          	movd   xmm0,esi
   25cb2:	89 c6                	mov    esi,eax
   25cb4:	e8 db fe ff ff       	call   25b94 <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, float, int>(int, int, float, int)>
   25cb9:	90                   	nop
   25cba:	c9                   	leave  
   25cbb:	c3                   	ret    

0000000000025cbc <glm::vec<3, float, (glm::qualifier)0>::vec<int, double, int>(int, double, int)>:
   25cbc:	55                   	push   rbp
   25cbd:	48 89 e5             	mov    rbp,rsp
   25cc0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25cc4:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25cc7:	f2 0f 11 45 e8       	movsd  QWORD PTR [rbp-0x18],xmm0
   25ccc:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   25ccf:	66 0f ef c0          	pxor   xmm0,xmm0
   25cd3:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25cd8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25cdc:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25ce0:	66 0f ef c0          	pxor   xmm0,xmm0
   25ce4:	f2 0f 5a 45 e8       	cvtsd2ss xmm0,QWORD PTR [rbp-0x18]
   25ce9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25ced:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25cf2:	66 0f ef c0          	pxor   xmm0,xmm0
   25cf6:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25cfb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25cff:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25d04:	90                   	nop
   25d05:	5d                   	pop    rbp
   25d06:	c3                   	ret    
   25d07:	90                   	nop

0000000000025d08 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>:
   25d08:	55                   	push   rbp
   25d09:	48 89 e5             	mov    rbp,rsp
   25d0c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25d10:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25d15:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
   25d18:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   25d1b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d1f:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25d24:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25d28:	66 0f ef c0          	pxor   xmm0,xmm0
   25d2c:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25d31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d35:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25d3a:	66 0f ef c0          	pxor   xmm0,xmm0
   25d3e:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   25d43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d47:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25d4c:	90                   	nop
   25d4d:	5d                   	pop    rbp
   25d4e:	c3                   	ret    
   25d4f:	90                   	nop

0000000000025d50 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>:
   25d50:	55                   	push   rbp
   25d51:	48 89 e5             	mov    rbp,rsp
   25d54:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25d58:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25d5d:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
   25d60:	f3 0f 11 4d ec       	movss  DWORD PTR [rbp-0x14],xmm1
   25d65:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d69:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25d6e:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25d72:	66 0f ef c0          	pxor   xmm0,xmm0
   25d76:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25d7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d7f:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25d84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d88:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   25d8d:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25d92:	90                   	nop
   25d93:	5d                   	pop    rbp
   25d94:	c3                   	ret    
   25d95:	90                   	nop

0000000000025d96 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>:
   25d96:	55                   	push   rbp
   25d97:	48 89 e5             	mov    rbp,rsp
   25d9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25d9e:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25da1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   25da4:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   25da9:	66 0f ef c0          	pxor   xmm0,xmm0
   25dad:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25db2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25db6:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25dba:	66 0f ef c0          	pxor   xmm0,xmm0
   25dbe:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   25dc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25dc7:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25dcc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25dd0:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   25dd5:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25dda:	90                   	nop
   25ddb:	5d                   	pop    rbp
   25ddc:	c3                   	ret    
   25ddd:	90                   	nop

0000000000025dde <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>:
   25dde:	55                   	push   rbp
   25ddf:	48 89 e5             	mov    rbp,rsp
   25de2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25de6:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25de9:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25dee:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   25df1:	66 0f ef c0          	pxor   xmm0,xmm0
   25df5:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25dfa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25dfe:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25e02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e06:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   25e0b:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25e10:	66 0f ef c0          	pxor   xmm0,xmm0
   25e14:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   25e19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e1d:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25e22:	90                   	nop
   25e23:	5d                   	pop    rbp
   25e24:	c3                   	ret    
   25e25:	90                   	nop

0000000000025e26 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>:
   25e26:	55                   	push   rbp
   25e27:	48 89 e5             	mov    rbp,rsp
   25e2a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25e2e:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25e33:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   25e38:	89 75 ec             	mov    DWORD PTR [rbp-0x14],esi
   25e3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e3f:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25e44:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25e48:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e4c:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   25e51:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25e56:	66 0f ef c0          	pxor   xmm0,xmm0
   25e5a:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   25e5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e63:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25e68:	90                   	nop
   25e69:	5d                   	pop    rbp
   25e6a:	c3                   	ret    
   25e6b:	90                   	nop

0000000000025e6c <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>:
   25e6c:	55                   	push   rbp
   25e6d:	48 89 e5             	mov    rbp,rsp
   25e70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25e74:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   25e77:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25e7c:	f3 0f 11 4d ec       	movss  DWORD PTR [rbp-0x14],xmm1
   25e81:	66 0f ef c0          	pxor   xmm0,xmm0
   25e85:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   25e8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e8e:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25e92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25e96:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   25e9b:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25ea0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25ea4:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   25ea9:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25eae:	90                   	nop
   25eaf:	5d                   	pop    rbp
   25eb0:	c3                   	ret    
   25eb1:	90                   	nop

0000000000025eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>:
   25eb2:	55                   	push   rbp
   25eb3:	48 89 e5             	mov    rbp,rsp
   25eb6:	53                   	push   rbx
   25eb7:	48 83 ec 28          	sub    rsp,0x28
   25ebb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   25ebf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   25ec3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   25ec7:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   25ecb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25ecf:	48 89 c7             	mov    rdi,rax
   25ed2:	e8 59 e4 fd ff       	call   4330 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
   25ed7:	48 89 c1             	mov    rcx,rax
   25eda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25ede:	48 89 c2             	mov    rdx,rax
   25ee1:	48 89 ce             	mov    rsi,rcx
   25ee4:	48 89 df             	mov    rdi,rbx
   25ee7:	e8 64 e5 fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>
   25eec:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   25ef1:	74 15                	je     25f08 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x56>
   25ef3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   25ef7:	48 89 c7             	mov    rdi,rax
   25efa:	e8 17 ed ff ff       	call   24c16 <std::char_traits<char>::length(char const*)>
   25eff:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   25f03:	48 01 d0             	add    rax,rdx
   25f06:	eb 08                	jmp    25f10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x5e>
   25f08:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   25f0c:	48 83 e8 01          	sub    rax,0x1
   25f10:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   25f14:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   25f18:	48 89 c2             	mov    rdx,rax
   25f1b:	48 89 cf             	mov    rdi,rcx
   25f1e:	e8 ad 16 00 00       	call   275d0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>
   25f23:	eb 1a                	jmp    25f3f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x8d>
   25f25:	48 89 c3             	mov    rbx,rax
   25f28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25f2c:	48 89 c7             	mov    rdi,rax
   25f2f:	e8 dc f4 ff ff       	call   25410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
   25f34:	48 89 d8             	mov    rax,rbx
   25f37:	48 89 c7             	mov    rdi,rax
   25f3a:	e8 f1 e7 fd ff       	call   4730 <_Unwind_Resume@plt>
   25f3f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   25f43:	c9                   	leave  
   25f44:	c3                   	ret    
   25f45:	90                   	nop

0000000000025f46 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::_Vector_impl()>:
   25f46:	55                   	push   rbp
   25f47:	48 89 e5             	mov    rbp,rsp
   25f4a:	48 83 ec 10          	sub    rsp,0x10
   25f4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25f52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f56:	48 89 c7             	mov    rdi,rax
   25f59:	e8 cc 1a 00 00       	call   27a2a <std::allocator<Tex>::allocator()>
   25f5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f62:	48 89 c7             	mov    rdi,rax
   25f65:	e8 dc 1a 00 00       	call   27a46 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl_data::_Vector_impl_data()>
   25f6a:	90                   	nop
   25f6b:	c9                   	leave  
   25f6c:	c3                   	ret    
   25f6d:	90                   	nop

0000000000025f6e <std::allocator<Tex>::~allocator()>:
   25f6e:	55                   	push   rbp
   25f6f:	48 89 e5             	mov    rbp,rsp
   25f72:	48 83 ec 10          	sub    rsp,0x10
   25f76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25f7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f7e:	48 89 c7             	mov    rdi,rax
   25f81:	e8 ee 1a 00 00       	call   27a74 <__gnu_cxx::new_allocator<Tex>::~new_allocator()>
   25f86:	90                   	nop
   25f87:	c9                   	leave  
   25f88:	c3                   	ret    
   25f89:	90                   	nop

0000000000025f8a <std::_Vector_base<Tex, std::allocator<Tex> >::~_Vector_base()>:
   25f8a:	55                   	push   rbp
   25f8b:	48 89 e5             	mov    rbp,rsp
   25f8e:	48 83 ec 10          	sub    rsp,0x10
   25f92:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25f96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f9a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   25f9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fa2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   25fa5:	48 89 d0             	mov    rax,rdx
   25fa8:	48 29 c8             	sub    rax,rcx
   25fab:	48 c1 f8 03          	sar    rax,0x3
   25faf:	48 89 c2             	mov    rdx,rax
   25fb2:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   25fbc:	48 0f af c2          	imul   rax,rdx
   25fc0:	48 89 c2             	mov    rdx,rax
   25fc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fc7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   25fca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fce:	48 89 ce             	mov    rsi,rcx
   25fd1:	48 89 c7             	mov    rdi,rax
   25fd4:	e8 a7 1a 00 00       	call   27a80 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)>
   25fd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fdd:	48 89 c7             	mov    rdi,rax
   25fe0:	e8 cd ef ff ff       	call   24fb2 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::~_Vector_impl()>
   25fe5:	90                   	nop
   25fe6:	c9                   	leave  
   25fe7:	c3                   	ret    

0000000000025fe8 <std::vector<Tex, std::allocator<Tex> >::~vector()>:
   25fe8:	55                   	push   rbp
   25fe9:	48 89 e5             	mov    rbp,rsp
   25fec:	48 83 ec 10          	sub    rsp,0x10
   25ff0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25ff4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25ff8:	48 89 c7             	mov    rdi,rax
   25ffb:	e8 b6 1a 00 00       	call   27ab6 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>
   26000:	48 89 c2             	mov    rdx,rax
   26003:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26007:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   2600b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2600f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26012:	48 89 ce             	mov    rsi,rcx
   26015:	48 89 c7             	mov    rdi,rax
   26018:	e8 a7 1a 00 00       	call   27ac4 <void std::_Destroy<Tex*, Tex>(Tex*, Tex*, std::allocator<Tex>&)>
   2601d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26021:	48 89 c7             	mov    rdi,rax
   26024:	e8 61 ff ff ff       	call   25f8a <std::_Vector_base<Tex, std::allocator<Tex> >::~_Vector_base()>
   26029:	90                   	nop
   2602a:	c9                   	leave  
   2602b:	c3                   	ret    

000000000002602c <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::_Vector_impl()>:
   2602c:	55                   	push   rbp
   2602d:	48 89 e5             	mov    rbp,rsp
   26030:	48 83 ec 10          	sub    rsp,0x10
   26034:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26038:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2603c:	48 89 c7             	mov    rdi,rax
   2603f:	e8 aa 1a 00 00       	call   27aee <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator()>
   26044:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26048:	48 89 c7             	mov    rdi,rax
   2604b:	e8 ba 1a 00 00       	call   27b0a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl_data::_Vector_impl_data()>
   26050:	90                   	nop
   26051:	c9                   	leave  
   26052:	c3                   	ret    
   26053:	90                   	nop

0000000000026054 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>:
   26054:	55                   	push   rbp
   26055:	48 89 e5             	mov    rbp,rsp
   26058:	48 83 ec 10          	sub    rsp,0x10
   2605c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26060:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26064:	48 89 c7             	mov    rdi,rax
   26067:	e8 cc 1a 00 00       	call   27b38 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator()>
   2606c:	90                   	nop
   2606d:	c9                   	leave  
   2606e:	c3                   	ret    
   2606f:	90                   	nop

0000000000026070 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>:
   26070:	55                   	push   rbp
   26071:	48 89 e5             	mov    rbp,rsp
   26074:	48 83 ec 10          	sub    rsp,0x10
   26078:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2607c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26080:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26084:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26088:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2608b:	48 89 d0             	mov    rax,rdx
   2608e:	48 29 c8             	sub    rax,rcx
   26091:	48 c1 f8 05          	sar    rax,0x5
   26095:	48 89 c2             	mov    rdx,rax
   26098:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2609c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2609f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   260a3:	48 89 ce             	mov    rsi,rcx
   260a6:	48 89 c7             	mov    rdi,rax
   260a9:	e8 96 1a 00 00       	call   27b44 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   260ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   260b2:	48 89 c7             	mov    rdi,rax
   260b5:	e8 4c ef ff ff       	call   25006 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>
   260ba:	90                   	nop
   260bb:	c9                   	leave  
   260bc:	c3                   	ret    
   260bd:	90                   	nop

00000000000260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>:
   260be:	55                   	push   rbp
   260bf:	48 89 e5             	mov    rbp,rsp
   260c2:	48 83 ec 10          	sub    rsp,0x10
   260c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   260ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   260ce:	48 89 c7             	mov    rdi,rax
   260d1:	e8 a4 1a 00 00       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   260d6:	48 89 c2             	mov    rdx,rax
   260d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   260dd:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   260e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   260e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   260e8:	48 89 ce             	mov    rsi,rcx
   260eb:	48 89 c7             	mov    rdi,rax
   260ee:	e8 95 1a 00 00       	call   27b88 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   260f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   260f7:	48 89 c7             	mov    rdi,rax
   260fa:	e8 71 ff ff ff       	call   26070 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>
   260ff:	90                   	nop
   26100:	c9                   	leave  
   26101:	c3                   	ret    

0000000000026102 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>:
   26102:	55                   	push   rbp
   26103:	48 89 e5             	mov    rbp,rsp
   26106:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2610a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2610e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26112:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26116:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26119:	48 89 d0             	mov    rax,rdx
   2611c:	48 29 c8             	sub    rax,rcx
   2611f:	48 c1 f8 03          	sar    rax,0x3
   26123:	48 89 c2             	mov    rdx,rax
   26126:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   26130:	48 0f af c2          	imul   rax,rdx
   26134:	5d                   	pop    rbp
   26135:	c3                   	ret    

0000000000026136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>:
   26136:	55                   	push   rbp
   26137:	48 89 e5             	mov    rbp,rsp
   2613a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2613e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26142:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26146:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   26149:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2614d:	48 69 c0 68 01 00 00 	imul   rax,rax,0x168
   26154:	48 01 d0             	add    rax,rdx
   26157:	5d                   	pop    rbp
   26158:	c3                   	ret    
   26159:	90                   	nop

000000000002615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>:
   2615a:	55                   	push   rbp
   2615b:	48 89 e5             	mov    rbp,rsp
   2615e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26162:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26166:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2616a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2616e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26171:	48 89 d0             	mov    rax,rdx
   26174:	48 29 c8             	sub    rax,rcx
   26177:	48 c1 f8 05          	sar    rax,0x5
   2617b:	5d                   	pop    rbp
   2617c:	c3                   	ret    
   2617d:	90                   	nop

000000000002617e <std::vector<unsigned int, std::allocator<unsigned int> >::data()>:
   2617e:	55                   	push   rbp
   2617f:	48 89 e5             	mov    rbp,rsp
   26182:	48 83 ec 10          	sub    rsp,0x10
   26186:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2618a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2618e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   26191:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26195:	48 89 d6             	mov    rsi,rdx
   26198:	48 89 c7             	mov    rdi,rax
   2619b:	e8 12 1a 00 00       	call   27bb2 <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_data_ptr<unsigned int>(unsigned int*) const>
   261a0:	c9                   	leave  
   261a1:	c3                   	ret    

00000000000261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>:
   261a2:	55                   	push   rbp
   261a3:	48 89 e5             	mov    rbp,rsp
   261a6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   261aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   261ae:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   261b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   261b6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   261b9:	48 89 d0             	mov    rax,rdx
   261bc:	48 29 c8             	sub    rax,rcx
   261bf:	48 c1 f8 02          	sar    rax,0x2
   261c3:	5d                   	pop    rbp
   261c4:	c3                   	ret    
   261c5:	90                   	nop

00000000000261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>:
   261c6:	55                   	push   rbp
   261c7:	48 89 e5             	mov    rbp,rsp
   261ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   261ce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   261d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   261d6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   261d9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   261dd:	48 c1 e0 05          	shl    rax,0x5
   261e1:	48 01 d0             	add    rax,rdx
   261e4:	5d                   	pop    rbp
   261e5:	c3                   	ret    

00000000000261e6 <float min<float>(float, float)>:
   261e6:	55                   	push   rbp
   261e7:	48 89 e5             	mov    rbp,rsp
   261ea:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   261ef:	f3 0f 11 4d f8       	movss  DWORD PTR [rbp-0x8],xmm1
   261f4:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   261f9:	0f 2f 45 fc          	comiss xmm0,DWORD PTR [rbp-0x4]
   261fd:	76 07                	jbe    26206 <float min<float>(float, float)+0x20>
   261ff:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   26204:	eb 05                	jmp    2620b <float min<float>(float, float)+0x25>
   26206:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   2620b:	5d                   	pop    rbp
   2620c:	c3                   	ret    

000000000002620d <float max<float>(float, float)>:
   2620d:	55                   	push   rbp
   2620e:	48 89 e5             	mov    rbp,rsp
   26211:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   26216:	f3 0f 11 4d f8       	movss  DWORD PTR [rbp-0x8],xmm1
   2621b:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   26220:	0f 2f 45 f8          	comiss xmm0,DWORD PTR [rbp-0x8]
   26224:	76 07                	jbe    2622d <float max<float>(float, float)+0x20>
   26226:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2622b:	eb 05                	jmp    26232 <float max<float>(float, float)+0x25>
   2622d:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   26232:	5d                   	pop    rbp
   26233:	c3                   	ret    

0000000000026234 <std::vector<AABB, std::allocator<AABB> >::push_back(AABB&&)>:
   26234:	55                   	push   rbp
   26235:	48 89 e5             	mov    rbp,rsp
   26238:	48 83 ec 10          	sub    rsp,0x10
   2623c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26240:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26244:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26248:	48 89 c7             	mov    rdi,rax
   2624b:	e8 74 19 00 00       	call   27bc4 <std::remove_reference<AABB&>::type&& std::move<AABB&>(AABB&)>
   26250:	48 89 c2             	mov    rdx,rax
   26253:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26257:	48 89 d6             	mov    rsi,rdx
   2625a:	48 89 c7             	mov    rdi,rax
   2625d:	e8 70 19 00 00       	call   27bd2 <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)>
   26262:	90                   	nop
   26263:	c9                   	leave  
   26264:	c3                   	ret    
   26265:	90                   	nop

0000000000026266 <std::vector<Mesh, std::allocator<Mesh> >::push_back(Mesh&&)>:
   26266:	55                   	push   rbp
   26267:	48 89 e5             	mov    rbp,rsp
   2626a:	48 83 ec 10          	sub    rsp,0x10
   2626e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26272:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26276:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2627a:	48 89 c7             	mov    rdi,rax
   2627d:	e8 f4 19 00 00       	call   27c76 <std::remove_reference<Mesh&>::type&& std::move<Mesh&>(Mesh&)>
   26282:	48 89 c2             	mov    rdx,rax
   26285:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26289:	48 89 d6             	mov    rsi,rdx
   2628c:	48 89 c7             	mov    rdi,rax
   2628f:	e8 f0 19 00 00       	call   27c84 <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)>
   26294:	90                   	nop
   26295:	c9                   	leave  
   26296:	c3                   	ret    
   26297:	90                   	nop

0000000000026298 <std::vector<Transform, std::allocator<Transform> >::push_back(Transform&&)>:
   26298:	55                   	push   rbp
   26299:	48 89 e5             	mov    rbp,rsp
   2629c:	48 83 ec 10          	sub    rsp,0x10
   262a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   262a4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   262a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   262ac:	48 89 c7             	mov    rdi,rax
   262af:	e8 74 1a 00 00       	call   27d28 <std::remove_reference<Transform&>::type&& std::move<Transform&>(Transform&)>
   262b4:	48 89 c2             	mov    rdx,rax
   262b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262bb:	48 89 d6             	mov    rsi,rdx
   262be:	48 89 c7             	mov    rdi,rax
   262c1:	e8 70 1a 00 00       	call   27d36 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)>
   262c6:	90                   	nop
   262c7:	c9                   	leave  
   262c8:	c3                   	ret    

00000000000262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
   262c9:	55                   	push   rbp
   262ca:	48 89 e5             	mov    rbp,rsp
   262cd:	48 83 ec 10          	sub    rsp,0x10
   262d1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   262d5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   262d9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   262dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262e1:	48 89 d6             	mov    rsi,rdx
   262e4:	48 89 c7             	mov    rdi,rax
   262e7:	e8 14 de fd ff       	call   4100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   262ec:	85 c0                	test   eax,eax
   262ee:	0f 94 c0             	sete   al
   262f1:	c9                   	leave  
   262f2:	c3                   	ret    
   262f3:	90                   	nop

00000000000262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>:
   262f4:	55                   	push   rbp
   262f5:	48 89 e5             	mov    rbp,rsp
   262f8:	48 83 ec 10          	sub    rsp,0x10
   262fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26300:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26304:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26308:	48 89 c7             	mov    rdi,rax
   2630b:	e8 ca 1a 00 00       	call   27dda <std::remove_reference<unsigned int&>::type&& std::move<unsigned int&>(unsigned int&)>
   26310:	48 89 c2             	mov    rdx,rax
   26313:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26317:	48 89 d6             	mov    rsi,rdx
   2631a:	48 89 c7             	mov    rdi,rax
   2631d:	e8 c6 1a 00 00       	call   27de8 <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)>
   26322:	90                   	nop
   26323:	c9                   	leave  
   26324:	c3                   	ret    
   26325:	90                   	nop

0000000000026326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>:
   26326:	55                   	push   rbp
   26327:	48 89 e5             	mov    rbp,rsp
   2632a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2632e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26332:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26336:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2633a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2633d:	48 89 d0             	mov    rax,rdx
   26340:	48 29 c8             	sub    rax,rcx
   26343:	48 c1 f8 05          	sar    rax,0x5
   26347:	5d                   	pop    rbp
   26348:	c3                   	ret    
   26349:	90                   	nop

000000000002634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>:
   2634a:	55                   	push   rbp
   2634b:	48 89 e5             	mov    rbp,rsp
   2634e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26352:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26356:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2635a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2635d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26361:	48 c1 e0 05          	shl    rax,0x5
   26365:	48 01 d0             	add    rax,rdx
   26368:	5d                   	pop    rbp
   26369:	c3                   	ret    

000000000002636a <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   2636a:	55                   	push   rbp
   2636b:	48 89 e5             	mov    rbp,rsp
   2636e:	41 54                	push   r12
   26370:	53                   	push   rbx
   26371:	48 83 ec 10          	sub    rsp,0x10
   26375:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   26379:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2637d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   26381:	48 89 c7             	mov    rdi,rax
   26384:	e8 27 df fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   26389:	48 89 c3             	mov    rbx,rax
   2638c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   26390:	48 89 c7             	mov    rdi,rax
   26393:	e8 18 df fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   26398:	48 39 c3             	cmp    rbx,rax
   2639b:	75 43                	jne    263e0 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x76>
   2639d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   263a1:	48 89 c7             	mov    rdi,rax
   263a4:	e8 07 df fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   263a9:	49 89 c4             	mov    r12,rax
   263ac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   263b0:	48 89 c7             	mov    rdi,rax
   263b3:	e8 b8 e1 fd ff       	call   4570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@plt>
   263b8:	48 89 c3             	mov    rbx,rax
   263bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   263bf:	48 89 c7             	mov    rdi,rax
   263c2:	e8 a9 e1 fd ff       	call   4570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@plt>
   263c7:	4c 89 e2             	mov    rdx,r12
   263ca:	48 89 de             	mov    rsi,rbx
   263cd:	48 89 c7             	mov    rdi,rax
   263d0:	e8 e3 e7 ff ff       	call   24bb8 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
   263d5:	85 c0                	test   eax,eax
   263d7:	75 07                	jne    263e0 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x76>
   263d9:	b8 01 00 00 00       	mov    eax,0x1
   263de:	eb 05                	jmp    263e5 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7b>
   263e0:	b8 00 00 00 00       	mov    eax,0x0
   263e5:	48 83 c4 10          	add    rsp,0x10
   263e9:	5b                   	pop    rbx
   263ea:	41 5c                	pop    r12
   263ec:	5d                   	pop    rbp
   263ed:	c3                   	ret    

00000000000263ee <std::vector<Tex, std::allocator<Tex> >::operator[](unsigned long)>:
   263ee:	55                   	push   rbp
   263ef:	48 89 e5             	mov    rbp,rsp
   263f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   263f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   263fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263fe:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26401:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26405:	48 89 d0             	mov    rax,rdx
   26408:	48 01 c0             	add    rax,rax
   2640b:	48 01 d0             	add    rax,rdx
   2640e:	48 c1 e0 03          	shl    rax,0x3
   26412:	48 01 c8             	add    rax,rcx
   26415:	5d                   	pop    rbp
   26416:	c3                   	ret    
   26417:	90                   	nop

0000000000026418 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>:
   26418:	55                   	push   rbp
   26419:	48 89 e5             	mov    rbp,rsp
   2641c:	48 83 ec 10          	sub    rsp,0x10
   26420:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26424:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26428:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2642c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26430:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26434:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   26438:	48 39 c2             	cmp    rdx,rax
   2643b:	74 31                	je     2646e <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)+0x56>
   2643d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26441:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26445:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26449:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2644d:	48 89 ce             	mov    rsi,rcx
   26450:	48 89 c7             	mov    rdi,rax
   26453:	e8 34 1a 00 00       	call   27e8c <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int const&>(std::allocator<unsigned int>&, unsigned int*, unsigned int const&)>
   26458:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2645c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   26460:	48 8d 50 04          	lea    rdx,[rax+0x4]
   26464:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26468:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   2646c:	eb 22                	jmp    26490 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)+0x78>
   2646e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26472:	48 89 c7             	mov    rdi,rax
   26475:	e8 4c 1a 00 00       	call   27ec6 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   2647a:	48 89 c1             	mov    rcx,rax
   2647d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26481:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26485:	48 89 ce             	mov    rsi,rcx
   26488:	48 89 c7             	mov    rdi,rax
   2648b:	e8 82 1a 00 00       	call   27f12 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)>
   26490:	90                   	nop
   26491:	c9                   	leave  
   26492:	c3                   	ret    
   26493:	90                   	nop

0000000000026494 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   26494:	55                   	push   rbp
   26495:	48 89 e5             	mov    rbp,rsp
   26498:	48 83 ec 10          	sub    rsp,0x10
   2649c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   264a0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   264a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264a8:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   264ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264b0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   264b4:	48 39 c2             	cmp    rdx,rax
   264b7:	74 31                	je     264ea <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
   264b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264bd:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   264c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264c5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   264c9:	48 89 ce             	mov    rsi,rcx
   264cc:	48 89 c7             	mov    rdi,rax
   264cf:	e8 f3 1b 00 00       	call   280c7 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   264d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264d8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   264dc:	48 8d 50 20          	lea    rdx,[rax+0x20]
   264e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264e4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   264e8:	eb 22                	jmp    2650c <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x78>
   264ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264ee:	48 89 c7             	mov    rdi,rax
   264f1:	e8 0a 1c 00 00       	call   28100 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>
   264f6:	48 89 c1             	mov    rcx,rax
   264f9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   264fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26501:	48 89 ce             	mov    rsi,rcx
   26504:	48 89 c7             	mov    rdi,rax
   26507:	e8 40 1c 00 00       	call   2814c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2650c:	90                   	nop
   2650d:	c9                   	leave  
   2650e:	c3                   	ret    

000000000002650f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   2650f:	55                   	push   rbp
   26510:	48 89 e5             	mov    rbp,rsp
   26513:	53                   	push   rbx
   26514:	48 83 ec 48          	sub    rsp,0x48
   26518:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2651c:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   26520:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   26524:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2652d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   26531:	31 c0                	xor    eax,eax
   26533:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   26537:	48 89 c7             	mov    rdi,rax
   2653a:	e8 d7 e6 ff ff       	call   24c16 <std::char_traits<char>::length(char const*)>
   2653f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   26543:	48 8d 45 de          	lea    rax,[rbp-0x22]
   26547:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2654b:	48 89 d6             	mov    rsi,rdx
   2654e:	48 89 c7             	mov    rdi,rax
   26551:	e8 ca db fd ff       	call   4120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const@plt>
   26556:	48 8d 45 df          	lea    rax,[rbp-0x21]
   2655a:	48 8d 55 de          	lea    rdx,[rbp-0x22]
   2655e:	48 89 d6             	mov    rsi,rdx
   26561:	48 89 c7             	mov    rdi,rax
   26564:	e8 d7 10 00 00       	call   27640 <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)>
   26569:	48 8d 55 df          	lea    rdx,[rbp-0x21]
   2656d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   26571:	48 89 d6             	mov    rsi,rdx
   26574:	48 89 c7             	mov    rdi,rax
   26577:	e8 94 e1 fd ff       	call   4710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)@plt>
   2657c:	48 8d 45 df          	lea    rax,[rbp-0x21]
   26580:	48 89 c7             	mov    rdi,rax
   26583:	e8 d8 de fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   26588:	48 8d 45 de          	lea    rax,[rbp-0x22]
   2658c:	48 89 c7             	mov    rdi,rax
   2658f:	e8 cc de fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   26594:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   26598:	48 89 c7             	mov    rdi,rax
   2659b:	e8 10 dd fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   265a0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   265a4:	48 01 c2             	add    rdx,rax
   265a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   265ab:	48 89 d6             	mov    rsi,rdx
   265ae:	48 89 c7             	mov    rdi,rax
   265b1:	e8 da e0 fd ff       	call   4690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt>
   265b6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   265ba:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   265be:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   265c2:	48 89 ce             	mov    rsi,rcx
   265c5:	48 89 c7             	mov    rdi,rax
   265c8:	e8 a3 da fd ff       	call   4070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)@plt>
   265cd:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   265d1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   265d5:	48 89 d6             	mov    rsi,rdx
   265d8:	48 89 c7             	mov    rdi,rax
   265db:	e8 e0 e1 fd ff       	call   47c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   265e0:	eb 34                	jmp    26616 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x107>
   265e2:	48 89 c3             	mov    rbx,rax
   265e5:	48 8d 45 de          	lea    rax,[rbp-0x22]
   265e9:	48 89 c7             	mov    rdi,rax
   265ec:	e8 6f de fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   265f1:	48 89 d8             	mov    rax,rbx
   265f4:	48 89 c7             	mov    rdi,rax
   265f7:	e8 34 e1 fd ff       	call   4730 <_Unwind_Resume@plt>
   265fc:	48 89 c3             	mov    rbx,rax
   265ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   26603:	48 89 c7             	mov    rdi,rax
   26606:	e8 55 dc fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2660b:	48 89 d8             	mov    rax,rbx
   2660e:	48 89 c7             	mov    rdi,rax
   26611:	e8 1a e1 fd ff       	call   4730 <_Unwind_Resume@plt>
   26616:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2661a:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   26623:	74 05                	je     2662a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11b>
   26625:	e8 86 de fd ff       	call   44b0 <__stack_chk_fail@plt>
   2662a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2662e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   26632:	c9                   	leave  
   26633:	c3                   	ret    

0000000000026634 <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)>:
   26634:	55                   	push   rbp
   26635:	48 89 e5             	mov    rbp,rsp
   26638:	48 83 ec 10          	sub    rsp,0x10
   2663c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26640:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26644:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26648:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2664c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26650:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   26654:	48 39 c2             	cmp    rdx,rax
   26657:	74 31                	je     2668a <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)+0x56>
   26659:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2665d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26661:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26665:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26669:	48 89 ce             	mov    rsi,rcx
   2666c:	48 89 c7             	mov    rdi,rax
   2666f:	e8 17 1d 00 00       	call   2838b <void std::allocator_traits<std::allocator<Tex> >::construct<Tex, Tex const&>(std::allocator<Tex>&, Tex*, Tex const&)>
   26674:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26678:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2667c:	48 8d 50 18          	lea    rdx,[rax+0x18]
   26680:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26684:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   26688:	eb 22                	jmp    266ac <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)+0x78>
   2668a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2668e:	48 89 c7             	mov    rdi,rax
   26691:	e8 2e 1d 00 00       	call   283c4 <std::vector<Tex, std::allocator<Tex> >::end()>
   26696:	48 89 c1             	mov    rcx,rax
   26699:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2669d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   266a1:	48 89 ce             	mov    rsi,rcx
   266a4:	48 89 c7             	mov    rdi,rax
   266a7:	e8 64 1d 00 00       	call   28410 <void std::vector<Tex, std::allocator<Tex> >::_M_realloc_insert<Tex const&>(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >, Tex const&)>
   266ac:	90                   	nop
   266ad:	c9                   	leave  
   266ae:	c3                   	ret    
   266af:	90                   	nop

00000000000266b0 <std::vector<Tex, std::allocator<Tex> >::size() const>:
   266b0:	55                   	push   rbp
   266b1:	48 89 e5             	mov    rbp,rsp
   266b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   266b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   266bc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   266c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   266c4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   266c7:	48 89 d0             	mov    rax,rdx
   266ca:	48 29 c8             	sub    rax,rcx
   266cd:	48 c1 f8 03          	sar    rax,0x3
   266d1:	48 89 c2             	mov    rdx,rax
   266d4:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   266de:	48 0f af c2          	imul   rax,rdx
   266e2:	5d                   	pop    rbp
   266e3:	c3                   	ret    

00000000000266e4 <glm::vec<4, float, (glm::qualifier)0>::length()>:
   266e4:	55                   	push   rbp
   266e5:	48 89 e5             	mov    rbp,rsp
   266e8:	b8 04 00 00 00       	mov    eax,0x4
   266ed:	5d                   	pop    rbp
   266ee:	c3                   	ret    
   266ef:	90                   	nop

00000000000266f0 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>:
   266f0:	55                   	push   rbp
   266f1:	48 89 e5             	mov    rbp,rsp
   266f4:	48 83 ec 10          	sub    rsp,0x10
   266f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   266fc:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   266ff:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   26703:	78 0a                	js     2670f <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x1f>
   26705:	e8 da ff ff ff       	call   266e4 <glm::vec<4, float, (glm::qualifier)0>::length()>
   2670a:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   2670d:	7c 1f                	jl     2672e <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x3e>
   2670f:	48 8d 0d fa 61 01 00 	lea    rcx,[rip+0x161fa]        # 3c910 <NANO_SEC+0x1648>
   26716:	ba df 01 00 00       	mov    edx,0x1df
   2671b:	48 8d 35 96 62 01 00 	lea    rsi,[rip+0x16296]        # 3c9b8 <NANO_SEC+0x16f0>
   26722:	48 8d 3d b5 62 01 00 	lea    rdi,[rip+0x162b5]        # 3c9de <NANO_SEC+0x1716>
   26729:	e8 52 db fd ff       	call   4280 <__assert_fail@plt>
   2672e:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   26732:	74 2c                	je     26760 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x70>
   26734:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   26738:	7f 0c                	jg     26746 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x56>
   2673a:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
   2673e:	74 0c                	je     2674c <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x5c>
   26740:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
   26744:	74 10                	je     26756 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x66>
   26746:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2674a:	eb 1c                	jmp    26768 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x78>
   2674c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26750:	48 83 c0 04          	add    rax,0x4
   26754:	eb 12                	jmp    26768 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x78>
   26756:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2675a:	48 83 c0 08          	add    rax,0x8
   2675e:	eb 08                	jmp    26768 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x78>
   26760:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26764:	48 83 c0 0c          	add    rax,0xc
   26768:	c9                   	leave  
   26769:	c3                   	ret    

000000000002676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>:
   2676a:	55                   	push   rbp
   2676b:	48 89 e5             	mov    rbp,rsp
   2676e:	48 83 ec 10          	sub    rsp,0x10
   26772:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26776:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26779:	e8 e0 05 00 00       	call   26d5e <glm::mat<4, 4, float, (glm::qualifier)0>::length()>
   2677e:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   26781:	7c 1f                	jl     267a2 <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)+0x38>
   26783:	48 8d 0d 76 62 01 00 	lea    rcx,[rip+0x16276]        # 3ca00 <NANO_SEC+0x1738>
   2678a:	ba 23 01 00 00       	mov    edx,0x123
   2678f:	48 8d 35 7a 63 01 00 	lea    rsi,[rip+0x1637a]        # 3cb10 <NANO_SEC+0x1848>
   26796:	48 8d 3d 9b 63 01 00 	lea    rdi,[rip+0x1639b]        # 3cb38 <NANO_SEC+0x1870>
   2679d:	e8 de da fd ff       	call   4280 <__assert_fail@plt>
   267a2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   267a5:	48 98                	cdqe   
   267a7:	48 c1 e0 04          	shl    rax,0x4
   267ab:	48 89 c2             	mov    rdx,rax
   267ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   267b2:	48 01 d0             	add    rax,rdx
   267b5:	c9                   	leave  
   267b6:	c3                   	ret    
   267b7:	90                   	nop

00000000000267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>:
   267b8:	55                   	push   rbp
   267b9:	48 89 e5             	mov    rbp,rsp
   267bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   267c0:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   267c5:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   267ca:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   267cf:	f3 0f 11 5d e8       	movss  DWORD PTR [rbp-0x18],xmm3
   267d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   267d8:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   267dd:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   267e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   267e5:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   267ea:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   267ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   267f3:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   267f8:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   267fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26801:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   26806:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   2680b:	90                   	nop
   2680c:	5d                   	pop    rbp
   2680d:	c3                   	ret    

000000000002680e <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   2680e:	55                   	push   rbp
   2680f:	48 89 e5             	mov    rbp,rsp
   26812:	48 83 ec 10          	sub    rsp,0x10
   26816:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2681a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2681e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26822:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26826:	48 89 d6             	mov    rsi,rdx
   26829:	48 89 c7             	mov    rdi,rax
   2682c:	e8 33 1e 00 00       	call   28664 <glm::detail::compute_dot<glm::vec<4, float, (glm::qualifier)0>, float, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   26831:	c9                   	leave  
   26832:	c3                   	ret    
   26833:	90                   	nop

0000000000026834 <std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_point()>:
   26834:	55                   	push   rbp
   26835:	48 89 e5             	mov    rbp,rsp
   26838:	53                   	push   rbx
   26839:	48 83 ec 18          	sub    rsp,0x18
   2683d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   26841:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   26845:	e8 a2 e4 ff ff       	call   24cec <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::zero()>
   2684a:	48 89 03             	mov    QWORD PTR [rbx],rax
   2684d:	90                   	nop
   2684e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   26852:	c9                   	leave  
   26853:	c3                   	ret    

0000000000026854 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::_Vector_impl()>:
   26854:	55                   	push   rbp
   26855:	48 89 e5             	mov    rbp,rsp
   26858:	48 83 ec 10          	sub    rsp,0x10
   2685c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26860:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26864:	48 89 c7             	mov    rdi,rax
   26867:	e8 50 1e 00 00       	call   286bc <std::allocator<Mesh>::allocator()>
   2686c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26870:	48 89 c7             	mov    rdi,rax
   26873:	e8 60 1e 00 00       	call   286d8 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl_data::_Vector_impl_data()>
   26878:	90                   	nop
   26879:	c9                   	leave  
   2687a:	c3                   	ret    
   2687b:	90                   	nop

000000000002687c <std::allocator<Mesh>::~allocator()>:
   2687c:	55                   	push   rbp
   2687d:	48 89 e5             	mov    rbp,rsp
   26880:	48 83 ec 10          	sub    rsp,0x10
   26884:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26888:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2688c:	48 89 c7             	mov    rdi,rax
   2688f:	e8 72 1e 00 00       	call   28706 <__gnu_cxx::new_allocator<Mesh>::~new_allocator()>
   26894:	90                   	nop
   26895:	c9                   	leave  
   26896:	c3                   	ret    
   26897:	90                   	nop

0000000000026898 <std::_Vector_base<Mesh, std::allocator<Mesh> >::~_Vector_base()>:
   26898:	55                   	push   rbp
   26899:	48 89 e5             	mov    rbp,rsp
   2689c:	48 83 ec 10          	sub    rsp,0x10
   268a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   268a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268a8:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   268ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268b0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   268b3:	48 89 d0             	mov    rax,rdx
   268b6:	48 29 c8             	sub    rax,rcx
   268b9:	48 c1 f8 02          	sar    rax,0x2
   268bd:	48 89 c2             	mov    rdx,rax
   268c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268c4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   268c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268cb:	48 89 ce             	mov    rsi,rcx
   268ce:	48 89 c7             	mov    rdi,rax
   268d1:	e8 3c 1e 00 00       	call   28712 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)>
   268d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268da:	48 89 c7             	mov    rdi,rax
   268dd:	e8 0e e8 ff ff       	call   250f0 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::~_Vector_impl()>
   268e2:	90                   	nop
   268e3:	c9                   	leave  
   268e4:	c3                   	ret    
   268e5:	90                   	nop

00000000000268e6 <std::vector<Mesh, std::allocator<Mesh> >::~vector()>:
   268e6:	55                   	push   rbp
   268e7:	48 89 e5             	mov    rbp,rsp
   268ea:	48 83 ec 10          	sub    rsp,0x10
   268ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   268f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268f6:	48 89 c7             	mov    rdi,rax
   268f9:	e8 4a 1e 00 00       	call   28748 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>
   268fe:	48 89 c2             	mov    rdx,rax
   26901:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26905:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26909:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2690d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26910:	48 89 ce             	mov    rsi,rcx
   26913:	48 89 c7             	mov    rdi,rax
   26916:	e8 3b 1e 00 00       	call   28756 <void std::_Destroy<Mesh*, Mesh>(Mesh*, Mesh*, std::allocator<Mesh>&)>
   2691b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2691f:	48 89 c7             	mov    rdi,rax
   26922:	e8 71 ff ff ff       	call   26898 <std::_Vector_base<Mesh, std::allocator<Mesh> >::~_Vector_base()>
   26927:	90                   	nop
   26928:	c9                   	leave  
   26929:	c3                   	ret    

000000000002692a <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl()>:
   2692a:	55                   	push   rbp
   2692b:	48 89 e5             	mov    rbp,rsp
   2692e:	48 83 ec 10          	sub    rsp,0x10
   26932:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26936:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2693a:	48 89 c7             	mov    rdi,rax
   2693d:	e8 3e 1e 00 00       	call   28780 <std::allocator<unsigned int>::allocator()>
   26942:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26946:	48 89 c7             	mov    rdi,rax
   26949:	e8 4e 1e 00 00       	call   2879c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>
   2694e:	90                   	nop
   2694f:	c9                   	leave  
   26950:	c3                   	ret    
   26951:	90                   	nop

0000000000026952 <std::allocator<unsigned int>::~allocator()>:
   26952:	55                   	push   rbp
   26953:	48 89 e5             	mov    rbp,rsp
   26956:	48 83 ec 10          	sub    rsp,0x10
   2695a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2695e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26962:	48 89 c7             	mov    rdi,rax
   26965:	e8 60 1e 00 00       	call   287ca <__gnu_cxx::new_allocator<unsigned int>::~new_allocator()>
   2696a:	90                   	nop
   2696b:	c9                   	leave  
   2696c:	c3                   	ret    
   2696d:	90                   	nop

000000000002696e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()>:
   2696e:	55                   	push   rbp
   2696f:	48 89 e5             	mov    rbp,rsp
   26972:	48 83 ec 10          	sub    rsp,0x10
   26976:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2697a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2697e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26982:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26986:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26989:	48 89 d0             	mov    rax,rdx
   2698c:	48 29 c8             	sub    rax,rcx
   2698f:	48 c1 f8 02          	sar    rax,0x2
   26993:	48 89 c2             	mov    rdx,rax
   26996:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2699a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2699d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   269a1:	48 89 ce             	mov    rsi,rcx
   269a4:	48 89 c7             	mov    rdi,rax
   269a7:	e8 2a 1e 00 00       	call   287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   269ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   269b0:	48 89 c7             	mov    rdi,rax
   269b3:	e8 8c e7 ff ff       	call   25144 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()>
   269b8:	90                   	nop
   269b9:	c9                   	leave  
   269ba:	c3                   	ret    
   269bb:	90                   	nop

00000000000269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>:
   269bc:	55                   	push   rbp
   269bd:	48 89 e5             	mov    rbp,rsp
   269c0:	48 83 ec 10          	sub    rsp,0x10
   269c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   269c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   269cc:	48 89 c7             	mov    rdi,rax
   269cf:	e8 38 1e 00 00       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   269d4:	48 89 c2             	mov    rdx,rax
   269d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   269db:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   269df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   269e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   269e6:	48 89 ce             	mov    rsi,rcx
   269e9:	48 89 c7             	mov    rdi,rax
   269ec:	e8 29 1e 00 00       	call   2881a <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   269f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   269f5:	48 89 c7             	mov    rdi,rax
   269f8:	e8 71 ff ff ff       	call   2696e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()>
   269fd:	90                   	nop
   269fe:	c9                   	leave  
   269ff:	c3                   	ret    

0000000000026a00 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::_Vector_impl()>:
   26a00:	55                   	push   rbp
   26a01:	48 89 e5             	mov    rbp,rsp
   26a04:	48 83 ec 10          	sub    rsp,0x10
   26a08:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26a0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a10:	48 89 c7             	mov    rdi,rax
   26a13:	e8 2c 1e 00 00       	call   28844 <std::allocator<Transform>::allocator()>
   26a18:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a1c:	48 89 c7             	mov    rdi,rax
   26a1f:	e8 3c 1e 00 00       	call   28860 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl_data::_Vector_impl_data()>
   26a24:	90                   	nop
   26a25:	c9                   	leave  
   26a26:	c3                   	ret    
   26a27:	90                   	nop

0000000000026a28 <std::allocator<Transform>::~allocator()>:
   26a28:	55                   	push   rbp
   26a29:	48 89 e5             	mov    rbp,rsp
   26a2c:	48 83 ec 10          	sub    rsp,0x10
   26a30:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26a34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a38:	48 89 c7             	mov    rdi,rax
   26a3b:	e8 4e 1e 00 00       	call   2888e <__gnu_cxx::new_allocator<Transform>::~new_allocator()>
   26a40:	90                   	nop
   26a41:	c9                   	leave  
   26a42:	c3                   	ret    
   26a43:	90                   	nop

0000000000026a44 <std::_Vector_base<Transform, std::allocator<Transform> >::~_Vector_base()>:
   26a44:	55                   	push   rbp
   26a45:	48 89 e5             	mov    rbp,rsp
   26a48:	48 83 ec 10          	sub    rsp,0x10
   26a4c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26a50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a54:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26a58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a5c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26a5f:	48 89 d0             	mov    rax,rdx
   26a62:	48 29 c8             	sub    rax,rcx
   26a65:	48 c1 f8 02          	sar    rax,0x2
   26a69:	48 89 c2             	mov    rdx,rax
   26a6c:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   26a76:	48 0f af c2          	imul   rax,rdx
   26a7a:	48 89 c2             	mov    rdx,rax
   26a7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a81:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26a84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a88:	48 89 ce             	mov    rsi,rcx
   26a8b:	48 89 c7             	mov    rdi,rax
   26a8e:	e8 07 1e 00 00       	call   2889a <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)>
   26a93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a97:	48 89 c7             	mov    rdi,rax
   26a9a:	e8 f9 e6 ff ff       	call   25198 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::~_Vector_impl()>
   26a9f:	90                   	nop
   26aa0:	c9                   	leave  
   26aa1:	c3                   	ret    

0000000000026aa2 <std::vector<Transform, std::allocator<Transform> >::~vector()>:
   26aa2:	55                   	push   rbp
   26aa3:	48 89 e5             	mov    rbp,rsp
   26aa6:	48 83 ec 10          	sub    rsp,0x10
   26aaa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26aae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ab2:	48 89 c7             	mov    rdi,rax
   26ab5:	e8 16 1e 00 00       	call   288d0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>
   26aba:	48 89 c2             	mov    rdx,rax
   26abd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ac1:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26ac5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ac9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26acc:	48 89 ce             	mov    rsi,rcx
   26acf:	48 89 c7             	mov    rdi,rax
   26ad2:	e8 07 1e 00 00       	call   288de <void std::_Destroy<Transform*, Transform>(Transform*, Transform*, std::allocator<Transform>&)>
   26ad7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26adb:	48 89 c7             	mov    rdi,rax
   26ade:	e8 61 ff ff ff       	call   26a44 <std::_Vector_base<Transform, std::allocator<Transform> >::~_Vector_base()>
   26ae3:	90                   	nop
   26ae4:	c9                   	leave  
   26ae5:	c3                   	ret    

0000000000026ae6 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::_Vector_impl()>:
   26ae6:	55                   	push   rbp
   26ae7:	48 89 e5             	mov    rbp,rsp
   26aea:	48 83 ec 10          	sub    rsp,0x10
   26aee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26af2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26af6:	48 89 c7             	mov    rdi,rax
   26af9:	e8 0a 1e 00 00       	call   28908 <std::allocator<AABB>::allocator()>
   26afe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b02:	48 89 c7             	mov    rdi,rax
   26b05:	e8 1a 1e 00 00       	call   28924 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl_data::_Vector_impl_data()>
   26b0a:	90                   	nop
   26b0b:	c9                   	leave  
   26b0c:	c3                   	ret    
   26b0d:	90                   	nop

0000000000026b0e <std::allocator<AABB>::~allocator()>:
   26b0e:	55                   	push   rbp
   26b0f:	48 89 e5             	mov    rbp,rsp
   26b12:	48 83 ec 10          	sub    rsp,0x10
   26b16:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26b1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b1e:	48 89 c7             	mov    rdi,rax
   26b21:	e8 2c 1e 00 00       	call   28952 <__gnu_cxx::new_allocator<AABB>::~new_allocator()>
   26b26:	90                   	nop
   26b27:	c9                   	leave  
   26b28:	c3                   	ret    
   26b29:	90                   	nop

0000000000026b2a <std::_Vector_base<AABB, std::allocator<AABB> >::~_Vector_base()>:
   26b2a:	55                   	push   rbp
   26b2b:	48 89 e5             	mov    rbp,rsp
   26b2e:	48 83 ec 10          	sub    rsp,0x10
   26b32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26b36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b3a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26b3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b42:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26b45:	48 89 d0             	mov    rax,rdx
   26b48:	48 29 c8             	sub    rax,rcx
   26b4b:	48 c1 f8 03          	sar    rax,0x3
   26b4f:	48 89 c2             	mov    rdx,rax
   26b52:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   26b5c:	48 0f af c2          	imul   rax,rdx
   26b60:	48 89 c2             	mov    rdx,rax
   26b63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b67:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26b6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b6e:	48 89 ce             	mov    rsi,rcx
   26b71:	48 89 c7             	mov    rdi,rax
   26b74:	e8 e5 1d 00 00       	call   2895e <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)>
   26b79:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b7d:	48 89 c7             	mov    rdi,rax
   26b80:	e8 67 e6 ff ff       	call   251ec <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::~_Vector_impl()>
   26b85:	90                   	nop
   26b86:	c9                   	leave  
   26b87:	c3                   	ret    

0000000000026b88 <std::vector<AABB, std::allocator<AABB> >::~vector()>:
   26b88:	55                   	push   rbp
   26b89:	48 89 e5             	mov    rbp,rsp
   26b8c:	48 83 ec 10          	sub    rsp,0x10
   26b90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26b94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b98:	48 89 c7             	mov    rdi,rax
   26b9b:	e8 f4 1d 00 00       	call   28994 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>
   26ba0:	48 89 c2             	mov    rdx,rax
   26ba3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ba7:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26bab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26baf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26bb2:	48 89 ce             	mov    rsi,rcx
   26bb5:	48 89 c7             	mov    rdi,rax
   26bb8:	e8 e5 1d 00 00       	call   289a2 <void std::_Destroy<AABB*, AABB>(AABB*, AABB*, std::allocator<AABB>&)>
   26bbd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26bc1:	48 89 c7             	mov    rdi,rax
   26bc4:	e8 61 ff ff ff       	call   26b2a <std::_Vector_base<AABB, std::allocator<AABB> >::~_Vector_base()>
   26bc9:	90                   	nop
   26bca:	c9                   	leave  
   26bcb:	c3                   	ret    

0000000000026bcc <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, int, float>(int, int, int, float)>:
   26bcc:	55                   	push   rbp
   26bcd:	48 89 e5             	mov    rbp,rsp
   26bd0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26bd4:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26bd7:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   26bda:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
   26bdd:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   26be2:	66 0f ef c0          	pxor   xmm0,xmm0
   26be6:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   26beb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26bef:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   26bf3:	66 0f ef c0          	pxor   xmm0,xmm0
   26bf7:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   26bfc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c00:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   26c05:	66 0f ef c0          	pxor   xmm0,xmm0
   26c09:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   26c0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c12:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   26c17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c1b:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   26c20:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   26c25:	90                   	nop
   26c26:	5d                   	pop    rbp
   26c27:	c3                   	ret    

0000000000026c28 <glm::mat<4, 4, float, (glm::qualifier)0>::mat(float const&)>:
   26c28:	55                   	push   rbp
   26c29:	48 89 e5             	mov    rbp,rsp
   26c2c:	48 83 ec 10          	sub    rsp,0x10
   26c30:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26c34:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26c38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c3c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26c40:	8b 3a                	mov    edi,DWORD PTR [rdx]
   26c42:	b9 00 00 00 00       	mov    ecx,0x0
   26c47:	ba 00 00 00 00       	mov    edx,0x0
   26c4c:	be 00 00 00 00       	mov    esi,0x0
   26c51:	66 0f 6e c7          	movd   xmm0,edi
   26c55:	48 89 c7             	mov    rdi,rax
   26c58:	e8 7f ee ff ff       	call   25adc <glm::vec<4, float, (glm::qualifier)0>::vec<float, int, int, int>(float, int, int, int)>
   26c5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c61:	48 8d 78 10          	lea    rdi,[rax+0x10]
   26c65:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26c69:	8b 00                	mov    eax,DWORD PTR [rax]
   26c6b:	b9 00 00 00 00       	mov    ecx,0x0
   26c70:	ba 00 00 00 00       	mov    edx,0x0
   26c75:	66 0f 6e c0          	movd   xmm0,eax
   26c79:	be 00 00 00 00       	mov    esi,0x0
   26c7e:	e8 b5 ee ff ff       	call   25b38 <glm::vec<4, float, (glm::qualifier)0>::vec<int, float, int, int>(int, float, int, int)>
   26c83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c87:	48 8d 78 20          	lea    rdi,[rax+0x20]
   26c8b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26c8f:	8b 00                	mov    eax,DWORD PTR [rax]
   26c91:	b9 00 00 00 00       	mov    ecx,0x0
   26c96:	66 0f 6e c0          	movd   xmm0,eax
   26c9a:	ba 00 00 00 00       	mov    edx,0x0
   26c9f:	be 00 00 00 00       	mov    esi,0x0
   26ca4:	e8 eb ee ff ff       	call   25b94 <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, float, int>(int, int, float, int)>
   26ca9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26cad:	48 8d 78 30          	lea    rdi,[rax+0x30]
   26cb1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26cb5:	8b 00                	mov    eax,DWORD PTR [rax]
   26cb7:	66 0f 6e c0          	movd   xmm0,eax
   26cbb:	b9 00 00 00 00       	mov    ecx,0x0
   26cc0:	ba 00 00 00 00       	mov    edx,0x0
   26cc5:	be 00 00 00 00       	mov    esi,0x0
   26cca:	e8 fd fe ff ff       	call   26bcc <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, int, float>(int, int, int, float)>
   26ccf:	90                   	nop
   26cd0:	c9                   	leave  
   26cd1:	c3                   	ret    

0000000000026cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>:
   26cd2:	55                   	push   rbp
   26cd3:	48 89 e5             	mov    rbp,rsp
   26cd6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26cda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26cde:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26ce2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ce6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26ce9:	48 89 d0             	mov    rax,rdx
   26cec:	48 29 c8             	sub    rax,rcx
   26cef:	48 c1 f8 03          	sar    rax,0x3
   26cf3:	48 89 c2             	mov    rdx,rax
   26cf6:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   26d00:	48 0f af c2          	imul   rax,rdx
   26d04:	5d                   	pop    rbp
   26d05:	c3                   	ret    

0000000000026d06 <std::vector<Mesh, std::allocator<Mesh> >::size() const>:
   26d06:	55                   	push   rbp
   26d07:	48 89 e5             	mov    rbp,rsp
   26d0a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26d0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d12:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26d16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d1a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26d1d:	48 89 d0             	mov    rax,rdx
   26d20:	48 29 c8             	sub    rax,rcx
   26d23:	48 c1 f8 02          	sar    rax,0x2
   26d27:	5d                   	pop    rbp
   26d28:	c3                   	ret    
   26d29:	90                   	nop

0000000000026d2a <std::vector<Transform, std::allocator<Transform> >::size() const>:
   26d2a:	55                   	push   rbp
   26d2b:	48 89 e5             	mov    rbp,rsp
   26d2e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26d32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d36:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26d3a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d3e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26d41:	48 89 d0             	mov    rax,rdx
   26d44:	48 29 c8             	sub    rax,rcx
   26d47:	48 c1 f8 02          	sar    rax,0x2
   26d4b:	48 89 c2             	mov    rdx,rax
   26d4e:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   26d58:	48 0f af c2          	imul   rax,rdx
   26d5c:	5d                   	pop    rbp
   26d5d:	c3                   	ret    

0000000000026d5e <glm::mat<4, 4, float, (glm::qualifier)0>::length()>:
   26d5e:	55                   	push   rbp
   26d5f:	48 89 e5             	mov    rbp,rsp
   26d62:	b8 04 00 00 00       	mov    eax,0x4
   26d67:	5d                   	pop    rbp
   26d68:	c3                   	ret    
   26d69:	90                   	nop

0000000000026d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>:
   26d6a:	55                   	push   rbp
   26d6b:	48 89 e5             	mov    rbp,rsp
   26d6e:	48 83 ec 10          	sub    rsp,0x10
   26d72:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26d76:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26d79:	e8 e0 ff ff ff       	call   26d5e <glm::mat<4, 4, float, (glm::qualifier)0>::length()>
   26d7e:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   26d81:	7c 1f                	jl     26da2 <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const+0x38>
   26d83:	48 8d 0d c6 5d 01 00 	lea    rcx,[rip+0x15dc6]        # 3cb50 <NANO_SEC+0x1888>
   26d8a:	ba 2a 01 00 00       	mov    edx,0x12a
   26d8f:	48 8d 35 7a 5d 01 00 	lea    rsi,[rip+0x15d7a]        # 3cb10 <NANO_SEC+0x1848>
   26d96:	48 8d 3d 9b 5d 01 00 	lea    rdi,[rip+0x15d9b]        # 3cb38 <NANO_SEC+0x1870>
   26d9d:	e8 de d4 fd ff       	call   4280 <__assert_fail@plt>
   26da2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   26da5:	48 98                	cdqe   
   26da7:	48 c1 e0 04          	shl    rax,0x4
   26dab:	48 89 c2             	mov    rdx,rax
   26dae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26db2:	48 01 d0             	add    rax,rdx
   26db5:	c9                   	leave  
   26db6:	c3                   	ret    

0000000000026db7 <glm::mat<4, 4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::mat<4, 4, float, (glm::qualifier)0> const&, glm::mat<4, 4, float, (glm::qualifier)0> const&)>:
   26db7:	55                   	push   rbp
   26db8:	48 89 e5             	mov    rbp,rsp
   26dbb:	41 55                	push   r13
   26dbd:	41 54                	push   r12
   26dbf:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   26dc6:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
   26dcd:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
   26dd4:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
   26ddb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26de4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   26de8:	31 c0                	xor    eax,eax
   26dea:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   26df1:	be 00 00 00 00       	mov    esi,0x0
   26df6:	48 89 c7             	mov    rdi,rax
   26df9:	e8 6c ff ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26dfe:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26e02:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26e05:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
   26e0c:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
   26e13:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   26e1a:	be 01 00 00 00       	mov    esi,0x1
   26e1f:	48 89 c7             	mov    rdi,rax
   26e22:	e8 43 ff ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26e27:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26e2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26e2e:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
   26e35:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
   26e3c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   26e43:	be 02 00 00 00       	mov    esi,0x2
   26e48:	48 89 c7             	mov    rdi,rax
   26e4b:	e8 1a ff ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26e50:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26e54:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26e57:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
   26e5e:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
   26e65:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   26e6c:	be 03 00 00 00       	mov    esi,0x3
   26e71:	48 89 c7             	mov    rdi,rax
   26e74:	e8 f1 fe ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26e79:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26e7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26e80:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
   26e87:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
   26e8e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   26e95:	be 00 00 00 00       	mov    esi,0x0
   26e9a:	48 89 c7             	mov    rdi,rax
   26e9d:	e8 c8 fe ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26ea2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26ea6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26ea9:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   26eb0:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   26eb7:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   26ebe:	be 01 00 00 00       	mov    esi,0x1
   26ec3:	48 89 c7             	mov    rdi,rax
   26ec6:	e8 9f fe ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26ecb:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26ecf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26ed2:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
   26ed9:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
   26ee0:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   26ee7:	be 02 00 00 00       	mov    esi,0x2
   26eec:	48 89 c7             	mov    rdi,rax
   26eef:	e8 76 fe ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26ef4:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26ef8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26efb:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
   26f02:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
   26f09:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   26f10:	be 03 00 00 00       	mov    esi,0x3
   26f15:	48 89 c7             	mov    rdi,rax
   26f18:	e8 4d fe ff ff       	call   26d6a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int) const>
   26f1d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26f21:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26f24:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   26f2b:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
   26f32:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   26f39:	be 03 00 00 00       	mov    esi,0x3
   26f3e:	48 89 c7             	mov    rdi,rax
   26f41:	e8 86 1a 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   26f46:	48 89 c2             	mov    rdx,rax
   26f49:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   26f50:	48 89 d6             	mov    rsi,rdx
   26f53:	48 89 c7             	mov    rdi,rax
   26f56:	e8 93 e6 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   26f5b:	66 48 0f 7e c0       	movq   rax,xmm0
   26f60:	66 0f 6f c1          	movdqa xmm0,xmm1
   26f64:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   26f68:	66 0f d6 45 d8       	movq   QWORD PTR [rbp-0x28],xmm0
   26f6d:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   26f74:	be 02 00 00 00       	mov    esi,0x2
   26f79:	48 89 c7             	mov    rdi,rax
   26f7c:	e8 4b 1a 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   26f81:	48 89 c2             	mov    rdx,rax
   26f84:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   26f8b:	48 89 d6             	mov    rsi,rdx
   26f8e:	48 89 c7             	mov    rdi,rax
   26f91:	e8 58 e6 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   26f96:	66 48 0f 7e c0       	movq   rax,xmm0
   26f9b:	66 0f 6f c1          	movdqa xmm0,xmm1
   26f9f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   26fa3:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   26fa8:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   26faf:	be 01 00 00 00       	mov    esi,0x1
   26fb4:	48 89 c7             	mov    rdi,rax
   26fb7:	e8 10 1a 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   26fbc:	48 89 c2             	mov    rdx,rax
   26fbf:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
   26fc6:	48 89 d6             	mov    rsi,rdx
   26fc9:	48 89 c7             	mov    rdi,rax
   26fcc:	e8 1d e6 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   26fd1:	66 48 0f 7e c0       	movq   rax,xmm0
   26fd6:	66 0f 6f c1          	movdqa xmm0,xmm1
   26fda:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   26fde:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   26fe3:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   26fea:	be 00 00 00 00       	mov    esi,0x0
   26fef:	48 89 c7             	mov    rdi,rax
   26ff2:	e8 d5 19 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   26ff7:	48 89 c2             	mov    rdx,rax
   26ffa:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   27001:	48 89 d6             	mov    rsi,rdx
   27004:	48 89 c7             	mov    rdi,rax
   27007:	e8 e2 e5 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   2700c:	66 48 0f 7e c0       	movq   rax,xmm0
   27011:	66 0f 6f c1          	movdqa xmm0,xmm1
   27015:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   27019:	66 0f d6 45 88       	movq   QWORD PTR [rbp-0x78],xmm0
   2701e:	48 8d 55 90          	lea    rdx,[rbp-0x70]
   27022:	48 8d 45 80          	lea    rax,[rbp-0x80]
   27026:	48 89 d6             	mov    rsi,rdx
   27029:	48 89 c7             	mov    rdi,rax
   2702c:	e8 15 1a 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   27031:	66 48 0f 7e c0       	movq   rax,xmm0
   27036:	66 0f 6f c1          	movdqa xmm0,xmm1
   2703a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2703e:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   27043:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   27047:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2704b:	48 89 d6             	mov    rsi,rdx
   2704e:	48 89 c7             	mov    rdi,rax
   27051:	e8 f0 19 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   27056:	66 48 0f 7e c0       	movq   rax,xmm0
   2705b:	66 0f 6f c1          	movdqa xmm0,xmm1
   2705f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   27063:	66 0f d6 45 c8       	movq   QWORD PTR [rbp-0x38],xmm0
   27068:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   2706c:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   27070:	48 89 d6             	mov    rsi,rdx
   27073:	48 89 c7             	mov    rdi,rax
   27076:	e8 cb 19 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2707b:	66 48 0f 7e c0       	movq   rax,xmm0
   27080:	66 0f 6f c1          	movdqa xmm0,xmm1
   27084:	49 89 c4             	mov    r12,rax
   27087:	49 89 d5             	mov    r13,rdx
   2708a:	66 49 0f 7e c5       	movq   r13,xmm0
   2708f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   27096:	be 00 00 00 00       	mov    esi,0x0
   2709b:	48 89 c7             	mov    rdi,rax
   2709e:	e8 c7 f6 ff ff       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   270a3:	4c 89 20             	mov    QWORD PTR [rax],r12
   270a6:	4c 89 68 08          	mov    QWORD PTR [rax+0x8],r13
   270aa:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   270b1:	be 03 00 00 00       	mov    esi,0x3
   270b6:	48 89 c7             	mov    rdi,rax
   270b9:	e8 0e 19 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   270be:	48 89 c2             	mov    rdx,rax
   270c1:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   270c8:	48 89 d6             	mov    rsi,rdx
   270cb:	48 89 c7             	mov    rdi,rax
   270ce:	e8 1b e5 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   270d3:	66 48 0f 7e c0       	movq   rax,xmm0
   270d8:	66 0f 6f c1          	movdqa xmm0,xmm1
   270dc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   270e0:	66 0f d6 45 d8       	movq   QWORD PTR [rbp-0x28],xmm0
   270e5:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   270ec:	be 02 00 00 00       	mov    esi,0x2
   270f1:	48 89 c7             	mov    rdi,rax
   270f4:	e8 d3 18 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   270f9:	48 89 c2             	mov    rdx,rax
   270fc:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   27103:	48 89 d6             	mov    rsi,rdx
   27106:	48 89 c7             	mov    rdi,rax
   27109:	e8 e0 e4 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   2710e:	66 48 0f 7e c0       	movq   rax,xmm0
   27113:	66 0f 6f c1          	movdqa xmm0,xmm1
   27117:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2711b:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   27120:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   27127:	be 01 00 00 00       	mov    esi,0x1
   2712c:	48 89 c7             	mov    rdi,rax
   2712f:	e8 98 18 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   27134:	48 89 c2             	mov    rdx,rax
   27137:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
   2713e:	48 89 d6             	mov    rsi,rdx
   27141:	48 89 c7             	mov    rdi,rax
   27144:	e8 a5 e4 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   27149:	66 48 0f 7e c0       	movq   rax,xmm0
   2714e:	66 0f 6f c1          	movdqa xmm0,xmm1
   27152:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   27156:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   2715b:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   27162:	be 00 00 00 00       	mov    esi,0x0
   27167:	48 89 c7             	mov    rdi,rax
   2716a:	e8 5d 18 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   2716f:	48 89 c2             	mov    rdx,rax
   27172:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   27179:	48 89 d6             	mov    rsi,rdx
   2717c:	48 89 c7             	mov    rdi,rax
   2717f:	e8 6a e4 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   27184:	66 48 0f 7e c0       	movq   rax,xmm0
   27189:	66 0f 6f c1          	movdqa xmm0,xmm1
   2718d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   27191:	66 0f d6 45 88       	movq   QWORD PTR [rbp-0x78],xmm0
   27196:	48 8d 55 90          	lea    rdx,[rbp-0x70]
   2719a:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2719e:	48 89 d6             	mov    rsi,rdx
   271a1:	48 89 c7             	mov    rdi,rax
   271a4:	e8 9d 18 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   271a9:	66 48 0f 7e c0       	movq   rax,xmm0
   271ae:	66 0f 6f c1          	movdqa xmm0,xmm1
   271b2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   271b6:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   271bb:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   271bf:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   271c3:	48 89 d6             	mov    rsi,rdx
   271c6:	48 89 c7             	mov    rdi,rax
   271c9:	e8 78 18 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   271ce:	66 48 0f 7e c0       	movq   rax,xmm0
   271d3:	66 0f 6f c1          	movdqa xmm0,xmm1
   271d7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   271db:	66 0f d6 45 c8       	movq   QWORD PTR [rbp-0x38],xmm0
   271e0:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   271e4:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   271e8:	48 89 d6             	mov    rsi,rdx
   271eb:	48 89 c7             	mov    rdi,rax
   271ee:	e8 53 18 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   271f3:	66 48 0f 7e c0       	movq   rax,xmm0
   271f8:	66 0f 6f c1          	movdqa xmm0,xmm1
   271fc:	49 89 c4             	mov    r12,rax
   271ff:	49 89 d5             	mov    r13,rdx
   27202:	66 49 0f 7e c5       	movq   r13,xmm0
   27207:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   2720e:	be 01 00 00 00       	mov    esi,0x1
   27213:	48 89 c7             	mov    rdi,rax
   27216:	e8 4f f5 ff ff       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   2721b:	4c 89 20             	mov    QWORD PTR [rax],r12
   2721e:	4c 89 68 08          	mov    QWORD PTR [rax+0x8],r13
   27222:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   27229:	be 03 00 00 00       	mov    esi,0x3
   2722e:	48 89 c7             	mov    rdi,rax
   27231:	e8 96 17 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   27236:	48 89 c2             	mov    rdx,rax
   27239:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   27240:	48 89 d6             	mov    rsi,rdx
   27243:	48 89 c7             	mov    rdi,rax
   27246:	e8 a3 e3 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   2724b:	66 48 0f 7e c0       	movq   rax,xmm0
   27250:	66 0f 6f c1          	movdqa xmm0,xmm1
   27254:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   27258:	66 0f d6 45 d8       	movq   QWORD PTR [rbp-0x28],xmm0
   2725d:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   27264:	be 02 00 00 00       	mov    esi,0x2
   27269:	48 89 c7             	mov    rdi,rax
   2726c:	e8 5b 17 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   27271:	48 89 c2             	mov    rdx,rax
   27274:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   2727b:	48 89 d6             	mov    rsi,rdx
   2727e:	48 89 c7             	mov    rdi,rax
   27281:	e8 68 e3 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   27286:	66 48 0f 7e c0       	movq   rax,xmm0
   2728b:	66 0f 6f c1          	movdqa xmm0,xmm1
   2728f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   27293:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   27298:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2729f:	be 01 00 00 00       	mov    esi,0x1
   272a4:	48 89 c7             	mov    rdi,rax
   272a7:	e8 20 17 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   272ac:	48 89 c2             	mov    rdx,rax
   272af:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
   272b6:	48 89 d6             	mov    rsi,rdx
   272b9:	48 89 c7             	mov    rdi,rax
   272bc:	e8 2d e3 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   272c1:	66 48 0f 7e c0       	movq   rax,xmm0
   272c6:	66 0f 6f c1          	movdqa xmm0,xmm1
   272ca:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   272ce:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   272d3:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   272da:	be 00 00 00 00       	mov    esi,0x0
   272df:	48 89 c7             	mov    rdi,rax
   272e2:	e8 e5 16 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   272e7:	48 89 c2             	mov    rdx,rax
   272ea:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   272f1:	48 89 d6             	mov    rsi,rdx
   272f4:	48 89 c7             	mov    rdi,rax
   272f7:	e8 f2 e2 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   272fc:	66 48 0f 7e c0       	movq   rax,xmm0
   27301:	66 0f 6f c1          	movdqa xmm0,xmm1
   27305:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   27309:	66 0f d6 45 88       	movq   QWORD PTR [rbp-0x78],xmm0
   2730e:	48 8d 55 90          	lea    rdx,[rbp-0x70]
   27312:	48 8d 45 80          	lea    rax,[rbp-0x80]
   27316:	48 89 d6             	mov    rsi,rdx
   27319:	48 89 c7             	mov    rdi,rax
   2731c:	e8 25 17 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   27321:	66 48 0f 7e c0       	movq   rax,xmm0
   27326:	66 0f 6f c1          	movdqa xmm0,xmm1
   2732a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2732e:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   27333:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   27337:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2733b:	48 89 d6             	mov    rsi,rdx
   2733e:	48 89 c7             	mov    rdi,rax
   27341:	e8 00 17 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   27346:	66 48 0f 7e c0       	movq   rax,xmm0
   2734b:	66 0f 6f c1          	movdqa xmm0,xmm1
   2734f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   27353:	66 0f d6 45 c8       	movq   QWORD PTR [rbp-0x38],xmm0
   27358:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   2735c:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   27360:	48 89 d6             	mov    rsi,rdx
   27363:	48 89 c7             	mov    rdi,rax
   27366:	e8 db 16 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2736b:	66 48 0f 7e c0       	movq   rax,xmm0
   27370:	66 0f 6f c1          	movdqa xmm0,xmm1
   27374:	49 89 c4             	mov    r12,rax
   27377:	49 89 d5             	mov    r13,rdx
   2737a:	66 49 0f 7e c5       	movq   r13,xmm0
   2737f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   27386:	be 02 00 00 00       	mov    esi,0x2
   2738b:	48 89 c7             	mov    rdi,rax
   2738e:	e8 d7 f3 ff ff       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   27393:	4c 89 20             	mov    QWORD PTR [rax],r12
   27396:	4c 89 68 08          	mov    QWORD PTR [rax+0x8],r13
   2739a:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   273a1:	be 03 00 00 00       	mov    esi,0x3
   273a6:	48 89 c7             	mov    rdi,rax
   273a9:	e8 1e 16 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   273ae:	48 89 c2             	mov    rdx,rax
   273b1:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   273b8:	48 89 d6             	mov    rsi,rdx
   273bb:	48 89 c7             	mov    rdi,rax
   273be:	e8 2b e2 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   273c3:	66 48 0f 7e c0       	movq   rax,xmm0
   273c8:	66 0f 6f c1          	movdqa xmm0,xmm1
   273cc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   273d0:	66 0f d6 45 d8       	movq   QWORD PTR [rbp-0x28],xmm0
   273d5:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   273dc:	be 02 00 00 00       	mov    esi,0x2
   273e1:	48 89 c7             	mov    rdi,rax
   273e4:	e8 e3 15 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   273e9:	48 89 c2             	mov    rdx,rax
   273ec:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   273f3:	48 89 d6             	mov    rsi,rdx
   273f6:	48 89 c7             	mov    rdi,rax
   273f9:	e8 f0 e1 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   273fe:	66 48 0f 7e c0       	movq   rax,xmm0
   27403:	66 0f 6f c1          	movdqa xmm0,xmm1
   27407:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2740b:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   27410:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   27417:	be 01 00 00 00       	mov    esi,0x1
   2741c:	48 89 c7             	mov    rdi,rax
   2741f:	e8 a8 15 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   27424:	48 89 c2             	mov    rdx,rax
   27427:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
   2742e:	48 89 d6             	mov    rsi,rdx
   27431:	48 89 c7             	mov    rdi,rax
   27434:	e8 b5 e1 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   27439:	66 48 0f 7e c0       	movq   rax,xmm0
   2743e:	66 0f 6f c1          	movdqa xmm0,xmm1
   27442:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   27446:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   2744b:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   27452:	be 00 00 00 00       	mov    esi,0x0
   27457:	48 89 c7             	mov    rdi,rax
   2745a:	e8 6d 15 00 00       	call   289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>
   2745f:	48 89 c2             	mov    rdx,rax
   27462:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   27469:	48 89 d6             	mov    rsi,rdx
   2746c:	48 89 c7             	mov    rdi,rax
   2746f:	e8 7a e1 ff ff       	call   255ee <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, float const&)>
   27474:	66 48 0f 7e c0       	movq   rax,xmm0
   27479:	66 0f 6f c1          	movdqa xmm0,xmm1
   2747d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   27481:	66 0f d6 45 88       	movq   QWORD PTR [rbp-0x78],xmm0
   27486:	48 8d 55 90          	lea    rdx,[rbp-0x70]
   2748a:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2748e:	48 89 d6             	mov    rsi,rdx
   27491:	48 89 c7             	mov    rdi,rax
   27494:	e8 ad 15 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   27499:	66 48 0f 7e c0       	movq   rax,xmm0
   2749e:	66 0f 6f c1          	movdqa xmm0,xmm1
   274a2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   274a6:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   274ab:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   274af:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   274b3:	48 89 d6             	mov    rsi,rdx
   274b6:	48 89 c7             	mov    rdi,rax
   274b9:	e8 88 15 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   274be:	66 48 0f 7e c0       	movq   rax,xmm0
   274c3:	66 0f 6f c1          	movdqa xmm0,xmm1
   274c7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   274cb:	66 0f d6 45 c8       	movq   QWORD PTR [rbp-0x38],xmm0
   274d0:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   274d4:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   274d8:	48 89 d6             	mov    rsi,rdx
   274db:	48 89 c7             	mov    rdi,rax
   274de:	e8 63 15 00 00       	call   28a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   274e3:	66 48 0f 7e c0       	movq   rax,xmm0
   274e8:	66 0f 6f c1          	movdqa xmm0,xmm1
   274ec:	49 89 c4             	mov    r12,rax
   274ef:	49 89 d5             	mov    r13,rdx
   274f2:	66 49 0f 7e c5       	movq   r13,xmm0
   274f7:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   274fe:	be 03 00 00 00       	mov    esi,0x3
   27503:	48 89 c7             	mov    rdi,rax
   27506:	e8 5f f2 ff ff       	call   2676a <glm::mat<4, 4, float, (glm::qualifier)0>::operator[](int)>
   2750b:	4c 89 20             	mov    QWORD PTR [rax],r12
   2750e:	4c 89 68 08          	mov    QWORD PTR [rax+0x8],r13
   27512:	90                   	nop
   27513:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27517:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   27520:	74 05                	je     27527 <glm::mat<4, 4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::mat<4, 4, float, (glm::qualifier)0> const&, glm::mat<4, 4, float, (glm::qualifier)0> const&)+0x770>
   27522:	e8 89 cf fd ff       	call   44b0 <__stack_chk_fail@plt>
   27527:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   2752e:	48 81 c4 10 01 00 00 	add    rsp,0x110
   27535:	41 5c                	pop    r12
   27537:	41 5d                	pop    r13
   27539:	5d                   	pop    rbp
   2753a:	c3                   	ret    
   2753b:	90                   	nop

000000000002753c <std::vector<AABB, std::allocator<AABB> >::operator[](unsigned long)>:
   2753c:	55                   	push   rbp
   2753d:	48 89 e5             	mov    rbp,rsp
   27540:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27544:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27548:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2754c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2754f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   27553:	48 89 d0             	mov    rax,rdx
   27556:	48 01 c0             	add    rax,rax
   27559:	48 01 d0             	add    rax,rdx
   2755c:	48 c1 e0 03          	shl    rax,0x3
   27560:	48 01 c8             	add    rax,rcx
   27563:	5d                   	pop    rbp
   27564:	c3                   	ret    
   27565:	90                   	nop

0000000000027566 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>:
   27566:	55                   	push   rbp
   27567:	48 89 e5             	mov    rbp,rsp
   2756a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2756e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27572:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27576:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   27579:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2757d:	48 c1 e0 02          	shl    rax,0x2
   27581:	48 01 d0             	add    rax,rdx
   27584:	5d                   	pop    rbp
   27585:	c3                   	ret    

0000000000027586 <std::vector<Mesh, std::allocator<Mesh> >::operator[](unsigned long)>:
   27586:	55                   	push   rbp
   27587:	48 89 e5             	mov    rbp,rsp
   2758a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2758e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27592:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27596:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   27599:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2759d:	48 c1 e0 02          	shl    rax,0x2
   275a1:	48 01 d0             	add    rax,rdx
   275a4:	5d                   	pop    rbp
   275a5:	c3                   	ret    

00000000000275a6 <std::vector<Transform, std::allocator<Transform> >::operator[](unsigned long)>:
   275a6:	55                   	push   rbp
   275a7:	48 89 e5             	mov    rbp,rsp
   275aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   275ae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   275b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   275b6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   275b9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   275bd:	48 89 d0             	mov    rax,rdx
   275c0:	48 c1 e0 03          	shl    rax,0x3
   275c4:	48 01 d0             	add    rax,rdx
   275c7:	48 c1 e0 02          	shl    rax,0x2
   275cb:	48 01 c8             	add    rax,rcx
   275ce:	5d                   	pop    rbp
   275cf:	c3                   	ret    

00000000000275d0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>:
   275d0:	55                   	push   rbp
   275d1:	48 89 e5             	mov    rbp,rsp
   275d4:	48 83 ec 20          	sub    rsp,0x20
   275d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   275dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   275e0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   275e4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   275e8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   275ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   275f0:	48 89 ce             	mov    rsi,rcx
   275f3:	48 89 c7             	mov    rdi,rax
   275f6:	e8 c5 14 00 00       	call   28ac0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)>
   275fb:	90                   	nop
   275fc:	c9                   	leave  
   275fd:	c3                   	ret    

00000000000275fe <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr()>:
   275fe:	55                   	push   rbp
   275ff:	48 89 e5             	mov    rbp,rsp
   27602:	48 83 ec 10          	sub    rsp,0x10
   27606:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2760a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2760e:	48 89 c7             	mov    rdi,rax
   27611:	e8 fb 14 00 00       	call   28b11 <std::tuple_element<0ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   27616:	c9                   	leave  
   27617:	c3                   	ret    

0000000000027618 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter()>:
   27618:	55                   	push   rbp
   27619:	48 89 e5             	mov    rbp,rsp
   2761c:	48 83 ec 10          	sub    rsp,0x10
   27620:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27624:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27628:	48 89 c7             	mov    rdi,rax
   2762b:	e8 5c 00 00 00       	call   2768c <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter()>
   27630:	c9                   	leave  
   27631:	c3                   	ret    

0000000000027632 <std::remove_reference<std::filesystem::__cxx11::path::_List::_Impl*&>::type&& std::move<std::filesystem::__cxx11::path::_List::_Impl*&>(std::filesystem::__cxx11::path::_List::_Impl*&)>:
   27632:	55                   	push   rbp
   27633:	48 89 e5             	mov    rbp,rsp
   27636:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2763a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2763e:	5d                   	pop    rbp
   2763f:	c3                   	ret    

0000000000027640 <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)>:
   27640:	55                   	push   rbp
   27641:	48 89 e5             	mov    rbp,rsp
   27644:	48 83 ec 20          	sub    rsp,0x20
   27648:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2764c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27650:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27659:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2765d:	31 c0                	xor    eax,eax
   2765f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27663:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   27667:	48 89 d6             	mov    rsi,rdx
   2766a:	48 89 c7             	mov    rdi,rax
   2766d:	e8 d3 14 00 00       	call   28b45 <std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)>
   27672:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27676:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2767f:	74 05                	je     27686 <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)+0x46>
   27681:	e8 2a ce fd ff       	call   44b0 <__stack_chk_fail@plt>
   27686:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2768a:	c9                   	leave  
   2768b:	c3                   	ret    

000000000002768c <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter()>:
   2768c:	55                   	push   rbp
   2768d:	48 89 e5             	mov    rbp,rsp
   27690:	48 83 ec 10          	sub    rsp,0x10
   27694:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27698:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2769c:	48 89 c7             	mov    rdi,rax
   2769f:	e8 ca 14 00 00       	call   28b6e <std::tuple_element<1ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   276a4:	c9                   	leave  
   276a5:	c3                   	ret    

00000000000276a6 <glm::vec<4, float, (glm::qualifier)0>::vec(float)>:
   276a6:	55                   	push   rbp
   276a7:	48 89 e5             	mov    rbp,rsp
   276aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   276ae:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   276b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   276b7:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   276bc:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   276c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   276c4:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   276c9:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   276ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   276d2:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   276d7:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   276dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   276e0:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   276e5:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   276ea:	90                   	nop
   276eb:	5d                   	pop    rbp
   276ec:	c3                   	ret    
   276ed:	90                   	nop

00000000000276ee <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(float)>:
   276ee:	55                   	push   rbp
   276ef:	48 89 e5             	mov    rbp,rsp
   276f2:	48 83 ec 30          	sub    rsp,0x30
   276f6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   276fa:	f3 0f 11 45 d4       	movss  DWORD PTR [rbp-0x2c],xmm0
   276ff:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27708:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2770c:	31 c0                	xor    eax,eax
   2770e:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   27711:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   27715:	66 0f 6e c2          	movd   xmm0,edx
   27719:	48 89 c7             	mov    rdi,rax
   2771c:	e8 85 ff ff ff       	call   276a6 <glm::vec<4, float, (glm::qualifier)0>::vec(float)>
   27721:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   27725:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27729:	48 89 d6             	mov    rsi,rdx
   2772c:	48 89 c7             	mov    rdi,rax
   2772f:	e8 54 14 00 00       	call   28b88 <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   27734:	66 48 0f 7e c2       	movq   rdx,xmm0
   27739:	66 0f 6f c1          	movdqa xmm0,xmm1
   2773d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27741:	48 89 10             	mov    QWORD PTR [rax],rdx
   27744:	66 0f d6 40 08       	movq   QWORD PTR [rax+0x8],xmm0
   27749:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2774d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   27751:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2775a:	74 05                	je     27761 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(float)+0x73>
   2775c:	e8 4f cd fd ff       	call   44b0 <__stack_chk_fail@plt>
   27761:	c9                   	leave  
   27762:	c3                   	ret    

0000000000027763 <char const* std::filesystem::__cxx11::__detail::_S_range_begin<char const*>(char const*)>:
   27763:	55                   	push   rbp
   27764:	48 89 e5             	mov    rbp,rsp
   27767:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2776b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2776f:	5d                   	pop    rbp
   27770:	c3                   	ret    

0000000000027771 <std::filesystem::__cxx11::__detail::__null_terminated std::filesystem::__cxx11::__detail::_S_range_end<char const*>(char const*)>:
   27771:	55                   	push   rbp
   27772:	48 89 e5             	mov    rbp,rsp
   27775:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27779:	90                   	nop
   2777a:	5d                   	pop    rbp
   2777b:	c3                   	ret    

000000000002777c <glm::detail::compute_normalize<2, float, (glm::qualifier)0, false>::call(glm::vec<2, float, (glm::qualifier)0> const&)>:
   2777c:	55                   	push   rbp
   2777d:	48 89 e5             	mov    rbp,rsp
   27780:	48 83 ec 10          	sub    rsp,0x10
   27784:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27788:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2778c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27790:	48 89 d6             	mov    rsi,rdx
   27793:	48 89 c7             	mov    rdi,rax
   27796:	e8 b8 14 00 00       	call   28c53 <float glm::dot<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>
   2779b:	66 0f 7e c0          	movd   eax,xmm0
   2779f:	66 0f 6e c0          	movd   xmm0,eax
   277a3:	e8 d0 14 00 00       	call   28c78 <float glm::inversesqrt<float>(float)>
   277a8:	66 0f 7e c0          	movd   eax,xmm0
   277ac:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   277b0:	66 0f 6e c0          	movd   xmm0,eax
   277b4:	48 89 d7             	mov    rdi,rdx
   277b7:	e8 c1 dd ff ff       	call   2557d <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, float)>
   277bc:	66 48 0f 7e c0       	movq   rax,xmm0
   277c1:	66 48 0f 6e c0       	movq   xmm0,rax
   277c6:	c9                   	leave  
   277c7:	c3                   	ret    

00000000000277c8 <glm::detail::compute_normalize<3, float, (glm::qualifier)0, false>::call(glm::vec<3, float, (glm::qualifier)0> const&)>:
   277c8:	55                   	push   rbp
   277c9:	48 89 e5             	mov    rbp,rsp
   277cc:	48 83 ec 30          	sub    rsp,0x30
   277d0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   277d4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   277d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   277dc:	48 89 d6             	mov    rsi,rdx
   277df:	48 89 c7             	mov    rdi,rax
   277e2:	e8 78 e1 ff ff       	call   2595f <float glm::dot<3, float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   277e7:	66 0f 7e c0          	movd   eax,xmm0
   277eb:	66 0f 6e c0          	movd   xmm0,eax
   277ef:	e8 84 14 00 00       	call   28c78 <float glm::inversesqrt<float>(float)>
   277f4:	66 0f 7e c0          	movd   eax,xmm0
   277f8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   277fc:	66 0f 6e c0          	movd   xmm0,eax
   27800:	48 89 d7             	mov    rdi,rdx
   27803:	e8 0e e0 ff ff       	call   25816 <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, float)>
   27808:	66 48 0f 7e c0       	movq   rax,xmm0
   2780d:	0f 28 c1             	movaps xmm0,xmm1
   27810:	48 89 45 f4          	mov    QWORD PTR [rbp-0xc],rax
   27814:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   27819:	48 8b 45 f4          	mov    rax,QWORD PTR [rbp-0xc]
   2781d:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   27822:	0f 28 c8             	movaps xmm1,xmm0
   27825:	66 48 0f 6e c0       	movq   xmm0,rax
   2782a:	c9                   	leave  
   2782b:	c3                   	ret    

000000000002782c <glm::detail::compute_cross<float, (glm::qualifier)0, false>::call(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   2782c:	55                   	push   rbp
   2782d:	48 89 e5             	mov    rbp,rsp
   27830:	48 83 ec 40          	sub    rsp,0x40
   27834:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   27838:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2783c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27845:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27849:	31 c0                	xor    eax,eax
   2784b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2784f:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   27853:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27857:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2785c:	f3 0f 59 c1          	mulss  xmm0,xmm1
   27860:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27864:	f3 0f 10 10          	movss  xmm2,DWORD PTR [rax]
   27868:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2786c:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   27871:	f3 0f 59 ca          	mulss  xmm1,xmm2
   27875:	0f 28 e0             	movaps xmm4,xmm0
   27878:	f3 0f 5c e1          	subss  xmm4,xmm1
   2787c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27880:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   27885:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27889:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2788d:	f3 0f 59 c1          	mulss  xmm0,xmm1
   27891:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27895:	f3 0f 10 50 08       	movss  xmm2,DWORD PTR [rax+0x8]
   2789a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2789e:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   278a2:	f3 0f 59 ca          	mulss  xmm1,xmm2
   278a6:	0f 28 d8             	movaps xmm3,xmm0
   278a9:	f3 0f 5c d9          	subss  xmm3,xmm1
   278ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   278b1:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   278b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   278ba:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   278bf:	f3 0f 59 c1          	mulss  xmm0,xmm1
   278c3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   278c7:	f3 0f 10 50 04       	movss  xmm2,DWORD PTR [rax+0x4]
   278cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   278d0:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   278d5:	f3 0f 59 ca          	mulss  xmm1,xmm2
   278d9:	f3 0f 5c c1          	subss  xmm0,xmm1
   278dd:	66 0f 7e c2          	movd   edx,xmm0
   278e1:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   278e5:	0f 28 d4             	movaps xmm2,xmm4
   278e8:	0f 28 cb             	movaps xmm1,xmm3
   278eb:	66 0f 6e c2          	movd   xmm0,edx
   278ef:	48 89 c7             	mov    rdi,rax
   278f2:	e8 77 d6 ff ff       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   278f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   278fb:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   278ff:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   27902:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   27905:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   27909:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2790e:	0f 28 c8             	movaps xmm1,xmm0
   27911:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   27915:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2791e:	74 05                	je     27925 <glm::detail::compute_cross<float, (glm::qualifier)0, false>::call(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)+0xf9>
   27920:	e8 8b cb fd ff       	call   44b0 <__stack_chk_fail@plt>
   27925:	66 48 0f 6e c0       	movq   xmm0,rax
   2792a:	c9                   	leave  
   2792b:	c3                   	ret    

000000000002792c <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   2792c:	55                   	push   rbp
   2792d:	48 89 e5             	mov    rbp,rsp
   27930:	48 83 ec 40          	sub    rsp,0x40
   27934:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   27938:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2793c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27945:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27949:	31 c0                	xor    eax,eax
   2794b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2794f:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   27954:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27958:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2795d:	0f 28 d1             	movaps xmm2,xmm1
   27960:	f3 0f 59 d0          	mulss  xmm2,xmm0
   27964:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27968:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2796d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27971:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   27976:	0f 28 d9             	movaps xmm3,xmm1
   27979:	f3 0f 59 d8          	mulss  xmm3,xmm0
   2797d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27981:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   27985:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27989:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2798d:	f3 0f 59 c8          	mulss  xmm1,xmm0
   27991:	66 0f 7e ca          	movd   edx,xmm1
   27995:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   27999:	0f 28 cb             	movaps xmm1,xmm3
   2799c:	66 0f 6e c2          	movd   xmm0,edx
   279a0:	48 89 c7             	mov    rdi,rax
   279a3:	e8 c6 d5 ff ff       	call   24f6e <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   279a8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   279ac:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   279b0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   279b3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   279b6:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   279ba:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   279bf:	0f 28 c8             	movaps xmm1,xmm0
   279c2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   279c6:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   279cf:	74 05                	je     279d6 <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)+0xaa>
   279d1:	e8 da ca fd ff       	call   44b0 <__stack_chk_fail@plt>
   279d6:	66 48 0f 6e c0       	movq   xmm0,rax
   279db:	c9                   	leave  
   279dc:	c3                   	ret    

00000000000279dd <glm::detail::compute_dot<glm::vec<3, float, (glm::qualifier)0>, float, false>::call(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   279dd:	55                   	push   rbp
   279de:	48 89 e5             	mov    rbp,rsp
   279e1:	48 83 ec 20          	sub    rsp,0x20
   279e5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   279e9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   279ed:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   279f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   279f5:	48 89 d6             	mov    rsi,rdx
   279f8:	48 89 c7             	mov    rdi,rax
   279fb:	e8 2c ff ff ff       	call   2792c <glm::vec<3, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   27a00:	66 48 0f 7e c0       	movq   rax,xmm0
   27a05:	0f 28 c1             	movaps xmm0,xmm1
   27a08:	48 89 45 f4          	mov    QWORD PTR [rbp-0xc],rax
   27a0c:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   27a11:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   27a16:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   27a1b:	f3 0f 58 c8          	addss  xmm1,xmm0
   27a1f:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   27a24:	f3 0f 58 c1          	addss  xmm0,xmm1
   27a28:	c9                   	leave  
   27a29:	c3                   	ret    

0000000000027a2a <std::allocator<Tex>::allocator()>:
   27a2a:	55                   	push   rbp
   27a2b:	48 89 e5             	mov    rbp,rsp
   27a2e:	48 83 ec 10          	sub    rsp,0x10
   27a32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27a36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a3a:	48 89 c7             	mov    rdi,rax
   27a3d:	e8 60 12 00 00       	call   28ca2 <__gnu_cxx::new_allocator<Tex>::new_allocator()>
   27a42:	90                   	nop
   27a43:	c9                   	leave  
   27a44:	c3                   	ret    
   27a45:	90                   	nop

0000000000027a46 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl_data::_Vector_impl_data()>:
   27a46:	55                   	push   rbp
   27a47:	48 89 e5             	mov    rbp,rsp
   27a4a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27a4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a52:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   27a59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a5d:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   27a65:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a69:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   27a71:	90                   	nop
   27a72:	5d                   	pop    rbp
   27a73:	c3                   	ret    

0000000000027a74 <__gnu_cxx::new_allocator<Tex>::~new_allocator()>:
   27a74:	55                   	push   rbp
   27a75:	48 89 e5             	mov    rbp,rsp
   27a78:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27a7c:	90                   	nop
   27a7d:	5d                   	pop    rbp
   27a7e:	c3                   	ret    
   27a7f:	90                   	nop

0000000000027a80 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)>:
   27a80:	55                   	push   rbp
   27a81:	48 89 e5             	mov    rbp,rsp
   27a84:	48 83 ec 20          	sub    rsp,0x20
   27a88:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27a8c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27a90:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27a94:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   27a99:	74 17                	je     27ab2 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)+0x32>
   27a9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a9f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   27aa3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   27aa7:	48 89 ce             	mov    rsi,rcx
   27aaa:	48 89 c7             	mov    rdi,rax
   27aad:	e8 fb 11 00 00       	call   28cad <std::allocator_traits<std::allocator<Tex> >::deallocate(std::allocator<Tex>&, Tex*, unsigned long)>
   27ab2:	90                   	nop
   27ab3:	c9                   	leave  
   27ab4:	c3                   	ret    
   27ab5:	90                   	nop

0000000000027ab6 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>:
   27ab6:	55                   	push   rbp
   27ab7:	48 89 e5             	mov    rbp,rsp
   27aba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27abe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27ac2:	5d                   	pop    rbp
   27ac3:	c3                   	ret    

0000000000027ac4 <void std::_Destroy<Tex*, Tex>(Tex*, Tex*, std::allocator<Tex>&)>:
   27ac4:	55                   	push   rbp
   27ac5:	48 89 e5             	mov    rbp,rsp
   27ac8:	48 83 ec 20          	sub    rsp,0x20
   27acc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27ad0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27ad4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27ad8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   27adc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27ae0:	48 89 d6             	mov    rsi,rdx
   27ae3:	48 89 c7             	mov    rdi,rax
   27ae6:	e8 f0 11 00 00       	call   28cdb <void std::_Destroy<Tex*>(Tex*, Tex*)>
   27aeb:	90                   	nop
   27aec:	c9                   	leave  
   27aed:	c3                   	ret    

0000000000027aee <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator()>:
   27aee:	55                   	push   rbp
   27aef:	48 89 e5             	mov    rbp,rsp
   27af2:	48 83 ec 10          	sub    rsp,0x10
   27af6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27afa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27afe:	48 89 c7             	mov    rdi,rax
   27b01:	e8 fc 11 00 00       	call   28d02 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator()>
   27b06:	90                   	nop
   27b07:	c9                   	leave  
   27b08:	c3                   	ret    
   27b09:	90                   	nop

0000000000027b0a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl_data::_Vector_impl_data()>:
   27b0a:	55                   	push   rbp
   27b0b:	48 89 e5             	mov    rbp,rsp
   27b0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b16:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   27b1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b21:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   27b29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b2d:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   27b35:	90                   	nop
   27b36:	5d                   	pop    rbp
   27b37:	c3                   	ret    

0000000000027b38 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator()>:
   27b38:	55                   	push   rbp
   27b39:	48 89 e5             	mov    rbp,rsp
   27b3c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b40:	90                   	nop
   27b41:	5d                   	pop    rbp
   27b42:	c3                   	ret    
   27b43:	90                   	nop

0000000000027b44 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
   27b44:	55                   	push   rbp
   27b45:	48 89 e5             	mov    rbp,rsp
   27b48:	48 83 ec 20          	sub    rsp,0x20
   27b4c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b50:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27b54:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27b58:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   27b5d:	74 17                	je     27b76 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)+0x32>
   27b5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b63:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   27b67:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   27b6b:	48 89 ce             	mov    rsi,rcx
   27b6e:	48 89 c7             	mov    rdi,rax
   27b71:	e8 97 11 00 00       	call   28d0d <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   27b76:	90                   	nop
   27b77:	c9                   	leave  
   27b78:	c3                   	ret    
   27b79:	90                   	nop

0000000000027b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>:
   27b7a:	55                   	push   rbp
   27b7b:	48 89 e5             	mov    rbp,rsp
   27b7e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b86:	5d                   	pop    rbp
   27b87:	c3                   	ret    

0000000000027b88 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   27b88:	55                   	push   rbp
   27b89:	48 89 e5             	mov    rbp,rsp
   27b8c:	48 83 ec 20          	sub    rsp,0x20
   27b90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b94:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27b98:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27b9c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   27ba0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27ba4:	48 89 d6             	mov    rsi,rdx
   27ba7:	48 89 c7             	mov    rdi,rax
   27baa:	e8 8c 11 00 00       	call   28d3b <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   27baf:	90                   	nop
   27bb0:	c9                   	leave  
   27bb1:	c3                   	ret    

0000000000027bb2 <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_data_ptr<unsigned int>(unsigned int*) const>:
   27bb2:	55                   	push   rbp
   27bb3:	48 89 e5             	mov    rbp,rsp
   27bb6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27bba:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27bbe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   27bc2:	5d                   	pop    rbp
   27bc3:	c3                   	ret    

0000000000027bc4 <std::remove_reference<AABB&>::type&& std::move<AABB&>(AABB&)>:
   27bc4:	55                   	push   rbp
   27bc5:	48 89 e5             	mov    rbp,rsp
   27bc8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27bcc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27bd0:	5d                   	pop    rbp
   27bd1:	c3                   	ret    

0000000000027bd2 <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)>:
   27bd2:	55                   	push   rbp
   27bd3:	48 89 e5             	mov    rbp,rsp
   27bd6:	53                   	push   rbx
   27bd7:	48 83 ec 18          	sub    rsp,0x18
   27bdb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27bdf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27be3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27be7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27beb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27bef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27bf3:	48 39 c2             	cmp    rdx,rax
   27bf6:	74 3c                	je     27c34 <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)+0x62>
   27bf8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27bfc:	48 89 c7             	mov    rdi,rax
   27bff:	e8 5d 11 00 00       	call   28d61 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   27c04:	48 89 c2             	mov    rdx,rax
   27c07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c0b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27c0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c13:	48 89 ce             	mov    rsi,rcx
   27c16:	48 89 c7             	mov    rdi,rax
   27c19:	e8 51 11 00 00       	call   28d6f <void std::allocator_traits<std::allocator<AABB> >::construct<AABB, AABB>(std::allocator<AABB>&, AABB*, AABB&&)>
   27c1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c22:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27c26:	48 8d 50 18          	lea    rdx,[rax+0x18]
   27c2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c2e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27c32:	eb 30                	jmp    27c64 <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)+0x92>
   27c34:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27c38:	48 89 c7             	mov    rdi,rax
   27c3b:	e8 21 11 00 00       	call   28d61 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   27c40:	48 89 c3             	mov    rbx,rax
   27c43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c47:	48 89 c7             	mov    rdi,rax
   27c4a:	e8 59 11 00 00       	call   28da8 <std::vector<AABB, std::allocator<AABB> >::end()>
   27c4f:	48 89 c1             	mov    rcx,rax
   27c52:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c56:	48 89 da             	mov    rdx,rbx
   27c59:	48 89 ce             	mov    rsi,rcx
   27c5c:	48 89 c7             	mov    rdi,rax
   27c5f:	e8 90 11 00 00       	call   28df4 <void std::vector<AABB, std::allocator<AABB> >::_M_realloc_insert<AABB>(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >, AABB&&)>
   27c64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c68:	48 89 c7             	mov    rdi,rax
   27c6b:	e8 5e 13 00 00       	call   28fce <std::vector<AABB, std::allocator<AABB> >::back()>
   27c70:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27c74:	c9                   	leave  
   27c75:	c3                   	ret    

0000000000027c76 <std::remove_reference<Mesh&>::type&& std::move<Mesh&>(Mesh&)>:
   27c76:	55                   	push   rbp
   27c77:	48 89 e5             	mov    rbp,rsp
   27c7a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27c7e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27c82:	5d                   	pop    rbp
   27c83:	c3                   	ret    

0000000000027c84 <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)>:
   27c84:	55                   	push   rbp
   27c85:	48 89 e5             	mov    rbp,rsp
   27c88:	53                   	push   rbx
   27c89:	48 83 ec 18          	sub    rsp,0x18
   27c8d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27c91:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27c95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c99:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27c9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ca1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27ca5:	48 39 c2             	cmp    rdx,rax
   27ca8:	74 3c                	je     27ce6 <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)+0x62>
   27caa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27cae:	48 89 c7             	mov    rdi,rax
   27cb1:	e8 7a 13 00 00       	call   29030 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   27cb6:	48 89 c2             	mov    rdx,rax
   27cb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cbd:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27cc1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cc5:	48 89 ce             	mov    rsi,rcx
   27cc8:	48 89 c7             	mov    rdi,rax
   27ccb:	e8 6e 13 00 00       	call   2903e <void std::allocator_traits<std::allocator<Mesh> >::construct<Mesh, Mesh>(std::allocator<Mesh>&, Mesh*, Mesh&&)>
   27cd0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cd4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27cd8:	48 8d 50 04          	lea    rdx,[rax+0x4]
   27cdc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ce0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27ce4:	eb 30                	jmp    27d16 <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)+0x92>
   27ce6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27cea:	48 89 c7             	mov    rdi,rax
   27ced:	e8 3e 13 00 00       	call   29030 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   27cf2:	48 89 c3             	mov    rbx,rax
   27cf5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cf9:	48 89 c7             	mov    rdi,rax
   27cfc:	e8 77 13 00 00       	call   29078 <std::vector<Mesh, std::allocator<Mesh> >::end()>
   27d01:	48 89 c1             	mov    rcx,rax
   27d04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d08:	48 89 da             	mov    rdx,rbx
   27d0b:	48 89 ce             	mov    rsi,rcx
   27d0e:	48 89 c7             	mov    rdi,rax
   27d11:	e8 ae 13 00 00       	call   290c4 <void std::vector<Mesh, std::allocator<Mesh> >::_M_realloc_insert<Mesh>(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >, Mesh&&)>
   27d16:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d1a:	48 89 c7             	mov    rdi,rax
   27d1d:	e8 58 15 00 00       	call   2927a <std::vector<Mesh, std::allocator<Mesh> >::back()>
   27d22:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27d26:	c9                   	leave  
   27d27:	c3                   	ret    

0000000000027d28 <std::remove_reference<Transform&>::type&& std::move<Transform&>(Transform&)>:
   27d28:	55                   	push   rbp
   27d29:	48 89 e5             	mov    rbp,rsp
   27d2c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27d30:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27d34:	5d                   	pop    rbp
   27d35:	c3                   	ret    

0000000000027d36 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)>:
   27d36:	55                   	push   rbp
   27d37:	48 89 e5             	mov    rbp,rsp
   27d3a:	53                   	push   rbx
   27d3b:	48 83 ec 18          	sub    rsp,0x18
   27d3f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27d43:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27d47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d4b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27d4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d53:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27d57:	48 39 c2             	cmp    rdx,rax
   27d5a:	74 3c                	je     27d98 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)+0x62>
   27d5c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27d60:	48 89 c7             	mov    rdi,rax
   27d63:	e8 74 15 00 00       	call   292dc <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   27d68:	48 89 c2             	mov    rdx,rax
   27d6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d6f:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27d73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d77:	48 89 ce             	mov    rsi,rcx
   27d7a:	48 89 c7             	mov    rdi,rax
   27d7d:	e8 68 15 00 00       	call   292ea <void std::allocator_traits<std::allocator<Transform> >::construct<Transform, Transform>(std::allocator<Transform>&, Transform*, Transform&&)>
   27d82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d86:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27d8a:	48 8d 50 24          	lea    rdx,[rax+0x24]
   27d8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d92:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27d96:	eb 30                	jmp    27dc8 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)+0x92>
   27d98:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27d9c:	48 89 c7             	mov    rdi,rax
   27d9f:	e8 38 15 00 00       	call   292dc <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   27da4:	48 89 c3             	mov    rbx,rax
   27da7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27dab:	48 89 c7             	mov    rdi,rax
   27dae:	e8 71 15 00 00       	call   29324 <std::vector<Transform, std::allocator<Transform> >::end()>
   27db3:	48 89 c1             	mov    rcx,rax
   27db6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27dba:	48 89 da             	mov    rdx,rbx
   27dbd:	48 89 ce             	mov    rsi,rcx
   27dc0:	48 89 c7             	mov    rdi,rax
   27dc3:	e8 a8 15 00 00       	call   29370 <void std::vector<Transform, std::allocator<Transform> >::_M_realloc_insert<Transform>(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >, Transform&&)>
   27dc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27dcc:	48 89 c7             	mov    rdi,rax
   27dcf:	e8 78 17 00 00       	call   2954c <std::vector<Transform, std::allocator<Transform> >::back()>
   27dd4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27dd8:	c9                   	leave  
   27dd9:	c3                   	ret    

0000000000027dda <std::remove_reference<unsigned int&>::type&& std::move<unsigned int&>(unsigned int&)>:
   27dda:	55                   	push   rbp
   27ddb:	48 89 e5             	mov    rbp,rsp
   27dde:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27de2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27de6:	5d                   	pop    rbp
   27de7:	c3                   	ret    

0000000000027de8 <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)>:
   27de8:	55                   	push   rbp
   27de9:	48 89 e5             	mov    rbp,rsp
   27dec:	53                   	push   rbx
   27ded:	48 83 ec 18          	sub    rsp,0x18
   27df1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27df5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27df9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27dfd:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27e01:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e05:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27e09:	48 39 c2             	cmp    rdx,rax
   27e0c:	74 3c                	je     27e4a <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)+0x62>
   27e0e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27e12:	48 89 c7             	mov    rdi,rax
   27e15:	e8 94 17 00 00       	call   295ae <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   27e1a:	48 89 c2             	mov    rdx,rax
   27e1d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e21:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27e25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e29:	48 89 ce             	mov    rsi,rcx
   27e2c:	48 89 c7             	mov    rdi,rax
   27e2f:	e8 88 17 00 00       	call   295bc <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int>(std::allocator<unsigned int>&, unsigned int*, unsigned int&&)>
   27e34:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e38:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27e3c:	48 8d 50 04          	lea    rdx,[rax+0x4]
   27e40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e44:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27e48:	eb 30                	jmp    27e7a <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)+0x92>
   27e4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27e4e:	48 89 c7             	mov    rdi,rax
   27e51:	e8 58 17 00 00       	call   295ae <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   27e56:	48 89 c3             	mov    rbx,rax
   27e59:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e5d:	48 89 c7             	mov    rdi,rax
   27e60:	e8 61 00 00 00       	call   27ec6 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   27e65:	48 89 c1             	mov    rcx,rax
   27e68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e6c:	48 89 da             	mov    rdx,rbx
   27e6f:	48 89 ce             	mov    rsi,rcx
   27e72:	48 89 c7             	mov    rdi,rax
   27e75:	e8 7c 17 00 00       	call   295f6 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)>
   27e7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e7e:	48 89 c7             	mov    rdi,rax
   27e81:	e8 26 19 00 00       	call   297ac <std::vector<unsigned int, std::allocator<unsigned int> >::back()>
   27e86:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27e8a:	c9                   	leave  
   27e8b:	c3                   	ret    

0000000000027e8c <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int const&>(std::allocator<unsigned int>&, unsigned int*, unsigned int const&)>:
   27e8c:	55                   	push   rbp
   27e8d:	48 89 e5             	mov    rbp,rsp
   27e90:	48 83 ec 20          	sub    rsp,0x20
   27e94:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27e98:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27e9c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27ea0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ea4:	48 89 c7             	mov    rdi,rax
   27ea7:	e8 62 19 00 00       	call   2980e <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>
   27eac:	48 89 c2             	mov    rdx,rax
   27eaf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   27eb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27eb7:	48 89 ce             	mov    rsi,rcx
   27eba:	48 89 c7             	mov    rdi,rax
   27ebd:	e8 5a 19 00 00       	call   2981c <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int const&>(unsigned int*, unsigned int const&)>
   27ec2:	90                   	nop
   27ec3:	c9                   	leave  
   27ec4:	c3                   	ret    
   27ec5:	90                   	nop

0000000000027ec6 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>:
   27ec6:	55                   	push   rbp
   27ec7:	48 89 e5             	mov    rbp,rsp
   27eca:	48 83 ec 20          	sub    rsp,0x20
   27ece:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27ed2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27edb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27edf:	31 c0                	xor    eax,eax
   27ee1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ee5:	48 8d 50 08          	lea    rdx,[rax+0x8]
   27ee9:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   27eed:	48 89 d6             	mov    rsi,rdx
   27ef0:	48 89 c7             	mov    rdi,rax
   27ef3:	e8 62 19 00 00       	call   2985a <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   27ef8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   27efc:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   27f00:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   27f09:	74 05                	je     27f10 <std::vector<unsigned int, std::allocator<unsigned int> >::end()+0x4a>
   27f0b:	e8 a0 c5 fd ff       	call   44b0 <__stack_chk_fail@plt>
   27f10:	c9                   	leave  
   27f11:	c3                   	ret    

0000000000027f12 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)>:
   27f12:	55                   	push   rbp
   27f13:	48 89 e5             	mov    rbp,rsp
   27f16:	53                   	push   rbx
   27f17:	48 83 ec 68          	sub    rsp,0x68
   27f1b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   27f1f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   27f23:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   27f27:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27f30:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   27f34:	31 c0                	xor    eax,eax
   27f36:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f3a:	48 8d 15 1b 4d 01 00 	lea    rdx,[rip+0x14d1b]        # 3cc5c <NANO_SEC+0x1994>
   27f41:	be 01 00 00 00       	mov    esi,0x1
   27f46:	48 89 c7             	mov    rdi,rax
   27f49:	e8 2a 19 00 00       	call   29878 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const>
   27f4e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   27f52:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f56:	48 8b 00             	mov    rax,QWORD PTR [rax]
   27f59:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   27f5d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f61:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27f65:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   27f69:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f6d:	48 89 c7             	mov    rdi,rax
   27f70:	e8 ef 19 00 00       	call   29964 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>
   27f75:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   27f79:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   27f7d:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   27f81:	48 89 d6             	mov    rsi,rdx
   27f84:	48 89 c7             	mov    rdi,rax
   27f87:	e8 20 1a 00 00       	call   299ac <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>
   27f8c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   27f90:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f94:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   27f98:	48 89 d6             	mov    rsi,rdx
   27f9b:	48 89 c7             	mov    rdi,rax
   27f9e:	e8 49 1a 00 00       	call   299ec <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   27fa3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   27fa7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27fab:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   27faf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   27fb3:	48 89 c7             	mov    rdi,rax
   27fb6:	e8 53 18 00 00       	call   2980e <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>
   27fbb:	48 89 c2             	mov    rdx,rax
   27fbe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fc2:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   27fca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27fce:	48 01 c1             	add    rcx,rax
   27fd1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27fd5:	48 89 ce             	mov    rsi,rcx
   27fd8:	48 89 c7             	mov    rdi,rax
   27fdb:	e8 ac fe ff ff       	call   27e8c <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int const&>(std::allocator<unsigned int>&, unsigned int*, unsigned int const&)>
   27fe0:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   27fe8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27fec:	48 89 c7             	mov    rdi,rax
   27fef:	e8 18 08 00 00       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   27ff4:	48 89 c3             	mov    rbx,rax
   27ff7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   27ffb:	48 89 c7             	mov    rdi,rax
   27ffe:	e8 4f 1a 00 00       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   28003:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   28006:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2800a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2800e:	48 89 d9             	mov    rcx,rbx
   28011:	48 89 c7             	mov    rdi,rax
   28014:	e8 06 1a 00 00       	call   29a1f <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   28019:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2801d:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   28022:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28026:	48 89 c7             	mov    rdi,rax
   28029:	e8 de 07 00 00       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   2802e:	48 89 c3             	mov    rbx,rax
   28031:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28035:	48 89 c7             	mov    rdi,rax
   28038:	e8 15 1a 00 00       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   2803d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28040:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28044:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   28048:	48 89 d9             	mov    rcx,rbx
   2804b:	48 89 c7             	mov    rdi,rax
   2804e:	e8 cc 19 00 00       	call   29a1f <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   28053:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28057:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2805b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   2805f:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   28063:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   28067:	48 c1 fa 02          	sar    rdx,0x2
   2806b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   2806f:	48 89 ce             	mov    rsi,rcx
   28072:	48 89 c7             	mov    rdi,rax
   28075:	e8 5c 07 00 00       	call   287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   2807a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2807e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28082:	48 89 10             	mov    QWORD PTR [rax],rdx
   28085:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28089:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2808d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   28091:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   28095:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2809d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   280a1:	48 01 c2             	add    rdx,rax
   280a4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   280a8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   280ac:	90                   	nop
   280ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   280b1:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   280ba:	74 05                	je     280c1 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x1af>
   280bc:	e8 ef c3 fd ff       	call   44b0 <__stack_chk_fail@plt>
   280c1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   280c5:	c9                   	leave  
   280c6:	c3                   	ret    

00000000000280c7 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   280c7:	55                   	push   rbp
   280c8:	48 89 e5             	mov    rbp,rsp
   280cb:	48 83 ec 20          	sub    rsp,0x20
   280cf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   280d3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   280d7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   280db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   280df:	48 89 c7             	mov    rdi,rax
   280e2:	e8 79 19 00 00       	call   29a60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>
   280e7:	48 89 c2             	mov    rdx,rax
   280ea:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   280ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   280f2:	48 89 ce             	mov    rsi,rcx
   280f5:	48 89 c7             	mov    rdi,rax
   280f8:	e8 71 19 00 00       	call   29a6e <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   280fd:	90                   	nop
   280fe:	c9                   	leave  
   280ff:	c3                   	ret    

0000000000028100 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>:
   28100:	55                   	push   rbp
   28101:	48 89 e5             	mov    rbp,rsp
   28104:	48 83 ec 20          	sub    rsp,0x20
   28108:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2810c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28115:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28119:	31 c0                	xor    eax,eax
   2811b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2811f:	48 8d 50 08          	lea    rdx,[rax+0x8]
   28123:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   28127:	48 89 d6             	mov    rsi,rdx
   2812a:	48 89 c7             	mov    rdi,rax
   2812d:	e8 aa 19 00 00       	call   29adc <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>
   28132:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28136:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2813a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   28143:	74 05                	je     2814a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()+0x4a>
   28145:	e8 66 c3 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2814a:	c9                   	leave  
   2814b:	c3                   	ret    

000000000002814c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   2814c:	55                   	push   rbp
   2814d:	48 89 e5             	mov    rbp,rsp
   28150:	53                   	push   rbx
   28151:	48 83 ec 68          	sub    rsp,0x68
   28155:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   28159:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   2815d:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   28161:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2816a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2816e:	31 c0                	xor    eax,eax
   28170:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28174:	48 8d 15 e1 4a 01 00 	lea    rdx,[rip+0x14ae1]        # 3cc5c <NANO_SEC+0x1994>
   2817b:	be 01 00 00 00       	mov    esi,0x1
   28180:	48 89 c7             	mov    rdi,rax
   28183:	e8 72 19 00 00       	call   29afa <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const>
   28188:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   2818c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28190:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28193:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   28197:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2819b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2819f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   281a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   281a7:	48 89 c7             	mov    rdi,rax
   281aa:	e8 37 1a 00 00       	call   29be6 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()>
   281af:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   281b3:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   281b7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   281bb:	48 89 d6             	mov    rsi,rdx
   281be:	48 89 c7             	mov    rdi,rax
   281c1:	e8 68 1a 00 00       	call   29c2e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::difference_type __gnu_cxx::operator-<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)>
   281c6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   281ca:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   281ce:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   281d2:	48 89 d6             	mov    rsi,rdx
   281d5:	48 89 c7             	mov    rdi,rax
   281d8:	e8 91 1a 00 00       	call   29c6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>
   281dd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   281e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   281e5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   281e9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   281ed:	48 89 c7             	mov    rdi,rax
   281f0:	e8 6b 18 00 00       	call   29a60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>
   281f5:	48 89 c2             	mov    rdx,rax
   281f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   281fc:	48 c1 e0 05          	shl    rax,0x5
   28200:	48 89 c1             	mov    rcx,rax
   28203:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28207:	48 01 c1             	add    rcx,rax
   2820a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2820e:	48 89 ce             	mov    rsi,rcx
   28211:	48 89 c7             	mov    rdi,rax
   28214:	e8 ae fe ff ff       	call   280c7 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   28219:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   28221:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28225:	48 89 c7             	mov    rdi,rax
   28228:	e8 4d f9 ff ff       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   2822d:	48 89 c3             	mov    rbx,rax
   28230:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28234:	48 89 c7             	mov    rdi,rax
   28237:	e8 98 1a 00 00       	call   29cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   2823c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   2823f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28243:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28247:	48 89 d9             	mov    rcx,rbx
   2824a:	48 89 c7             	mov    rdi,rax
   2824d:	e8 4f 1a 00 00       	call   29ca1 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   28252:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28256:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   2825b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2825f:	48 89 c7             	mov    rdi,rax
   28262:	e8 13 f9 ff ff       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   28267:	48 89 c3             	mov    rbx,rax
   2826a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2826e:	48 89 c7             	mov    rdi,rax
   28271:	e8 5e 1a 00 00       	call   29cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   28276:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28279:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2827d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   28281:	48 89 d9             	mov    rcx,rbx
   28284:	48 89 c7             	mov    rdi,rax
   28287:	e8 15 1a 00 00       	call   29ca1 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2828c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28290:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28294:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   28298:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   2829c:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   282a0:	48 c1 fa 05          	sar    rdx,0x5
   282a4:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   282a8:	48 89 ce             	mov    rsi,rcx
   282ab:	48 89 c7             	mov    rdi,rax
   282ae:	e8 91 f8 ff ff       	call   27b44 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   282b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   282b7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   282bb:	48 89 10             	mov    QWORD PTR [rax],rdx
   282be:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   282c2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   282c6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   282ca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   282ce:	48 c1 e0 05          	shl    rax,0x5
   282d2:	48 89 c2             	mov    rdx,rax
   282d5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   282d9:	48 01 c2             	add    rdx,rax
   282dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   282e0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   282e4:	90                   	nop
   282e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   282e9:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   282f2:	0f 84 8d 00 00 00    	je     28385 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x239>
   282f8:	e9 83 00 00 00       	jmp    28380 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x234>
   282fd:	48 89 c7             	mov    rdi,rax
   28300:	e8 3b be fd ff       	call   4140 <__cxa_begin_catch@plt>
   28305:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   2830a:	75 23                	jne    2832f <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1e3>
   2830c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   28310:	48 c1 e0 05          	shl    rax,0x5
   28314:	48 89 c2             	mov    rdx,rax
   28317:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2831b:	48 01 c2             	add    rdx,rax
   2831e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28322:	48 89 d6             	mov    rsi,rdx
   28325:	48 89 c7             	mov    rdi,rax
   28328:	e8 b5 19 00 00       	call   29ce2 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2832d:	eb 22                	jmp    28351 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x205>
   2832f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28333:	48 89 c7             	mov    rdi,rax
   28336:	e8 3f f8 ff ff       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   2833b:	48 89 c2             	mov    rdx,rax
   2833e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   28342:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28346:	48 89 ce             	mov    rsi,rcx
   28349:	48 89 c7             	mov    rdi,rax
   2834c:	e8 37 f8 ff ff       	call   27b88 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   28351:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28355:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   28359:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   2835d:	48 89 ce             	mov    rsi,rcx
   28360:	48 89 c7             	mov    rdi,rax
   28363:	e8 dc f7 ff ff       	call   27b44 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   28368:	e8 b3 c2 fd ff       	call   4620 <__cxa_rethrow@plt>
   2836d:	48 89 c3             	mov    rbx,rax
   28370:	e8 6b c3 fd ff       	call   46e0 <__cxa_end_catch@plt>
   28375:	48 89 d8             	mov    rax,rbx
   28378:	48 89 c7             	mov    rdi,rax
   2837b:	e8 b0 c3 fd ff       	call   4730 <_Unwind_Resume@plt>
   28380:	e8 2b c1 fd ff       	call   44b0 <__stack_chk_fail@plt>
   28385:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28389:	c9                   	leave  
   2838a:	c3                   	ret    

000000000002838b <void std::allocator_traits<std::allocator<Tex> >::construct<Tex, Tex const&>(std::allocator<Tex>&, Tex*, Tex const&)>:
   2838b:	55                   	push   rbp
   2838c:	48 89 e5             	mov    rbp,rsp
   2838f:	48 83 ec 20          	sub    rsp,0x20
   28393:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28397:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2839b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2839f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   283a3:	48 89 c7             	mov    rdi,rax
   283a6:	e8 5d 19 00 00       	call   29d08 <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>
   283ab:	48 89 c2             	mov    rdx,rax
   283ae:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   283b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   283b6:	48 89 ce             	mov    rsi,rcx
   283b9:	48 89 c7             	mov    rdi,rax
   283bc:	e8 55 19 00 00       	call   29d16 <void __gnu_cxx::new_allocator<Tex>::construct<Tex, Tex const&>(Tex*, Tex const&)>
   283c1:	90                   	nop
   283c2:	c9                   	leave  
   283c3:	c3                   	ret    

00000000000283c4 <std::vector<Tex, std::allocator<Tex> >::end()>:
   283c4:	55                   	push   rbp
   283c5:	48 89 e5             	mov    rbp,rsp
   283c8:	48 83 ec 20          	sub    rsp,0x20
   283cc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   283d0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   283d9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   283dd:	31 c0                	xor    eax,eax
   283df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   283e3:	48 8d 50 08          	lea    rdx,[rax+0x8]
   283e7:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   283eb:	48 89 d6             	mov    rsi,rdx
   283ee:	48 89 c7             	mov    rdi,rax
   283f1:	e8 76 19 00 00       	call   29d6c <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::__normal_iterator(Tex* const&)>
   283f6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   283fa:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   283fe:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   28407:	74 05                	je     2840e <std::vector<Tex, std::allocator<Tex> >::end()+0x4a>
   28409:	e8 a2 c0 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2840e:	c9                   	leave  
   2840f:	c3                   	ret    

0000000000028410 <void std::vector<Tex, std::allocator<Tex> >::_M_realloc_insert<Tex const&>(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >, Tex const&)>:
   28410:	55                   	push   rbp
   28411:	48 89 e5             	mov    rbp,rsp
   28414:	53                   	push   rbx
   28415:	48 83 ec 68          	sub    rsp,0x68
   28419:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   2841d:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   28421:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   28425:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2842e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28432:	31 c0                	xor    eax,eax
   28434:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28438:	48 8d 15 1d 48 01 00 	lea    rdx,[rip+0x1481d]        # 3cc5c <NANO_SEC+0x1994>
   2843f:	be 01 00 00 00       	mov    esi,0x1
   28444:	48 89 c7             	mov    rdi,rax
   28447:	e8 3e 19 00 00       	call   29d8a <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const>
   2844c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   28450:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28454:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28457:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2845b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2845f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   28463:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   28467:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2846b:	48 89 c7             	mov    rdi,rax
   2846e:	e8 03 1a 00 00       	call   29e76 <std::vector<Tex, std::allocator<Tex> >::begin()>
   28473:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   28477:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2847b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2847f:	48 89 d6             	mov    rsi,rdx
   28482:	48 89 c7             	mov    rdi,rax
   28485:	e8 34 1a 00 00       	call   29ebe <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::difference_type __gnu_cxx::operator-<Tex*, std::vector<Tex, std::allocator<Tex> > >(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&, __gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&)>
   2848a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2848e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28492:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   28496:	48 89 d6             	mov    rsi,rdx
   28499:	48 89 c7             	mov    rdi,rax
   2849c:	e8 6d 1a 00 00       	call   29f0e <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)>
   284a1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   284a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   284a9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   284ad:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   284b1:	48 89 c7             	mov    rdi,rax
   284b4:	e8 4f 18 00 00       	call   29d08 <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>
   284b9:	48 89 c6             	mov    rsi,rax
   284bc:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   284c0:	48 89 d0             	mov    rax,rdx
   284c3:	48 01 c0             	add    rax,rax
   284c6:	48 01 d0             	add    rax,rdx
   284c9:	48 c1 e0 03          	shl    rax,0x3
   284cd:	48 89 c2             	mov    rdx,rax
   284d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   284d4:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   284d8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   284dc:	48 89 f2             	mov    rdx,rsi
   284df:	48 89 ce             	mov    rsi,rcx
   284e2:	48 89 c7             	mov    rdi,rax
   284e5:	e8 a1 fe ff ff       	call   2838b <void std::allocator_traits<std::allocator<Tex> >::construct<Tex, Tex const&>(std::allocator<Tex>&, Tex*, Tex const&)>
   284ea:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   284f2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   284f6:	48 89 c7             	mov    rdi,rax
   284f9:	e8 b8 f5 ff ff       	call   27ab6 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>
   284fe:	48 89 c3             	mov    rbx,rax
   28501:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28505:	48 89 c7             	mov    rdi,rax
   28508:	e8 67 1a 00 00       	call   29f74 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   2850d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   28510:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28514:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28518:	48 89 d9             	mov    rcx,rbx
   2851b:	48 89 c7             	mov    rdi,rax
   2851e:	e8 1e 1a 00 00       	call   29f41 <std::vector<Tex, std::allocator<Tex> >::_S_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   28523:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28527:	48 83 45 e0 18       	add    QWORD PTR [rbp-0x20],0x18
   2852c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28530:	48 89 c7             	mov    rdi,rax
   28533:	e8 7e f5 ff ff       	call   27ab6 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>
   28538:	48 89 c3             	mov    rbx,rax
   2853b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2853f:	48 89 c7             	mov    rdi,rax
   28542:	e8 2d 1a 00 00       	call   29f74 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   28547:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2854a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2854e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   28552:	48 89 d9             	mov    rcx,rbx
   28555:	48 89 c7             	mov    rdi,rax
   28558:	e8 e4 19 00 00       	call   29f41 <std::vector<Tex, std::allocator<Tex> >::_S_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   2855d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28561:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28565:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   28569:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   2856d:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   28571:	48 89 d1             	mov    rcx,rdx
   28574:	48 c1 f9 03          	sar    rcx,0x3
   28578:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   28582:	48 0f af d1          	imul   rdx,rcx
   28586:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   2858a:	48 89 ce             	mov    rsi,rcx
   2858d:	48 89 c7             	mov    rdi,rax
   28590:	e8 eb f4 ff ff       	call   27a80 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)>
   28595:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28599:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2859d:	48 89 10             	mov    QWORD PTR [rax],rdx
   285a0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   285a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   285a8:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   285ac:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   285b0:	48 89 d0             	mov    rax,rdx
   285b3:	48 01 c0             	add    rax,rax
   285b6:	48 01 d0             	add    rax,rdx
   285b9:	48 c1 e0 03          	shl    rax,0x3
   285bd:	48 89 c2             	mov    rdx,rax
   285c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   285c4:	48 01 c2             	add    rdx,rax
   285c7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   285cb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   285cf:	90                   	nop
   285d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   285d4:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   285dd:	74 05                	je     285e4 <void std::vector<Tex, std::allocator<Tex> >::_M_realloc_insert<Tex const&>(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >, Tex const&)+0x1d4>
   285df:	e8 cc be fd ff       	call   44b0 <__stack_chk_fail@plt>
   285e4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   285e8:	c9                   	leave  
   285e9:	c3                   	ret    

00000000000285ea <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   285ea:	55                   	push   rbp
   285eb:	48 89 e5             	mov    rbp,rsp
   285ee:	53                   	push   rbx
   285ef:	48 83 ec 38          	sub    rsp,0x38
   285f3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   285f7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   285fb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28604:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28608:	31 c0                	xor    eax,eax
   2860a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2860e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   28612:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28615:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   28619:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2861d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   28621:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   28625:	48 89 d6             	mov    rsi,rdx
   28628:	48 89 c7             	mov    rdi,rax
   2862b:	e8 52 19 00 00       	call   29f82 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(glm::vec<4, float, (glm::qualifier)0> const&)>
   28630:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   28634:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28637:	48 89 c1             	mov    rcx,rax
   2863a:	48 89 d3             	mov    rbx,rdx
   2863d:	48 89 d0             	mov    rax,rdx
   28640:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   28644:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   2864d:	74 05                	je     28654 <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)+0x6a>
   2864f:	e8 5c be fd ff       	call   44b0 <__stack_chk_fail@plt>
   28654:	66 48 0f 6e c1       	movq   xmm0,rcx
   28659:	66 48 0f 6e c8       	movq   xmm1,rax
   2865e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28662:	c9                   	leave  
   28663:	c3                   	ret    

0000000000028664 <glm::detail::compute_dot<glm::vec<4, float, (glm::qualifier)0>, float, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   28664:	55                   	push   rbp
   28665:	48 89 e5             	mov    rbp,rsp
   28668:	48 83 ec 20          	sub    rsp,0x20
   2866c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28670:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   28674:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28678:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2867c:	48 89 d6             	mov    rsi,rdx
   2867f:	48 89 c7             	mov    rdi,rax
   28682:	e8 63 ff ff ff       	call   285ea <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   28687:	66 48 0f 7e c0       	movq   rax,xmm0
   2868c:	66 0f 6f c1          	movdqa xmm0,xmm1
   28690:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   28694:	66 0f d6 45 f8       	movq   QWORD PTR [rbp-0x8],xmm0
   28699:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   2869e:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   286a3:	f3 0f 58 c8          	addss  xmm1,xmm0
   286a7:	f3 0f 10 55 f8       	movss  xmm2,DWORD PTR [rbp-0x8]
   286ac:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   286b1:	f3 0f 58 c2          	addss  xmm0,xmm2
   286b5:	f3 0f 58 c1          	addss  xmm0,xmm1
   286b9:	c9                   	leave  
   286ba:	c3                   	ret    
   286bb:	90                   	nop

00000000000286bc <std::allocator<Mesh>::allocator()>:
   286bc:	55                   	push   rbp
   286bd:	48 89 e5             	mov    rbp,rsp
   286c0:	48 83 ec 10          	sub    rsp,0x10
   286c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   286c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   286cc:	48 89 c7             	mov    rdi,rax
   286cf:	e8 22 19 00 00       	call   29ff6 <__gnu_cxx::new_allocator<Mesh>::new_allocator()>
   286d4:	90                   	nop
   286d5:	c9                   	leave  
   286d6:	c3                   	ret    
   286d7:	90                   	nop

00000000000286d8 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl_data::_Vector_impl_data()>:
   286d8:	55                   	push   rbp
   286d9:	48 89 e5             	mov    rbp,rsp
   286dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   286e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   286e4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   286eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   286ef:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   286f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   286fb:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   28703:	90                   	nop
   28704:	5d                   	pop    rbp
   28705:	c3                   	ret    

0000000000028706 <__gnu_cxx::new_allocator<Mesh>::~new_allocator()>:
   28706:	55                   	push   rbp
   28707:	48 89 e5             	mov    rbp,rsp
   2870a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2870e:	90                   	nop
   2870f:	5d                   	pop    rbp
   28710:	c3                   	ret    
   28711:	90                   	nop

0000000000028712 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)>:
   28712:	55                   	push   rbp
   28713:	48 89 e5             	mov    rbp,rsp
   28716:	48 83 ec 20          	sub    rsp,0x20
   2871a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2871e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28722:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28726:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2872b:	74 17                	je     28744 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)+0x32>
   2872d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28731:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   28735:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28739:	48 89 ce             	mov    rsi,rcx
   2873c:	48 89 c7             	mov    rdi,rax
   2873f:	e8 bd 18 00 00       	call   2a001 <std::allocator_traits<std::allocator<Mesh> >::deallocate(std::allocator<Mesh>&, Mesh*, unsigned long)>
   28744:	90                   	nop
   28745:	c9                   	leave  
   28746:	c3                   	ret    
   28747:	90                   	nop

0000000000028748 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>:
   28748:	55                   	push   rbp
   28749:	48 89 e5             	mov    rbp,rsp
   2874c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28750:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28754:	5d                   	pop    rbp
   28755:	c3                   	ret    

0000000000028756 <void std::_Destroy<Mesh*, Mesh>(Mesh*, Mesh*, std::allocator<Mesh>&)>:
   28756:	55                   	push   rbp
   28757:	48 89 e5             	mov    rbp,rsp
   2875a:	48 83 ec 20          	sub    rsp,0x20
   2875e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28762:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28766:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2876a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2876e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28772:	48 89 d6             	mov    rsi,rdx
   28775:	48 89 c7             	mov    rdi,rax
   28778:	e8 b2 18 00 00       	call   2a02f <void std::_Destroy<Mesh*>(Mesh*, Mesh*)>
   2877d:	90                   	nop
   2877e:	c9                   	leave  
   2877f:	c3                   	ret    

0000000000028780 <std::allocator<unsigned int>::allocator()>:
   28780:	55                   	push   rbp
   28781:	48 89 e5             	mov    rbp,rsp
   28784:	48 83 ec 10          	sub    rsp,0x10
   28788:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2878c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28790:	48 89 c7             	mov    rdi,rax
   28793:	e8 be 18 00 00       	call   2a056 <__gnu_cxx::new_allocator<unsigned int>::new_allocator()>
   28798:	90                   	nop
   28799:	c9                   	leave  
   2879a:	c3                   	ret    
   2879b:	90                   	nop

000000000002879c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>:
   2879c:	55                   	push   rbp
   2879d:	48 89 e5             	mov    rbp,rsp
   287a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   287a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287a8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   287af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287b3:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   287bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287bf:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   287c7:	90                   	nop
   287c8:	5d                   	pop    rbp
   287c9:	c3                   	ret    

00000000000287ca <__gnu_cxx::new_allocator<unsigned int>::~new_allocator()>:
   287ca:	55                   	push   rbp
   287cb:	48 89 e5             	mov    rbp,rsp
   287ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   287d2:	90                   	nop
   287d3:	5d                   	pop    rbp
   287d4:	c3                   	ret    
   287d5:	90                   	nop

00000000000287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>:
   287d6:	55                   	push   rbp
   287d7:	48 89 e5             	mov    rbp,rsp
   287da:	48 83 ec 20          	sub    rsp,0x20
   287de:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   287e2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   287e6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   287ea:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   287ef:	74 17                	je     28808 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)+0x32>
   287f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287f5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   287f9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   287fd:	48 89 ce             	mov    rsi,rcx
   28800:	48 89 c7             	mov    rdi,rax
   28803:	e8 59 18 00 00       	call   2a061 <std::allocator_traits<std::allocator<unsigned int> >::deallocate(std::allocator<unsigned int>&, unsigned int*, unsigned long)>
   28808:	90                   	nop
   28809:	c9                   	leave  
   2880a:	c3                   	ret    
   2880b:	90                   	nop

000000000002880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>:
   2880c:	55                   	push   rbp
   2880d:	48 89 e5             	mov    rbp,rsp
   28810:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28814:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28818:	5d                   	pop    rbp
   28819:	c3                   	ret    

000000000002881a <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   2881a:	55                   	push   rbp
   2881b:	48 89 e5             	mov    rbp,rsp
   2881e:	48 83 ec 20          	sub    rsp,0x20
   28822:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28826:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2882a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2882e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28832:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28836:	48 89 d6             	mov    rsi,rdx
   28839:	48 89 c7             	mov    rdi,rax
   2883c:	e8 4e 18 00 00       	call   2a08f <void std::_Destroy<unsigned int*>(unsigned int*, unsigned int*)>
   28841:	90                   	nop
   28842:	c9                   	leave  
   28843:	c3                   	ret    

0000000000028844 <std::allocator<Transform>::allocator()>:
   28844:	55                   	push   rbp
   28845:	48 89 e5             	mov    rbp,rsp
   28848:	48 83 ec 10          	sub    rsp,0x10
   2884c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28850:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28854:	48 89 c7             	mov    rdi,rax
   28857:	e8 5a 18 00 00       	call   2a0b6 <__gnu_cxx::new_allocator<Transform>::new_allocator()>
   2885c:	90                   	nop
   2885d:	c9                   	leave  
   2885e:	c3                   	ret    
   2885f:	90                   	nop

0000000000028860 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl_data::_Vector_impl_data()>:
   28860:	55                   	push   rbp
   28861:	48 89 e5             	mov    rbp,rsp
   28864:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28868:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2886c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   28873:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28877:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   2887f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28883:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   2888b:	90                   	nop
   2888c:	5d                   	pop    rbp
   2888d:	c3                   	ret    

000000000002888e <__gnu_cxx::new_allocator<Transform>::~new_allocator()>:
   2888e:	55                   	push   rbp
   2888f:	48 89 e5             	mov    rbp,rsp
   28892:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28896:	90                   	nop
   28897:	5d                   	pop    rbp
   28898:	c3                   	ret    
   28899:	90                   	nop

000000000002889a <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)>:
   2889a:	55                   	push   rbp
   2889b:	48 89 e5             	mov    rbp,rsp
   2889e:	48 83 ec 20          	sub    rsp,0x20
   288a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   288a6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   288aa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   288ae:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   288b3:	74 17                	je     288cc <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)+0x32>
   288b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   288b9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   288bd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   288c1:	48 89 ce             	mov    rsi,rcx
   288c4:	48 89 c7             	mov    rdi,rax
   288c7:	e8 f5 17 00 00       	call   2a0c1 <std::allocator_traits<std::allocator<Transform> >::deallocate(std::allocator<Transform>&, Transform*, unsigned long)>
   288cc:	90                   	nop
   288cd:	c9                   	leave  
   288ce:	c3                   	ret    
   288cf:	90                   	nop

00000000000288d0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>:
   288d0:	55                   	push   rbp
   288d1:	48 89 e5             	mov    rbp,rsp
   288d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   288d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   288dc:	5d                   	pop    rbp
   288dd:	c3                   	ret    

00000000000288de <void std::_Destroy<Transform*, Transform>(Transform*, Transform*, std::allocator<Transform>&)>:
   288de:	55                   	push   rbp
   288df:	48 89 e5             	mov    rbp,rsp
   288e2:	48 83 ec 20          	sub    rsp,0x20
   288e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   288ea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   288ee:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   288f2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   288f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   288fa:	48 89 d6             	mov    rsi,rdx
   288fd:	48 89 c7             	mov    rdi,rax
   28900:	e8 ea 17 00 00       	call   2a0ef <void std::_Destroy<Transform*>(Transform*, Transform*)>
   28905:	90                   	nop
   28906:	c9                   	leave  
   28907:	c3                   	ret    

0000000000028908 <std::allocator<AABB>::allocator()>:
   28908:	55                   	push   rbp
   28909:	48 89 e5             	mov    rbp,rsp
   2890c:	48 83 ec 10          	sub    rsp,0x10
   28910:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28914:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28918:	48 89 c7             	mov    rdi,rax
   2891b:	e8 f6 17 00 00       	call   2a116 <__gnu_cxx::new_allocator<AABB>::new_allocator()>
   28920:	90                   	nop
   28921:	c9                   	leave  
   28922:	c3                   	ret    
   28923:	90                   	nop

0000000000028924 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl_data::_Vector_impl_data()>:
   28924:	55                   	push   rbp
   28925:	48 89 e5             	mov    rbp,rsp
   28928:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2892c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28930:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   28937:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2893b:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   28943:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28947:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   2894f:	90                   	nop
   28950:	5d                   	pop    rbp
   28951:	c3                   	ret    

0000000000028952 <__gnu_cxx::new_allocator<AABB>::~new_allocator()>:
   28952:	55                   	push   rbp
   28953:	48 89 e5             	mov    rbp,rsp
   28956:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2895a:	90                   	nop
   2895b:	5d                   	pop    rbp
   2895c:	c3                   	ret    
   2895d:	90                   	nop

000000000002895e <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)>:
   2895e:	55                   	push   rbp
   2895f:	48 89 e5             	mov    rbp,rsp
   28962:	48 83 ec 20          	sub    rsp,0x20
   28966:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2896a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2896e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28972:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   28977:	74 17                	je     28990 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)+0x32>
   28979:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2897d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   28981:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28985:	48 89 ce             	mov    rsi,rcx
   28988:	48 89 c7             	mov    rdi,rax
   2898b:	e8 91 17 00 00       	call   2a121 <std::allocator_traits<std::allocator<AABB> >::deallocate(std::allocator<AABB>&, AABB*, unsigned long)>
   28990:	90                   	nop
   28991:	c9                   	leave  
   28992:	c3                   	ret    
   28993:	90                   	nop

0000000000028994 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>:
   28994:	55                   	push   rbp
   28995:	48 89 e5             	mov    rbp,rsp
   28998:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2899c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   289a0:	5d                   	pop    rbp
   289a1:	c3                   	ret    

00000000000289a2 <void std::_Destroy<AABB*, AABB>(AABB*, AABB*, std::allocator<AABB>&)>:
   289a2:	55                   	push   rbp
   289a3:	48 89 e5             	mov    rbp,rsp
   289a6:	48 83 ec 20          	sub    rsp,0x20
   289aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   289ae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   289b2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   289b6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   289ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   289be:	48 89 d6             	mov    rsi,rdx
   289c1:	48 89 c7             	mov    rdi,rax
   289c4:	e8 86 17 00 00       	call   2a14f <void std::_Destroy<AABB*>(AABB*, AABB*)>
   289c9:	90                   	nop
   289ca:	c9                   	leave  
   289cb:	c3                   	ret    

00000000000289cc <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const>:
   289cc:	55                   	push   rbp
   289cd:	48 89 e5             	mov    rbp,rsp
   289d0:	48 83 ec 10          	sub    rsp,0x10
   289d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   289d8:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   289db:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   289df:	78 0a                	js     289eb <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x1f>
   289e1:	e8 fe dc ff ff       	call   266e4 <glm::vec<4, float, (glm::qualifier)0>::length()>
   289e6:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   289e9:	7c 1f                	jl     28a0a <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x3e>
   289eb:	48 8d 0d 86 42 01 00 	lea    rcx,[rip+0x14286]        # 3cc78 <NANO_SEC+0x19b0>
   289f2:	ba f1 01 00 00       	mov    edx,0x1f1
   289f7:	48 8d 35 ba 3f 01 00 	lea    rsi,[rip+0x13fba]        # 3c9b8 <NANO_SEC+0x16f0>
   289fe:	48 8d 3d d9 3f 01 00 	lea    rdi,[rip+0x13fd9]        # 3c9de <NANO_SEC+0x1716>
   28a05:	e8 76 b8 fd ff       	call   4280 <__assert_fail@plt>
   28a0a:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   28a0e:	74 2c                	je     28a3c <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x70>
   28a10:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   28a14:	7f 0c                	jg     28a22 <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x56>
   28a16:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
   28a1a:	74 0c                	je     28a28 <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x5c>
   28a1c:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
   28a20:	74 10                	je     28a32 <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x66>
   28a22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28a26:	eb 1c                	jmp    28a44 <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x78>
   28a28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28a2c:	48 83 c0 04          	add    rax,0x4
   28a30:	eb 12                	jmp    28a44 <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x78>
   28a32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28a36:	48 83 c0 08          	add    rax,0x8
   28a3a:	eb 08                	jmp    28a44 <glm::vec<4, float, (glm::qualifier)0>::operator[](int) const+0x78>
   28a3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28a40:	48 83 c0 0c          	add    rax,0xc
   28a44:	c9                   	leave  
   28a45:	c3                   	ret    

0000000000028a46 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   28a46:	55                   	push   rbp
   28a47:	48 89 e5             	mov    rbp,rsp
   28a4a:	53                   	push   rbx
   28a4b:	48 83 ec 38          	sub    rsp,0x38
   28a4f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   28a53:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   28a57:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28a60:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28a64:	31 c0                	xor    eax,eax
   28a66:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28a6a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   28a6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28a71:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   28a75:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   28a79:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   28a7d:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   28a81:	48 89 d6             	mov    rsi,rdx
   28a84:	48 89 c7             	mov    rdi,rax
   28a87:	e8 ea 16 00 00       	call   2a176 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator+=<float>(glm::vec<4, float, (glm::qualifier)0> const&)>
   28a8c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   28a90:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28a93:	48 89 c1             	mov    rcx,rax
   28a96:	48 89 d3             	mov    rbx,rdx
   28a99:	48 89 d0             	mov    rax,rdx
   28a9c:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   28aa0:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   28aa9:	74 05                	je     28ab0 <glm::vec<4, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)+0x6a>
   28aab:	e8 00 ba fd ff       	call   44b0 <__stack_chk_fail@plt>
   28ab0:	66 48 0f 6e c1       	movq   xmm0,rcx
   28ab5:	66 48 0f 6e c8       	movq   xmm1,rax
   28aba:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28abe:	c9                   	leave  
   28abf:	c3                   	ret    

0000000000028ac0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)>:
   28ac0:	55                   	push   rbp
   28ac1:	48 89 e5             	mov    rbp,rsp
   28ac4:	48 83 ec 30          	sub    rsp,0x30
   28ac8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28acc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   28ad0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   28ad4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28add:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28ae1:	31 c0                	xor    eax,eax
   28ae3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28ae7:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   28aeb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28aef:	48 89 ce             	mov    rsi,rcx
   28af2:	48 89 c7             	mov    rdi,rax
   28af5:	e8 22 17 00 00       	call   2a21c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
   28afa:	90                   	nop
   28afb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28aff:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   28b08:	74 05                	je     28b0f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)+0x4f>
   28b0a:	e8 a1 b9 fd ff       	call   44b0 <__stack_chk_fail@plt>
   28b0f:	c9                   	leave  
   28b10:	c3                   	ret    

0000000000028b11 <std::tuple_element<0ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   28b11:	55                   	push   rbp
   28b12:	48 89 e5             	mov    rbp,rsp
   28b15:	48 83 ec 10          	sub    rsp,0x10
   28b19:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28b1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28b21:	48 89 c7             	mov    rdi,rax
   28b24:	e8 29 18 00 00       	call   2a352 <std::filesystem::__cxx11::path::_List::_Impl*& std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   28b29:	c9                   	leave  
   28b2a:	c3                   	ret    

0000000000028b2b <std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   28b2b:	55                   	push   rbp
   28b2c:	48 89 e5             	mov    rbp,rsp
   28b2f:	48 83 ec 10          	sub    rsp,0x10
   28b33:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28b37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28b3b:	48 89 c7             	mov    rdi,rax
   28b3e:	e8 29 18 00 00       	call   2a36c <std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head(std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>&)>
   28b43:	c9                   	leave  
   28b44:	c3                   	ret    

0000000000028b45 <std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)>:
   28b45:	55                   	push   rbp
   28b46:	48 89 e5             	mov    rbp,rsp
   28b49:	48 83 ec 10          	sub    rsp,0x10
   28b4d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28b51:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28b55:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28b59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28b5d:	48 89 d6             	mov    rsi,rdx
   28b60:	48 89 c7             	mov    rdi,rax
   28b63:	e8 a8 b6 fd ff       	call   4210 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>
   28b68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28b6c:	c9                   	leave  
   28b6d:	c3                   	ret    

0000000000028b6e <std::tuple_element<1ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   28b6e:	55                   	push   rbp
   28b6f:	48 89 e5             	mov    rbp,rsp
   28b72:	48 83 ec 10          	sub    rsp,0x10
   28b76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28b7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28b7e:	48 89 c7             	mov    rdi,rax
   28b81:	e8 0e 18 00 00       	call   2a394 <std::filesystem::__cxx11::path::_List::_Impl_deleter& std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   28b86:	c9                   	leave  
   28b87:	c3                   	ret    

0000000000028b88 <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   28b88:	55                   	push   rbp
   28b89:	48 89 e5             	mov    rbp,rsp
   28b8c:	53                   	push   rbx
   28b8d:	48 83 ec 38          	sub    rsp,0x38
   28b91:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   28b95:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   28b99:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28ba2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28ba6:	31 c0                	xor    eax,eax
   28ba8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28bac:	f3 0f 10 48 0c       	movss  xmm1,DWORD PTR [rax+0xc]
   28bb1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28bb5:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   28bba:	0f 28 d9             	movaps xmm3,xmm1
   28bbd:	f3 0f 59 d8          	mulss  xmm3,xmm0
   28bc1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28bc5:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   28bca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28bce:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   28bd3:	0f 28 d1             	movaps xmm2,xmm1
   28bd6:	f3 0f 59 d0          	mulss  xmm2,xmm0
   28bda:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28bde:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   28be3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28be7:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   28bec:	0f 28 e1             	movaps xmm4,xmm1
   28bef:	f3 0f 59 e0          	mulss  xmm4,xmm0
   28bf3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28bf7:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   28bfb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28bff:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   28c03:	f3 0f 59 c8          	mulss  xmm1,xmm0
   28c07:	66 0f 7e ca          	movd   edx,xmm1
   28c0b:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   28c0f:	0f 28 cc             	movaps xmm1,xmm4
   28c12:	66 0f 6e c2          	movd   xmm0,edx
   28c16:	48 89 c7             	mov    rdi,rax
   28c19:	e8 9a db ff ff       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   28c1e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   28c22:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28c26:	48 89 c1             	mov    rcx,rax
   28c29:	48 89 d3             	mov    rbx,rdx
   28c2c:	48 89 d0             	mov    rax,rdx
   28c2f:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   28c33:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   28c3c:	74 05                	je     28c43 <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)+0xbb>
   28c3e:	e8 6d b8 fd ff       	call   44b0 <__stack_chk_fail@plt>
   28c43:	66 48 0f 6e c1       	movq   xmm0,rcx
   28c48:	66 48 0f 6e c8       	movq   xmm1,rax
   28c4d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28c51:	c9                   	leave  
   28c52:	c3                   	ret    

0000000000028c53 <float glm::dot<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>:
   28c53:	55                   	push   rbp
   28c54:	48 89 e5             	mov    rbp,rsp
   28c57:	48 83 ec 10          	sub    rsp,0x10
   28c5b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28c5f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28c63:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28c67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28c6b:	48 89 d6             	mov    rsi,rdx
   28c6e:	48 89 c7             	mov    rdi,rax
   28c71:	e8 ba 17 00 00       	call   2a430 <glm::detail::compute_dot<glm::vec<2, float, (glm::qualifier)0>, float, false>::call(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>
   28c76:	c9                   	leave  
   28c77:	c3                   	ret    

0000000000028c78 <float glm::inversesqrt<float>(float)>:
   28c78:	55                   	push   rbp
   28c79:	48 89 e5             	mov    rbp,rsp
   28c7c:	48 83 ec 10          	sub    rsp,0x10
   28c80:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   28c85:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   28c88:	66 0f 6e c0          	movd   xmm0,eax
   28c8c:	e8 40 c0 ff ff       	call   24cd1 <std::sqrt(float)>
   28c91:	f3 0f 10 0d c3 40 01 00 	movss  xmm1,DWORD PTR [rip+0x140c3]        # 3cd5c <NANO_SEC+0x1a94>
   28c99:	f3 0f 5e c8          	divss  xmm1,xmm0
   28c9d:	0f 28 c1             	movaps xmm0,xmm1
   28ca0:	c9                   	leave  
   28ca1:	c3                   	ret    

0000000000028ca2 <__gnu_cxx::new_allocator<Tex>::new_allocator()>:
   28ca2:	55                   	push   rbp
   28ca3:	48 89 e5             	mov    rbp,rsp
   28ca6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28caa:	90                   	nop
   28cab:	5d                   	pop    rbp
   28cac:	c3                   	ret    

0000000000028cad <std::allocator_traits<std::allocator<Tex> >::deallocate(std::allocator<Tex>&, Tex*, unsigned long)>:
   28cad:	55                   	push   rbp
   28cae:	48 89 e5             	mov    rbp,rsp
   28cb1:	48 83 ec 20          	sub    rsp,0x20
   28cb5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28cb9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28cbd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28cc1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   28cc5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28cc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28ccd:	48 89 ce             	mov    rsi,rcx
   28cd0:	48 89 c7             	mov    rdi,rax
   28cd3:	e8 94 17 00 00       	call   2a46c <__gnu_cxx::new_allocator<Tex>::deallocate(Tex*, unsigned long)>
   28cd8:	90                   	nop
   28cd9:	c9                   	leave  
   28cda:	c3                   	ret    

0000000000028cdb <void std::_Destroy<Tex*>(Tex*, Tex*)>:
   28cdb:	55                   	push   rbp
   28cdc:	48 89 e5             	mov    rbp,rsp
   28cdf:	48 83 ec 10          	sub    rsp,0x10
   28ce3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28ce7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28ceb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28cef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28cf3:	48 89 d6             	mov    rsi,rdx
   28cf6:	48 89 c7             	mov    rdi,rax
   28cf9:	e8 a7 17 00 00       	call   2a4a5 <void std::_Destroy_aux<true>::__destroy<Tex*>(Tex*, Tex*)>
   28cfe:	90                   	nop
   28cff:	c9                   	leave  
   28d00:	c3                   	ret    
   28d01:	90                   	nop

0000000000028d02 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator()>:
   28d02:	55                   	push   rbp
   28d03:	48 89 e5             	mov    rbp,rsp
   28d06:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d0a:	90                   	nop
   28d0b:	5d                   	pop    rbp
   28d0c:	c3                   	ret    

0000000000028d0d <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
   28d0d:	55                   	push   rbp
   28d0e:	48 89 e5             	mov    rbp,rsp
   28d11:	48 83 ec 20          	sub    rsp,0x20
   28d15:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d19:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28d1d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28d21:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   28d25:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28d29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28d2d:	48 89 ce             	mov    rsi,rcx
   28d30:	48 89 c7             	mov    rdi,rax
   28d33:	e8 7c 17 00 00       	call   2a4b4 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   28d38:	90                   	nop
   28d39:	c9                   	leave  
   28d3a:	c3                   	ret    

0000000000028d3b <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   28d3b:	55                   	push   rbp
   28d3c:	48 89 e5             	mov    rbp,rsp
   28d3f:	48 83 ec 10          	sub    rsp,0x10
   28d43:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d47:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28d4b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28d4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28d53:	48 89 d6             	mov    rsi,rdx
   28d56:	48 89 c7             	mov    rdi,rax
   28d59:	e8 86 17 00 00       	call   2a4e4 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   28d5e:	90                   	nop
   28d5f:	c9                   	leave  
   28d60:	c3                   	ret    

0000000000028d61 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>:
   28d61:	55                   	push   rbp
   28d62:	48 89 e5             	mov    rbp,rsp
   28d65:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28d6d:	5d                   	pop    rbp
   28d6e:	c3                   	ret    

0000000000028d6f <void std::allocator_traits<std::allocator<AABB> >::construct<AABB, AABB>(std::allocator<AABB>&, AABB*, AABB&&)>:
   28d6f:	55                   	push   rbp
   28d70:	48 89 e5             	mov    rbp,rsp
   28d73:	48 83 ec 20          	sub    rsp,0x20
   28d77:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d7b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28d7f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28d83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28d87:	48 89 c7             	mov    rdi,rax
   28d8a:	e8 d2 ff ff ff       	call   28d61 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   28d8f:	48 89 c2             	mov    rdx,rax
   28d92:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28d96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28d9a:	48 89 ce             	mov    rsi,rcx
   28d9d:	48 89 c7             	mov    rdi,rax
   28da0:	e8 77 17 00 00       	call   2a51c <void __gnu_cxx::new_allocator<AABB>::construct<AABB, AABB>(AABB*, AABB&&)>
   28da5:	90                   	nop
   28da6:	c9                   	leave  
   28da7:	c3                   	ret    

0000000000028da8 <std::vector<AABB, std::allocator<AABB> >::end()>:
   28da8:	55                   	push   rbp
   28da9:	48 89 e5             	mov    rbp,rsp
   28dac:	48 83 ec 20          	sub    rsp,0x20
   28db0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28db4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28dbd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28dc1:	31 c0                	xor    eax,eax
   28dc3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28dc7:	48 8d 50 08          	lea    rdx,[rax+0x8]
   28dcb:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   28dcf:	48 89 d6             	mov    rsi,rdx
   28dd2:	48 89 c7             	mov    rdi,rax
   28dd5:	e8 98 17 00 00       	call   2a572 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>
   28dda:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28dde:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   28de2:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   28deb:	74 05                	je     28df2 <std::vector<AABB, std::allocator<AABB> >::end()+0x4a>
   28ded:	e8 be b6 fd ff       	call   44b0 <__stack_chk_fail@plt>
   28df2:	c9                   	leave  
   28df3:	c3                   	ret    

0000000000028df4 <void std::vector<AABB, std::allocator<AABB> >::_M_realloc_insert<AABB>(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >, AABB&&)>:
   28df4:	55                   	push   rbp
   28df5:	48 89 e5             	mov    rbp,rsp
   28df8:	53                   	push   rbx
   28df9:	48 83 ec 68          	sub    rsp,0x68
   28dfd:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   28e01:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   28e05:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   28e09:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28e12:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28e16:	31 c0                	xor    eax,eax
   28e18:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28e1c:	48 8d 15 39 3e 01 00 	lea    rdx,[rip+0x13e39]        # 3cc5c <NANO_SEC+0x1994>
   28e23:	be 01 00 00 00       	mov    esi,0x1
   28e28:	48 89 c7             	mov    rdi,rax
   28e2b:	e8 60 17 00 00       	call   2a590 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const>
   28e30:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   28e34:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28e38:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28e3b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   28e3f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28e43:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   28e47:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   28e4b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28e4f:	48 89 c7             	mov    rdi,rax
   28e52:	e8 25 18 00 00       	call   2a67c <std::vector<AABB, std::allocator<AABB> >::begin()>
   28e57:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   28e5b:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   28e5f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28e63:	48 89 d6             	mov    rsi,rdx
   28e66:	48 89 c7             	mov    rdi,rax
   28e69:	e8 56 18 00 00       	call   2a6c4 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::difference_type __gnu_cxx::operator-<AABB*, std::vector<AABB, std::allocator<AABB> > >(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&, __gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&)>
   28e6e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   28e72:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28e76:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   28e7a:	48 89 d6             	mov    rsi,rdx
   28e7d:	48 89 c7             	mov    rdi,rax
   28e80:	e8 8f 18 00 00       	call   2a714 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)>
   28e85:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   28e89:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28e8d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28e91:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   28e95:	48 89 c7             	mov    rdi,rax
   28e98:	e8 c4 fe ff ff       	call   28d61 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   28e9d:	48 89 c6             	mov    rsi,rax
   28ea0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   28ea4:	48 89 d0             	mov    rax,rdx
   28ea7:	48 01 c0             	add    rax,rax
   28eaa:	48 01 d0             	add    rax,rdx
   28ead:	48 c1 e0 03          	shl    rax,0x3
   28eb1:	48 89 c2             	mov    rdx,rax
   28eb4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28eb8:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   28ebc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28ec0:	48 89 f2             	mov    rdx,rsi
   28ec3:	48 89 ce             	mov    rsi,rcx
   28ec6:	48 89 c7             	mov    rdi,rax
   28ec9:	e8 a1 fe ff ff       	call   28d6f <void std::allocator_traits<std::allocator<AABB> >::construct<AABB, AABB>(std::allocator<AABB>&, AABB*, AABB&&)>
   28ece:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   28ed6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28eda:	48 89 c7             	mov    rdi,rax
   28edd:	e8 b2 fa ff ff       	call   28994 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>
   28ee2:	48 89 c3             	mov    rbx,rax
   28ee5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28ee9:	48 89 c7             	mov    rdi,rax
   28eec:	e8 89 18 00 00       	call   2a77a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   28ef1:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   28ef4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28ef8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28efc:	48 89 d9             	mov    rcx,rbx
   28eff:	48 89 c7             	mov    rdi,rax
   28f02:	e8 40 18 00 00       	call   2a747 <std::vector<AABB, std::allocator<AABB> >::_S_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   28f07:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28f0b:	48 83 45 e0 18       	add    QWORD PTR [rbp-0x20],0x18
   28f10:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f14:	48 89 c7             	mov    rdi,rax
   28f17:	e8 78 fa ff ff       	call   28994 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>
   28f1c:	48 89 c3             	mov    rbx,rax
   28f1f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28f23:	48 89 c7             	mov    rdi,rax
   28f26:	e8 4f 18 00 00       	call   2a77a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   28f2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28f2e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28f32:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   28f36:	48 89 d9             	mov    rcx,rbx
   28f39:	48 89 c7             	mov    rdi,rax
   28f3c:	e8 06 18 00 00       	call   2a747 <std::vector<AABB, std::allocator<AABB> >::_S_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   28f41:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28f45:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f49:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   28f4d:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   28f51:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   28f55:	48 89 d1             	mov    rcx,rdx
   28f58:	48 c1 f9 03          	sar    rcx,0x3
   28f5c:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   28f66:	48 0f af d1          	imul   rdx,rcx
   28f6a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   28f6e:	48 89 ce             	mov    rsi,rcx
   28f71:	48 89 c7             	mov    rdi,rax
   28f74:	e8 e5 f9 ff ff       	call   2895e <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)>
   28f79:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f7d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28f81:	48 89 10             	mov    QWORD PTR [rax],rdx
   28f84:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f88:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28f8c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   28f90:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   28f94:	48 89 d0             	mov    rax,rdx
   28f97:	48 01 c0             	add    rax,rax
   28f9a:	48 01 d0             	add    rax,rdx
   28f9d:	48 c1 e0 03          	shl    rax,0x3
   28fa1:	48 89 c2             	mov    rdx,rax
   28fa4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28fa8:	48 01 c2             	add    rdx,rax
   28fab:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28faf:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   28fb3:	90                   	nop
   28fb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28fb8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   28fc1:	74 05                	je     28fc8 <void std::vector<AABB, std::allocator<AABB> >::_M_realloc_insert<AABB>(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >, AABB&&)+0x1d4>
   28fc3:	e8 e8 b4 fd ff       	call   44b0 <__stack_chk_fail@plt>
   28fc8:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28fcc:	c9                   	leave  
   28fcd:	c3                   	ret    

0000000000028fce <std::vector<AABB, std::allocator<AABB> >::back()>:
   28fce:	55                   	push   rbp
   28fcf:	48 89 e5             	mov    rbp,rsp
   28fd2:	48 83 ec 30          	sub    rsp,0x30
   28fd6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   28fda:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28fe3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28fe7:	31 c0                	xor    eax,eax
   28fe9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28fed:	48 89 c7             	mov    rdi,rax
   28ff0:	e8 b3 fd ff ff       	call   28da8 <std::vector<AABB, std::allocator<AABB> >::end()>
   28ff5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28ff9:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   28ffd:	be 01 00 00 00       	mov    esi,0x1
   29002:	48 89 c7             	mov    rdi,rax
   29005:	e8 7e 17 00 00       	call   2a788 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator-(long) const>
   2900a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2900e:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29012:	48 89 c7             	mov    rdi,rax
   29015:	e8 dc 17 00 00       	call   2a7f6 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator*() const>
   2901a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2901e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29027:	74 05                	je     2902e <std::vector<AABB, std::allocator<AABB> >::back()+0x60>
   29029:	e8 82 b4 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2902e:	c9                   	leave  
   2902f:	c3                   	ret    

0000000000029030 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>:
   29030:	55                   	push   rbp
   29031:	48 89 e5             	mov    rbp,rsp
   29034:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29038:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2903c:	5d                   	pop    rbp
   2903d:	c3                   	ret    

000000000002903e <void std::allocator_traits<std::allocator<Mesh> >::construct<Mesh, Mesh>(std::allocator<Mesh>&, Mesh*, Mesh&&)>:
   2903e:	55                   	push   rbp
   2903f:	48 89 e5             	mov    rbp,rsp
   29042:	48 83 ec 20          	sub    rsp,0x20
   29046:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2904a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2904e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29052:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29056:	48 89 c7             	mov    rdi,rax
   29059:	e8 d2 ff ff ff       	call   29030 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   2905e:	48 89 c2             	mov    rdx,rax
   29061:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   29065:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29069:	48 89 ce             	mov    rsi,rcx
   2906c:	48 89 c7             	mov    rdi,rax
   2906f:	e8 94 17 00 00       	call   2a808 <void __gnu_cxx::new_allocator<Mesh>::construct<Mesh, Mesh>(Mesh*, Mesh&&)>
   29074:	90                   	nop
   29075:	c9                   	leave  
   29076:	c3                   	ret    
   29077:	90                   	nop

0000000000029078 <std::vector<Mesh, std::allocator<Mesh> >::end()>:
   29078:	55                   	push   rbp
   29079:	48 89 e5             	mov    rbp,rsp
   2907c:	48 83 ec 20          	sub    rsp,0x20
   29080:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29084:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2908d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29091:	31 c0                	xor    eax,eax
   29093:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29097:	48 8d 50 08          	lea    rdx,[rax+0x8]
   2909b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2909f:	48 89 d6             	mov    rsi,rdx
   290a2:	48 89 c7             	mov    rdi,rax
   290a5:	e8 9e 17 00 00       	call   2a848 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>
   290aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   290ae:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   290b2:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   290bb:	74 05                	je     290c2 <std::vector<Mesh, std::allocator<Mesh> >::end()+0x4a>
   290bd:	e8 ee b3 fd ff       	call   44b0 <__stack_chk_fail@plt>
   290c2:	c9                   	leave  
   290c3:	c3                   	ret    

00000000000290c4 <void std::vector<Mesh, std::allocator<Mesh> >::_M_realloc_insert<Mesh>(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >, Mesh&&)>:
   290c4:	55                   	push   rbp
   290c5:	48 89 e5             	mov    rbp,rsp
   290c8:	53                   	push   rbx
   290c9:	48 83 ec 68          	sub    rsp,0x68
   290cd:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   290d1:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   290d5:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   290d9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   290e2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   290e6:	31 c0                	xor    eax,eax
   290e8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   290ec:	48 8d 15 69 3b 01 00 	lea    rdx,[rip+0x13b69]        # 3cc5c <NANO_SEC+0x1994>
   290f3:	be 01 00 00 00       	mov    esi,0x1
   290f8:	48 89 c7             	mov    rdi,rax
   290fb:	e8 66 17 00 00       	call   2a866 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const>
   29100:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   29104:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29108:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2910b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2910f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29113:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   29117:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2911b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2911f:	48 89 c7             	mov    rdi,rax
   29122:	e8 2b 18 00 00       	call   2a952 <std::vector<Mesh, std::allocator<Mesh> >::begin()>
   29127:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2912b:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2912f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29133:	48 89 d6             	mov    rsi,rdx
   29136:	48 89 c7             	mov    rdi,rax
   29139:	e8 5c 18 00 00       	call   2a99a <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::difference_type __gnu_cxx::operator-<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&, __gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&)>
   2913e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   29142:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29146:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2914a:	48 89 d6             	mov    rsi,rdx
   2914d:	48 89 c7             	mov    rdi,rax
   29150:	e8 85 18 00 00       	call   2a9da <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)>
   29155:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29159:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2915d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29161:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29165:	48 89 c7             	mov    rdi,rax
   29168:	e8 c3 fe ff ff       	call   29030 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   2916d:	48 89 c2             	mov    rdx,rax
   29170:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   29174:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2917c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29180:	48 01 c1             	add    rcx,rax
   29183:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29187:	48 89 ce             	mov    rsi,rcx
   2918a:	48 89 c7             	mov    rdi,rax
   2918d:	e8 ac fe ff ff       	call   2903e <void std::allocator_traits<std::allocator<Mesh> >::construct<Mesh, Mesh>(std::allocator<Mesh>&, Mesh*, Mesh&&)>
   29192:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   2919a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2919e:	48 89 c7             	mov    rdi,rax
   291a1:	e8 a2 f5 ff ff       	call   28748 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>
   291a6:	48 89 c3             	mov    rbx,rax
   291a9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   291ad:	48 89 c7             	mov    rdi,rax
   291b0:	e8 8b 18 00 00       	call   2aa40 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   291b5:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   291b8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   291bc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   291c0:	48 89 d9             	mov    rcx,rbx
   291c3:	48 89 c7             	mov    rdi,rax
   291c6:	e8 42 18 00 00       	call   2aa0d <std::vector<Mesh, std::allocator<Mesh> >::_S_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   291cb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   291cf:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   291d4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   291d8:	48 89 c7             	mov    rdi,rax
   291db:	e8 68 f5 ff ff       	call   28748 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>
   291e0:	48 89 c3             	mov    rbx,rax
   291e3:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   291e7:	48 89 c7             	mov    rdi,rax
   291ea:	e8 51 18 00 00       	call   2aa40 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   291ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
   291f2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   291f6:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   291fa:	48 89 d9             	mov    rcx,rbx
   291fd:	48 89 c7             	mov    rdi,rax
   29200:	e8 08 18 00 00       	call   2aa0d <std::vector<Mesh, std::allocator<Mesh> >::_S_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   29205:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29209:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2920d:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   29211:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   29215:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   29219:	48 c1 fa 02          	sar    rdx,0x2
   2921d:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   29221:	48 89 ce             	mov    rsi,rcx
   29224:	48 89 c7             	mov    rdi,rax
   29227:	e8 e6 f4 ff ff       	call   28712 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)>
   2922c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29230:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   29234:	48 89 10             	mov    QWORD PTR [rax],rdx
   29237:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2923b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2923f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   29243:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29247:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2924f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29253:	48 01 c2             	add    rdx,rax
   29256:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2925a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   2925e:	90                   	nop
   2925f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29263:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2926c:	74 05                	je     29273 <void std::vector<Mesh, std::allocator<Mesh> >::_M_realloc_insert<Mesh>(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >, Mesh&&)+0x1af>
   2926e:	e8 3d b2 fd ff       	call   44b0 <__stack_chk_fail@plt>
   29273:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29277:	c9                   	leave  
   29278:	c3                   	ret    
   29279:	90                   	nop

000000000002927a <std::vector<Mesh, std::allocator<Mesh> >::back()>:
   2927a:	55                   	push   rbp
   2927b:	48 89 e5             	mov    rbp,rsp
   2927e:	48 83 ec 30          	sub    rsp,0x30
   29282:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   29286:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2928f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29293:	31 c0                	xor    eax,eax
   29295:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29299:	48 89 c7             	mov    rdi,rax
   2929c:	e8 d7 fd ff ff       	call   29078 <std::vector<Mesh, std::allocator<Mesh> >::end()>
   292a1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   292a5:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   292a9:	be 01 00 00 00       	mov    esi,0x1
   292ae:	48 89 c7             	mov    rdi,rax
   292b1:	e8 98 17 00 00       	call   2aa4e <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator-(long) const>
   292b6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   292ba:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   292be:	48 89 c7             	mov    rdi,rax
   292c1:	e8 ee 17 00 00       	call   2aab4 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator*() const>
   292c6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   292ca:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   292d3:	74 05                	je     292da <std::vector<Mesh, std::allocator<Mesh> >::back()+0x60>
   292d5:	e8 d6 b1 fd ff       	call   44b0 <__stack_chk_fail@plt>
   292da:	c9                   	leave  
   292db:	c3                   	ret    

00000000000292dc <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>:
   292dc:	55                   	push   rbp
   292dd:	48 89 e5             	mov    rbp,rsp
   292e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   292e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   292e8:	5d                   	pop    rbp
   292e9:	c3                   	ret    

00000000000292ea <void std::allocator_traits<std::allocator<Transform> >::construct<Transform, Transform>(std::allocator<Transform>&, Transform*, Transform&&)>:
   292ea:	55                   	push   rbp
   292eb:	48 89 e5             	mov    rbp,rsp
   292ee:	48 83 ec 20          	sub    rsp,0x20
   292f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   292f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   292fa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   292fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29302:	48 89 c7             	mov    rdi,rax
   29305:	e8 d2 ff ff ff       	call   292dc <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   2930a:	48 89 c2             	mov    rdx,rax
   2930d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   29311:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29315:	48 89 ce             	mov    rsi,rcx
   29318:	48 89 c7             	mov    rdi,rax
   2931b:	e8 a6 17 00 00       	call   2aac6 <void __gnu_cxx::new_allocator<Transform>::construct<Transform, Transform>(Transform*, Transform&&)>
   29320:	90                   	nop
   29321:	c9                   	leave  
   29322:	c3                   	ret    
   29323:	90                   	nop

0000000000029324 <std::vector<Transform, std::allocator<Transform> >::end()>:
   29324:	55                   	push   rbp
   29325:	48 89 e5             	mov    rbp,rsp
   29328:	48 83 ec 20          	sub    rsp,0x20
   2932c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29330:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29339:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2933d:	31 c0                	xor    eax,eax
   2933f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29343:	48 8d 50 08          	lea    rdx,[rax+0x8]
   29347:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2934b:	48 89 d6             	mov    rsi,rdx
   2934e:	48 89 c7             	mov    rdi,rax
   29351:	e8 d0 17 00 00       	call   2ab26 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>
   29356:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2935a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2935e:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29367:	74 05                	je     2936e <std::vector<Transform, std::allocator<Transform> >::end()+0x4a>
   29369:	e8 42 b1 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2936e:	c9                   	leave  
   2936f:	c3                   	ret    

0000000000029370 <void std::vector<Transform, std::allocator<Transform> >::_M_realloc_insert<Transform>(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >, Transform&&)>:
   29370:	55                   	push   rbp
   29371:	48 89 e5             	mov    rbp,rsp
   29374:	53                   	push   rbx
   29375:	48 83 ec 68          	sub    rsp,0x68
   29379:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   2937d:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   29381:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   29385:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2938e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29392:	31 c0                	xor    eax,eax
   29394:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29398:	48 8d 15 bd 38 01 00 	lea    rdx,[rip+0x138bd]        # 3cc5c <NANO_SEC+0x1994>
   2939f:	be 01 00 00 00       	mov    esi,0x1
   293a4:	48 89 c7             	mov    rdi,rax
   293a7:	e8 98 17 00 00       	call   2ab44 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const>
   293ac:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   293b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   293b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   293b7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   293bb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   293bf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   293c3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   293c7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   293cb:	48 89 c7             	mov    rdi,rax
   293ce:	e8 5d 18 00 00       	call   2ac30 <std::vector<Transform, std::allocator<Transform> >::begin()>
   293d3:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   293d7:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   293db:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   293df:	48 89 d6             	mov    rsi,rdx
   293e2:	48 89 c7             	mov    rdi,rax
   293e5:	e8 8e 18 00 00       	call   2ac78 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::difference_type __gnu_cxx::operator-<Transform*, std::vector<Transform, std::allocator<Transform> > >(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&, __gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&)>
   293ea:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   293ee:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   293f2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   293f6:	48 89 d6             	mov    rsi,rdx
   293f9:	48 89 c7             	mov    rdi,rax
   293fc:	e8 c7 18 00 00       	call   2acc8 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)>
   29401:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29405:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29409:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2940d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29411:	48 89 c7             	mov    rdi,rax
   29414:	e8 c3 fe ff ff       	call   292dc <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   29419:	48 89 c6             	mov    rsi,rax
   2941c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   29420:	48 89 d0             	mov    rax,rdx
   29423:	48 c1 e0 03          	shl    rax,0x3
   29427:	48 01 d0             	add    rax,rdx
   2942a:	48 c1 e0 02          	shl    rax,0x2
   2942e:	48 89 c2             	mov    rdx,rax
   29431:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29435:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   29439:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2943d:	48 89 f2             	mov    rdx,rsi
   29440:	48 89 ce             	mov    rsi,rcx
   29443:	48 89 c7             	mov    rdi,rax
   29446:	e8 9f fe ff ff       	call   292ea <void std::allocator_traits<std::allocator<Transform> >::construct<Transform, Transform>(std::allocator<Transform>&, Transform*, Transform&&)>
   2944b:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   29453:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29457:	48 89 c7             	mov    rdi,rax
   2945a:	e8 71 f4 ff ff       	call   288d0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>
   2945f:	48 89 c3             	mov    rbx,rax
   29462:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29466:	48 89 c7             	mov    rdi,rax
   29469:	e8 c0 18 00 00       	call   2ad2e <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   2946e:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   29471:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   29475:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29479:	48 89 d9             	mov    rcx,rbx
   2947c:	48 89 c7             	mov    rdi,rax
   2947f:	e8 77 18 00 00       	call   2acfb <std::vector<Transform, std::allocator<Transform> >::_S_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   29484:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29488:	48 83 45 e0 24       	add    QWORD PTR [rbp-0x20],0x24
   2948d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29491:	48 89 c7             	mov    rdi,rax
   29494:	e8 37 f4 ff ff       	call   288d0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>
   29499:	48 89 c3             	mov    rbx,rax
   2949c:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   294a0:	48 89 c7             	mov    rdi,rax
   294a3:	e8 86 18 00 00       	call   2ad2e <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   294a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   294ab:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   294af:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   294b3:	48 89 d9             	mov    rcx,rbx
   294b6:	48 89 c7             	mov    rdi,rax
   294b9:	e8 3d 18 00 00       	call   2acfb <std::vector<Transform, std::allocator<Transform> >::_S_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   294be:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   294c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   294c6:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   294ca:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   294ce:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   294d2:	48 89 d1             	mov    rcx,rdx
   294d5:	48 c1 f9 02          	sar    rcx,0x2
   294d9:	48 ba 39 8e e3 38 8e e3 38 8e 	movabs rdx,0x8e38e38e38e38e39
   294e3:	48 0f af d1          	imul   rdx,rcx
   294e7:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   294eb:	48 89 ce             	mov    rsi,rcx
   294ee:	48 89 c7             	mov    rdi,rax
   294f1:	e8 a4 f3 ff ff       	call   2889a <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)>
   294f6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   294fa:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   294fe:	48 89 10             	mov    QWORD PTR [rax],rdx
   29501:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29505:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   29509:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   2950d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   29511:	48 89 d0             	mov    rax,rdx
   29514:	48 c1 e0 03          	shl    rax,0x3
   29518:	48 01 d0             	add    rax,rdx
   2951b:	48 c1 e0 02          	shl    rax,0x2
   2951f:	48 89 c2             	mov    rdx,rax
   29522:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29526:	48 01 c2             	add    rdx,rax
   29529:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2952d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   29531:	90                   	nop
   29532:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29536:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2953f:	74 05                	je     29546 <void std::vector<Transform, std::allocator<Transform> >::_M_realloc_insert<Transform>(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >, Transform&&)+0x1d6>
   29541:	e8 6a af fd ff       	call   44b0 <__stack_chk_fail@plt>
   29546:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2954a:	c9                   	leave  
   2954b:	c3                   	ret    

000000000002954c <std::vector<Transform, std::allocator<Transform> >::back()>:
   2954c:	55                   	push   rbp
   2954d:	48 89 e5             	mov    rbp,rsp
   29550:	48 83 ec 30          	sub    rsp,0x30
   29554:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   29558:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29561:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29565:	31 c0                	xor    eax,eax
   29567:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2956b:	48 89 c7             	mov    rdi,rax
   2956e:	e8 b1 fd ff ff       	call   29324 <std::vector<Transform, std::allocator<Transform> >::end()>
   29573:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29577:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2957b:	be 01 00 00 00       	mov    esi,0x1
   29580:	48 89 c7             	mov    rdi,rax
   29583:	e8 b4 17 00 00       	call   2ad3c <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator-(long) const>
   29588:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2958c:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29590:	48 89 c7             	mov    rdi,rax
   29593:	e8 14 18 00 00       	call   2adac <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator*() const>
   29598:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2959c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   295a5:	74 05                	je     295ac <std::vector<Transform, std::allocator<Transform> >::back()+0x60>
   295a7:	e8 04 af fd ff       	call   44b0 <__stack_chk_fail@plt>
   295ac:	c9                   	leave  
   295ad:	c3                   	ret    

00000000000295ae <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>:
   295ae:	55                   	push   rbp
   295af:	48 89 e5             	mov    rbp,rsp
   295b2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   295b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   295ba:	5d                   	pop    rbp
   295bb:	c3                   	ret    

00000000000295bc <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int>(std::allocator<unsigned int>&, unsigned int*, unsigned int&&)>:
   295bc:	55                   	push   rbp
   295bd:	48 89 e5             	mov    rbp,rsp
   295c0:	48 83 ec 20          	sub    rsp,0x20
   295c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   295c8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   295cc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   295d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   295d4:	48 89 c7             	mov    rdi,rax
   295d7:	e8 d2 ff ff ff       	call   295ae <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   295dc:	48 89 c2             	mov    rdx,rax
   295df:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   295e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   295e7:	48 89 ce             	mov    rsi,rcx
   295ea:	48 89 c7             	mov    rdi,rax
   295ed:	e8 cc 17 00 00       	call   2adbe <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int>(unsigned int*, unsigned int&&)>
   295f2:	90                   	nop
   295f3:	c9                   	leave  
   295f4:	c3                   	ret    
   295f5:	90                   	nop

00000000000295f6 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)>:
   295f6:	55                   	push   rbp
   295f7:	48 89 e5             	mov    rbp,rsp
   295fa:	53                   	push   rbx
   295fb:	48 83 ec 68          	sub    rsp,0x68
   295ff:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   29603:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   29607:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2960b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29614:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29618:	31 c0                	xor    eax,eax
   2961a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2961e:	48 8d 15 37 36 01 00 	lea    rdx,[rip+0x13637]        # 3cc5c <NANO_SEC+0x1994>
   29625:	be 01 00 00 00       	mov    esi,0x1
   2962a:	48 89 c7             	mov    rdi,rax
   2962d:	e8 46 02 00 00       	call   29878 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const>
   29632:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   29636:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2963a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2963d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   29641:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29645:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   29649:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2964d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29651:	48 89 c7             	mov    rdi,rax
   29654:	e8 0b 03 00 00       	call   29964 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>
   29659:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2965d:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   29661:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29665:	48 89 d6             	mov    rsi,rdx
   29668:	48 89 c7             	mov    rdi,rax
   2966b:	e8 3c 03 00 00       	call   299ac <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>
   29670:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   29674:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29678:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2967c:	48 89 d6             	mov    rsi,rdx
   2967f:	48 89 c7             	mov    rdi,rax
   29682:	e8 65 03 00 00       	call   299ec <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   29687:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2968b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2968f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29693:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29697:	48 89 c7             	mov    rdi,rax
   2969a:	e8 0f ff ff ff       	call   295ae <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   2969f:	48 89 c2             	mov    rdx,rax
   296a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   296a6:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   296ae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   296b2:	48 01 c1             	add    rcx,rax
   296b5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   296b9:	48 89 ce             	mov    rsi,rcx
   296bc:	48 89 c7             	mov    rdi,rax
   296bf:	e8 f8 fe ff ff       	call   295bc <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int>(std::allocator<unsigned int>&, unsigned int*, unsigned int&&)>
   296c4:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   296cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   296d0:	48 89 c7             	mov    rdi,rax
   296d3:	e8 34 f1 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   296d8:	48 89 c3             	mov    rbx,rax
   296db:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   296df:	48 89 c7             	mov    rdi,rax
   296e2:	e8 6b 03 00 00       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   296e7:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   296ea:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   296ee:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   296f2:	48 89 d9             	mov    rcx,rbx
   296f5:	48 89 c7             	mov    rdi,rax
   296f8:	e8 22 03 00 00       	call   29a1f <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   296fd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29701:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   29706:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2970a:	48 89 c7             	mov    rdi,rax
   2970d:	e8 fa f0 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   29712:	48 89 c3             	mov    rbx,rax
   29715:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29719:	48 89 c7             	mov    rdi,rax
   2971c:	e8 31 03 00 00       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   29721:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29724:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   29728:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   2972c:	48 89 d9             	mov    rcx,rbx
   2972f:	48 89 c7             	mov    rdi,rax
   29732:	e8 e8 02 00 00       	call   29a1f <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   29737:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2973b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2973f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   29743:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   29747:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   2974b:	48 c1 fa 02          	sar    rdx,0x2
   2974f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   29753:	48 89 ce             	mov    rsi,rcx
   29756:	48 89 c7             	mov    rdi,rax
   29759:	e8 78 f0 ff ff       	call   287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   2975e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29762:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   29766:	48 89 10             	mov    QWORD PTR [rax],rdx
   29769:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2976d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   29771:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   29775:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29779:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29781:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29785:	48 01 c2             	add    rdx,rax
   29788:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2978c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   29790:	90                   	nop
   29791:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29795:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2979e:	74 05                	je     297a5 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)+0x1af>
   297a0:	e8 0b ad fd ff       	call   44b0 <__stack_chk_fail@plt>
   297a5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   297a9:	c9                   	leave  
   297aa:	c3                   	ret    
   297ab:	90                   	nop

00000000000297ac <std::vector<unsigned int, std::allocator<unsigned int> >::back()>:
   297ac:	55                   	push   rbp
   297ad:	48 89 e5             	mov    rbp,rsp
   297b0:	48 83 ec 30          	sub    rsp,0x30
   297b4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   297b8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   297c1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   297c5:	31 c0                	xor    eax,eax
   297c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   297cb:	48 89 c7             	mov    rdi,rax
   297ce:	e8 f3 e6 ff ff       	call   27ec6 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   297d3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   297d7:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   297db:	be 01 00 00 00       	mov    esi,0x1
   297e0:	48 89 c7             	mov    rdi,rax
   297e3:	e8 14 16 00 00       	call   2adfc <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const>
   297e8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   297ec:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   297f0:	48 89 c7             	mov    rdi,rax
   297f3:	e8 6a 16 00 00       	call   2ae62 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const>
   297f8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   297fc:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29805:	74 05                	je     2980c <std::vector<unsigned int, std::allocator<unsigned int> >::back()+0x60>
   29807:	e8 a4 ac fd ff       	call   44b0 <__stack_chk_fail@plt>
   2980c:	c9                   	leave  
   2980d:	c3                   	ret    

000000000002980e <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>:
   2980e:	55                   	push   rbp
   2980f:	48 89 e5             	mov    rbp,rsp
   29812:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29816:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2981a:	5d                   	pop    rbp
   2981b:	c3                   	ret    

000000000002981c <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int const&>(unsigned int*, unsigned int const&)>:
   2981c:	55                   	push   rbp
   2981d:	48 89 e5             	mov    rbp,rsp
   29820:	53                   	push   rbx
   29821:	48 83 ec 28          	sub    rsp,0x28
   29825:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29829:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2982d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   29831:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29835:	48 89 c7             	mov    rdi,rax
   29838:	e8 d1 ff ff ff       	call   2980e <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>
   2983d:	8b 18                	mov    ebx,DWORD PTR [rax]
   2983f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29843:	48 89 c6             	mov    rsi,rax
   29846:	bf 04 00 00 00       	mov    edi,0x4
   2984b:	e8 47 b3 ff ff       	call   24b97 <operator new(unsigned long, void*)>
   29850:	89 18                	mov    DWORD PTR [rax],ebx
   29852:	90                   	nop
   29853:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29857:	c9                   	leave  
   29858:	c3                   	ret    
   29859:	90                   	nop

000000000002985a <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>:
   2985a:	55                   	push   rbp
   2985b:	48 89 e5             	mov    rbp,rsp
   2985e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29862:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29866:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2986a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2986d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29871:	48 89 10             	mov    QWORD PTR [rax],rdx
   29874:	90                   	nop
   29875:	5d                   	pop    rbp
   29876:	c3                   	ret    
   29877:	90                   	nop

0000000000029878 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const>:
   29878:	55                   	push   rbp
   29879:	48 89 e5             	mov    rbp,rsp
   2987c:	53                   	push   rbx
   2987d:	48 83 ec 48          	sub    rsp,0x48
   29881:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   29885:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   29889:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2988d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29896:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2989a:	31 c0                	xor    eax,eax
   2989c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   298a0:	48 89 c7             	mov    rdi,rax
   298a3:	e8 cc 15 00 00       	call   2ae74 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>
   298a8:	48 89 c3             	mov    rbx,rax
   298ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   298af:	48 89 c7             	mov    rdi,rax
   298b2:	e8 eb c8 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   298b7:	48 29 c3             	sub    rbx,rax
   298ba:	48 89 da             	mov    rdx,rbx
   298bd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   298c1:	48 39 c2             	cmp    rdx,rax
   298c4:	0f 92 c0             	setb   al
   298c7:	84 c0                	test   al,al
   298c9:	74 0c                	je     298d7 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0x5f>
   298cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   298cf:	48 89 c7             	mov    rdi,rax
   298d2:	e8 f9 a8 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   298d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   298db:	48 89 c7             	mov    rdi,rax
   298de:	e8 bf c8 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   298e3:	48 89 c3             	mov    rbx,rax
   298e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   298ea:	48 89 c7             	mov    rdi,rax
   298ed:	e8 b0 c8 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   298f2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   298f6:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   298fa:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   298fe:	48 89 d6             	mov    rsi,rdx
   29901:	48 89 c7             	mov    rdi,rax
   29904:	e8 49 bc ff ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   29909:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2990c:	48 01 d8             	add    rax,rbx
   2990f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29913:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29917:	48 89 c7             	mov    rdi,rax
   2991a:	e8 83 c8 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2991f:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29923:	72 12                	jb     29937 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xbf>
   29925:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29929:	48 89 c7             	mov    rdi,rax
   2992c:	e8 43 15 00 00       	call   2ae74 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>
   29931:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29935:	76 0e                	jbe    29945 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xcd>
   29937:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2993b:	48 89 c7             	mov    rdi,rax
   2993e:	e8 31 15 00 00       	call   2ae74 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>
   29943:	eb 04                	jmp    29949 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xd1>
   29945:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29949:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2994d:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29956:	74 05                	je     2995d <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xe5>
   29958:	e8 53 ab fd ff       	call   44b0 <__stack_chk_fail@plt>
   2995d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29961:	c9                   	leave  
   29962:	c3                   	ret    
   29963:	90                   	nop

0000000000029964 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>:
   29964:	55                   	push   rbp
   29965:	48 89 e5             	mov    rbp,rsp
   29968:	48 83 ec 20          	sub    rsp,0x20
   2996c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29970:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29979:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2997d:	31 c0                	xor    eax,eax
   2997f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29983:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29987:	48 89 d6             	mov    rsi,rdx
   2998a:	48 89 c7             	mov    rdi,rax
   2998d:	e8 c8 fe ff ff       	call   2985a <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   29992:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29996:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2999a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   299a3:	74 05                	je     299aa <std::vector<unsigned int, std::allocator<unsigned int> >::begin()+0x46>
   299a5:	e8 06 ab fd ff       	call   44b0 <__stack_chk_fail@plt>
   299aa:	c9                   	leave  
   299ab:	c3                   	ret    

00000000000299ac <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>:
   299ac:	55                   	push   rbp
   299ad:	48 89 e5             	mov    rbp,rsp
   299b0:	53                   	push   rbx
   299b1:	48 83 ec 18          	sub    rsp,0x18
   299b5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   299b9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   299bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   299c1:	48 89 c7             	mov    rdi,rax
   299c4:	e8 89 00 00 00       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   299c9:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   299cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   299d0:	48 89 c7             	mov    rdi,rax
   299d3:	e8 7a 00 00 00       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   299d8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   299db:	48 89 d8             	mov    rax,rbx
   299de:	48 29 d0             	sub    rax,rdx
   299e1:	48 c1 f8 02          	sar    rax,0x2
   299e5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   299e9:	c9                   	leave  
   299ea:	c3                   	ret    
   299eb:	90                   	nop

00000000000299ec <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>:
   299ec:	55                   	push   rbp
   299ed:	48 89 e5             	mov    rbp,rsp
   299f0:	48 83 ec 10          	sub    rsp,0x10
   299f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   299f8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   299fc:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   29a01:	74 15                	je     29a18 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)+0x2c>
   29a03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29a07:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29a0b:	48 89 d6             	mov    rsi,rdx
   29a0e:	48 89 c7             	mov    rdi,rax
   29a11:	e8 80 14 00 00       	call   2ae96 <std::allocator_traits<std::allocator<unsigned int> >::allocate(std::allocator<unsigned int>&, unsigned long)>
   29a16:	eb 05                	jmp    29a1d <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)+0x31>
   29a18:	b8 00 00 00 00       	mov    eax,0x0
   29a1d:	c9                   	leave  
   29a1e:	c3                   	ret    

0000000000029a1f <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   29a1f:	55                   	push   rbp
   29a20:	48 89 e5             	mov    rbp,rsp
   29a23:	48 83 ec 20          	sub    rsp,0x20
   29a27:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29a2b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29a2f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29a33:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   29a37:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   29a3b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29a3f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   29a43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29a47:	48 89 c7             	mov    rdi,rax
   29a4a:	e8 71 14 00 00       	call   2aec0 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_do_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&, std::integral_constant<bool, true>)>
   29a4f:	c9                   	leave  
   29a50:	c3                   	ret    
   29a51:	90                   	nop

0000000000029a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>:
   29a52:	55                   	push   rbp
   29a53:	48 89 e5             	mov    rbp,rsp
   29a56:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29a5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29a5e:	5d                   	pop    rbp
   29a5f:	c3                   	ret    

0000000000029a60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>:
   29a60:	55                   	push   rbp
   29a61:	48 89 e5             	mov    rbp,rsp
   29a64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29a68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29a6c:	5d                   	pop    rbp
   29a6d:	c3                   	ret    

0000000000029a6e <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   29a6e:	55                   	push   rbp
   29a6f:	48 89 e5             	mov    rbp,rsp
   29a72:	41 55                	push   r13
   29a74:	41 54                	push   r12
   29a76:	53                   	push   rbx
   29a77:	48 83 ec 28          	sub    rsp,0x28
   29a7b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   29a7f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   29a83:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   29a87:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29a8b:	48 89 c7             	mov    rdi,rax
   29a8e:	e8 cd ff ff ff       	call   29a60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>
   29a93:	49 89 c5             	mov    r13,rax
   29a96:	48 8b 5d d0          	mov    rbx,QWORD PTR [rbp-0x30]
   29a9a:	48 89 de             	mov    rsi,rbx
   29a9d:	bf 20 00 00 00       	mov    edi,0x20
   29aa2:	e8 f0 b0 ff ff       	call   24b97 <operator new(unsigned long, void*)>
   29aa7:	49 89 c4             	mov    r12,rax
   29aaa:	4c 89 ee             	mov    rsi,r13
   29aad:	4c 89 e7             	mov    rdi,r12
   29ab0:	e8 bb a6 fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29ab5:	eb 19                	jmp    29ad0 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x62>
   29ab7:	49 89 c5             	mov    r13,rax
   29aba:	48 89 de             	mov    rsi,rbx
   29abd:	4c 89 e7             	mov    rdi,r12
   29ac0:	e8 e4 b0 ff ff       	call   24ba9 <operator delete(void*, void*)>
   29ac5:	4c 89 e8             	mov    rax,r13
   29ac8:	48 89 c7             	mov    rdi,rax
   29acb:	e8 60 ac fd ff       	call   4730 <_Unwind_Resume@plt>
   29ad0:	48 83 c4 28          	add    rsp,0x28
   29ad4:	5b                   	pop    rbx
   29ad5:	41 5c                	pop    r12
   29ad7:	41 5d                	pop    r13
   29ad9:	5d                   	pop    rbp
   29ada:	c3                   	ret    
   29adb:	90                   	nop

0000000000029adc <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>:
   29adc:	55                   	push   rbp
   29add:	48 89 e5             	mov    rbp,rsp
   29ae0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29ae4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29ae8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29aec:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29aef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29af3:	48 89 10             	mov    QWORD PTR [rax],rdx
   29af6:	90                   	nop
   29af7:	5d                   	pop    rbp
   29af8:	c3                   	ret    
   29af9:	90                   	nop

0000000000029afa <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const>:
   29afa:	55                   	push   rbp
   29afb:	48 89 e5             	mov    rbp,rsp
   29afe:	53                   	push   rbx
   29aff:	48 83 ec 48          	sub    rsp,0x48
   29b03:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   29b07:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   29b0b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   29b0f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29b18:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29b1c:	31 c0                	xor    eax,eax
   29b1e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b22:	48 89 c7             	mov    rdi,rax
   29b25:	e8 c8 13 00 00       	call   2aef2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>
   29b2a:	48 89 c3             	mov    rbx,rax
   29b2d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b31:	48 89 c7             	mov    rdi,rax
   29b34:	e8 ed c7 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29b39:	48 29 c3             	sub    rbx,rax
   29b3c:	48 89 da             	mov    rdx,rbx
   29b3f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29b43:	48 39 c2             	cmp    rdx,rax
   29b46:	0f 92 c0             	setb   al
   29b49:	84 c0                	test   al,al
   29b4b:	74 0c                	je     29b59 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0x5f>
   29b4d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29b51:	48 89 c7             	mov    rdi,rax
   29b54:	e8 77 a6 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   29b59:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b5d:	48 89 c7             	mov    rdi,rax
   29b60:	e8 c1 c7 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29b65:	48 89 c3             	mov    rbx,rax
   29b68:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b6c:	48 89 c7             	mov    rdi,rax
   29b6f:	e8 b2 c7 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29b74:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29b78:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   29b7c:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   29b80:	48 89 d6             	mov    rsi,rdx
   29b83:	48 89 c7             	mov    rdi,rax
   29b86:	e8 c7 b9 ff ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   29b8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29b8e:	48 01 d8             	add    rax,rbx
   29b91:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29b95:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b99:	48 89 c7             	mov    rdi,rax
   29b9c:	e8 85 c7 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29ba1:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29ba5:	72 12                	jb     29bb9 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xbf>
   29ba7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29bab:	48 89 c7             	mov    rdi,rax
   29bae:	e8 3f 13 00 00       	call   2aef2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>
   29bb3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29bb7:	76 0e                	jbe    29bc7 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xcd>
   29bb9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29bbd:	48 89 c7             	mov    rdi,rax
   29bc0:	e8 2d 13 00 00       	call   2aef2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>
   29bc5:	eb 04                	jmp    29bcb <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xd1>
   29bc7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29bcb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   29bcf:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29bd8:	74 05                	je     29bdf <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xe5>
   29bda:	e8 d1 a8 fd ff       	call   44b0 <__stack_chk_fail@plt>
   29bdf:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29be3:	c9                   	leave  
   29be4:	c3                   	ret    
   29be5:	90                   	nop

0000000000029be6 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()>:
   29be6:	55                   	push   rbp
   29be7:	48 89 e5             	mov    rbp,rsp
   29bea:	48 83 ec 20          	sub    rsp,0x20
   29bee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29bf2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29bfb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29bff:	31 c0                	xor    eax,eax
   29c01:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29c05:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29c09:	48 89 d6             	mov    rsi,rdx
   29c0c:	48 89 c7             	mov    rdi,rax
   29c0f:	e8 c8 fe ff ff       	call   29adc <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>
   29c14:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29c18:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   29c1c:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29c25:	74 05                	je     29c2c <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()+0x46>
   29c27:	e8 84 a8 fd ff       	call   44b0 <__stack_chk_fail@plt>
   29c2c:	c9                   	leave  
   29c2d:	c3                   	ret    

0000000000029c2e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::difference_type __gnu_cxx::operator-<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)>:
   29c2e:	55                   	push   rbp
   29c2f:	48 89 e5             	mov    rbp,rsp
   29c32:	53                   	push   rbx
   29c33:	48 83 ec 18          	sub    rsp,0x18
   29c37:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29c3b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29c3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29c43:	48 89 c7             	mov    rdi,rax
   29c46:	e8 89 00 00 00       	call   29cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   29c4b:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   29c4e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29c52:	48 89 c7             	mov    rdi,rax
   29c55:	e8 7a 00 00 00       	call   29cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   29c5a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29c5d:	48 89 d8             	mov    rax,rbx
   29c60:	48 29 d0             	sub    rax,rdx
   29c63:	48 c1 f8 05          	sar    rax,0x5
   29c67:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29c6b:	c9                   	leave  
   29c6c:	c3                   	ret    
   29c6d:	90                   	nop

0000000000029c6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>:
   29c6e:	55                   	push   rbp
   29c6f:	48 89 e5             	mov    rbp,rsp
   29c72:	48 83 ec 10          	sub    rsp,0x10
   29c76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29c7a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29c7e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   29c83:	74 15                	je     29c9a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)+0x2c>
   29c85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29c89:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29c8d:	48 89 d6             	mov    rsi,rdx
   29c90:	48 89 c7             	mov    rdi,rax
   29c93:	e8 7c 12 00 00       	call   2af14 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, unsigned long)>
   29c98:	eb 05                	jmp    29c9f <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)+0x31>
   29c9a:	b8 00 00 00 00       	mov    eax,0x0
   29c9f:	c9                   	leave  
   29ca0:	c3                   	ret    

0000000000029ca1 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   29ca1:	55                   	push   rbp
   29ca2:	48 89 e5             	mov    rbp,rsp
   29ca5:	48 83 ec 20          	sub    rsp,0x20
   29ca9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29cad:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29cb1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29cb5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   29cb9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   29cbd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29cc1:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   29cc5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29cc9:	48 89 c7             	mov    rdi,rax
   29ccc:	e8 6d 12 00 00       	call   2af3e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_do_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::integral_constant<bool, true>)>
   29cd1:	c9                   	leave  
   29cd2:	c3                   	ret    
   29cd3:	90                   	nop

0000000000029cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>:
   29cd4:	55                   	push   rbp
   29cd5:	48 89 e5             	mov    rbp,rsp
   29cd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29cdc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29ce0:	5d                   	pop    rbp
   29ce1:	c3                   	ret    

0000000000029ce2 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   29ce2:	55                   	push   rbp
   29ce3:	48 89 e5             	mov    rbp,rsp
   29ce6:	48 83 ec 10          	sub    rsp,0x10
   29cea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29cee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29cf2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29cf6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29cfa:	48 89 d6             	mov    rsi,rdx
   29cfd:	48 89 c7             	mov    rdi,rax
   29d00:	e8 6b 12 00 00       	call   2af70 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   29d05:	90                   	nop
   29d06:	c9                   	leave  
   29d07:	c3                   	ret    

0000000000029d08 <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>:
   29d08:	55                   	push   rbp
   29d09:	48 89 e5             	mov    rbp,rsp
   29d0c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29d10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29d14:	5d                   	pop    rbp
   29d15:	c3                   	ret    

0000000000029d16 <void __gnu_cxx::new_allocator<Tex>::construct<Tex, Tex const&>(Tex*, Tex const&)>:
   29d16:	55                   	push   rbp
   29d17:	48 89 e5             	mov    rbp,rsp
   29d1a:	53                   	push   rbx
   29d1b:	48 83 ec 28          	sub    rsp,0x28
   29d1f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29d23:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29d27:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   29d2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29d2f:	48 89 c7             	mov    rdi,rax
   29d32:	e8 d1 ff ff ff       	call   29d08 <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>
   29d37:	48 89 c3             	mov    rbx,rax
   29d3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29d3e:	48 89 c6             	mov    rsi,rax
   29d41:	bf 18 00 00 00       	mov    edi,0x18
   29d46:	e8 4c ae ff ff       	call   24b97 <operator new(unsigned long, void*)>
   29d4b:	48 89 c1             	mov    rcx,rax
   29d4e:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   29d51:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   29d55:	48 89 01             	mov    QWORD PTR [rcx],rax
   29d58:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   29d5c:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   29d60:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   29d64:	90                   	nop
   29d65:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29d69:	c9                   	leave  
   29d6a:	c3                   	ret    
   29d6b:	90                   	nop

0000000000029d6c <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::__normal_iterator(Tex* const&)>:
   29d6c:	55                   	push   rbp
   29d6d:	48 89 e5             	mov    rbp,rsp
   29d70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29d74:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29d78:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29d7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29d7f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29d83:	48 89 10             	mov    QWORD PTR [rax],rdx
   29d86:	90                   	nop
   29d87:	5d                   	pop    rbp
   29d88:	c3                   	ret    
   29d89:	90                   	nop

0000000000029d8a <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const>:
   29d8a:	55                   	push   rbp
   29d8b:	48 89 e5             	mov    rbp,rsp
   29d8e:	53                   	push   rbx
   29d8f:	48 83 ec 48          	sub    rsp,0x48
   29d93:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   29d97:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   29d9b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   29d9f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29da8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29dac:	31 c0                	xor    eax,eax
   29dae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29db2:	48 89 c7             	mov    rdi,rax
   29db5:	e8 d6 11 00 00       	call   2af90 <std::vector<Tex, std::allocator<Tex> >::max_size() const>
   29dba:	48 89 c3             	mov    rbx,rax
   29dbd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29dc1:	48 89 c7             	mov    rdi,rax
   29dc4:	e8 e7 c8 ff ff       	call   266b0 <std::vector<Tex, std::allocator<Tex> >::size() const>
   29dc9:	48 29 c3             	sub    rbx,rax
   29dcc:	48 89 da             	mov    rdx,rbx
   29dcf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29dd3:	48 39 c2             	cmp    rdx,rax
   29dd6:	0f 92 c0             	setb   al
   29dd9:	84 c0                	test   al,al
   29ddb:	74 0c                	je     29de9 <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0x5f>
   29ddd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29de1:	48 89 c7             	mov    rdi,rax
   29de4:	e8 e7 a3 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   29de9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29ded:	48 89 c7             	mov    rdi,rax
   29df0:	e8 bb c8 ff ff       	call   266b0 <std::vector<Tex, std::allocator<Tex> >::size() const>
   29df5:	48 89 c3             	mov    rbx,rax
   29df8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29dfc:	48 89 c7             	mov    rdi,rax
   29dff:	e8 ac c8 ff ff       	call   266b0 <std::vector<Tex, std::allocator<Tex> >::size() const>
   29e04:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29e08:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   29e0c:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   29e10:	48 89 d6             	mov    rsi,rdx
   29e13:	48 89 c7             	mov    rdi,rax
   29e16:	e8 37 b7 ff ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   29e1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29e1e:	48 01 d8             	add    rax,rbx
   29e21:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29e25:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29e29:	48 89 c7             	mov    rdi,rax
   29e2c:	e8 7f c8 ff ff       	call   266b0 <std::vector<Tex, std::allocator<Tex> >::size() const>
   29e31:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29e35:	72 12                	jb     29e49 <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xbf>
   29e37:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29e3b:	48 89 c7             	mov    rdi,rax
   29e3e:	e8 4d 11 00 00       	call   2af90 <std::vector<Tex, std::allocator<Tex> >::max_size() const>
   29e43:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29e47:	76 0e                	jbe    29e57 <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xcd>
   29e49:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29e4d:	48 89 c7             	mov    rdi,rax
   29e50:	e8 3b 11 00 00       	call   2af90 <std::vector<Tex, std::allocator<Tex> >::max_size() const>
   29e55:	eb 04                	jmp    29e5b <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xd1>
   29e57:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29e5b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   29e5f:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29e68:	74 05                	je     29e6f <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xe5>
   29e6a:	e8 41 a6 fd ff       	call   44b0 <__stack_chk_fail@plt>
   29e6f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29e73:	c9                   	leave  
   29e74:	c3                   	ret    
   29e75:	90                   	nop

0000000000029e76 <std::vector<Tex, std::allocator<Tex> >::begin()>:
   29e76:	55                   	push   rbp
   29e77:	48 89 e5             	mov    rbp,rsp
   29e7a:	48 83 ec 20          	sub    rsp,0x20
   29e7e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29e82:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29e8b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29e8f:	31 c0                	xor    eax,eax
   29e91:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29e95:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29e99:	48 89 d6             	mov    rsi,rdx
   29e9c:	48 89 c7             	mov    rdi,rax
   29e9f:	e8 c8 fe ff ff       	call   29d6c <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::__normal_iterator(Tex* const&)>
   29ea4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29ea8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   29eac:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29eb5:	74 05                	je     29ebc <std::vector<Tex, std::allocator<Tex> >::begin()+0x46>
   29eb7:	e8 f4 a5 fd ff       	call   44b0 <__stack_chk_fail@plt>
   29ebc:	c9                   	leave  
   29ebd:	c3                   	ret    

0000000000029ebe <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::difference_type __gnu_cxx::operator-<Tex*, std::vector<Tex, std::allocator<Tex> > >(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&, __gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&)>:
   29ebe:	55                   	push   rbp
   29ebf:	48 89 e5             	mov    rbp,rsp
   29ec2:	53                   	push   rbx
   29ec3:	48 83 ec 18          	sub    rsp,0x18
   29ec7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29ecb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29ecf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29ed3:	48 89 c7             	mov    rdi,rax
   29ed6:	e8 99 00 00 00       	call   29f74 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   29edb:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   29ede:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29ee2:	48 89 c7             	mov    rdi,rax
   29ee5:	e8 8a 00 00 00       	call   29f74 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   29eea:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29eed:	48 89 d8             	mov    rax,rbx
   29ef0:	48 29 d0             	sub    rax,rdx
   29ef3:	48 c1 f8 03          	sar    rax,0x3
   29ef7:	48 89 c2             	mov    rdx,rax
   29efa:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   29f04:	48 0f af c2          	imul   rax,rdx
   29f08:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29f0c:	c9                   	leave  
   29f0d:	c3                   	ret    

0000000000029f0e <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)>:
   29f0e:	55                   	push   rbp
   29f0f:	48 89 e5             	mov    rbp,rsp
   29f12:	48 83 ec 10          	sub    rsp,0x10
   29f16:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29f1a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29f1e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   29f23:	74 15                	je     29f3a <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)+0x2c>
   29f25:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29f29:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29f2d:	48 89 d6             	mov    rsi,rdx
   29f30:	48 89 c7             	mov    rdi,rax
   29f33:	e8 7a 10 00 00       	call   2afb2 <std::allocator_traits<std::allocator<Tex> >::allocate(std::allocator<Tex>&, unsigned long)>
   29f38:	eb 05                	jmp    29f3f <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)+0x31>
   29f3a:	b8 00 00 00 00       	mov    eax,0x0
   29f3f:	c9                   	leave  
   29f40:	c3                   	ret    

0000000000029f41 <std::vector<Tex, std::allocator<Tex> >::_S_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&)>:
   29f41:	55                   	push   rbp
   29f42:	48 89 e5             	mov    rbp,rsp
   29f45:	48 83 ec 20          	sub    rsp,0x20
   29f49:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29f4d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29f51:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29f55:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   29f59:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   29f5d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29f61:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   29f65:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29f69:	48 89 c7             	mov    rdi,rax
   29f6c:	e8 6b 10 00 00       	call   2afdc <std::vector<Tex, std::allocator<Tex> >::_S_do_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&, std::integral_constant<bool, true>)>
   29f71:	c9                   	leave  
   29f72:	c3                   	ret    
   29f73:	90                   	nop

0000000000029f74 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>:
   29f74:	55                   	push   rbp
   29f75:	48 89 e5             	mov    rbp,rsp
   29f78:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29f7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29f80:	5d                   	pop    rbp
   29f81:	c3                   	ret    

0000000000029f82 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(glm::vec<4, float, (glm::qualifier)0> const&)>:
   29f82:	55                   	push   rbp
   29f83:	48 89 e5             	mov    rbp,rsp
   29f86:	48 83 ec 30          	sub    rsp,0x30
   29f8a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   29f8e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   29f92:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29f9b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29f9f:	31 c0                	xor    eax,eax
   29fa1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   29fa5:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   29fa9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29fac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29fb0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29fb4:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   29fb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29fbc:	48 89 d6             	mov    rsi,rdx
   29fbf:	48 89 c7             	mov    rdi,rax
   29fc2:	e8 c1 eb ff ff       	call   28b88 <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   29fc7:	66 48 0f 7e c2       	movq   rdx,xmm0
   29fcc:	66 0f 6f c1          	movdqa xmm0,xmm1
   29fd0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29fd4:	48 89 10             	mov    QWORD PTR [rax],rdx
   29fd7:	66 0f d6 40 08       	movq   QWORD PTR [rax+0x8],xmm0
   29fdc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29fe0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   29fe4:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   29fed:	74 05                	je     29ff4 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(glm::vec<4, float, (glm::qualifier)0> const&)+0x72>
   29fef:	e8 bc a4 fd ff       	call   44b0 <__stack_chk_fail@plt>
   29ff4:	c9                   	leave  
   29ff5:	c3                   	ret    

0000000000029ff6 <__gnu_cxx::new_allocator<Mesh>::new_allocator()>:
   29ff6:	55                   	push   rbp
   29ff7:	48 89 e5             	mov    rbp,rsp
   29ffa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29ffe:	90                   	nop
   29fff:	5d                   	pop    rbp
   2a000:	c3                   	ret    

000000000002a001 <std::allocator_traits<std::allocator<Mesh> >::deallocate(std::allocator<Mesh>&, Mesh*, unsigned long)>:
   2a001:	55                   	push   rbp
   2a002:	48 89 e5             	mov    rbp,rsp
   2a005:	48 83 ec 20          	sub    rsp,0x20
   2a009:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a00d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a011:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a015:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a019:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a01d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a021:	48 89 ce             	mov    rsi,rcx
   2a024:	48 89 c7             	mov    rdi,rax
   2a027:	e8 e2 0f 00 00       	call   2b00e <__gnu_cxx::new_allocator<Mesh>::deallocate(Mesh*, unsigned long)>
   2a02c:	90                   	nop
   2a02d:	c9                   	leave  
   2a02e:	c3                   	ret    

000000000002a02f <void std::_Destroy<Mesh*>(Mesh*, Mesh*)>:
   2a02f:	55                   	push   rbp
   2a030:	48 89 e5             	mov    rbp,rsp
   2a033:	48 83 ec 10          	sub    rsp,0x10
   2a037:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a03b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a03f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a043:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a047:	48 89 d6             	mov    rsi,rdx
   2a04a:	48 89 c7             	mov    rdi,rax
   2a04d:	e8 ed 0f 00 00       	call   2b03f <void std::_Destroy_aux<true>::__destroy<Mesh*>(Mesh*, Mesh*)>
   2a052:	90                   	nop
   2a053:	c9                   	leave  
   2a054:	c3                   	ret    
   2a055:	90                   	nop

000000000002a056 <__gnu_cxx::new_allocator<unsigned int>::new_allocator()>:
   2a056:	55                   	push   rbp
   2a057:	48 89 e5             	mov    rbp,rsp
   2a05a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a05e:	90                   	nop
   2a05f:	5d                   	pop    rbp
   2a060:	c3                   	ret    

000000000002a061 <std::allocator_traits<std::allocator<unsigned int> >::deallocate(std::allocator<unsigned int>&, unsigned int*, unsigned long)>:
   2a061:	55                   	push   rbp
   2a062:	48 89 e5             	mov    rbp,rsp
   2a065:	48 83 ec 20          	sub    rsp,0x20
   2a069:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a06d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a071:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a075:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a079:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a07d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a081:	48 89 ce             	mov    rsi,rcx
   2a084:	48 89 c7             	mov    rdi,rax
   2a087:	e8 c2 0f 00 00       	call   2b04e <__gnu_cxx::new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long)>
   2a08c:	90                   	nop
   2a08d:	c9                   	leave  
   2a08e:	c3                   	ret    

000000000002a08f <void std::_Destroy<unsigned int*>(unsigned int*, unsigned int*)>:
   2a08f:	55                   	push   rbp
   2a090:	48 89 e5             	mov    rbp,rsp
   2a093:	48 83 ec 10          	sub    rsp,0x10
   2a097:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a09b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a09f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a0a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a0a7:	48 89 d6             	mov    rsi,rdx
   2a0aa:	48 89 c7             	mov    rdi,rax
   2a0ad:	e8 cd 0f 00 00       	call   2b07f <void std::_Destroy_aux<true>::__destroy<unsigned int*>(unsigned int*, unsigned int*)>
   2a0b2:	90                   	nop
   2a0b3:	c9                   	leave  
   2a0b4:	c3                   	ret    
   2a0b5:	90                   	nop

000000000002a0b6 <__gnu_cxx::new_allocator<Transform>::new_allocator()>:
   2a0b6:	55                   	push   rbp
   2a0b7:	48 89 e5             	mov    rbp,rsp
   2a0ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a0be:	90                   	nop
   2a0bf:	5d                   	pop    rbp
   2a0c0:	c3                   	ret    

000000000002a0c1 <std::allocator_traits<std::allocator<Transform> >::deallocate(std::allocator<Transform>&, Transform*, unsigned long)>:
   2a0c1:	55                   	push   rbp
   2a0c2:	48 89 e5             	mov    rbp,rsp
   2a0c5:	48 83 ec 20          	sub    rsp,0x20
   2a0c9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a0cd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a0d1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a0d5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a0d9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a0dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a0e1:	48 89 ce             	mov    rsi,rcx
   2a0e4:	48 89 c7             	mov    rdi,rax
   2a0e7:	e8 a2 0f 00 00       	call   2b08e <__gnu_cxx::new_allocator<Transform>::deallocate(Transform*, unsigned long)>
   2a0ec:	90                   	nop
   2a0ed:	c9                   	leave  
   2a0ee:	c3                   	ret    

000000000002a0ef <void std::_Destroy<Transform*>(Transform*, Transform*)>:
   2a0ef:	55                   	push   rbp
   2a0f0:	48 89 e5             	mov    rbp,rsp
   2a0f3:	48 83 ec 10          	sub    rsp,0x10
   2a0f7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a0fb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a0ff:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a103:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a107:	48 89 d6             	mov    rsi,rdx
   2a10a:	48 89 c7             	mov    rdi,rax
   2a10d:	e8 b6 0f 00 00       	call   2b0c8 <void std::_Destroy_aux<true>::__destroy<Transform*>(Transform*, Transform*)>
   2a112:	90                   	nop
   2a113:	c9                   	leave  
   2a114:	c3                   	ret    
   2a115:	90                   	nop

000000000002a116 <__gnu_cxx::new_allocator<AABB>::new_allocator()>:
   2a116:	55                   	push   rbp
   2a117:	48 89 e5             	mov    rbp,rsp
   2a11a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a11e:	90                   	nop
   2a11f:	5d                   	pop    rbp
   2a120:	c3                   	ret    

000000000002a121 <std::allocator_traits<std::allocator<AABB> >::deallocate(std::allocator<AABB>&, AABB*, unsigned long)>:
   2a121:	55                   	push   rbp
   2a122:	48 89 e5             	mov    rbp,rsp
   2a125:	48 83 ec 20          	sub    rsp,0x20
   2a129:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a12d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a131:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a135:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a139:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a13d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a141:	48 89 ce             	mov    rsi,rcx
   2a144:	48 89 c7             	mov    rdi,rax
   2a147:	e8 8c 0f 00 00       	call   2b0d8 <__gnu_cxx::new_allocator<AABB>::deallocate(AABB*, unsigned long)>
   2a14c:	90                   	nop
   2a14d:	c9                   	leave  
   2a14e:	c3                   	ret    

000000000002a14f <void std::_Destroy<AABB*>(AABB*, AABB*)>:
   2a14f:	55                   	push   rbp
   2a150:	48 89 e5             	mov    rbp,rsp
   2a153:	48 83 ec 10          	sub    rsp,0x10
   2a157:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a15b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a15f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a163:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a167:	48 89 d6             	mov    rsi,rdx
   2a16a:	48 89 c7             	mov    rdi,rax
   2a16d:	e8 9f 0f 00 00       	call   2b111 <void std::_Destroy_aux<true>::__destroy<AABB*>(AABB*, AABB*)>
   2a172:	90                   	nop
   2a173:	c9                   	leave  
   2a174:	c3                   	ret    
   2a175:	90                   	nop

000000000002a176 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator+=<float>(glm::vec<4, float, (glm::qualifier)0> const&)>:
   2a176:	55                   	push   rbp
   2a177:	48 89 e5             	mov    rbp,rsp
   2a17a:	48 83 ec 30          	sub    rsp,0x30
   2a17e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2a182:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2a186:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a18f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a193:	31 c0                	xor    eax,eax
   2a195:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a199:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2a19d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a1a0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a1a4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a1a8:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   2a1ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a1b0:	48 89 d6             	mov    rsi,rdx
   2a1b3:	48 89 c7             	mov    rdi,rax
   2a1b6:	e8 65 0f 00 00       	call   2b120 <glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2a1bb:	66 48 0f 7e c2       	movq   rdx,xmm0
   2a1c0:	66 0f 6f c1          	movdqa xmm0,xmm1
   2a1c4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a1c8:	48 89 10             	mov    QWORD PTR [rax],rdx
   2a1cb:	66 0f d6 40 08       	movq   QWORD PTR [rax+0x8],xmm0
   2a1d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a1d4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2a1d8:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a1e1:	74 05                	je     2a1e8 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator+=<float>(glm::vec<4, float, (glm::qualifier)0> const&)+0x72>
   2a1e3:	e8 c8 a2 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a1e8:	c9                   	leave  
   2a1e9:	c3                   	ret    

000000000002a1ea <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
   2a1ea:	55                   	push   rbp
   2a1eb:	48 89 e5             	mov    rbp,rsp
   2a1ee:	48 83 ec 10          	sub    rsp,0x10
   2a1f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a1f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a1fa:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   2a1fe:	48 89 c7             	mov    rdi,rax
   2a201:	e8 f7 0f 00 00       	call   2b1fd <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>
   2a206:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a20a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a20e:	48 89 d6             	mov    rsi,rdx
   2a211:	48 89 c7             	mov    rdi,rax
   2a214:	e8 ee 0f 00 00       	call   2b207 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>
   2a219:	c9                   	leave  
   2a21a:	c3                   	ret    
   2a21b:	90                   	nop

000000000002a21c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
   2a21c:	55                   	push   rbp
   2a21d:	48 89 e5             	mov    rbp,rsp
   2a220:	53                   	push   rbx
   2a221:	48 83 ec 38          	sub    rsp,0x38
   2a225:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2a229:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2a22d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2a231:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a23a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a23e:	31 c0                	xor    eax,eax
   2a240:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a244:	48 89 c7             	mov    rdi,rax
   2a247:	e8 9f 0f 00 00       	call   2b1eb <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>
   2a24c:	84 c0                	test   al,al
   2a24e:	74 11                	je     2a261 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x45>
   2a250:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a254:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
   2a258:	74 07                	je     2a261 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x45>
   2a25a:	b8 01 00 00 00       	mov    eax,0x1
   2a25f:	eb 05                	jmp    2a266 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x4a>
   2a261:	b8 00 00 00 00       	mov    eax,0x0
   2a266:	84 c0                	test   al,al
   2a268:	74 0c                	je     2a276 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x5a>
   2a26a:	48 8d 3d bf 2a 01 00 	lea    rdi,[rip+0x12abf]        # 3cd30 <NANO_SEC+0x1a68>
   2a271:	e8 4a a0 fd ff       	call   42c0 <std::__throw_logic_error(char const*)@plt>
   2a276:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2a27a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a27e:	48 89 d6             	mov    rsi,rdx
   2a281:	48 89 c7             	mov    rdi,rax
   2a284:	e8 61 ff ff ff       	call   2a1ea <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
   2a289:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a28d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a291:	48 83 f8 0f          	cmp    rax,0xf
   2a295:	76 3d                	jbe    2a2d4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0xb8>
   2a297:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
   2a29b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a29f:	ba 00 00 00 00       	mov    edx,0x0
   2a2a4:	48 89 ce             	mov    rsi,rcx
   2a2a7:	48 89 c7             	mov    rdi,rax
   2a2aa:	e8 a1 a4 fd ff       	call   4750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
   2a2af:	48 89 c2             	mov    rdx,rax
   2a2b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a2b6:	48 89 d6             	mov    rsi,rdx
   2a2b9:	48 89 c7             	mov    rdi,rax
   2a2bc:	e8 bf a0 fd ff       	call   4380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>
   2a2c1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2a2c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a2c9:	48 89 d6             	mov    rsi,rdx
   2a2cc:	48 89 c7             	mov    rdi,rax
   2a2cf:	e8 fc a4 fd ff       	call   47d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>
   2a2d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a2d8:	48 89 c7             	mov    rdi,rax
   2a2db:	e8 90 a1 fd ff       	call   4470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>
   2a2e0:	48 89 c1             	mov    rcx,rax
   2a2e3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2a2e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a2eb:	48 89 c6             	mov    rsi,rax
   2a2ee:	48 89 cf             	mov    rdi,rcx
   2a2f1:	e8 9a a1 fd ff       	call   4490 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>
   2a2f6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2a2fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a2fe:	48 89 d6             	mov    rsi,rdx
   2a301:	48 89 c7             	mov    rdi,rax
   2a304:	e8 97 9f fd ff       	call   42a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>
   2a309:	90                   	nop
   2a30a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a30e:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2a317:	74 33                	je     2a34c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x130>
   2a319:	eb 2c                	jmp    2a347 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x12b>
   2a31b:	48 89 c7             	mov    rdi,rax
   2a31e:	e8 1d 9e fd ff       	call   4140 <__cxa_begin_catch@plt>
   2a323:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a327:	48 89 c7             	mov    rdi,rax
   2a32a:	e8 01 a2 fd ff       	call   4530 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt>
   2a32f:	e8 ec a2 fd ff       	call   4620 <__cxa_rethrow@plt>
   2a334:	48 89 c3             	mov    rbx,rax
   2a337:	e8 a4 a3 fd ff       	call   46e0 <__cxa_end_catch@plt>
   2a33c:	48 89 d8             	mov    rax,rbx
   2a33f:	48 89 c7             	mov    rdi,rax
   2a342:	e8 e9 a3 fd ff       	call   4730 <_Unwind_Resume@plt>
   2a347:	e8 64 a1 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a34c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a350:	c9                   	leave  
   2a351:	c3                   	ret    

000000000002a352 <std::filesystem::__cxx11::path::_List::_Impl*& std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   2a352:	55                   	push   rbp
   2a353:	48 89 e5             	mov    rbp,rsp
   2a356:	48 83 ec 10          	sub    rsp,0x10
   2a35a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a35e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a362:	48 89 c7             	mov    rdi,rax
   2a365:	e8 c1 e7 ff ff       	call   28b2b <std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   2a36a:	c9                   	leave  
   2a36b:	c3                   	ret    

000000000002a36c <std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head(std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>&)>:
   2a36c:	55                   	push   rbp
   2a36d:	48 89 e5             	mov    rbp,rsp
   2a370:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a374:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a378:	5d                   	pop    rbp
   2a379:	c3                   	ret    

000000000002a37a <std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   2a37a:	55                   	push   rbp
   2a37b:	48 89 e5             	mov    rbp,rsp
   2a37e:	48 83 ec 10          	sub    rsp,0x10
   2a382:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a386:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a38a:	48 89 c7             	mov    rdi,rax
   2a38d:	e8 8b 0e 00 00       	call   2b21d <std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head(std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>&)>
   2a392:	c9                   	leave  
   2a393:	c3                   	ret    

000000000002a394 <std::filesystem::__cxx11::path::_List::_Impl_deleter& std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   2a394:	55                   	push   rbp
   2a395:	48 89 e5             	mov    rbp,rsp
   2a398:	48 83 ec 10          	sub    rsp,0x10
   2a39c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a3a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a3a4:	48 89 c7             	mov    rdi,rax
   2a3a7:	e8 ce ff ff ff       	call   2a37a <std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   2a3ac:	c9                   	leave  
   2a3ad:	c3                   	ret    

000000000002a3ae <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>:
   2a3ae:	55                   	push   rbp
   2a3af:	48 89 e5             	mov    rbp,rsp
   2a3b2:	48 83 ec 20          	sub    rsp,0x20
   2a3b6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a3ba:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a3be:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a3c7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a3cb:	31 c0                	xor    eax,eax
   2a3cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a3d1:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2a3d6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a3da:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2a3df:	0f 28 d1             	movaps xmm2,xmm1
   2a3e2:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2a3e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a3ea:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2a3ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a3f2:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2a3f6:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2a3fa:	66 0f 7e ca          	movd   edx,xmm1
   2a3fe:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a402:	0f 28 ca             	movaps xmm1,xmm2
   2a405:	66 0f 6e c2          	movd   xmm0,edx
   2a409:	48 89 c7             	mov    rdi,rax
   2a40c:	e8 0f aa ff ff       	call   24e20 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   2a411:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a415:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2a419:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a422:	74 05                	je     2a429 <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)+0x7b>
   2a424:	e8 87 a0 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a429:	66 48 0f 6e c0       	movq   xmm0,rax
   2a42e:	c9                   	leave  
   2a42f:	c3                   	ret    

000000000002a430 <glm::detail::compute_dot<glm::vec<2, float, (glm::qualifier)0>, float, false>::call(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>:
   2a430:	55                   	push   rbp
   2a431:	48 89 e5             	mov    rbp,rsp
   2a434:	48 83 ec 20          	sub    rsp,0x20
   2a438:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a43c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a440:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2a444:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a448:	48 89 d6             	mov    rsi,rdx
   2a44b:	48 89 c7             	mov    rdi,rax
   2a44e:	e8 5b ff ff ff       	call   2a3ae <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>
   2a453:	66 48 0f 7e c0       	movq   rax,xmm0
   2a458:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a45c:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   2a461:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2a466:	f3 0f 58 c1          	addss  xmm0,xmm1
   2a46a:	c9                   	leave  
   2a46b:	c3                   	ret    

000000000002a46c <__gnu_cxx::new_allocator<Tex>::deallocate(Tex*, unsigned long)>:
   2a46c:	55                   	push   rbp
   2a46d:	48 89 e5             	mov    rbp,rsp
   2a470:	48 83 ec 20          	sub    rsp,0x20
   2a474:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a478:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a47c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a480:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a484:	48 89 d0             	mov    rax,rdx
   2a487:	48 01 c0             	add    rax,rax
   2a48a:	48 01 d0             	add    rax,rdx
   2a48d:	48 c1 e0 03          	shl    rax,0x3
   2a491:	48 89 c2             	mov    rdx,rax
   2a494:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a498:	48 89 d6             	mov    rsi,rdx
   2a49b:	48 89 c7             	mov    rdi,rax
   2a49e:	e8 6d 9f fd ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   2a4a3:	c9                   	leave  
   2a4a4:	c3                   	ret    

000000000002a4a5 <void std::_Destroy_aux<true>::__destroy<Tex*>(Tex*, Tex*)>:
   2a4a5:	55                   	push   rbp
   2a4a6:	48 89 e5             	mov    rbp,rsp
   2a4a9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a4ad:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a4b1:	90                   	nop
   2a4b2:	5d                   	pop    rbp
   2a4b3:	c3                   	ret    

000000000002a4b4 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
   2a4b4:	55                   	push   rbp
   2a4b5:	48 89 e5             	mov    rbp,rsp
   2a4b8:	48 83 ec 20          	sub    rsp,0x20
   2a4bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a4c0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a4c4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a4c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a4cc:	48 c1 e0 05          	shl    rax,0x5
   2a4d0:	48 89 c2             	mov    rdx,rax
   2a4d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a4d7:	48 89 d6             	mov    rsi,rdx
   2a4da:	48 89 c7             	mov    rdi,rax
   2a4dd:	e8 2e 9f fd ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   2a4e2:	c9                   	leave  
   2a4e3:	c3                   	ret    

000000000002a4e4 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2a4e4:	55                   	push   rbp
   2a4e5:	48 89 e5             	mov    rbp,rsp
   2a4e8:	48 83 ec 10          	sub    rsp,0x10
   2a4ec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a4f0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a4f4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a4f8:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
   2a4fc:	74 1b                	je     2a519 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x35>
   2a4fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a502:	48 89 c7             	mov    rdi,rax
   2a505:	e8 21 0d 00 00       	call   2b22b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2a50a:	48 89 c7             	mov    rdi,rax
   2a50d:	e8 27 0d 00 00       	call   2b239 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2a512:	48 83 45 f8 20       	add    QWORD PTR [rbp-0x8],0x20
   2a517:	eb db                	jmp    2a4f4 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x10>
   2a519:	90                   	nop
   2a51a:	c9                   	leave  
   2a51b:	c3                   	ret    

000000000002a51c <void __gnu_cxx::new_allocator<AABB>::construct<AABB, AABB>(AABB*, AABB&&)>:
   2a51c:	55                   	push   rbp
   2a51d:	48 89 e5             	mov    rbp,rsp
   2a520:	53                   	push   rbx
   2a521:	48 83 ec 28          	sub    rsp,0x28
   2a525:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a529:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a52d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2a531:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a535:	48 89 c7             	mov    rdi,rax
   2a538:	e8 24 e8 ff ff       	call   28d61 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   2a53d:	48 89 c3             	mov    rbx,rax
   2a540:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a544:	48 89 c6             	mov    rsi,rax
   2a547:	bf 18 00 00 00       	mov    edi,0x18
   2a54c:	e8 46 a6 ff ff       	call   24b97 <operator new(unsigned long, void*)>
   2a551:	48 89 c1             	mov    rcx,rax
   2a554:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   2a557:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   2a55b:	48 89 01             	mov    QWORD PTR [rcx],rax
   2a55e:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   2a562:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   2a566:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   2a56a:	90                   	nop
   2a56b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a56f:	c9                   	leave  
   2a570:	c3                   	ret    
   2a571:	90                   	nop

000000000002a572 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>:
   2a572:	55                   	push   rbp
   2a573:	48 89 e5             	mov    rbp,rsp
   2a576:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a57a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a57e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a582:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a585:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a589:	48 89 10             	mov    QWORD PTR [rax],rdx
   2a58c:	90                   	nop
   2a58d:	5d                   	pop    rbp
   2a58e:	c3                   	ret    
   2a58f:	90                   	nop

000000000002a590 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const>:
   2a590:	55                   	push   rbp
   2a591:	48 89 e5             	mov    rbp,rsp
   2a594:	53                   	push   rbx
   2a595:	48 83 ec 48          	sub    rsp,0x48
   2a599:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2a59d:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2a5a1:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2a5a5:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a5ae:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a5b2:	31 c0                	xor    eax,eax
   2a5b4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a5b8:	48 89 c7             	mov    rdi,rax
   2a5bb:	e8 94 0c 00 00       	call   2b254 <std::vector<AABB, std::allocator<AABB> >::max_size() const>
   2a5c0:	48 89 c3             	mov    rbx,rax
   2a5c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a5c7:	48 89 c7             	mov    rdi,rax
   2a5ca:	e8 03 c7 ff ff       	call   26cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a5cf:	48 29 c3             	sub    rbx,rax
   2a5d2:	48 89 da             	mov    rdx,rbx
   2a5d5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2a5d9:	48 39 c2             	cmp    rdx,rax
   2a5dc:	0f 92 c0             	setb   al
   2a5df:	84 c0                	test   al,al
   2a5e1:	74 0c                	je     2a5ef <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2a5e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2a5e7:	48 89 c7             	mov    rdi,rax
   2a5ea:	e8 e1 9b fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   2a5ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a5f3:	48 89 c7             	mov    rdi,rax
   2a5f6:	e8 d7 c6 ff ff       	call   26cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a5fb:	48 89 c3             	mov    rbx,rax
   2a5fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a602:	48 89 c7             	mov    rdi,rax
   2a605:	e8 c8 c6 ff ff       	call   26cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a60a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2a60e:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2a612:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   2a616:	48 89 d6             	mov    rsi,rdx
   2a619:	48 89 c7             	mov    rdi,rax
   2a61c:	e8 31 af ff ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   2a621:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a624:	48 01 d8             	add    rax,rbx
   2a627:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a62b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a62f:	48 89 c7             	mov    rdi,rax
   2a632:	e8 9b c6 ff ff       	call   26cd2 <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a637:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a63b:	72 12                	jb     2a64f <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xbf>
   2a63d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a641:	48 89 c7             	mov    rdi,rax
   2a644:	e8 0b 0c 00 00       	call   2b254 <std::vector<AABB, std::allocator<AABB> >::max_size() const>
   2a649:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a64d:	76 0e                	jbe    2a65d <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xcd>
   2a64f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a653:	48 89 c7             	mov    rdi,rax
   2a656:	e8 f9 0b 00 00       	call   2b254 <std::vector<AABB, std::allocator<AABB> >::max_size() const>
   2a65b:	eb 04                	jmp    2a661 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xd1>
   2a65d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a661:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2a665:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a66e:	74 05                	je     2a675 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xe5>
   2a670:	e8 3b 9e fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a675:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a679:	c9                   	leave  
   2a67a:	c3                   	ret    
   2a67b:	90                   	nop

000000000002a67c <std::vector<AABB, std::allocator<AABB> >::begin()>:
   2a67c:	55                   	push   rbp
   2a67d:	48 89 e5             	mov    rbp,rsp
   2a680:	48 83 ec 20          	sub    rsp,0x20
   2a684:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a688:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a691:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a695:	31 c0                	xor    eax,eax
   2a697:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a69b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a69f:	48 89 d6             	mov    rsi,rdx
   2a6a2:	48 89 c7             	mov    rdi,rax
   2a6a5:	e8 c8 fe ff ff       	call   2a572 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>
   2a6aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a6ae:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2a6b2:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a6bb:	74 05                	je     2a6c2 <std::vector<AABB, std::allocator<AABB> >::begin()+0x46>
   2a6bd:	e8 ee 9d fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a6c2:	c9                   	leave  
   2a6c3:	c3                   	ret    

000000000002a6c4 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::difference_type __gnu_cxx::operator-<AABB*, std::vector<AABB, std::allocator<AABB> > >(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&, __gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&)>:
   2a6c4:	55                   	push   rbp
   2a6c5:	48 89 e5             	mov    rbp,rsp
   2a6c8:	53                   	push   rbx
   2a6c9:	48 83 ec 18          	sub    rsp,0x18
   2a6cd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a6d1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a6d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a6d9:	48 89 c7             	mov    rdi,rax
   2a6dc:	e8 99 00 00 00       	call   2a77a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   2a6e1:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   2a6e4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a6e8:	48 89 c7             	mov    rdi,rax
   2a6eb:	e8 8a 00 00 00       	call   2a77a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   2a6f0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a6f3:	48 89 d8             	mov    rax,rbx
   2a6f6:	48 29 d0             	sub    rax,rdx
   2a6f9:	48 c1 f8 03          	sar    rax,0x3
   2a6fd:	48 89 c2             	mov    rdx,rax
   2a700:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2a70a:	48 0f af c2          	imul   rax,rdx
   2a70e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a712:	c9                   	leave  
   2a713:	c3                   	ret    

000000000002a714 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)>:
   2a714:	55                   	push   rbp
   2a715:	48 89 e5             	mov    rbp,rsp
   2a718:	48 83 ec 10          	sub    rsp,0x10
   2a71c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a720:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a724:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2a729:	74 15                	je     2a740 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)+0x2c>
   2a72b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a72f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a733:	48 89 d6             	mov    rsi,rdx
   2a736:	48 89 c7             	mov    rdi,rax
   2a739:	e8 38 0b 00 00       	call   2b276 <std::allocator_traits<std::allocator<AABB> >::allocate(std::allocator<AABB>&, unsigned long)>
   2a73e:	eb 05                	jmp    2a745 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)+0x31>
   2a740:	b8 00 00 00 00       	mov    eax,0x0
   2a745:	c9                   	leave  
   2a746:	c3                   	ret    

000000000002a747 <std::vector<AABB, std::allocator<AABB> >::_S_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&)>:
   2a747:	55                   	push   rbp
   2a748:	48 89 e5             	mov    rbp,rsp
   2a74b:	48 83 ec 20          	sub    rsp,0x20
   2a74f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a753:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a757:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a75b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2a75f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2a763:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a767:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2a76b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a76f:	48 89 c7             	mov    rdi,rax
   2a772:	e8 29 0b 00 00       	call   2b2a0 <std::vector<AABB, std::allocator<AABB> >::_S_do_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&, std::integral_constant<bool, true>)>
   2a777:	c9                   	leave  
   2a778:	c3                   	ret    
   2a779:	90                   	nop

000000000002a77a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>:
   2a77a:	55                   	push   rbp
   2a77b:	48 89 e5             	mov    rbp,rsp
   2a77e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a782:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a786:	5d                   	pop    rbp
   2a787:	c3                   	ret    

000000000002a788 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator-(long) const>:
   2a788:	55                   	push   rbp
   2a789:	48 89 e5             	mov    rbp,rsp
   2a78c:	48 83 ec 30          	sub    rsp,0x30
   2a790:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2a794:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2a798:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a7a1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a7a5:	31 c0                	xor    eax,eax
   2a7a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a7ab:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2a7ae:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   2a7b2:	48 89 d0             	mov    rax,rdx
   2a7b5:	48 01 c0             	add    rax,rax
   2a7b8:	48 01 d0             	add    rax,rdx
   2a7bb:	48 c1 e0 03          	shl    rax,0x3
   2a7bf:	48 f7 d8             	neg    rax
   2a7c2:	48 01 c8             	add    rax,rcx
   2a7c5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a7c9:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2a7cd:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a7d1:	48 89 d6             	mov    rsi,rdx
   2a7d4:	48 89 c7             	mov    rdi,rax
   2a7d7:	e8 96 fd ff ff       	call   2a572 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>
   2a7dc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a7e0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2a7e4:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a7ed:	74 05                	je     2a7f4 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator-(long) const+0x6c>
   2a7ef:	e8 bc 9c fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a7f4:	c9                   	leave  
   2a7f5:	c3                   	ret    

000000000002a7f6 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator*() const>:
   2a7f6:	55                   	push   rbp
   2a7f7:	48 89 e5             	mov    rbp,rsp
   2a7fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a7fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a802:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a805:	5d                   	pop    rbp
   2a806:	c3                   	ret    
   2a807:	90                   	nop

000000000002a808 <void __gnu_cxx::new_allocator<Mesh>::construct<Mesh, Mesh>(Mesh*, Mesh&&)>:
   2a808:	55                   	push   rbp
   2a809:	48 89 e5             	mov    rbp,rsp
   2a80c:	53                   	push   rbx
   2a80d:	48 83 ec 28          	sub    rsp,0x28
   2a811:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a815:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a819:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2a81d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a821:	48 89 c7             	mov    rdi,rax
   2a824:	e8 07 e8 ff ff       	call   29030 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   2a829:	48 89 c3             	mov    rbx,rax
   2a82c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a830:	48 89 c6             	mov    rsi,rax
   2a833:	bf 04 00 00 00       	mov    edi,0x4
   2a838:	e8 5a a3 ff ff       	call   24b97 <operator new(unsigned long, void*)>
   2a83d:	8b 13                	mov    edx,DWORD PTR [rbx]
   2a83f:	89 10                	mov    DWORD PTR [rax],edx
   2a841:	90                   	nop
   2a842:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a846:	c9                   	leave  
   2a847:	c3                   	ret    

000000000002a848 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>:
   2a848:	55                   	push   rbp
   2a849:	48 89 e5             	mov    rbp,rsp
   2a84c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a850:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a854:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a858:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a85b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a85f:	48 89 10             	mov    QWORD PTR [rax],rdx
   2a862:	90                   	nop
   2a863:	5d                   	pop    rbp
   2a864:	c3                   	ret    
   2a865:	90                   	nop

000000000002a866 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const>:
   2a866:	55                   	push   rbp
   2a867:	48 89 e5             	mov    rbp,rsp
   2a86a:	53                   	push   rbx
   2a86b:	48 83 ec 48          	sub    rsp,0x48
   2a86f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2a873:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2a877:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2a87b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a884:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a888:	31 c0                	xor    eax,eax
   2a88a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a88e:	48 89 c7             	mov    rdi,rax
   2a891:	e8 3c 0a 00 00       	call   2b2d2 <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>
   2a896:	48 89 c3             	mov    rbx,rax
   2a899:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a89d:	48 89 c7             	mov    rdi,rax
   2a8a0:	e8 61 c4 ff ff       	call   26d06 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a8a5:	48 29 c3             	sub    rbx,rax
   2a8a8:	48 89 da             	mov    rdx,rbx
   2a8ab:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2a8af:	48 39 c2             	cmp    rdx,rax
   2a8b2:	0f 92 c0             	setb   al
   2a8b5:	84 c0                	test   al,al
   2a8b7:	74 0c                	je     2a8c5 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2a8b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2a8bd:	48 89 c7             	mov    rdi,rax
   2a8c0:	e8 0b 99 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   2a8c5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a8c9:	48 89 c7             	mov    rdi,rax
   2a8cc:	e8 35 c4 ff ff       	call   26d06 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a8d1:	48 89 c3             	mov    rbx,rax
   2a8d4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a8d8:	48 89 c7             	mov    rdi,rax
   2a8db:	e8 26 c4 ff ff       	call   26d06 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a8e0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2a8e4:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2a8e8:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   2a8ec:	48 89 d6             	mov    rsi,rdx
   2a8ef:	48 89 c7             	mov    rdi,rax
   2a8f2:	e8 5b ac ff ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   2a8f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a8fa:	48 01 d8             	add    rax,rbx
   2a8fd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a901:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a905:	48 89 c7             	mov    rdi,rax
   2a908:	e8 f9 c3 ff ff       	call   26d06 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a90d:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a911:	72 12                	jb     2a925 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xbf>
   2a913:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a917:	48 89 c7             	mov    rdi,rax
   2a91a:	e8 b3 09 00 00       	call   2b2d2 <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>
   2a91f:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a923:	76 0e                	jbe    2a933 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xcd>
   2a925:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a929:	48 89 c7             	mov    rdi,rax
   2a92c:	e8 a1 09 00 00       	call   2b2d2 <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>
   2a931:	eb 04                	jmp    2a937 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xd1>
   2a933:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a937:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2a93b:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a944:	74 05                	je     2a94b <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xe5>
   2a946:	e8 65 9b fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a94b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a94f:	c9                   	leave  
   2a950:	c3                   	ret    
   2a951:	90                   	nop

000000000002a952 <std::vector<Mesh, std::allocator<Mesh> >::begin()>:
   2a952:	55                   	push   rbp
   2a953:	48 89 e5             	mov    rbp,rsp
   2a956:	48 83 ec 20          	sub    rsp,0x20
   2a95a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a95e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a967:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a96b:	31 c0                	xor    eax,eax
   2a96d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a971:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a975:	48 89 d6             	mov    rsi,rdx
   2a978:	48 89 c7             	mov    rdi,rax
   2a97b:	e8 c8 fe ff ff       	call   2a848 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>
   2a980:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a984:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2a988:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2a991:	74 05                	je     2a998 <std::vector<Mesh, std::allocator<Mesh> >::begin()+0x46>
   2a993:	e8 18 9b fd ff       	call   44b0 <__stack_chk_fail@plt>
   2a998:	c9                   	leave  
   2a999:	c3                   	ret    

000000000002a99a <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::difference_type __gnu_cxx::operator-<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&, __gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&)>:
   2a99a:	55                   	push   rbp
   2a99b:	48 89 e5             	mov    rbp,rsp
   2a99e:	53                   	push   rbx
   2a99f:	48 83 ec 18          	sub    rsp,0x18
   2a9a3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a9a7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a9ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a9af:	48 89 c7             	mov    rdi,rax
   2a9b2:	e8 89 00 00 00       	call   2aa40 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   2a9b7:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   2a9ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a9be:	48 89 c7             	mov    rdi,rax
   2a9c1:	e8 7a 00 00 00       	call   2aa40 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   2a9c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a9c9:	48 89 d8             	mov    rax,rbx
   2a9cc:	48 29 d0             	sub    rax,rdx
   2a9cf:	48 c1 f8 02          	sar    rax,0x2
   2a9d3:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a9d7:	c9                   	leave  
   2a9d8:	c3                   	ret    
   2a9d9:	90                   	nop

000000000002a9da <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)>:
   2a9da:	55                   	push   rbp
   2a9db:	48 89 e5             	mov    rbp,rsp
   2a9de:	48 83 ec 10          	sub    rsp,0x10
   2a9e2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a9e6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a9ea:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2a9ef:	74 15                	je     2aa06 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)+0x2c>
   2a9f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a9f5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a9f9:	48 89 d6             	mov    rsi,rdx
   2a9fc:	48 89 c7             	mov    rdi,rax
   2a9ff:	e8 f0 08 00 00       	call   2b2f4 <std::allocator_traits<std::allocator<Mesh> >::allocate(std::allocator<Mesh>&, unsigned long)>
   2aa04:	eb 05                	jmp    2aa0b <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)+0x31>
   2aa06:	b8 00 00 00 00       	mov    eax,0x0
   2aa0b:	c9                   	leave  
   2aa0c:	c3                   	ret    

000000000002aa0d <std::vector<Mesh, std::allocator<Mesh> >::_S_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2aa0d:	55                   	push   rbp
   2aa0e:	48 89 e5             	mov    rbp,rsp
   2aa11:	48 83 ec 20          	sub    rsp,0x20
   2aa15:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aa19:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2aa1d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2aa21:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2aa25:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2aa29:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2aa2d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2aa31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aa35:	48 89 c7             	mov    rdi,rax
   2aa38:	e8 e1 08 00 00       	call   2b31e <std::vector<Mesh, std::allocator<Mesh> >::_S_do_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&, std::integral_constant<bool, true>)>
   2aa3d:	c9                   	leave  
   2aa3e:	c3                   	ret    
   2aa3f:	90                   	nop

000000000002aa40 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>:
   2aa40:	55                   	push   rbp
   2aa41:	48 89 e5             	mov    rbp,rsp
   2aa44:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aa48:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aa4c:	5d                   	pop    rbp
   2aa4d:	c3                   	ret    

000000000002aa4e <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator-(long) const>:
   2aa4e:	55                   	push   rbp
   2aa4f:	48 89 e5             	mov    rbp,rsp
   2aa52:	48 83 ec 30          	sub    rsp,0x30
   2aa56:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2aa5a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2aa5e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2aa67:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2aa6b:	31 c0                	xor    eax,eax
   2aa6d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2aa71:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2aa74:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2aa78:	48 c1 e0 02          	shl    rax,0x2
   2aa7c:	48 f7 d8             	neg    rax
   2aa7f:	48 01 d0             	add    rax,rdx
   2aa82:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2aa86:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2aa8a:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2aa8e:	48 89 d6             	mov    rsi,rdx
   2aa91:	48 89 c7             	mov    rdi,rax
   2aa94:	e8 af fd ff ff       	call   2a848 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>
   2aa99:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2aa9d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2aaa1:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2aaaa:	74 05                	je     2aab1 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator-(long) const+0x63>
   2aaac:	e8 ff 99 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2aab1:	c9                   	leave  
   2aab2:	c3                   	ret    
   2aab3:	90                   	nop

000000000002aab4 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator*() const>:
   2aab4:	55                   	push   rbp
   2aab5:	48 89 e5             	mov    rbp,rsp
   2aab8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aabc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aac0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2aac3:	5d                   	pop    rbp
   2aac4:	c3                   	ret    
   2aac5:	90                   	nop

000000000002aac6 <void __gnu_cxx::new_allocator<Transform>::construct<Transform, Transform>(Transform*, Transform&&)>:
   2aac6:	55                   	push   rbp
   2aac7:	48 89 e5             	mov    rbp,rsp
   2aaca:	53                   	push   rbx
   2aacb:	48 83 ec 28          	sub    rsp,0x28
   2aacf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2aad3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2aad7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2aadb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2aadf:	48 89 c7             	mov    rdi,rax
   2aae2:	e8 f5 e7 ff ff       	call   292dc <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   2aae7:	48 89 c3             	mov    rbx,rax
   2aaea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2aaee:	48 89 c6             	mov    rsi,rax
   2aaf1:	bf 24 00 00 00       	mov    edi,0x24
   2aaf6:	e8 9c a0 ff ff       	call   24b97 <operator new(unsigned long, void*)>
   2aafb:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
   2aafe:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
   2ab02:	48 89 30             	mov    QWORD PTR [rax],rsi
   2ab05:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
   2ab09:	48 8b 73 10          	mov    rsi,QWORD PTR [rbx+0x10]
   2ab0d:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
   2ab11:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
   2ab15:	48 89 78 18          	mov    QWORD PTR [rax+0x18],rdi
   2ab19:	8b 53 20             	mov    edx,DWORD PTR [rbx+0x20]
   2ab1c:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   2ab1f:	90                   	nop
   2ab20:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ab24:	c9                   	leave  
   2ab25:	c3                   	ret    

000000000002ab26 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>:
   2ab26:	55                   	push   rbp
   2ab27:	48 89 e5             	mov    rbp,rsp
   2ab2a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ab2e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ab32:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ab36:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ab39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ab3d:	48 89 10             	mov    QWORD PTR [rax],rdx
   2ab40:	90                   	nop
   2ab41:	5d                   	pop    rbp
   2ab42:	c3                   	ret    
   2ab43:	90                   	nop

000000000002ab44 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const>:
   2ab44:	55                   	push   rbp
   2ab45:	48 89 e5             	mov    rbp,rsp
   2ab48:	53                   	push   rbx
   2ab49:	48 83 ec 48          	sub    rsp,0x48
   2ab4d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2ab51:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2ab55:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2ab59:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ab62:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ab66:	31 c0                	xor    eax,eax
   2ab68:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ab6c:	48 89 c7             	mov    rdi,rax
   2ab6f:	e8 dc 07 00 00       	call   2b350 <std::vector<Transform, std::allocator<Transform> >::max_size() const>
   2ab74:	48 89 c3             	mov    rbx,rax
   2ab77:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ab7b:	48 89 c7             	mov    rdi,rax
   2ab7e:	e8 a7 c1 ff ff       	call   26d2a <std::vector<Transform, std::allocator<Transform> >::size() const>
   2ab83:	48 29 c3             	sub    rbx,rax
   2ab86:	48 89 da             	mov    rdx,rbx
   2ab89:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2ab8d:	48 39 c2             	cmp    rdx,rax
   2ab90:	0f 92 c0             	setb   al
   2ab93:	84 c0                	test   al,al
   2ab95:	74 0c                	je     2aba3 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2ab97:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2ab9b:	48 89 c7             	mov    rdi,rax
   2ab9e:	e8 2d 96 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   2aba3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2aba7:	48 89 c7             	mov    rdi,rax
   2abaa:	e8 7b c1 ff ff       	call   26d2a <std::vector<Transform, std::allocator<Transform> >::size() const>
   2abaf:	48 89 c3             	mov    rbx,rax
   2abb2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2abb6:	48 89 c7             	mov    rdi,rax
   2abb9:	e8 6c c1 ff ff       	call   26d2a <std::vector<Transform, std::allocator<Transform> >::size() const>
   2abbe:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2abc2:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2abc6:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   2abca:	48 89 d6             	mov    rsi,rdx
   2abcd:	48 89 c7             	mov    rdi,rax
   2abd0:	e8 7d a9 ff ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   2abd5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2abd8:	48 01 d8             	add    rax,rbx
   2abdb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2abdf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2abe3:	48 89 c7             	mov    rdi,rax
   2abe6:	e8 3f c1 ff ff       	call   26d2a <std::vector<Transform, std::allocator<Transform> >::size() const>
   2abeb:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2abef:	72 12                	jb     2ac03 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xbf>
   2abf1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2abf5:	48 89 c7             	mov    rdi,rax
   2abf8:	e8 53 07 00 00       	call   2b350 <std::vector<Transform, std::allocator<Transform> >::max_size() const>
   2abfd:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2ac01:	76 0e                	jbe    2ac11 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xcd>
   2ac03:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ac07:	48 89 c7             	mov    rdi,rax
   2ac0a:	e8 41 07 00 00       	call   2b350 <std::vector<Transform, std::allocator<Transform> >::max_size() const>
   2ac0f:	eb 04                	jmp    2ac15 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xd1>
   2ac11:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ac15:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2ac19:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2ac22:	74 05                	je     2ac29 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xe5>
   2ac24:	e8 87 98 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ac29:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ac2d:	c9                   	leave  
   2ac2e:	c3                   	ret    
   2ac2f:	90                   	nop

000000000002ac30 <std::vector<Transform, std::allocator<Transform> >::begin()>:
   2ac30:	55                   	push   rbp
   2ac31:	48 89 e5             	mov    rbp,rsp
   2ac34:	48 83 ec 20          	sub    rsp,0x20
   2ac38:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2ac3c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ac45:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ac49:	31 c0                	xor    eax,eax
   2ac4b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2ac4f:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2ac53:	48 89 d6             	mov    rsi,rdx
   2ac56:	48 89 c7             	mov    rdi,rax
   2ac59:	e8 c8 fe ff ff       	call   2ab26 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>
   2ac5e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ac62:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2ac66:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2ac6f:	74 05                	je     2ac76 <std::vector<Transform, std::allocator<Transform> >::begin()+0x46>
   2ac71:	e8 3a 98 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ac76:	c9                   	leave  
   2ac77:	c3                   	ret    

000000000002ac78 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::difference_type __gnu_cxx::operator-<Transform*, std::vector<Transform, std::allocator<Transform> > >(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&, __gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&)>:
   2ac78:	55                   	push   rbp
   2ac79:	48 89 e5             	mov    rbp,rsp
   2ac7c:	53                   	push   rbx
   2ac7d:	48 83 ec 18          	sub    rsp,0x18
   2ac81:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2ac85:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2ac89:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2ac8d:	48 89 c7             	mov    rdi,rax
   2ac90:	e8 99 00 00 00       	call   2ad2e <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   2ac95:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   2ac98:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ac9c:	48 89 c7             	mov    rdi,rax
   2ac9f:	e8 8a 00 00 00       	call   2ad2e <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   2aca4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2aca7:	48 89 d8             	mov    rax,rbx
   2acaa:	48 29 d0             	sub    rax,rdx
   2acad:	48 c1 f8 02          	sar    rax,0x2
   2acb1:	48 89 c2             	mov    rdx,rax
   2acb4:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   2acbe:	48 0f af c2          	imul   rax,rdx
   2acc2:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2acc6:	c9                   	leave  
   2acc7:	c3                   	ret    

000000000002acc8 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)>:
   2acc8:	55                   	push   rbp
   2acc9:	48 89 e5             	mov    rbp,rsp
   2accc:	48 83 ec 10          	sub    rsp,0x10
   2acd0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2acd4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2acd8:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2acdd:	74 15                	je     2acf4 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)+0x2c>
   2acdf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ace3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2ace7:	48 89 d6             	mov    rsi,rdx
   2acea:	48 89 c7             	mov    rdi,rax
   2aced:	e8 80 06 00 00       	call   2b372 <std::allocator_traits<std::allocator<Transform> >::allocate(std::allocator<Transform>&, unsigned long)>
   2acf2:	eb 05                	jmp    2acf9 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)+0x31>
   2acf4:	b8 00 00 00 00       	mov    eax,0x0
   2acf9:	c9                   	leave  
   2acfa:	c3                   	ret    

000000000002acfb <std::vector<Transform, std::allocator<Transform> >::_S_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&)>:
   2acfb:	55                   	push   rbp
   2acfc:	48 89 e5             	mov    rbp,rsp
   2acff:	48 83 ec 20          	sub    rsp,0x20
   2ad03:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ad07:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ad0b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2ad0f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2ad13:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2ad17:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2ad1b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2ad1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ad23:	48 89 c7             	mov    rdi,rax
   2ad26:	e8 71 06 00 00       	call   2b39c <std::vector<Transform, std::allocator<Transform> >::_S_do_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&, std::integral_constant<bool, true>)>
   2ad2b:	c9                   	leave  
   2ad2c:	c3                   	ret    
   2ad2d:	90                   	nop

000000000002ad2e <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>:
   2ad2e:	55                   	push   rbp
   2ad2f:	48 89 e5             	mov    rbp,rsp
   2ad32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ad36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ad3a:	5d                   	pop    rbp
   2ad3b:	c3                   	ret    

000000000002ad3c <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator-(long) const>:
   2ad3c:	55                   	push   rbp
   2ad3d:	48 89 e5             	mov    rbp,rsp
   2ad40:	48 83 ec 30          	sub    rsp,0x30
   2ad44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2ad48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2ad4c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ad55:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ad59:	31 c0                	xor    eax,eax
   2ad5b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ad5f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2ad62:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   2ad66:	48 89 d0             	mov    rax,rdx
   2ad69:	48 c1 e0 03          	shl    rax,0x3
   2ad6d:	48 01 d0             	add    rax,rdx
   2ad70:	48 c1 e0 02          	shl    rax,0x2
   2ad74:	48 f7 d8             	neg    rax
   2ad77:	48 01 c8             	add    rax,rcx
   2ad7a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ad7e:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2ad82:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2ad86:	48 89 d6             	mov    rsi,rdx
   2ad89:	48 89 c7             	mov    rdi,rax
   2ad8c:	e8 95 fd ff ff       	call   2ab26 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>
   2ad91:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ad95:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2ad99:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2ada2:	74 05                	je     2ada9 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator-(long) const+0x6d>
   2ada4:	e8 07 97 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ada9:	c9                   	leave  
   2adaa:	c3                   	ret    
   2adab:	90                   	nop

000000000002adac <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator*() const>:
   2adac:	55                   	push   rbp
   2adad:	48 89 e5             	mov    rbp,rsp
   2adb0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2adb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2adb8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2adbb:	5d                   	pop    rbp
   2adbc:	c3                   	ret    
   2adbd:	90                   	nop

000000000002adbe <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int>(unsigned int*, unsigned int&&)>:
   2adbe:	55                   	push   rbp
   2adbf:	48 89 e5             	mov    rbp,rsp
   2adc2:	53                   	push   rbx
   2adc3:	48 83 ec 28          	sub    rsp,0x28
   2adc7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2adcb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2adcf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2add3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2add7:	48 89 c7             	mov    rdi,rax
   2adda:	e8 cf e7 ff ff       	call   295ae <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   2addf:	8b 18                	mov    ebx,DWORD PTR [rax]
   2ade1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ade5:	48 89 c6             	mov    rsi,rax
   2ade8:	bf 04 00 00 00       	mov    edi,0x4
   2aded:	e8 a5 9d ff ff       	call   24b97 <operator new(unsigned long, void*)>
   2adf2:	89 18                	mov    DWORD PTR [rax],ebx
   2adf4:	90                   	nop
   2adf5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2adf9:	c9                   	leave  
   2adfa:	c3                   	ret    
   2adfb:	90                   	nop

000000000002adfc <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const>:
   2adfc:	55                   	push   rbp
   2adfd:	48 89 e5             	mov    rbp,rsp
   2ae00:	48 83 ec 30          	sub    rsp,0x30
   2ae04:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2ae08:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2ae0c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ae15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ae19:	31 c0                	xor    eax,eax
   2ae1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ae1f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ae22:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2ae26:	48 c1 e0 02          	shl    rax,0x2
   2ae2a:	48 f7 d8             	neg    rax
   2ae2d:	48 01 d0             	add    rax,rdx
   2ae30:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ae34:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2ae38:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2ae3c:	48 89 d6             	mov    rsi,rdx
   2ae3f:	48 89 c7             	mov    rdi,rax
   2ae42:	e8 13 ea ff ff       	call   2985a <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   2ae47:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ae4b:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2ae4f:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2ae58:	74 05                	je     2ae5f <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const+0x63>
   2ae5a:	e8 51 96 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ae5f:	c9                   	leave  
   2ae60:	c3                   	ret    
   2ae61:	90                   	nop

000000000002ae62 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const>:
   2ae62:	55                   	push   rbp
   2ae63:	48 89 e5             	mov    rbp,rsp
   2ae66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ae6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ae6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ae71:	5d                   	pop    rbp
   2ae72:	c3                   	ret    
   2ae73:	90                   	nop

000000000002ae74 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>:
   2ae74:	55                   	push   rbp
   2ae75:	48 89 e5             	mov    rbp,rsp
   2ae78:	48 83 ec 10          	sub    rsp,0x10
   2ae7c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ae80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ae84:	48 89 c7             	mov    rdi,rax
   2ae87:	e8 a8 05 00 00       	call   2b434 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   2ae8c:	48 89 c7             	mov    rdi,rax
   2ae8f:	e8 3a 05 00 00       	call   2b3ce <std::vector<unsigned int, std::allocator<unsigned int> >::_S_max_size(std::allocator<unsigned int> const&)>
   2ae94:	c9                   	leave  
   2ae95:	c3                   	ret    

000000000002ae96 <std::allocator_traits<std::allocator<unsigned int> >::allocate(std::allocator<unsigned int>&, unsigned long)>:
   2ae96:	55                   	push   rbp
   2ae97:	48 89 e5             	mov    rbp,rsp
   2ae9a:	48 83 ec 10          	sub    rsp,0x10
   2ae9e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aea2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2aea6:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2aeaa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aeae:	ba 00 00 00 00       	mov    edx,0x0
   2aeb3:	48 89 ce             	mov    rsi,rcx
   2aeb6:	48 89 c7             	mov    rdi,rax
   2aeb9:	e8 84 05 00 00       	call   2b442 <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)>
   2aebe:	c9                   	leave  
   2aebf:	c3                   	ret    

000000000002aec0 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_do_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&, std::integral_constant<bool, true>)>:
   2aec0:	55                   	push   rbp
   2aec1:	48 89 e5             	mov    rbp,rsp
   2aec4:	48 83 ec 20          	sub    rsp,0x20
   2aec8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aecc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2aed0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2aed4:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2aed8:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2aedc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2aee0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2aee4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aee8:	48 89 c7             	mov    rdi,rax
   2aeeb:	e8 95 05 00 00       	call   2b485 <unsigned int* std::__relocate_a<unsigned int*, unsigned int*, std::allocator<unsigned int> >(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   2aef0:	c9                   	leave  
   2aef1:	c3                   	ret    

000000000002aef2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>:
   2aef2:	55                   	push   rbp
   2aef3:	48 89 e5             	mov    rbp,rsp
   2aef6:	48 83 ec 10          	sub    rsp,0x10
   2aefa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aefe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af02:	48 89 c7             	mov    rdi,rax
   2af05:	e8 44 06 00 00       	call   2b54e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator() const>
   2af0a:	48 89 c7             	mov    rdi,rax
   2af0d:	e8 d6 05 00 00       	call   2b4e8 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
   2af12:	c9                   	leave  
   2af13:	c3                   	ret    

000000000002af14 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, unsigned long)>:
   2af14:	55                   	push   rbp
   2af15:	48 89 e5             	mov    rbp,rsp
   2af18:	48 83 ec 10          	sub    rsp,0x10
   2af1c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af20:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2af24:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2af28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af2c:	ba 00 00 00 00       	mov    edx,0x0
   2af31:	48 89 ce             	mov    rsi,rcx
   2af34:	48 89 c7             	mov    rdi,rax
   2af37:	e8 20 06 00 00       	call   2b55c <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)>
   2af3c:	c9                   	leave  
   2af3d:	c3                   	ret    

000000000002af3e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_do_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::integral_constant<bool, true>)>:
   2af3e:	55                   	push   rbp
   2af3f:	48 89 e5             	mov    rbp,rsp
   2af42:	48 83 ec 20          	sub    rsp,0x20
   2af46:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af4a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2af4e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2af52:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2af56:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2af5a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2af5e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2af62:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af66:	48 89 c7             	mov    rdi,rax
   2af69:	e8 31 06 00 00       	call   2b59f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2af6e:	c9                   	leave  
   2af6f:	c3                   	ret    

000000000002af70 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2af70:	55                   	push   rbp
   2af71:	48 89 e5             	mov    rbp,rsp
   2af74:	48 83 ec 10          	sub    rsp,0x10
   2af78:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af7c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2af80:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2af84:	48 89 c7             	mov    rdi,rax
   2af87:	e8 d4 92 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2af8c:	90                   	nop
   2af8d:	c9                   	leave  
   2af8e:	c3                   	ret    
   2af8f:	90                   	nop

000000000002af90 <std::vector<Tex, std::allocator<Tex> >::max_size() const>:
   2af90:	55                   	push   rbp
   2af91:	48 89 e5             	mov    rbp,rsp
   2af94:	48 83 ec 10          	sub    rsp,0x10
   2af98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2afa0:	48 89 c7             	mov    rdi,rax
   2afa3:	e8 c0 06 00 00       	call   2b668 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator() const>
   2afa8:	48 89 c7             	mov    rdi,rax
   2afab:	e8 52 06 00 00       	call   2b602 <std::vector<Tex, std::allocator<Tex> >::_S_max_size(std::allocator<Tex> const&)>
   2afb0:	c9                   	leave  
   2afb1:	c3                   	ret    

000000000002afb2 <std::allocator_traits<std::allocator<Tex> >::allocate(std::allocator<Tex>&, unsigned long)>:
   2afb2:	55                   	push   rbp
   2afb3:	48 89 e5             	mov    rbp,rsp
   2afb6:	48 83 ec 10          	sub    rsp,0x10
   2afba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2afbe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2afc2:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2afc6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2afca:	ba 00 00 00 00       	mov    edx,0x0
   2afcf:	48 89 ce             	mov    rsi,rcx
   2afd2:	48 89 c7             	mov    rdi,rax
   2afd5:	e8 9c 06 00 00       	call   2b676 <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)>
   2afda:	c9                   	leave  
   2afdb:	c3                   	ret    

000000000002afdc <std::vector<Tex, std::allocator<Tex> >::_S_do_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&, std::integral_constant<bool, true>)>:
   2afdc:	55                   	push   rbp
   2afdd:	48 89 e5             	mov    rbp,rsp
   2afe0:	48 83 ec 20          	sub    rsp,0x20
   2afe4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2afe8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2afec:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2aff0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2aff4:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2aff8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2affc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b000:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b004:	48 89 c7             	mov    rdi,rax
   2b007:	e8 b6 06 00 00       	call   2b6c2 <Tex* std::__relocate_a<Tex*, Tex*, std::allocator<Tex> >(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   2b00c:	c9                   	leave  
   2b00d:	c3                   	ret    

000000000002b00e <__gnu_cxx::new_allocator<Mesh>::deallocate(Mesh*, unsigned long)>:
   2b00e:	55                   	push   rbp
   2b00f:	48 89 e5             	mov    rbp,rsp
   2b012:	48 83 ec 20          	sub    rsp,0x20
   2b016:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b01a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b01e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b022:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b026:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b02e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b032:	48 89 d6             	mov    rsi,rdx
   2b035:	48 89 c7             	mov    rdi,rax
   2b038:	e8 d3 93 fd ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   2b03d:	c9                   	leave  
   2b03e:	c3                   	ret    

000000000002b03f <void std::_Destroy_aux<true>::__destroy<Mesh*>(Mesh*, Mesh*)>:
   2b03f:	55                   	push   rbp
   2b040:	48 89 e5             	mov    rbp,rsp
   2b043:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b047:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b04b:	90                   	nop
   2b04c:	5d                   	pop    rbp
   2b04d:	c3                   	ret    

000000000002b04e <__gnu_cxx::new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long)>:
   2b04e:	55                   	push   rbp
   2b04f:	48 89 e5             	mov    rbp,rsp
   2b052:	48 83 ec 20          	sub    rsp,0x20
   2b056:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b05a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b05e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b062:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b066:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b06e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b072:	48 89 d6             	mov    rsi,rdx
   2b075:	48 89 c7             	mov    rdi,rax
   2b078:	e8 93 93 fd ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   2b07d:	c9                   	leave  
   2b07e:	c3                   	ret    

000000000002b07f <void std::_Destroy_aux<true>::__destroy<unsigned int*>(unsigned int*, unsigned int*)>:
   2b07f:	55                   	push   rbp
   2b080:	48 89 e5             	mov    rbp,rsp
   2b083:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b087:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b08b:	90                   	nop
   2b08c:	5d                   	pop    rbp
   2b08d:	c3                   	ret    

000000000002b08e <__gnu_cxx::new_allocator<Transform>::deallocate(Transform*, unsigned long)>:
   2b08e:	55                   	push   rbp
   2b08f:	48 89 e5             	mov    rbp,rsp
   2b092:	48 83 ec 20          	sub    rsp,0x20
   2b096:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b09a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b09e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b0a2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b0a6:	48 89 d0             	mov    rax,rdx
   2b0a9:	48 c1 e0 03          	shl    rax,0x3
   2b0ad:	48 01 d0             	add    rax,rdx
   2b0b0:	48 c1 e0 02          	shl    rax,0x2
   2b0b4:	48 89 c2             	mov    rdx,rax
   2b0b7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b0bb:	48 89 d6             	mov    rsi,rdx
   2b0be:	48 89 c7             	mov    rdi,rax
   2b0c1:	e8 4a 93 fd ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   2b0c6:	c9                   	leave  
   2b0c7:	c3                   	ret    

000000000002b0c8 <void std::_Destroy_aux<true>::__destroy<Transform*>(Transform*, Transform*)>:
   2b0c8:	55                   	push   rbp
   2b0c9:	48 89 e5             	mov    rbp,rsp
   2b0cc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b0d0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b0d4:	90                   	nop
   2b0d5:	5d                   	pop    rbp
   2b0d6:	c3                   	ret    
   2b0d7:	90                   	nop

000000000002b0d8 <__gnu_cxx::new_allocator<AABB>::deallocate(AABB*, unsigned long)>:
   2b0d8:	55                   	push   rbp
   2b0d9:	48 89 e5             	mov    rbp,rsp
   2b0dc:	48 83 ec 20          	sub    rsp,0x20
   2b0e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b0e4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b0e8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b0ec:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b0f0:	48 89 d0             	mov    rax,rdx
   2b0f3:	48 01 c0             	add    rax,rax
   2b0f6:	48 01 d0             	add    rax,rdx
   2b0f9:	48 c1 e0 03          	shl    rax,0x3
   2b0fd:	48 89 c2             	mov    rdx,rax
   2b100:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b104:	48 89 d6             	mov    rsi,rdx
   2b107:	48 89 c7             	mov    rdi,rax
   2b10a:	e8 01 93 fd ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   2b10f:	c9                   	leave  
   2b110:	c3                   	ret    

000000000002b111 <void std::_Destroy_aux<true>::__destroy<AABB*>(AABB*, AABB*)>:
   2b111:	55                   	push   rbp
   2b112:	48 89 e5             	mov    rbp,rsp
   2b115:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b119:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b11d:	90                   	nop
   2b11e:	5d                   	pop    rbp
   2b11f:	c3                   	ret    

000000000002b120 <glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   2b120:	55                   	push   rbp
   2b121:	48 89 e5             	mov    rbp,rsp
   2b124:	53                   	push   rbx
   2b125:	48 83 ec 38          	sub    rsp,0x38
   2b129:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2b12d:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2b131:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b13a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b13e:	31 c0                	xor    eax,eax
   2b140:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2b144:	f3 0f 10 48 0c       	movss  xmm1,DWORD PTR [rax+0xc]
   2b149:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2b14d:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   2b152:	0f 28 d9             	movaps xmm3,xmm1
   2b155:	f3 0f 58 d8          	addss  xmm3,xmm0
   2b159:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2b15d:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2b162:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2b166:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2b16b:	0f 28 d1             	movaps xmm2,xmm1
   2b16e:	f3 0f 58 d0          	addss  xmm2,xmm0
   2b172:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2b176:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2b17b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2b17f:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2b184:	0f 28 e1             	movaps xmm4,xmm1
   2b187:	f3 0f 58 e0          	addss  xmm4,xmm0
   2b18b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2b18f:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2b193:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2b197:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2b19b:	f3 0f 58 c8          	addss  xmm1,xmm0
   2b19f:	66 0f 7e ca          	movd   edx,xmm1
   2b1a3:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   2b1a7:	0f 28 cc             	movaps xmm1,xmm4
   2b1aa:	66 0f 6e c2          	movd   xmm0,edx
   2b1ae:	48 89 c7             	mov    rdi,rax
   2b1b1:	e8 02 b6 ff ff       	call   267b8 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   2b1b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b1ba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2b1be:	48 89 c1             	mov    rcx,rax
   2b1c1:	48 89 d3             	mov    rbx,rdx
   2b1c4:	48 89 d0             	mov    rax,rdx
   2b1c7:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   2b1cb:	64 48 2b 1c 25 28 00 00 00 	sub    rbx,QWORD PTR fs:0x28
   2b1d4:	74 05                	je     2b1db <glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)+0xbb>
   2b1d6:	e8 d5 92 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b1db:	66 48 0f 6e c1       	movq   xmm0,rcx
   2b1e0:	66 48 0f 6e c8       	movq   xmm1,rax
   2b1e5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2b1e9:	c9                   	leave  
   2b1ea:	c3                   	ret    

000000000002b1eb <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>:
   2b1eb:	55                   	push   rbp
   2b1ec:	48 89 e5             	mov    rbp,rsp
   2b1ef:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b1f3:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2b1f8:	0f 94 c0             	sete   al
   2b1fb:	5d                   	pop    rbp
   2b1fc:	c3                   	ret    

000000000002b1fd <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>:
   2b1fd:	55                   	push   rbp
   2b1fe:	48 89 e5             	mov    rbp,rsp
   2b201:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b205:	5d                   	pop    rbp
   2b206:	c3                   	ret    

000000000002b207 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>:
   2b207:	55                   	push   rbp
   2b208:	48 89 e5             	mov    rbp,rsp
   2b20b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b20f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b213:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b217:	48 2b 45 f8          	sub    rax,QWORD PTR [rbp-0x8]
   2b21b:	5d                   	pop    rbp
   2b21c:	c3                   	ret    

000000000002b21d <std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head(std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>&)>:
   2b21d:	55                   	push   rbp
   2b21e:	48 89 e5             	mov    rbp,rsp
   2b221:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b225:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b229:	5d                   	pop    rbp
   2b22a:	c3                   	ret    

000000000002b22b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   2b22b:	55                   	push   rbp
   2b22c:	48 89 e5             	mov    rbp,rsp
   2b22f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b233:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b237:	5d                   	pop    rbp
   2b238:	c3                   	ret    

000000000002b239 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2b239:	55                   	push   rbp
   2b23a:	48 89 e5             	mov    rbp,rsp
   2b23d:	48 83 ec 10          	sub    rsp,0x10
   2b241:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b245:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b249:	48 89 c7             	mov    rdi,rax
   2b24c:	e8 0f 90 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2b251:	90                   	nop
   2b252:	c9                   	leave  
   2b253:	c3                   	ret    

000000000002b254 <std::vector<AABB, std::allocator<AABB> >::max_size() const>:
   2b254:	55                   	push   rbp
   2b255:	48 89 e5             	mov    rbp,rsp
   2b258:	48 83 ec 10          	sub    rsp,0x10
   2b25c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b260:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b264:	48 89 c7             	mov    rdi,rax
   2b267:	e8 1e 05 00 00       	call   2b78a <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator() const>
   2b26c:	48 89 c7             	mov    rdi,rax
   2b26f:	e8 b1 04 00 00       	call   2b725 <std::vector<AABB, std::allocator<AABB> >::_S_max_size(std::allocator<AABB> const&)>
   2b274:	c9                   	leave  
   2b275:	c3                   	ret    

000000000002b276 <std::allocator_traits<std::allocator<AABB> >::allocate(std::allocator<AABB>&, unsigned long)>:
   2b276:	55                   	push   rbp
   2b277:	48 89 e5             	mov    rbp,rsp
   2b27a:	48 83 ec 10          	sub    rsp,0x10
   2b27e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b282:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b286:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b28a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b28e:	ba 00 00 00 00       	mov    edx,0x0
   2b293:	48 89 ce             	mov    rsi,rcx
   2b296:	48 89 c7             	mov    rdi,rax
   2b299:	e8 fa 04 00 00       	call   2b798 <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)>
   2b29e:	c9                   	leave  
   2b29f:	c3                   	ret    

000000000002b2a0 <std::vector<AABB, std::allocator<AABB> >::_S_do_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&, std::integral_constant<bool, true>)>:
   2b2a0:	55                   	push   rbp
   2b2a1:	48 89 e5             	mov    rbp,rsp
   2b2a4:	48 83 ec 20          	sub    rsp,0x20
   2b2a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b2ac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b2b0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b2b4:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b2b8:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b2bc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b2c0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b2c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b2c8:	48 89 c7             	mov    rdi,rax
   2b2cb:	e8 14 05 00 00       	call   2b7e4 <AABB* std::__relocate_a<AABB*, AABB*, std::allocator<AABB> >(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   2b2d0:	c9                   	leave  
   2b2d1:	c3                   	ret    

000000000002b2d2 <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>:
   2b2d2:	55                   	push   rbp
   2b2d3:	48 89 e5             	mov    rbp,rsp
   2b2d6:	48 83 ec 10          	sub    rsp,0x10
   2b2da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b2de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b2e2:	48 89 c7             	mov    rdi,rax
   2b2e5:	e8 c2 05 00 00       	call   2b8ac <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator() const>
   2b2ea:	48 89 c7             	mov    rdi,rax
   2b2ed:	e8 55 05 00 00       	call   2b847 <std::vector<Mesh, std::allocator<Mesh> >::_S_max_size(std::allocator<Mesh> const&)>
   2b2f2:	c9                   	leave  
   2b2f3:	c3                   	ret    

000000000002b2f4 <std::allocator_traits<std::allocator<Mesh> >::allocate(std::allocator<Mesh>&, unsigned long)>:
   2b2f4:	55                   	push   rbp
   2b2f5:	48 89 e5             	mov    rbp,rsp
   2b2f8:	48 83 ec 10          	sub    rsp,0x10
   2b2fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b300:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b304:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b308:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b30c:	ba 00 00 00 00       	mov    edx,0x0
   2b311:	48 89 ce             	mov    rsi,rcx
   2b314:	48 89 c7             	mov    rdi,rax
   2b317:	e8 9e 05 00 00       	call   2b8ba <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)>
   2b31c:	c9                   	leave  
   2b31d:	c3                   	ret    

000000000002b31e <std::vector<Mesh, std::allocator<Mesh> >::_S_do_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&, std::integral_constant<bool, true>)>:
   2b31e:	55                   	push   rbp
   2b31f:	48 89 e5             	mov    rbp,rsp
   2b322:	48 83 ec 20          	sub    rsp,0x20
   2b326:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b32a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b32e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b332:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b336:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b33a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b33e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b342:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b346:	48 89 c7             	mov    rdi,rax
   2b349:	e8 af 05 00 00       	call   2b8fd <Mesh* std::__relocate_a<Mesh*, Mesh*, std::allocator<Mesh> >(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   2b34e:	c9                   	leave  
   2b34f:	c3                   	ret    

000000000002b350 <std::vector<Transform, std::allocator<Transform> >::max_size() const>:
   2b350:	55                   	push   rbp
   2b351:	48 89 e5             	mov    rbp,rsp
   2b354:	48 83 ec 10          	sub    rsp,0x10
   2b358:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b35c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b360:	48 89 c7             	mov    rdi,rax
   2b363:	e8 5e 06 00 00       	call   2b9c6 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator() const>
   2b368:	48 89 c7             	mov    rdi,rax
   2b36b:	e8 f0 05 00 00       	call   2b960 <std::vector<Transform, std::allocator<Transform> >::_S_max_size(std::allocator<Transform> const&)>
   2b370:	c9                   	leave  
   2b371:	c3                   	ret    

000000000002b372 <std::allocator_traits<std::allocator<Transform> >::allocate(std::allocator<Transform>&, unsigned long)>:
   2b372:	55                   	push   rbp
   2b373:	48 89 e5             	mov    rbp,rsp
   2b376:	48 83 ec 10          	sub    rsp,0x10
   2b37a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b37e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b382:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b386:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b38a:	ba 00 00 00 00       	mov    edx,0x0
   2b38f:	48 89 ce             	mov    rsi,rcx
   2b392:	48 89 c7             	mov    rdi,rax
   2b395:	e8 3a 06 00 00       	call   2b9d4 <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)>
   2b39a:	c9                   	leave  
   2b39b:	c3                   	ret    

000000000002b39c <std::vector<Transform, std::allocator<Transform> >::_S_do_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&, std::integral_constant<bool, true>)>:
   2b39c:	55                   	push   rbp
   2b39d:	48 89 e5             	mov    rbp,rsp
   2b3a0:	48 83 ec 20          	sub    rsp,0x20
   2b3a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b3a8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b3ac:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b3b0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b3b4:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b3b8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b3bc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b3c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b3c4:	48 89 c7             	mov    rdi,rax
   2b3c7:	e8 55 06 00 00       	call   2ba21 <Transform* std::__relocate_a<Transform*, Transform*, std::allocator<Transform> >(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   2b3cc:	c9                   	leave  
   2b3cd:	c3                   	ret    

000000000002b3ce <std::vector<unsigned int, std::allocator<unsigned int> >::_S_max_size(std::allocator<unsigned int> const&)>:
   2b3ce:	55                   	push   rbp
   2b3cf:	48 89 e5             	mov    rbp,rsp
   2b3d2:	48 83 ec 30          	sub    rsp,0x30
   2b3d6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b3da:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b3e3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b3e7:	31 c0                	xor    eax,eax
   2b3e9:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2b3f3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b3f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b3fb:	48 89 c7             	mov    rdi,rax
   2b3fe:	e8 81 06 00 00       	call   2ba84 <std::allocator_traits<std::allocator<unsigned int> >::max_size(std::allocator<unsigned int> const&)>
   2b403:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b407:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b40b:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b40f:	48 89 d6             	mov    rsi,rdx
   2b412:	48 89 c7             	mov    rdi,rax
   2b415:	e8 db 99 ff ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b41a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b41d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2b421:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2b42a:	74 05                	je     2b431 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_max_size(std::allocator<unsigned int> const&)+0x63>
   2b42c:	e8 7f 90 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b431:	c9                   	leave  
   2b432:	c3                   	ret    
   2b433:	90                   	nop

000000000002b434 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>:
   2b434:	55                   	push   rbp
   2b435:	48 89 e5             	mov    rbp,rsp
   2b438:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b43c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b440:	5d                   	pop    rbp
   2b441:	c3                   	ret    

000000000002b442 <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)>:
   2b442:	55                   	push   rbp
   2b443:	48 89 e5             	mov    rbp,rsp
   2b446:	48 83 ec 20          	sub    rsp,0x20
   2b44a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b44e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b452:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b456:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b45a:	48 89 c7             	mov    rdi,rax
   2b45d:	e8 3c 06 00 00       	call   2ba9e <__gnu_cxx::new_allocator<unsigned int>::_M_max_size() const>
   2b462:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b466:	0f 97 c0             	seta   al
   2b469:	84 c0                	test   al,al
   2b46b:	74 05                	je     2b472 <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)+0x30>
   2b46d:	e8 9e 8c fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b472:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b476:	48 c1 e0 02          	shl    rax,0x2
   2b47a:	48 89 c7             	mov    rdi,rax
   2b47d:	e8 7e 8f fd ff       	call   4400 <operator new(unsigned long)@plt>
   2b482:	90                   	nop
   2b483:	c9                   	leave  
   2b484:	c3                   	ret    

000000000002b485 <unsigned int* std::__relocate_a<unsigned int*, unsigned int*, std::allocator<unsigned int> >(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   2b485:	55                   	push   rbp
   2b486:	48 89 e5             	mov    rbp,rsp
   2b489:	41 54                	push   r12
   2b48b:	53                   	push   rbx
   2b48c:	48 83 ec 20          	sub    rsp,0x20
   2b490:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b494:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b498:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b49c:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b4a0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b4a4:	48 89 c7             	mov    rdi,rax
   2b4a7:	e8 06 06 00 00       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   2b4ac:	49 89 c4             	mov    r12,rax
   2b4af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b4b3:	48 89 c7             	mov    rdi,rax
   2b4b6:	e8 f7 05 00 00       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   2b4bb:	48 89 c3             	mov    rbx,rax
   2b4be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b4c2:	48 89 c7             	mov    rdi,rax
   2b4c5:	e8 e8 05 00 00       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   2b4ca:	48 89 c7             	mov    rdi,rax
   2b4cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b4d1:	48 89 c1             	mov    rcx,rax
   2b4d4:	4c 89 e2             	mov    rdx,r12
   2b4d7:	48 89 de             	mov    rsi,rbx
   2b4da:	e8 e1 05 00 00       	call   2bac0 <std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   2b4df:	48 83 c4 20          	add    rsp,0x20
   2b4e3:	5b                   	pop    rbx
   2b4e4:	41 5c                	pop    r12
   2b4e6:	5d                   	pop    rbp
   2b4e7:	c3                   	ret    

000000000002b4e8 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
   2b4e8:	55                   	push   rbp
   2b4e9:	48 89 e5             	mov    rbp,rsp
   2b4ec:	48 83 ec 30          	sub    rsp,0x30
   2b4f0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b4f4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b4fd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b501:	31 c0                	xor    eax,eax
   2b503:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   2b50d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b511:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b515:	48 89 c7             	mov    rdi,rax
   2b518:	e8 06 06 00 00       	call   2bb23 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
   2b51d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b521:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b525:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b529:	48 89 d6             	mov    rsi,rdx
   2b52c:	48 89 c7             	mov    rdi,rax
   2b52f:	e8 c1 98 ff ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b534:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b537:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2b53b:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2b544:	74 05                	je     2b54b <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)+0x63>
   2b546:	e8 65 8f fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b54b:	c9                   	leave  
   2b54c:	c3                   	ret    
   2b54d:	90                   	nop

000000000002b54e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator() const>:
   2b54e:	55                   	push   rbp
   2b54f:	48 89 e5             	mov    rbp,rsp
   2b552:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b556:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b55a:	5d                   	pop    rbp
   2b55b:	c3                   	ret    

000000000002b55c <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)>:
   2b55c:	55                   	push   rbp
   2b55d:	48 89 e5             	mov    rbp,rsp
   2b560:	48 83 ec 20          	sub    rsp,0x20
   2b564:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b568:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b56c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b570:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b574:	48 89 c7             	mov    rdi,rax
   2b577:	e8 c2 05 00 00       	call   2bb3e <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_max_size() const>
   2b57c:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b580:	0f 97 c0             	seta   al
   2b583:	84 c0                	test   al,al
   2b585:	74 05                	je     2b58c <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)+0x30>
   2b587:	e8 84 8b fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b58c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b590:	48 c1 e0 05          	shl    rax,0x5
   2b594:	48 89 c7             	mov    rdi,rax
   2b597:	e8 64 8e fd ff       	call   4400 <operator new(unsigned long)@plt>
   2b59c:	90                   	nop
   2b59d:	c9                   	leave  
   2b59e:	c3                   	ret    

000000000002b59f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   2b59f:	55                   	push   rbp
   2b5a0:	48 89 e5             	mov    rbp,rsp
   2b5a3:	41 54                	push   r12
   2b5a5:	53                   	push   rbx
   2b5a6:	48 83 ec 20          	sub    rsp,0x20
   2b5aa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b5ae:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b5b2:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b5b6:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b5ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b5be:	48 89 c7             	mov    rdi,rax
   2b5c1:	e8 8c 05 00 00       	call   2bb52 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2b5c6:	49 89 c4             	mov    r12,rax
   2b5c9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b5cd:	48 89 c7             	mov    rdi,rax
   2b5d0:	e8 7d 05 00 00       	call   2bb52 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2b5d5:	48 89 c3             	mov    rbx,rax
   2b5d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b5dc:	48 89 c7             	mov    rdi,rax
   2b5df:	e8 6e 05 00 00       	call   2bb52 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2b5e4:	48 89 c7             	mov    rdi,rax
   2b5e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b5eb:	48 89 c1             	mov    rcx,rax
   2b5ee:	4c 89 e2             	mov    rdx,r12
   2b5f1:	48 89 de             	mov    rsi,rbx
   2b5f4:	e8 67 05 00 00       	call   2bb60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2b5f9:	48 83 c4 20          	add    rsp,0x20
   2b5fd:	5b                   	pop    rbx
   2b5fe:	41 5c                	pop    r12
   2b600:	5d                   	pop    rbp
   2b601:	c3                   	ret    

000000000002b602 <std::vector<Tex, std::allocator<Tex> >::_S_max_size(std::allocator<Tex> const&)>:
   2b602:	55                   	push   rbp
   2b603:	48 89 e5             	mov    rbp,rsp
   2b606:	48 83 ec 30          	sub    rsp,0x30
   2b60a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b60e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b617:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b61b:	31 c0                	xor    eax,eax
   2b61d:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2b627:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b62b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b62f:	48 89 c7             	mov    rdi,rax
   2b632:	e8 9a 05 00 00       	call   2bbd1 <std::allocator_traits<std::allocator<Tex> >::max_size(std::allocator<Tex> const&)>
   2b637:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b63b:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b63f:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b643:	48 89 d6             	mov    rsi,rdx
   2b646:	48 89 c7             	mov    rdi,rax
   2b649:	e8 a7 97 ff ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b64e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b651:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2b655:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2b65e:	74 05                	je     2b665 <std::vector<Tex, std::allocator<Tex> >::_S_max_size(std::allocator<Tex> const&)+0x63>
   2b660:	e8 4b 8e fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b665:	c9                   	leave  
   2b666:	c3                   	ret    
   2b667:	90                   	nop

000000000002b668 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator() const>:
   2b668:	55                   	push   rbp
   2b669:	48 89 e5             	mov    rbp,rsp
   2b66c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b670:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b674:	5d                   	pop    rbp
   2b675:	c3                   	ret    

000000000002b676 <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)>:
   2b676:	55                   	push   rbp
   2b677:	48 89 e5             	mov    rbp,rsp
   2b67a:	48 83 ec 20          	sub    rsp,0x20
   2b67e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b682:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b686:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b68a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b68e:	48 89 c7             	mov    rdi,rax
   2b691:	e8 56 05 00 00       	call   2bbec <__gnu_cxx::new_allocator<Tex>::_M_max_size() const>
   2b696:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b69a:	0f 97 c0             	seta   al
   2b69d:	84 c0                	test   al,al
   2b69f:	74 05                	je     2b6a6 <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)+0x30>
   2b6a1:	e8 6a 8a fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b6a6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2b6aa:	48 89 d0             	mov    rax,rdx
   2b6ad:	48 01 c0             	add    rax,rax
   2b6b0:	48 01 d0             	add    rax,rdx
   2b6b3:	48 c1 e0 03          	shl    rax,0x3
   2b6b7:	48 89 c7             	mov    rdi,rax
   2b6ba:	e8 41 8d fd ff       	call   4400 <operator new(unsigned long)@plt>
   2b6bf:	90                   	nop
   2b6c0:	c9                   	leave  
   2b6c1:	c3                   	ret    

000000000002b6c2 <Tex* std::__relocate_a<Tex*, Tex*, std::allocator<Tex> >(Tex*, Tex*, Tex*, std::allocator<Tex>&)>:
   2b6c2:	55                   	push   rbp
   2b6c3:	48 89 e5             	mov    rbp,rsp
   2b6c6:	41 54                	push   r12
   2b6c8:	53                   	push   rbx
   2b6c9:	48 83 ec 20          	sub    rsp,0x20
   2b6cd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b6d1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b6d5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b6d9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b6dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b6e1:	48 89 c7             	mov    rdi,rax
   2b6e4:	e8 17 05 00 00       	call   2bc00 <Tex* std::__niter_base<Tex*>(Tex*)>
   2b6e9:	49 89 c4             	mov    r12,rax
   2b6ec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b6f0:	48 89 c7             	mov    rdi,rax
   2b6f3:	e8 08 05 00 00       	call   2bc00 <Tex* std::__niter_base<Tex*>(Tex*)>
   2b6f8:	48 89 c3             	mov    rbx,rax
   2b6fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b6ff:	48 89 c7             	mov    rdi,rax
   2b702:	e8 f9 04 00 00       	call   2bc00 <Tex* std::__niter_base<Tex*>(Tex*)>
   2b707:	48 89 c7             	mov    rdi,rax
   2b70a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b70e:	48 89 c1             	mov    rcx,rax
   2b711:	4c 89 e2             	mov    rdx,r12
   2b714:	48 89 de             	mov    rsi,rbx
   2b717:	e8 f2 04 00 00       	call   2bc0e <std::enable_if<std::__is_bitwise_relocatable<Tex, void>::value, Tex*>::type std::__relocate_a_1<Tex, Tex>(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   2b71c:	48 83 c4 20          	add    rsp,0x20
   2b720:	5b                   	pop    rbx
   2b721:	41 5c                	pop    r12
   2b723:	5d                   	pop    rbp
   2b724:	c3                   	ret    

000000000002b725 <std::vector<AABB, std::allocator<AABB> >::_S_max_size(std::allocator<AABB> const&)>:
   2b725:	55                   	push   rbp
   2b726:	48 89 e5             	mov    rbp,rsp
   2b729:	48 83 ec 30          	sub    rsp,0x30
   2b72d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b731:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b73a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b73e:	31 c0                	xor    eax,eax
   2b740:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2b74a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b74e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b752:	48 89 c7             	mov    rdi,rax
   2b755:	e8 38 05 00 00       	call   2bc92 <std::allocator_traits<std::allocator<AABB> >::max_size(std::allocator<AABB> const&)>
   2b75a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b75e:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b762:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b766:	48 89 d6             	mov    rsi,rdx
   2b769:	48 89 c7             	mov    rdi,rax
   2b76c:	e8 84 96 ff ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b771:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b774:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2b778:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2b781:	74 05                	je     2b788 <std::vector<AABB, std::allocator<AABB> >::_S_max_size(std::allocator<AABB> const&)+0x63>
   2b783:	e8 28 8d fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b788:	c9                   	leave  
   2b789:	c3                   	ret    

000000000002b78a <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator() const>:
   2b78a:	55                   	push   rbp
   2b78b:	48 89 e5             	mov    rbp,rsp
   2b78e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b792:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b796:	5d                   	pop    rbp
   2b797:	c3                   	ret    

000000000002b798 <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)>:
   2b798:	55                   	push   rbp
   2b799:	48 89 e5             	mov    rbp,rsp
   2b79c:	48 83 ec 20          	sub    rsp,0x20
   2b7a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b7a4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b7a8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b7ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b7b0:	48 89 c7             	mov    rdi,rax
   2b7b3:	e8 f4 04 00 00       	call   2bcac <__gnu_cxx::new_allocator<AABB>::_M_max_size() const>
   2b7b8:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b7bc:	0f 97 c0             	seta   al
   2b7bf:	84 c0                	test   al,al
   2b7c1:	74 05                	je     2b7c8 <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)+0x30>
   2b7c3:	e8 48 89 fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b7c8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2b7cc:	48 89 d0             	mov    rax,rdx
   2b7cf:	48 01 c0             	add    rax,rax
   2b7d2:	48 01 d0             	add    rax,rdx
   2b7d5:	48 c1 e0 03          	shl    rax,0x3
   2b7d9:	48 89 c7             	mov    rdi,rax
   2b7dc:	e8 1f 8c fd ff       	call   4400 <operator new(unsigned long)@plt>
   2b7e1:	90                   	nop
   2b7e2:	c9                   	leave  
   2b7e3:	c3                   	ret    

000000000002b7e4 <AABB* std::__relocate_a<AABB*, AABB*, std::allocator<AABB> >(AABB*, AABB*, AABB*, std::allocator<AABB>&)>:
   2b7e4:	55                   	push   rbp
   2b7e5:	48 89 e5             	mov    rbp,rsp
   2b7e8:	41 54                	push   r12
   2b7ea:	53                   	push   rbx
   2b7eb:	48 83 ec 20          	sub    rsp,0x20
   2b7ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b7f3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b7f7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b7fb:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b7ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b803:	48 89 c7             	mov    rdi,rax
   2b806:	e8 b5 04 00 00       	call   2bcc0 <AABB* std::__niter_base<AABB*>(AABB*)>
   2b80b:	49 89 c4             	mov    r12,rax
   2b80e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b812:	48 89 c7             	mov    rdi,rax
   2b815:	e8 a6 04 00 00       	call   2bcc0 <AABB* std::__niter_base<AABB*>(AABB*)>
   2b81a:	48 89 c3             	mov    rbx,rax
   2b81d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b821:	48 89 c7             	mov    rdi,rax
   2b824:	e8 97 04 00 00       	call   2bcc0 <AABB* std::__niter_base<AABB*>(AABB*)>
   2b829:	48 89 c7             	mov    rdi,rax
   2b82c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b830:	48 89 c1             	mov    rcx,rax
   2b833:	4c 89 e2             	mov    rdx,r12
   2b836:	48 89 de             	mov    rsi,rbx
   2b839:	e8 90 04 00 00       	call   2bcce <std::enable_if<std::__is_bitwise_relocatable<AABB, void>::value, AABB*>::type std::__relocate_a_1<AABB, AABB>(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   2b83e:	48 83 c4 20          	add    rsp,0x20
   2b842:	5b                   	pop    rbx
   2b843:	41 5c                	pop    r12
   2b845:	5d                   	pop    rbp
   2b846:	c3                   	ret    

000000000002b847 <std::vector<Mesh, std::allocator<Mesh> >::_S_max_size(std::allocator<Mesh> const&)>:
   2b847:	55                   	push   rbp
   2b848:	48 89 e5             	mov    rbp,rsp
   2b84b:	48 83 ec 30          	sub    rsp,0x30
   2b84f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b853:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b85c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b860:	31 c0                	xor    eax,eax
   2b862:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2b86c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b870:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b874:	48 89 c7             	mov    rdi,rax
   2b877:	e8 d6 04 00 00       	call   2bd52 <std::allocator_traits<std::allocator<Mesh> >::max_size(std::allocator<Mesh> const&)>
   2b87c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b880:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b884:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b888:	48 89 d6             	mov    rsi,rdx
   2b88b:	48 89 c7             	mov    rdi,rax
   2b88e:	e8 62 95 ff ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b893:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b896:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2b89a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2b8a3:	74 05                	je     2b8aa <std::vector<Mesh, std::allocator<Mesh> >::_S_max_size(std::allocator<Mesh> const&)+0x63>
   2b8a5:	e8 06 8c fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b8aa:	c9                   	leave  
   2b8ab:	c3                   	ret    

000000000002b8ac <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator() const>:
   2b8ac:	55                   	push   rbp
   2b8ad:	48 89 e5             	mov    rbp,rsp
   2b8b0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b8b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b8b8:	5d                   	pop    rbp
   2b8b9:	c3                   	ret    

000000000002b8ba <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)>:
   2b8ba:	55                   	push   rbp
   2b8bb:	48 89 e5             	mov    rbp,rsp
   2b8be:	48 83 ec 20          	sub    rsp,0x20
   2b8c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b8c6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b8ca:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b8ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b8d2:	48 89 c7             	mov    rdi,rax
   2b8d5:	e8 92 04 00 00       	call   2bd6c <__gnu_cxx::new_allocator<Mesh>::_M_max_size() const>
   2b8da:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b8de:	0f 97 c0             	seta   al
   2b8e1:	84 c0                	test   al,al
   2b8e3:	74 05                	je     2b8ea <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)+0x30>
   2b8e5:	e8 26 88 fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b8ea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b8ee:	48 c1 e0 02          	shl    rax,0x2
   2b8f2:	48 89 c7             	mov    rdi,rax
   2b8f5:	e8 06 8b fd ff       	call   4400 <operator new(unsigned long)@plt>
   2b8fa:	90                   	nop
   2b8fb:	c9                   	leave  
   2b8fc:	c3                   	ret    

000000000002b8fd <Mesh* std::__relocate_a<Mesh*, Mesh*, std::allocator<Mesh> >(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2b8fd:	55                   	push   rbp
   2b8fe:	48 89 e5             	mov    rbp,rsp
   2b901:	41 54                	push   r12
   2b903:	53                   	push   rbx
   2b904:	48 83 ec 20          	sub    rsp,0x20
   2b908:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b90c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b910:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b914:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b918:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b91c:	48 89 c7             	mov    rdi,rax
   2b91f:	e8 5c 04 00 00       	call   2bd80 <Mesh* std::__niter_base<Mesh*>(Mesh*)>
   2b924:	49 89 c4             	mov    r12,rax
   2b927:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b92b:	48 89 c7             	mov    rdi,rax
   2b92e:	e8 4d 04 00 00       	call   2bd80 <Mesh* std::__niter_base<Mesh*>(Mesh*)>
   2b933:	48 89 c3             	mov    rbx,rax
   2b936:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b93a:	48 89 c7             	mov    rdi,rax
   2b93d:	e8 3e 04 00 00       	call   2bd80 <Mesh* std::__niter_base<Mesh*>(Mesh*)>
   2b942:	48 89 c7             	mov    rdi,rax
   2b945:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b949:	48 89 c1             	mov    rcx,rax
   2b94c:	4c 89 e2             	mov    rdx,r12
   2b94f:	48 89 de             	mov    rsi,rbx
   2b952:	e8 37 04 00 00       	call   2bd8e <std::enable_if<std::__is_bitwise_relocatable<Mesh, void>::value, Mesh*>::type std::__relocate_a_1<Mesh, Mesh>(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   2b957:	48 83 c4 20          	add    rsp,0x20
   2b95b:	5b                   	pop    rbx
   2b95c:	41 5c                	pop    r12
   2b95e:	5d                   	pop    rbp
   2b95f:	c3                   	ret    

000000000002b960 <std::vector<Transform, std::allocator<Transform> >::_S_max_size(std::allocator<Transform> const&)>:
   2b960:	55                   	push   rbp
   2b961:	48 89 e5             	mov    rbp,rsp
   2b964:	48 83 ec 30          	sub    rsp,0x30
   2b968:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b96c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b975:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b979:	31 c0                	xor    eax,eax
   2b97b:	48 b8 8e e3 38 8e e3 38 8e 03 	movabs rax,0x38e38e38e38e38e
   2b985:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b989:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b98d:	48 89 c7             	mov    rdi,rax
   2b990:	e8 5c 04 00 00       	call   2bdf1 <std::allocator_traits<std::allocator<Transform> >::max_size(std::allocator<Transform> const&)>
   2b995:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b999:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b99d:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b9a1:	48 89 d6             	mov    rsi,rdx
   2b9a4:	48 89 c7             	mov    rdi,rax
   2b9a7:	e8 49 94 ff ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b9ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b9af:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2b9b3:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2b9bc:	74 05                	je     2b9c3 <std::vector<Transform, std::allocator<Transform> >::_S_max_size(std::allocator<Transform> const&)+0x63>
   2b9be:	e8 ed 8a fd ff       	call   44b0 <__stack_chk_fail@plt>
   2b9c3:	c9                   	leave  
   2b9c4:	c3                   	ret    
   2b9c5:	90                   	nop

000000000002b9c6 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator() const>:
   2b9c6:	55                   	push   rbp
   2b9c7:	48 89 e5             	mov    rbp,rsp
   2b9ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b9ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b9d2:	5d                   	pop    rbp
   2b9d3:	c3                   	ret    

000000000002b9d4 <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)>:
   2b9d4:	55                   	push   rbp
   2b9d5:	48 89 e5             	mov    rbp,rsp
   2b9d8:	48 83 ec 20          	sub    rsp,0x20
   2b9dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b9e0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b9e4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b9e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b9ec:	48 89 c7             	mov    rdi,rax
   2b9ef:	e8 18 04 00 00       	call   2be0c <__gnu_cxx::new_allocator<Transform>::_M_max_size() const>
   2b9f4:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b9f8:	0f 97 c0             	seta   al
   2b9fb:	84 c0                	test   al,al
   2b9fd:	74 05                	je     2ba04 <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)+0x30>
   2b9ff:	e8 0c 87 fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2ba04:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2ba08:	48 89 d0             	mov    rax,rdx
   2ba0b:	48 c1 e0 03          	shl    rax,0x3
   2ba0f:	48 01 d0             	add    rax,rdx
   2ba12:	48 c1 e0 02          	shl    rax,0x2
   2ba16:	48 89 c7             	mov    rdi,rax
   2ba19:	e8 e2 89 fd ff       	call   4400 <operator new(unsigned long)@plt>
   2ba1e:	90                   	nop
   2ba1f:	c9                   	leave  
   2ba20:	c3                   	ret    

000000000002ba21 <Transform* std::__relocate_a<Transform*, Transform*, std::allocator<Transform> >(Transform*, Transform*, Transform*, std::allocator<Transform>&)>:
   2ba21:	55                   	push   rbp
   2ba22:	48 89 e5             	mov    rbp,rsp
   2ba25:	41 54                	push   r12
   2ba27:	53                   	push   rbx
   2ba28:	48 83 ec 20          	sub    rsp,0x20
   2ba2c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2ba30:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2ba34:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2ba38:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2ba3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ba40:	48 89 c7             	mov    rdi,rax
   2ba43:	e8 d8 03 00 00       	call   2be20 <Transform* std::__niter_base<Transform*>(Transform*)>
   2ba48:	49 89 c4             	mov    r12,rax
   2ba4b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ba4f:	48 89 c7             	mov    rdi,rax
   2ba52:	e8 c9 03 00 00       	call   2be20 <Transform* std::__niter_base<Transform*>(Transform*)>
   2ba57:	48 89 c3             	mov    rbx,rax
   2ba5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2ba5e:	48 89 c7             	mov    rdi,rax
   2ba61:	e8 ba 03 00 00       	call   2be20 <Transform* std::__niter_base<Transform*>(Transform*)>
   2ba66:	48 89 c7             	mov    rdi,rax
   2ba69:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2ba6d:	48 89 c1             	mov    rcx,rax
   2ba70:	4c 89 e2             	mov    rdx,r12
   2ba73:	48 89 de             	mov    rsi,rbx
   2ba76:	e8 b3 03 00 00       	call   2be2e <std::enable_if<std::__is_bitwise_relocatable<Transform, void>::value, Transform*>::type std::__relocate_a_1<Transform, Transform>(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   2ba7b:	48 83 c4 20          	add    rsp,0x20
   2ba7f:	5b                   	pop    rbx
   2ba80:	41 5c                	pop    r12
   2ba82:	5d                   	pop    rbp
   2ba83:	c3                   	ret    

000000000002ba84 <std::allocator_traits<std::allocator<unsigned int> >::max_size(std::allocator<unsigned int> const&)>:
   2ba84:	55                   	push   rbp
   2ba85:	48 89 e5             	mov    rbp,rsp
   2ba88:	48 83 ec 10          	sub    rsp,0x10
   2ba8c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ba90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ba94:	48 89 c7             	mov    rdi,rax
   2ba97:	e8 18 04 00 00       	call   2beb4 <__gnu_cxx::new_allocator<unsigned int>::max_size() const>
   2ba9c:	c9                   	leave  
   2ba9d:	c3                   	ret    

000000000002ba9e <__gnu_cxx::new_allocator<unsigned int>::_M_max_size() const>:
   2ba9e:	55                   	push   rbp
   2ba9f:	48 89 e5             	mov    rbp,rsp
   2baa2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2baa6:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2bab0:	5d                   	pop    rbp
   2bab1:	c3                   	ret    

000000000002bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>:
   2bab2:	55                   	push   rbp
   2bab3:	48 89 e5             	mov    rbp,rsp
   2bab6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2baba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2babe:	5d                   	pop    rbp
   2babf:	c3                   	ret    

000000000002bac0 <std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   2bac0:	55                   	push   rbp
   2bac1:	48 89 e5             	mov    rbp,rsp
   2bac4:	48 83 ec 30          	sub    rsp,0x30
   2bac8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bacc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bad0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bad4:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bad8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2badc:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bae0:	48 c1 f8 02          	sar    rax,0x2
   2bae4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bae8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2baed:	7e 1f                	jle    2bb0e <std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)+0x4e>
   2baef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2baf3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bafb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2baff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bb03:	48 89 ce             	mov    rsi,rcx
   2bb06:	48 89 c7             	mov    rdi,rax
   2bb09:	e8 c2 8b fd ff       	call   46d0 <memmove@plt>
   2bb0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bb12:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bb1a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bb1e:	48 01 d0             	add    rax,rdx
   2bb21:	c9                   	leave  
   2bb22:	c3                   	ret    

000000000002bb23 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
   2bb23:	55                   	push   rbp
   2bb24:	48 89 e5             	mov    rbp,rsp
   2bb27:	48 83 ec 10          	sub    rsp,0x10
   2bb2b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bb2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bb33:	48 89 c7             	mov    rdi,rax
   2bb36:	e8 93 03 00 00       	call   2bece <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const>
   2bb3b:	c9                   	leave  
   2bb3c:	c3                   	ret    
   2bb3d:	90                   	nop

000000000002bb3e <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_max_size() const>:
   2bb3e:	55                   	push   rbp
   2bb3f:	48 89 e5             	mov    rbp,rsp
   2bb42:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bb46:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   2bb50:	5d                   	pop    rbp
   2bb51:	c3                   	ret    

000000000002bb52 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2bb52:	55                   	push   rbp
   2bb53:	48 89 e5             	mov    rbp,rsp
   2bb56:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bb5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bb5e:	5d                   	pop    rbp
   2bb5f:	c3                   	ret    

000000000002bb60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   2bb60:	55                   	push   rbp
   2bb61:	48 89 e5             	mov    rbp,rsp
   2bb64:	53                   	push   rbx
   2bb65:	48 83 ec 38          	sub    rsp,0x38
   2bb69:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2bb6d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2bb71:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2bb75:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   2bb79:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2bb7d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2bb81:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bb85:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   2bb89:	74 3c                	je     2bbc7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)+0x67>
   2bb8b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bb8f:	48 89 c7             	mov    rdi,rax
   2bb92:	e8 94 f6 ff ff       	call   2b22b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bb97:	48 89 c3             	mov    rbx,rax
   2bb9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bb9e:	48 89 c7             	mov    rdi,rax
   2bba1:	e8 85 f6 ff ff       	call   2b22b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bba6:	48 89 c1             	mov    rcx,rax
   2bba9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2bbad:	48 89 c2             	mov    rdx,rax
   2bbb0:	48 89 de             	mov    rsi,rbx
   2bbb3:	48 89 cf             	mov    rdi,rcx
   2bbb6:	e8 2d 03 00 00       	call   2bee8 <void std::__relocate_object_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2bbbb:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
   2bbc0:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   2bbc5:	eb ba                	jmp    2bb81 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)+0x21>
   2bbc7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bbcb:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2bbcf:	c9                   	leave  
   2bbd0:	c3                   	ret    

000000000002bbd1 <std::allocator_traits<std::allocator<Tex> >::max_size(std::allocator<Tex> const&)>:
   2bbd1:	55                   	push   rbp
   2bbd2:	48 89 e5             	mov    rbp,rsp
   2bbd5:	48 83 ec 10          	sub    rsp,0x10
   2bbd9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bbdd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bbe1:	48 89 c7             	mov    rdi,rax
   2bbe4:	e8 57 03 00 00       	call   2bf40 <__gnu_cxx::new_allocator<Tex>::max_size() const>
   2bbe9:	c9                   	leave  
   2bbea:	c3                   	ret    
   2bbeb:	90                   	nop

000000000002bbec <__gnu_cxx::new_allocator<Tex>::_M_max_size() const>:
   2bbec:	55                   	push   rbp
   2bbed:	48 89 e5             	mov    rbp,rsp
   2bbf0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bbf4:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2bbfe:	5d                   	pop    rbp
   2bbff:	c3                   	ret    

000000000002bc00 <Tex* std::__niter_base<Tex*>(Tex*)>:
   2bc00:	55                   	push   rbp
   2bc01:	48 89 e5             	mov    rbp,rsp
   2bc04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bc08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bc0c:	5d                   	pop    rbp
   2bc0d:	c3                   	ret    

000000000002bc0e <std::enable_if<std::__is_bitwise_relocatable<Tex, void>::value, Tex*>::type std::__relocate_a_1<Tex, Tex>(Tex*, Tex*, Tex*, std::allocator<Tex>&)>:
   2bc0e:	55                   	push   rbp
   2bc0f:	48 89 e5             	mov    rbp,rsp
   2bc12:	48 83 ec 30          	sub    rsp,0x30
   2bc16:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bc1a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bc1e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bc22:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bc26:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bc2a:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bc2e:	48 c1 f8 03          	sar    rax,0x3
   2bc32:	48 89 c2             	mov    rdx,rax
   2bc35:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2bc3f:	48 0f af c2          	imul   rax,rdx
   2bc43:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bc47:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bc4c:	7e 27                	jle    2bc75 <std::enable_if<std::__is_bitwise_relocatable<Tex, void>::value, Tex*>::type std::__relocate_a_1<Tex, Tex>(Tex*, Tex*, Tex*, std::allocator<Tex>&)+0x67>
   2bc4e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bc52:	48 89 d0             	mov    rax,rdx
   2bc55:	48 01 c0             	add    rax,rax
   2bc58:	48 01 d0             	add    rax,rdx
   2bc5b:	48 c1 e0 03          	shl    rax,0x3
   2bc5f:	48 89 c2             	mov    rdx,rax
   2bc62:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2bc66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bc6a:	48 89 ce             	mov    rsi,rcx
   2bc6d:	48 89 c7             	mov    rdi,rax
   2bc70:	e8 5b 8a fd ff       	call   46d0 <memmove@plt>
   2bc75:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bc79:	48 89 d0             	mov    rax,rdx
   2bc7c:	48 01 c0             	add    rax,rax
   2bc7f:	48 01 d0             	add    rax,rdx
   2bc82:	48 c1 e0 03          	shl    rax,0x3
   2bc86:	48 89 c2             	mov    rdx,rax
   2bc89:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bc8d:	48 01 d0             	add    rax,rdx
   2bc90:	c9                   	leave  
   2bc91:	c3                   	ret    

000000000002bc92 <std::allocator_traits<std::allocator<AABB> >::max_size(std::allocator<AABB> const&)>:
   2bc92:	55                   	push   rbp
   2bc93:	48 89 e5             	mov    rbp,rsp
   2bc96:	48 83 ec 10          	sub    rsp,0x10
   2bc9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bc9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bca2:	48 89 c7             	mov    rdi,rax
   2bca5:	e8 b0 02 00 00       	call   2bf5a <__gnu_cxx::new_allocator<AABB>::max_size() const>
   2bcaa:	c9                   	leave  
   2bcab:	c3                   	ret    

000000000002bcac <__gnu_cxx::new_allocator<AABB>::_M_max_size() const>:
   2bcac:	55                   	push   rbp
   2bcad:	48 89 e5             	mov    rbp,rsp
   2bcb0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bcb4:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2bcbe:	5d                   	pop    rbp
   2bcbf:	c3                   	ret    

000000000002bcc0 <AABB* std::__niter_base<AABB*>(AABB*)>:
   2bcc0:	55                   	push   rbp
   2bcc1:	48 89 e5             	mov    rbp,rsp
   2bcc4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bcc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bccc:	5d                   	pop    rbp
   2bccd:	c3                   	ret    

000000000002bcce <std::enable_if<std::__is_bitwise_relocatable<AABB, void>::value, AABB*>::type std::__relocate_a_1<AABB, AABB>(AABB*, AABB*, AABB*, std::allocator<AABB>&)>:
   2bcce:	55                   	push   rbp
   2bccf:	48 89 e5             	mov    rbp,rsp
   2bcd2:	48 83 ec 30          	sub    rsp,0x30
   2bcd6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bcda:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bcde:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bce2:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bce6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bcea:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bcee:	48 c1 f8 03          	sar    rax,0x3
   2bcf2:	48 89 c2             	mov    rdx,rax
   2bcf5:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2bcff:	48 0f af c2          	imul   rax,rdx
   2bd03:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bd07:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bd0c:	7e 27                	jle    2bd35 <std::enable_if<std::__is_bitwise_relocatable<AABB, void>::value, AABB*>::type std::__relocate_a_1<AABB, AABB>(AABB*, AABB*, AABB*, std::allocator<AABB>&)+0x67>
   2bd0e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bd12:	48 89 d0             	mov    rax,rdx
   2bd15:	48 01 c0             	add    rax,rax
   2bd18:	48 01 d0             	add    rax,rdx
   2bd1b:	48 c1 e0 03          	shl    rax,0x3
   2bd1f:	48 89 c2             	mov    rdx,rax
   2bd22:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2bd26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bd2a:	48 89 ce             	mov    rsi,rcx
   2bd2d:	48 89 c7             	mov    rdi,rax
   2bd30:	e8 9b 89 fd ff       	call   46d0 <memmove@plt>
   2bd35:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bd39:	48 89 d0             	mov    rax,rdx
   2bd3c:	48 01 c0             	add    rax,rax
   2bd3f:	48 01 d0             	add    rax,rdx
   2bd42:	48 c1 e0 03          	shl    rax,0x3
   2bd46:	48 89 c2             	mov    rdx,rax
   2bd49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bd4d:	48 01 d0             	add    rax,rdx
   2bd50:	c9                   	leave  
   2bd51:	c3                   	ret    

000000000002bd52 <std::allocator_traits<std::allocator<Mesh> >::max_size(std::allocator<Mesh> const&)>:
   2bd52:	55                   	push   rbp
   2bd53:	48 89 e5             	mov    rbp,rsp
   2bd56:	48 83 ec 10          	sub    rsp,0x10
   2bd5a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bd5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd62:	48 89 c7             	mov    rdi,rax
   2bd65:	e8 0a 02 00 00       	call   2bf74 <__gnu_cxx::new_allocator<Mesh>::max_size() const>
   2bd6a:	c9                   	leave  
   2bd6b:	c3                   	ret    

000000000002bd6c <__gnu_cxx::new_allocator<Mesh>::_M_max_size() const>:
   2bd6c:	55                   	push   rbp
   2bd6d:	48 89 e5             	mov    rbp,rsp
   2bd70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bd74:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2bd7e:	5d                   	pop    rbp
   2bd7f:	c3                   	ret    

000000000002bd80 <Mesh* std::__niter_base<Mesh*>(Mesh*)>:
   2bd80:	55                   	push   rbp
   2bd81:	48 89 e5             	mov    rbp,rsp
   2bd84:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bd88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd8c:	5d                   	pop    rbp
   2bd8d:	c3                   	ret    

000000000002bd8e <std::enable_if<std::__is_bitwise_relocatable<Mesh, void>::value, Mesh*>::type std::__relocate_a_1<Mesh, Mesh>(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2bd8e:	55                   	push   rbp
   2bd8f:	48 89 e5             	mov    rbp,rsp
   2bd92:	48 83 ec 30          	sub    rsp,0x30
   2bd96:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bd9a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bd9e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bda2:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bda6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bdaa:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bdae:	48 c1 f8 02          	sar    rax,0x2
   2bdb2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bdb6:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bdbb:	7e 1f                	jle    2bddc <std::enable_if<std::__is_bitwise_relocatable<Mesh, void>::value, Mesh*>::type std::__relocate_a_1<Mesh, Mesh>(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)+0x4e>
   2bdbd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bdc1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bdc9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2bdcd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bdd1:	48 89 ce             	mov    rsi,rcx
   2bdd4:	48 89 c7             	mov    rdi,rax
   2bdd7:	e8 f4 88 fd ff       	call   46d0 <memmove@plt>
   2bddc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bde0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bde8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bdec:	48 01 d0             	add    rax,rdx
   2bdef:	c9                   	leave  
   2bdf0:	c3                   	ret    

000000000002bdf1 <std::allocator_traits<std::allocator<Transform> >::max_size(std::allocator<Transform> const&)>:
   2bdf1:	55                   	push   rbp
   2bdf2:	48 89 e5             	mov    rbp,rsp
   2bdf5:	48 83 ec 10          	sub    rsp,0x10
   2bdf9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bdfd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be01:	48 89 c7             	mov    rdi,rax
   2be04:	e8 85 01 00 00       	call   2bf8e <__gnu_cxx::new_allocator<Transform>::max_size() const>
   2be09:	c9                   	leave  
   2be0a:	c3                   	ret    
   2be0b:	90                   	nop

000000000002be0c <__gnu_cxx::new_allocator<Transform>::_M_max_size() const>:
   2be0c:	55                   	push   rbp
   2be0d:	48 89 e5             	mov    rbp,rsp
   2be10:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2be14:	48 b8 8e e3 38 8e e3 38 8e 03 	movabs rax,0x38e38e38e38e38e
   2be1e:	5d                   	pop    rbp
   2be1f:	c3                   	ret    

000000000002be20 <Transform* std::__niter_base<Transform*>(Transform*)>:
   2be20:	55                   	push   rbp
   2be21:	48 89 e5             	mov    rbp,rsp
   2be24:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2be28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be2c:	5d                   	pop    rbp
   2be2d:	c3                   	ret    

000000000002be2e <std::enable_if<std::__is_bitwise_relocatable<Transform, void>::value, Transform*>::type std::__relocate_a_1<Transform, Transform>(Transform*, Transform*, Transform*, std::allocator<Transform>&)>:
   2be2e:	55                   	push   rbp
   2be2f:	48 89 e5             	mov    rbp,rsp
   2be32:	48 83 ec 30          	sub    rsp,0x30
   2be36:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2be3a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2be3e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2be42:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2be46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2be4a:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2be4e:	48 c1 f8 02          	sar    rax,0x2
   2be52:	48 89 c2             	mov    rdx,rax
   2be55:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   2be5f:	48 0f af c2          	imul   rax,rdx
   2be63:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2be67:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2be6c:	7e 28                	jle    2be96 <std::enable_if<std::__is_bitwise_relocatable<Transform, void>::value, Transform*>::type std::__relocate_a_1<Transform, Transform>(Transform*, Transform*, Transform*, std::allocator<Transform>&)+0x68>
   2be6e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2be72:	48 89 d0             	mov    rax,rdx
   2be75:	48 c1 e0 03          	shl    rax,0x3
   2be79:	48 01 d0             	add    rax,rdx
   2be7c:	48 c1 e0 02          	shl    rax,0x2
   2be80:	48 89 c2             	mov    rdx,rax
   2be83:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2be87:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2be8b:	48 89 ce             	mov    rsi,rcx
   2be8e:	48 89 c7             	mov    rdi,rax
   2be91:	e8 3a 88 fd ff       	call   46d0 <memmove@plt>
   2be96:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2be9a:	48 89 d0             	mov    rax,rdx
   2be9d:	48 c1 e0 03          	shl    rax,0x3
   2bea1:	48 01 d0             	add    rax,rdx
   2bea4:	48 c1 e0 02          	shl    rax,0x2
   2bea8:	48 89 c2             	mov    rdx,rax
   2beab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2beaf:	48 01 d0             	add    rax,rdx
   2beb2:	c9                   	leave  
   2beb3:	c3                   	ret    

000000000002beb4 <__gnu_cxx::new_allocator<unsigned int>::max_size() const>:
   2beb4:	55                   	push   rbp
   2beb5:	48 89 e5             	mov    rbp,rsp
   2beb8:	48 83 ec 10          	sub    rsp,0x10
   2bebc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bec0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bec4:	48 89 c7             	mov    rdi,rax
   2bec7:	e8 d2 fb ff ff       	call   2ba9e <__gnu_cxx::new_allocator<unsigned int>::_M_max_size() const>
   2becc:	c9                   	leave  
   2becd:	c3                   	ret    

000000000002bece <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const>:
   2bece:	55                   	push   rbp
   2becf:	48 89 e5             	mov    rbp,rsp
   2bed2:	48 83 ec 10          	sub    rsp,0x10
   2bed6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2beda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bede:	48 89 c7             	mov    rdi,rax
   2bee1:	e8 58 fc ff ff       	call   2bb3e <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_max_size() const>
   2bee6:	c9                   	leave  
   2bee7:	c3                   	ret    

000000000002bee8 <void std::__relocate_object_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   2bee8:	55                   	push   rbp
   2bee9:	48 89 e5             	mov    rbp,rsp
   2beec:	48 83 ec 20          	sub    rsp,0x20
   2bef0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bef4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2bef8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2befc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2bf00:	48 89 c7             	mov    rdi,rax
   2bf03:	e8 88 95 ff ff       	call   25490 <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bf08:	48 89 c2             	mov    rdx,rax
   2bf0b:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2bf0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bf13:	48 89 ce             	mov    rsi,rcx
   2bf16:	48 89 c7             	mov    rdi,rax
   2bf19:	e8 8a 00 00 00       	call   2bfa8 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2bf1e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2bf22:	48 89 c7             	mov    rdi,rax
   2bf25:	e8 01 f3 ff ff       	call   2b22b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bf2a:	48 89 c2             	mov    rdx,rax
   2bf2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bf31:	48 89 d6             	mov    rsi,rdx
   2bf34:	48 89 c7             	mov    rdi,rax
   2bf37:	e8 a6 dd ff ff       	call   29ce2 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2bf3c:	90                   	nop
   2bf3d:	c9                   	leave  
   2bf3e:	c3                   	ret    
   2bf3f:	90                   	nop

000000000002bf40 <__gnu_cxx::new_allocator<Tex>::max_size() const>:
   2bf40:	55                   	push   rbp
   2bf41:	48 89 e5             	mov    rbp,rsp
   2bf44:	48 83 ec 10          	sub    rsp,0x10
   2bf48:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf4c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf50:	48 89 c7             	mov    rdi,rax
   2bf53:	e8 94 fc ff ff       	call   2bbec <__gnu_cxx::new_allocator<Tex>::_M_max_size() const>
   2bf58:	c9                   	leave  
   2bf59:	c3                   	ret    

000000000002bf5a <__gnu_cxx::new_allocator<AABB>::max_size() const>:
   2bf5a:	55                   	push   rbp
   2bf5b:	48 89 e5             	mov    rbp,rsp
   2bf5e:	48 83 ec 10          	sub    rsp,0x10
   2bf62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf6a:	48 89 c7             	mov    rdi,rax
   2bf6d:	e8 3a fd ff ff       	call   2bcac <__gnu_cxx::new_allocator<AABB>::_M_max_size() const>
   2bf72:	c9                   	leave  
   2bf73:	c3                   	ret    

000000000002bf74 <__gnu_cxx::new_allocator<Mesh>::max_size() const>:
   2bf74:	55                   	push   rbp
   2bf75:	48 89 e5             	mov    rbp,rsp
   2bf78:	48 83 ec 10          	sub    rsp,0x10
   2bf7c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf84:	48 89 c7             	mov    rdi,rax
   2bf87:	e8 e0 fd ff ff       	call   2bd6c <__gnu_cxx::new_allocator<Mesh>::_M_max_size() const>
   2bf8c:	c9                   	leave  
   2bf8d:	c3                   	ret    

000000000002bf8e <__gnu_cxx::new_allocator<Transform>::max_size() const>:
   2bf8e:	55                   	push   rbp
   2bf8f:	48 89 e5             	mov    rbp,rsp
   2bf92:	48 83 ec 10          	sub    rsp,0x10
   2bf96:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf9e:	48 89 c7             	mov    rdi,rax
   2bfa1:	e8 66 fe ff ff       	call   2be0c <__gnu_cxx::new_allocator<Transform>::_M_max_size() const>
   2bfa6:	c9                   	leave  
   2bfa7:	c3                   	ret    

000000000002bfa8 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   2bfa8:	55                   	push   rbp
   2bfa9:	48 89 e5             	mov    rbp,rsp
   2bfac:	48 83 ec 20          	sub    rsp,0x20
   2bfb0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bfb4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2bfb8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2bfbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bfc0:	48 89 c7             	mov    rdi,rax
   2bfc3:	e8 19 00 00 00       	call   2bfe1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   2bfc8:	48 89 c2             	mov    rdx,rax
   2bfcb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2bfcf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfd3:	48 89 ce             	mov    rsi,rcx
   2bfd6:	48 89 c7             	mov    rdi,rax
   2bfd9:	e8 12 00 00 00       	call   2bff0 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2bfde:	90                   	nop
   2bfdf:	c9                   	leave  
   2bfe0:	c3                   	ret    

000000000002bfe1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>:
   2bfe1:	55                   	push   rbp
   2bfe2:	48 89 e5             	mov    rbp,rsp
   2bfe5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bfe9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfed:	5d                   	pop    rbp
   2bfee:	c3                   	ret    
   2bfef:	90                   	nop

000000000002bff0 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   2bff0:	55                   	push   rbp
   2bff1:	48 89 e5             	mov    rbp,rsp
   2bff4:	53                   	push   rbx
   2bff5:	48 83 ec 28          	sub    rsp,0x28
   2bff9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bffd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c001:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2c005:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c009:	48 89 c7             	mov    rdi,rax
   2c00c:	e8 d0 ff ff ff       	call   2bfe1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   2c011:	48 89 c3             	mov    rbx,rax
   2c014:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c018:	48 89 c6             	mov    rsi,rax
   2c01b:	bf 20 00 00 00       	mov    edi,0x20
   2c020:	e8 72 8b ff ff       	call   24b97 <operator new(unsigned long, void*)>
   2c025:	48 89 de             	mov    rsi,rbx
   2c028:	48 89 c7             	mov    rdi,rax
   2c02b:	e8 10 82 fd ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2c030:	90                   	nop
   2c031:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2c035:	c9                   	leave  
   2c036:	c3                   	ret    
   2c037:	90                   	nop

000000000002c038 <objl::Vector2::Vector2()>:
   2c038:	55                   	push   rbp
   2c039:	48 89 e5             	mov    rbp,rsp
   2c03c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c040:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c044:	66 0f ef c0          	pxor   xmm0,xmm0
   2c048:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c04c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c050:	66 0f ef c0          	pxor   xmm0,xmm0
   2c054:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c059:	90                   	nop
   2c05a:	5d                   	pop    rbp
   2c05b:	c3                   	ret    

000000000002c05c <objl::Vector2::Vector2(float, float)>:
   2c05c:	55                   	push   rbp
   2c05d:	48 89 e5             	mov    rbp,rsp
   2c060:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c064:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2c069:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   2c06e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c072:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c077:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c07b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c07f:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   2c084:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c089:	90                   	nop
   2c08a:	5d                   	pop    rbp
   2c08b:	c3                   	ret    

000000000002c08c <objl::Vector2::operator==(objl::Vector2 const&) const>:
   2c08c:	55                   	push   rbp
   2c08d:	48 89 e5             	mov    rbp,rsp
   2c090:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c094:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c098:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c09c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c0a0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c0a4:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c0a8:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0ab:	7a 28                	jp     2c0d5 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0ad:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0b0:	75 23                	jne    2c0d5 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0b6:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c0bb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c0bf:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c0c4:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0c7:	7a 0c                	jp     2c0d5 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0c9:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0cc:	75 07                	jne    2c0d5 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0ce:	b8 01 00 00 00       	mov    eax,0x1
   2c0d3:	eb 05                	jmp    2c0da <objl::Vector2::operator==(objl::Vector2 const&) const+0x4e>
   2c0d5:	b8 00 00 00 00       	mov    eax,0x0
   2c0da:	5d                   	pop    rbp
   2c0db:	c3                   	ret    

000000000002c0dc <objl::Vector2::operator!=(objl::Vector2 const&) const>:
   2c0dc:	55                   	push   rbp
   2c0dd:	48 89 e5             	mov    rbp,rsp
   2c0e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c0e4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c0e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0ec:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c0f0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c0f4:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c0f8:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0fb:	7a 21                	jp     2c11e <objl::Vector2::operator!=(objl::Vector2 const&) const+0x42>
   2c0fd:	0f 2f c1             	comiss xmm0,xmm1
   2c100:	75 1c                	jne    2c11e <objl::Vector2::operator!=(objl::Vector2 const&) const+0x42>
   2c102:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c106:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c10b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c10f:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c114:	0f 2e c1             	ucomiss xmm0,xmm1
   2c117:	7a 05                	jp     2c11e <objl::Vector2::operator!=(objl::Vector2 const&) const+0x42>
   2c119:	0f 2f c1             	comiss xmm0,xmm1
   2c11c:	74 07                	je     2c125 <objl::Vector2::operator!=(objl::Vector2 const&) const+0x49>
   2c11e:	b8 01 00 00 00       	mov    eax,0x1
   2c123:	eb 05                	jmp    2c12a <objl::Vector2::operator!=(objl::Vector2 const&) const+0x4e>
   2c125:	b8 00 00 00 00       	mov    eax,0x0
   2c12a:	5d                   	pop    rbp
   2c12b:	c3                   	ret    

000000000002c12c <objl::Vector2::operator+(objl::Vector2 const&) const>:
   2c12c:	55                   	push   rbp
   2c12d:	48 89 e5             	mov    rbp,rsp
   2c130:	48 83 ec 20          	sub    rsp,0x20
   2c134:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c138:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c13c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c145:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c149:	31 c0                	xor    eax,eax
   2c14b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c14f:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c154:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c158:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c15d:	0f 28 d1             	movaps xmm2,xmm1
   2c160:	f3 0f 58 d0          	addss  xmm2,xmm0
   2c164:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c168:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c16c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c170:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c174:	f3 0f 58 c8          	addss  xmm1,xmm0
   2c178:	66 0f 7e ca          	movd   edx,xmm1
   2c17c:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2c180:	0f 28 ca             	movaps xmm1,xmm2
   2c183:	66 0f 6e c2          	movd   xmm0,edx
   2c187:	48 89 c7             	mov    rdi,rax
   2c18a:	e8 cd fe ff ff       	call   2c05c <objl::Vector2::Vector2(float, float)>
   2c18f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c193:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c197:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c1a0:	74 05                	je     2c1a7 <objl::Vector2::operator+(objl::Vector2 const&) const+0x7b>
   2c1a2:	e8 09 83 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c1a7:	66 48 0f 6e c0       	movq   xmm0,rax
   2c1ac:	c9                   	leave  
   2c1ad:	c3                   	ret    

000000000002c1ae <objl::Vector2::operator-(objl::Vector2 const&) const>:
   2c1ae:	55                   	push   rbp
   2c1af:	48 89 e5             	mov    rbp,rsp
   2c1b2:	48 83 ec 20          	sub    rsp,0x20
   2c1b6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c1ba:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c1be:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c1c7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c1cb:	31 c0                	xor    eax,eax
   2c1cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c1d1:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c1d6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c1da:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c1df:	0f 28 d0             	movaps xmm2,xmm0
   2c1e2:	f3 0f 5c d1          	subss  xmm2,xmm1
   2c1e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c1ea:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c1ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c1f2:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c1f6:	f3 0f 5c c1          	subss  xmm0,xmm1
   2c1fa:	66 0f 7e c2          	movd   edx,xmm0
   2c1fe:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2c202:	0f 28 ca             	movaps xmm1,xmm2
   2c205:	66 0f 6e c2          	movd   xmm0,edx
   2c209:	48 89 c7             	mov    rdi,rax
   2c20c:	e8 4b fe ff ff       	call   2c05c <objl::Vector2::Vector2(float, float)>
   2c211:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c215:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c219:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c222:	74 05                	je     2c229 <objl::Vector2::operator-(objl::Vector2 const&) const+0x7b>
   2c224:	e8 87 82 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c229:	66 48 0f 6e c0       	movq   xmm0,rax
   2c22e:	c9                   	leave  
   2c22f:	c3                   	ret    

000000000002c230 <objl::Vector2::operator*(float const&) const>:
   2c230:	55                   	push   rbp
   2c231:	48 89 e5             	mov    rbp,rsp
   2c234:	48 83 ec 20          	sub    rsp,0x20
   2c238:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c23c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c240:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c249:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c24d:	31 c0                	xor    eax,eax
   2c24f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c253:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c258:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c25c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c260:	0f 28 d1             	movaps xmm2,xmm1
   2c263:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2c267:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c26b:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c26f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c273:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c277:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2c27b:	66 0f 7e ca          	movd   edx,xmm1
   2c27f:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2c283:	0f 28 ca             	movaps xmm1,xmm2
   2c286:	66 0f 6e c2          	movd   xmm0,edx
   2c28a:	48 89 c7             	mov    rdi,rax
   2c28d:	e8 ca fd ff ff       	call   2c05c <objl::Vector2::Vector2(float, float)>
   2c292:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c296:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c29a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c2a3:	74 05                	je     2c2aa <objl::Vector2::operator*(float const&) const+0x7a>
   2c2a5:	e8 06 82 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c2aa:	66 48 0f 6e c0       	movq   xmm0,rax
   2c2af:	c9                   	leave  
   2c2b0:	c3                   	ret    
   2c2b1:	90                   	nop

000000000002c2b2 <objl::Vector3::Vector3()>:
   2c2b2:	55                   	push   rbp
   2c2b3:	48 89 e5             	mov    rbp,rsp
   2c2b6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c2ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c2be:	66 0f ef c0          	pxor   xmm0,xmm0
   2c2c2:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c2c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c2ca:	66 0f ef c0          	pxor   xmm0,xmm0
   2c2ce:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c2d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c2d7:	66 0f ef c0          	pxor   xmm0,xmm0
   2c2db:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2c2e0:	90                   	nop
   2c2e1:	5d                   	pop    rbp
   2c2e2:	c3                   	ret    
   2c2e3:	90                   	nop

000000000002c2e4 <objl::Vector3::Vector3(float, float, float)>:
   2c2e4:	55                   	push   rbp
   2c2e5:	48 89 e5             	mov    rbp,rsp
   2c2e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c2ec:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2c2f1:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   2c2f6:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   2c2fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c2ff:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c304:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c308:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c30c:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   2c311:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c316:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c31a:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   2c31f:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2c324:	90                   	nop
   2c325:	5d                   	pop    rbp
   2c326:	c3                   	ret    
   2c327:	90                   	nop

000000000002c328 <objl::Vector3::operator==(objl::Vector3 const&) const>:
   2c328:	55                   	push   rbp
   2c329:	48 89 e5             	mov    rbp,rsp
   2c32c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c330:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c334:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c338:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c33c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c340:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c344:	0f 2e c1             	ucomiss xmm0,xmm1
   2c347:	7a 44                	jp     2c38d <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c349:	0f 2e c1             	ucomiss xmm0,xmm1
   2c34c:	75 3f                	jne    2c38d <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c34e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c352:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c357:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c35b:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c360:	0f 2e c1             	ucomiss xmm0,xmm1
   2c363:	7a 28                	jp     2c38d <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c365:	0f 2e c1             	ucomiss xmm0,xmm1
   2c368:	75 23                	jne    2c38d <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c36a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c36e:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c373:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c377:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c37c:	0f 2e c1             	ucomiss xmm0,xmm1
   2c37f:	7a 0c                	jp     2c38d <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c381:	0f 2e c1             	ucomiss xmm0,xmm1
   2c384:	75 07                	jne    2c38d <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c386:	b8 01 00 00 00       	mov    eax,0x1
   2c38b:	eb 05                	jmp    2c392 <objl::Vector3::operator==(objl::Vector3 const&) const+0x6a>
   2c38d:	b8 00 00 00 00       	mov    eax,0x0
   2c392:	5d                   	pop    rbp
   2c393:	c3                   	ret    

000000000002c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>:
   2c394:	55                   	push   rbp
   2c395:	48 89 e5             	mov    rbp,rsp
   2c398:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c39c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c3a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c3a4:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c3a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c3ac:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c3b0:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3b3:	7a 3d                	jp     2c3f2 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3b5:	0f 2f c1             	comiss xmm0,xmm1
   2c3b8:	75 38                	jne    2c3f2 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c3be:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c3c3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c3c7:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c3cc:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3cf:	7a 21                	jp     2c3f2 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3d1:	0f 2f c1             	comiss xmm0,xmm1
   2c3d4:	75 1c                	jne    2c3f2 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c3da:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c3df:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c3e3:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c3e8:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3eb:	7a 05                	jp     2c3f2 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3ed:	0f 2f c1             	comiss xmm0,xmm1
   2c3f0:	74 07                	je     2c3f9 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x65>
   2c3f2:	b8 01 00 00 00       	mov    eax,0x1
   2c3f7:	eb 05                	jmp    2c3fe <objl::Vector3::operator!=(objl::Vector3 const&) const+0x6a>
   2c3f9:	b8 00 00 00 00       	mov    eax,0x0
   2c3fe:	5d                   	pop    rbp
   2c3ff:	c3                   	ret    

000000000002c400 <objl::Vector3::operator+(objl::Vector3 const&) const>:
   2c400:	55                   	push   rbp
   2c401:	48 89 e5             	mov    rbp,rsp
   2c404:	48 83 ec 40          	sub    rsp,0x40
   2c408:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c40c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c410:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c419:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c41d:	31 c0                	xor    eax,eax
   2c41f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c423:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c428:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c42c:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c431:	0f 28 d1             	movaps xmm2,xmm1
   2c434:	f3 0f 58 d0          	addss  xmm2,xmm0
   2c438:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c43c:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c441:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c445:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c44a:	0f 28 d9             	movaps xmm3,xmm1
   2c44d:	f3 0f 58 d8          	addss  xmm3,xmm0
   2c451:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c455:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c459:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c45d:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c461:	f3 0f 58 c8          	addss  xmm1,xmm0
   2c465:	66 0f 7e ca          	movd   edx,xmm1
   2c469:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c46d:	0f 28 cb             	movaps xmm1,xmm3
   2c470:	66 0f 6e c2          	movd   xmm0,edx
   2c474:	48 89 c7             	mov    rdi,rax
   2c477:	e8 68 fe ff ff       	call   2c2e4 <objl::Vector3::Vector3(float, float, float)>
   2c47c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c480:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c484:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c487:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c48a:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c48e:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c493:	0f 28 c8             	movaps xmm1,xmm0
   2c496:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c49a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c4a3:	74 05                	je     2c4aa <objl::Vector3::operator+(objl::Vector3 const&) const+0xaa>
   2c4a5:	e8 06 80 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c4aa:	66 48 0f 6e c0       	movq   xmm0,rax
   2c4af:	c9                   	leave  
   2c4b0:	c3                   	ret    
   2c4b1:	90                   	nop

000000000002c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>:
   2c4b2:	55                   	push   rbp
   2c4b3:	48 89 e5             	mov    rbp,rsp
   2c4b6:	48 83 ec 40          	sub    rsp,0x40
   2c4ba:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c4be:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c4c2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c4cb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c4cf:	31 c0                	xor    eax,eax
   2c4d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c4d5:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c4da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c4de:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c4e3:	0f 28 d0             	movaps xmm2,xmm0
   2c4e6:	f3 0f 5c d1          	subss  xmm2,xmm1
   2c4ea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c4ee:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c4f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c4f7:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c4fc:	0f 28 d8             	movaps xmm3,xmm0
   2c4ff:	f3 0f 5c d9          	subss  xmm3,xmm1
   2c503:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c507:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c50b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c50f:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c513:	f3 0f 5c c1          	subss  xmm0,xmm1
   2c517:	66 0f 7e c2          	movd   edx,xmm0
   2c51b:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c51f:	0f 28 cb             	movaps xmm1,xmm3
   2c522:	66 0f 6e c2          	movd   xmm0,edx
   2c526:	48 89 c7             	mov    rdi,rax
   2c529:	e8 b6 fd ff ff       	call   2c2e4 <objl::Vector3::Vector3(float, float, float)>
   2c52e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c532:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c536:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c539:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c53c:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c540:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c545:	0f 28 c8             	movaps xmm1,xmm0
   2c548:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c54c:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c555:	74 05                	je     2c55c <objl::Vector3::operator-(objl::Vector3 const&) const+0xaa>
   2c557:	e8 54 7f fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c55c:	66 48 0f 6e c0       	movq   xmm0,rax
   2c561:	c9                   	leave  
   2c562:	c3                   	ret    
   2c563:	90                   	nop

000000000002c564 <objl::Vector3::operator*(float const&) const>:
   2c564:	55                   	push   rbp
   2c565:	48 89 e5             	mov    rbp,rsp
   2c568:	48 83 ec 40          	sub    rsp,0x40
   2c56c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c570:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c574:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c57d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c581:	31 c0                	xor    eax,eax
   2c583:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c587:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c58c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c590:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c594:	0f 28 d1             	movaps xmm2,xmm1
   2c597:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2c59b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c59f:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c5a4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c5a8:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c5ac:	0f 28 d9             	movaps xmm3,xmm1
   2c5af:	f3 0f 59 d8          	mulss  xmm3,xmm0
   2c5b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c5b7:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c5bb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c5bf:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c5c3:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2c5c7:	66 0f 7e ca          	movd   edx,xmm1
   2c5cb:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c5cf:	0f 28 cb             	movaps xmm1,xmm3
   2c5d2:	66 0f 6e c2          	movd   xmm0,edx
   2c5d6:	48 89 c7             	mov    rdi,rax
   2c5d9:	e8 06 fd ff ff       	call   2c2e4 <objl::Vector3::Vector3(float, float, float)>
   2c5de:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c5e2:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c5e6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c5e9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c5ec:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c5f0:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c5f5:	0f 28 c8             	movaps xmm1,xmm0
   2c5f8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c5fc:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c605:	74 05                	je     2c60c <objl::Vector3::operator*(float const&) const+0xa8>
   2c607:	e8 a4 7e fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c60c:	66 48 0f 6e c0       	movq   xmm0,rax
   2c611:	c9                   	leave  
   2c612:	c3                   	ret    
   2c613:	90                   	nop

000000000002c614 <objl::Vector3::operator/(float const&) const>:
   2c614:	55                   	push   rbp
   2c615:	48 89 e5             	mov    rbp,rsp
   2c618:	48 83 ec 40          	sub    rsp,0x40
   2c61c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c620:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c624:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c62d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c631:	31 c0                	xor    eax,eax
   2c633:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c637:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c63c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c640:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c644:	0f 28 d0             	movaps xmm2,xmm0
   2c647:	f3 0f 5e d1          	divss  xmm2,xmm1
   2c64b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c64f:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c654:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c658:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c65c:	0f 28 d8             	movaps xmm3,xmm0
   2c65f:	f3 0f 5e d9          	divss  xmm3,xmm1
   2c663:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c667:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c66b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c66f:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c673:	f3 0f 5e c1          	divss  xmm0,xmm1
   2c677:	66 0f 7e c2          	movd   edx,xmm0
   2c67b:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c67f:	0f 28 cb             	movaps xmm1,xmm3
   2c682:	66 0f 6e c2          	movd   xmm0,edx
   2c686:	48 89 c7             	mov    rdi,rax
   2c689:	e8 56 fc ff ff       	call   2c2e4 <objl::Vector3::Vector3(float, float, float)>
   2c68e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c692:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c696:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c699:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c69c:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c6a0:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c6a5:	0f 28 c8             	movaps xmm1,xmm0
   2c6a8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c6ac:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c6b5:	74 05                	je     2c6bc <objl::Vector3::operator/(float const&) const+0xa8>
   2c6b7:	e8 f4 7d fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c6bc:	66 48 0f 6e c0       	movq   xmm0,rax
   2c6c1:	c9                   	leave  
   2c6c2:	c3                   	ret    
   2c6c3:	90                   	nop

000000000002c6c4 <objl::Material::Material()>:
   2c6c4:	55                   	push   rbp
   2c6c5:	48 89 e5             	mov    rbp,rsp
   2c6c8:	48 83 ec 10          	sub    rsp,0x10
   2c6cc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c6d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c6d4:	48 89 c7             	mov    rdi,rax
   2c6d7:	e8 14 7f fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c6dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c6e0:	48 83 c0 20          	add    rax,0x20
   2c6e4:	48 89 c7             	mov    rdi,rax
   2c6e7:	e8 c6 fb ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   2c6ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c6f0:	48 83 c0 2c          	add    rax,0x2c
   2c6f4:	48 89 c7             	mov    rdi,rax
   2c6f7:	e8 b6 fb ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   2c6fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c700:	48 83 c0 38          	add    rax,0x38
   2c704:	48 89 c7             	mov    rdi,rax
   2c707:	e8 a6 fb ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   2c70c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c710:	48 83 c0 58          	add    rax,0x58
   2c714:	48 89 c7             	mov    rdi,rax
   2c717:	e8 d4 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c71c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c720:	48 83 c0 78          	add    rax,0x78
   2c724:	48 89 c7             	mov    rdi,rax
   2c727:	e8 c4 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c72c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c730:	48 05 98 00 00 00    	add    rax,0x98
   2c736:	48 89 c7             	mov    rdi,rax
   2c739:	e8 b2 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c73e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c742:	48 05 b8 00 00 00    	add    rax,0xb8
   2c748:	48 89 c7             	mov    rdi,rax
   2c74b:	e8 a0 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c750:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c754:	48 05 d8 00 00 00    	add    rax,0xd8
   2c75a:	48 89 c7             	mov    rdi,rax
   2c75d:	e8 8e 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c762:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c766:	48 05 f8 00 00 00    	add    rax,0xf8
   2c76c:	48 89 c7             	mov    rdi,rax
   2c76f:	e8 7c 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c774:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c778:	66 0f ef c0          	pxor   xmm0,xmm0
   2c77c:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   2c781:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c785:	66 0f ef c0          	pxor   xmm0,xmm0
   2c789:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   2c78e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c792:	66 0f ef c0          	pxor   xmm0,xmm0
   2c796:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   2c79b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c79f:	c7 40 50 00 00 00 00 	mov    DWORD PTR [rax+0x50],0x0
   2c7a6:	90                   	nop
   2c7a7:	c9                   	leave  
   2c7a8:	c3                   	ret    
   2c7a9:	90                   	nop

000000000002c7aa <objl::Mesh::Mesh()>:
   2c7aa:	55                   	push   rbp
   2c7ab:	48 89 e5             	mov    rbp,rsp
   2c7ae:	48 83 ec 10          	sub    rsp,0x10
   2c7b2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c7b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7ba:	48 89 c7             	mov    rdi,rax
   2c7bd:	e8 2e 7e fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c7c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7c6:	48 83 c0 20          	add    rax,0x20
   2c7ca:	48 89 c7             	mov    rdi,rax
   2c7cd:	e8 84 4a 00 00       	call   31256 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2c7d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7d6:	48 83 c0 38          	add    rax,0x38
   2c7da:	48 89 c7             	mov    rdi,rax
   2c7dd:	e8 9a 89 ff ff       	call   2517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2c7e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7e6:	48 83 c0 50          	add    rax,0x50
   2c7ea:	48 89 c7             	mov    rdi,rax
   2c7ed:	e8 d2 fe ff ff       	call   2c6c4 <objl::Material::Material()>
   2c7f2:	90                   	nop
   2c7f3:	c9                   	leave  
   2c7f4:	c3                   	ret    
   2c7f5:	90                   	nop

000000000002c7f6 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>:
   2c7f6:	55                   	push   rbp
   2c7f7:	48 89 e5             	mov    rbp,rsp
   2c7fa:	53                   	push   rbx
   2c7fb:	48 83 ec 28          	sub    rsp,0x28
   2c7ff:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c803:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c807:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2c80b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c80f:	48 89 c7             	mov    rdi,rax
   2c812:	e8 d9 7d fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c817:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c81b:	48 83 c0 20          	add    rax,0x20
   2c81f:	48 89 c7             	mov    rdi,rax
   2c822:	e8 2f 4a 00 00       	call   31256 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2c827:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c82b:	48 83 c0 38          	add    rax,0x38
   2c82f:	48 89 c7             	mov    rdi,rax
   2c832:	e8 45 89 ff ff       	call   2517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2c837:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c83b:	48 83 c0 50          	add    rax,0x50
   2c83f:	48 89 c7             	mov    rdi,rax
   2c842:	e8 7d fe ff ff       	call   2c6c4 <objl::Material::Material()>
   2c847:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c84b:	48 8d 50 20          	lea    rdx,[rax+0x20]
   2c84f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c853:	48 89 c6             	mov    rsi,rax
   2c856:	48 89 d7             	mov    rdi,rdx
   2c859:	e8 b2 5b 00 00       	call   32410 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   2c85e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c862:	48 8d 50 38          	lea    rdx,[rax+0x38]
   2c866:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c86a:	48 89 c6             	mov    rsi,rax
   2c86d:	48 89 d7             	mov    rdi,rdx
   2c870:	e8 bd 5e 00 00       	call   32732 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)>
   2c875:	eb 4a                	jmp    2c8c1 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)+0xcb>
   2c877:	48 89 c3             	mov    rbx,rax
   2c87a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c87e:	48 83 c0 50          	add    rax,0x50
   2c882:	48 89 c7             	mov    rdi,rax
   2c885:	e8 e8 49 00 00       	call   31272 <objl::Material::~Material()>
   2c88a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c88e:	48 83 c0 38          	add    rax,0x38
   2c892:	48 89 c7             	mov    rdi,rax
   2c895:	e8 22 a1 ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2c89a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c89e:	48 83 c0 20          	add    rax,0x20
   2c8a2:	48 89 c7             	mov    rdi,rax
   2c8a5:	e8 16 5b 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2c8aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c8ae:	48 89 c7             	mov    rdi,rax
   2c8b1:	e8 aa 79 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2c8b6:	48 89 d8             	mov    rax,rbx
   2c8b9:	48 89 c7             	mov    rdi,rax
   2c8bc:	e8 6f 7e fd ff       	call   4730 <_Unwind_Resume@plt>
   2c8c1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2c8c5:	c9                   	leave  
   2c8c6:	c3                   	ret    

000000000002c8c7 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>:
   2c8c7:	55                   	push   rbp
   2c8c8:	48 89 e5             	mov    rbp,rsp
   2c8cb:	48 83 ec 50          	sub    rsp,0x50
   2c8cf:	66 48 0f 7e c0       	movq   rax,xmm0
   2c8d4:	0f 28 e1             	movaps xmm4,xmm1
   2c8d7:	66 0f 6f ca          	movdqa xmm1,xmm2
   2c8db:	0f 28 c3             	movaps xmm0,xmm3
   2c8de:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2c8e2:	f3 0f 11 65 d8       	movss  DWORD PTR [rbp-0x28],xmm4
   2c8e7:	66 0f d6 4d c0       	movq   QWORD PTR [rbp-0x40],xmm1
   2c8ec:	f3 0f 11 45 c8       	movss  DWORD PTR [rbp-0x38],xmm0
   2c8f1:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c8fa:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c8fe:	31 c0                	xor    eax,eax
   2c900:	f3 0f 10 4d d0       	movss  xmm1,DWORD PTR [rbp-0x30]
   2c905:	f3 0f 10 45 c4       	movss  xmm0,DWORD PTR [rbp-0x3c]
   2c90a:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2c90e:	f3 0f 10 55 d4       	movss  xmm2,DWORD PTR [rbp-0x2c]
   2c913:	f3 0f 10 4d c0       	movss  xmm1,DWORD PTR [rbp-0x40]
   2c918:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2c91c:	0f 28 e0             	movaps xmm4,xmm0
   2c91f:	f3 0f 5c e1          	subss  xmm4,xmm1
   2c923:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   2c928:	f3 0f 10 45 c0       	movss  xmm0,DWORD PTR [rbp-0x40]
   2c92d:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2c931:	f3 0f 10 55 d0       	movss  xmm2,DWORD PTR [rbp-0x30]
   2c936:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2c93b:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2c93f:	0f 28 d8             	movaps xmm3,xmm0
   2c942:	f3 0f 5c d9          	subss  xmm3,xmm1
   2c946:	f3 0f 10 4d d4       	movss  xmm1,DWORD PTR [rbp-0x2c]
   2c94b:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   2c950:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2c954:	f3 0f 10 55 d8       	movss  xmm2,DWORD PTR [rbp-0x28]
   2c959:	f3 0f 10 4d c4       	movss  xmm1,DWORD PTR [rbp-0x3c]
   2c95e:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2c962:	f3 0f 5c c1          	subss  xmm0,xmm1
   2c966:	66 0f 7e c2          	movd   edx,xmm0
   2c96a:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c96e:	0f 28 d4             	movaps xmm2,xmm4
   2c971:	0f 28 cb             	movaps xmm1,xmm3
   2c974:	66 0f 6e c2          	movd   xmm0,edx
   2c978:	48 89 c7             	mov    rdi,rax
   2c97b:	e8 64 f9 ff ff       	call   2c2e4 <objl::Vector3::Vector3(float, float, float)>
   2c980:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c984:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c988:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c98b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c98e:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c992:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c997:	0f 28 c8             	movaps xmm1,xmm0
   2c99a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2c99e:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2c9a7:	74 05                	je     2c9ae <objl::math::CrossV3(objl::Vector3, objl::Vector3)+0xe7>
   2c9a9:	e8 02 7b fd ff       	call   44b0 <__stack_chk_fail@plt>
   2c9ae:	66 48 0f 6e c0       	movq   xmm0,rax
   2c9b3:	c9                   	leave  
   2c9b4:	c3                   	ret    

000000000002c9b5 <objl::math::MagnitudeV3(objl::Vector3)>:
   2c9b5:	55                   	push   rbp
   2c9b6:	48 89 e5             	mov    rbp,rsp
   2c9b9:	48 83 ec 20          	sub    rsp,0x20
   2c9bd:	66 48 0f 7e c0       	movq   rax,xmm0
   2c9c2:	0f 28 c1             	movaps xmm0,xmm1
   2c9c5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2c9c9:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   2c9ce:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2c9d1:	f3 0f 10 0d f3 04 01 00 	movss  xmm1,DWORD PTR [rip+0x104f3]        # 3cecc <NANO_SEC+0x1c04>
   2c9d9:	66 0f 6e c0          	movd   xmm0,eax
   2c9dd:	e8 9e 7c fd ff       	call   4680 <powf@plt>
   2c9e2:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   2c9e7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2c9ea:	f3 0f 10 0d da 04 01 00 	movss  xmm1,DWORD PTR [rip+0x104da]        # 3cecc <NANO_SEC+0x1c04>
   2c9f2:	66 0f 6e c0          	movd   xmm0,eax
   2c9f6:	e8 85 7c fd ff       	call   4680 <powf@plt>
   2c9fb:	0f 28 d0             	movaps xmm2,xmm0
   2c9fe:	f3 0f 58 55 ec       	addss  xmm2,DWORD PTR [rbp-0x14]
   2ca03:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   2ca08:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2ca0b:	f3 0f 10 0d b9 04 01 00 	movss  xmm1,DWORD PTR [rip+0x104b9]        # 3cecc <NANO_SEC+0x1c04>
   2ca13:	66 0f 6e c0          	movd   xmm0,eax
   2ca17:	e8 64 7c fd ff       	call   4680 <powf@plt>
   2ca1c:	f3 0f 58 45 ec       	addss  xmm0,DWORD PTR [rbp-0x14]
   2ca21:	66 0f 7e c0          	movd   eax,xmm0
   2ca25:	66 0f 6e c0          	movd   xmm0,eax
   2ca29:	e8 42 7d fd ff       	call   4770 <sqrtf@plt>
   2ca2e:	c9                   	leave  
   2ca2f:	c3                   	ret    

000000000002ca30 <objl::math::DotV3(objl::Vector3, objl::Vector3)>:
   2ca30:	55                   	push   rbp
   2ca31:	48 89 e5             	mov    rbp,rsp
   2ca34:	66 48 0f 7e c0       	movq   rax,xmm0
   2ca39:	0f 28 e1             	movaps xmm4,xmm1
   2ca3c:	66 0f 6f ca          	movdqa xmm1,xmm2
   2ca40:	0f 28 c3             	movaps xmm0,xmm3
   2ca43:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ca47:	f3 0f 11 65 f8       	movss  DWORD PTR [rbp-0x8],xmm4
   2ca4c:	66 0f d6 4d e0       	movq   QWORD PTR [rbp-0x20],xmm1
   2ca51:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2ca56:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   2ca5b:	f3 0f 10 45 e0       	movss  xmm0,DWORD PTR [rbp-0x20]
   2ca60:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2ca64:	f3 0f 10 55 f4       	movss  xmm2,DWORD PTR [rbp-0xc]
   2ca69:	f3 0f 10 45 e4       	movss  xmm0,DWORD PTR [rbp-0x1c]
   2ca6e:	f3 0f 59 c2          	mulss  xmm0,xmm2
   2ca72:	f3 0f 58 c8          	addss  xmm1,xmm0
   2ca76:	f3 0f 10 55 f8       	movss  xmm2,DWORD PTR [rbp-0x8]
   2ca7b:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2ca80:	f3 0f 59 c2          	mulss  xmm0,xmm2
   2ca84:	f3 0f 58 c1          	addss  xmm0,xmm1
   2ca88:	5d                   	pop    rbp
   2ca89:	c3                   	ret    

000000000002ca8a <objl::math::AngleBetweenV3(objl::Vector3, objl::Vector3)>:
   2ca8a:	55                   	push   rbp
   2ca8b:	48 89 e5             	mov    rbp,rsp
   2ca8e:	48 83 ec 40          	sub    rsp,0x40
   2ca92:	66 48 0f 7e c0       	movq   rax,xmm0
   2ca97:	0f 28 e1             	movaps xmm4,xmm1
   2ca9a:	66 0f 6f ca          	movdqa xmm1,xmm2
   2ca9e:	0f 28 c3             	movaps xmm0,xmm3
   2caa1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2caa5:	f3 0f 11 65 e8       	movss  DWORD PTR [rbp-0x18],xmm4
   2caaa:	66 0f d6 4d d0       	movq   QWORD PTR [rbp-0x30],xmm1
   2caaf:	f3 0f 11 45 d8       	movss  DWORD PTR [rbp-0x28],xmm0
   2cab4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   2cab8:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   2cabd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cac1:	f3 0f 10 4d e8       	movss  xmm1,DWORD PTR [rbp-0x18]
   2cac6:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cacb:	0f 28 d8             	movaps xmm3,xmm0
   2cace:	66 48 0f 6e c0       	movq   xmm0,rax
   2cad3:	e8 58 ff ff ff       	call   2ca30 <objl::math::DotV3(objl::Vector3, objl::Vector3)>
   2cad8:	66 0f 7e c0          	movd   eax,xmm0
   2cadc:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2cadf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cae3:	f3 0f 10 4d e8       	movss  xmm1,DWORD PTR [rbp-0x18]
   2cae8:	66 48 0f 6e c0       	movq   xmm0,rax
   2caed:	e8 c3 fe ff ff       	call   2c9b5 <objl::math::MagnitudeV3(objl::Vector3)>
   2caf2:	f3 0f 11 45 cc       	movss  DWORD PTR [rbp-0x34],xmm0
   2caf7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cafb:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   2cb00:	66 48 0f 6e c0       	movq   xmm0,rax
   2cb05:	e8 ab fe ff ff       	call   2c9b5 <objl::math::MagnitudeV3(objl::Vector3)>
   2cb0a:	f3 0f 10 4d cc       	movss  xmm1,DWORD PTR [rbp-0x34]
   2cb0f:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2cb13:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2cb18:	f3 0f 5e c1          	divss  xmm0,xmm1
   2cb1c:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   2cb21:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2cb24:	66 0f 6e c0          	movd   xmm0,eax
   2cb28:	e8 13 79 fd ff       	call   4440 <acosf@plt>
   2cb2d:	66 0f 7e c0          	movd   eax,xmm0
   2cb31:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2cb34:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2cb39:	c9                   	leave  
   2cb3a:	c3                   	ret    

000000000002cb3b <objl::math::ProjV3(objl::Vector3, objl::Vector3)>:
   2cb3b:	55                   	push   rbp
   2cb3c:	48 89 e5             	mov    rbp,rsp
   2cb3f:	48 83 ec 60          	sub    rsp,0x60
   2cb43:	66 48 0f 7e c0       	movq   rax,xmm0
   2cb48:	0f 28 e1             	movaps xmm4,xmm1
   2cb4b:	66 0f 6f ca          	movdqa xmm1,xmm2
   2cb4f:	0f 28 c3             	movaps xmm0,xmm3
   2cb52:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2cb56:	f3 0f 11 65 c8       	movss  DWORD PTR [rbp-0x38],xmm4
   2cb5b:	66 0f d6 4d b0       	movq   QWORD PTR [rbp-0x50],xmm1
   2cb60:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   2cb65:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cb6e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cb72:	31 c0                	xor    eax,eax
   2cb74:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2cb78:	f3 0f 10 4d b8       	movss  xmm1,DWORD PTR [rbp-0x48]
   2cb7d:	66 48 0f 6e c0       	movq   xmm0,rax
   2cb82:	e8 2e fe ff ff       	call   2c9b5 <objl::math::MagnitudeV3(objl::Vector3)>
   2cb87:	66 0f 7e c0          	movd   eax,xmm0
   2cb8b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2cb8e:	48 8d 55 ec          	lea    rdx,[rbp-0x14]
   2cb92:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   2cb96:	48 89 d6             	mov    rsi,rdx
   2cb99:	48 89 c7             	mov    rdi,rax
   2cb9c:	e8 73 fa ff ff       	call   2c614 <objl::Vector3::operator/(float const&) const>
   2cba1:	66 48 0f 7e c0       	movq   rax,xmm0
   2cba6:	0f 28 c1             	movaps xmm0,xmm1
   2cba9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2cbad:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2cbb2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2cbb6:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2cbbb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2cbbf:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2cbc4:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cbc9:	0f 28 d8             	movaps xmm3,xmm0
   2cbcc:	66 48 0f 6e c0       	movq   xmm0,rax
   2cbd1:	e8 5a fe ff ff       	call   2ca30 <objl::math::DotV3(objl::Vector3, objl::Vector3)>
   2cbd6:	66 0f 7e c0          	movd   eax,xmm0
   2cbda:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   2cbdd:	48 8d 55 dc          	lea    rdx,[rbp-0x24]
   2cbe1:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2cbe5:	48 89 d6             	mov    rsi,rdx
   2cbe8:	48 89 c7             	mov    rdi,rax
   2cbeb:	e8 74 f9 ff ff       	call   2c564 <objl::Vector3::operator*(float const&) const>
   2cbf0:	66 48 0f 7e c0       	movq   rax,xmm0
   2cbf5:	0f 28 c1             	movaps xmm0,xmm1
   2cbf8:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2cbfc:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2cc01:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2cc05:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2cc0a:	0f 28 c8             	movaps xmm1,xmm0
   2cc0d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2cc11:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2cc1a:	74 05                	je     2cc21 <objl::math::ProjV3(objl::Vector3, objl::Vector3)+0xe6>
   2cc1c:	e8 8f 78 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2cc21:	66 48 0f 6e c0       	movq   xmm0,rax
   2cc26:	c9                   	leave  
   2cc27:	c3                   	ret    

000000000002cc28 <objl::algorithm::operator*(float const&, objl::Vector3 const&)>:
   2cc28:	55                   	push   rbp
   2cc29:	48 89 e5             	mov    rbp,rsp
   2cc2c:	48 83 ec 40          	sub    rsp,0x40
   2cc30:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2cc34:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2cc38:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cc41:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cc45:	31 c0                	xor    eax,eax
   2cc47:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cc4b:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2cc50:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2cc54:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2cc58:	0f 28 d1             	movaps xmm2,xmm1
   2cc5b:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2cc5f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cc63:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2cc68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2cc6c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2cc70:	0f 28 d9             	movaps xmm3,xmm1
   2cc73:	f3 0f 59 d8          	mulss  xmm3,xmm0
   2cc77:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cc7b:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2cc7f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2cc83:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2cc87:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2cc8b:	66 0f 7e ca          	movd   edx,xmm1
   2cc8f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2cc93:	0f 28 cb             	movaps xmm1,xmm3
   2cc96:	66 0f 6e c2          	movd   xmm0,edx
   2cc9a:	48 89 c7             	mov    rdi,rax
   2cc9d:	e8 42 f6 ff ff       	call   2c2e4 <objl::Vector3::Vector3(float, float, float)>
   2cca2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cca6:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2ccaa:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2ccad:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2ccb0:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2ccb4:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2ccb9:	0f 28 c8             	movaps xmm1,xmm0
   2ccbc:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2ccc0:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2ccc9:	74 05                	je     2ccd0 <objl::algorithm::operator*(float const&, objl::Vector3 const&)+0xa8>
   2cccb:	e8 e0 77 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ccd0:	66 48 0f 6e c0       	movq   xmm0,rax
   2ccd5:	c9                   	leave  
   2ccd6:	c3                   	ret    

000000000002ccd7 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>:
   2ccd7:	55                   	push   rbp
   2ccd8:	48 89 e5             	mov    rbp,rsp
   2ccdb:	48 81 ec 90 00 00 00 	sub    rsp,0x90
   2cce2:	66 48 0f 7e c0       	movq   rax,xmm0
   2cce7:	44 0f 28 d1          	movaps xmm10,xmm1
   2cceb:	66 44 0f 6f ca       	movdqa xmm9,xmm2
   2ccf0:	44 0f 28 c3          	movaps xmm8,xmm3
   2ccf4:	66 0f 6f dc          	movdqa xmm3,xmm4
   2ccf8:	0f 28 d5             	movaps xmm2,xmm5
   2ccfb:	66 0f 6f ce          	movdqa xmm1,xmm6
   2ccff:	0f 28 c7             	movaps xmm0,xmm7
   2cd02:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2cd06:	f3 44 0f 11 55 a8    	movss  DWORD PTR [rbp-0x58],xmm10
   2cd0c:	66 44 0f d6 4d 90    	movq   QWORD PTR [rbp-0x70],xmm9
   2cd12:	f3 44 0f 11 45 98    	movss  DWORD PTR [rbp-0x68],xmm8
   2cd18:	66 0f d6 5d 80       	movq   QWORD PTR [rbp-0x80],xmm3
   2cd1d:	f3 0f 11 55 88       	movss  DWORD PTR [rbp-0x78],xmm2
   2cd22:	66 0f d6 8d 70 ff ff ff 	movq   QWORD PTR [rbp-0x90],xmm1
   2cd2a:	f3 0f 11 85 78 ff ff ff 	movss  DWORD PTR [rbp-0x88],xmm0
   2cd32:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cd3b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cd3f:	31 c0                	xor    eax,eax
   2cd41:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2cd45:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2cd49:	48 89 d6             	mov    rsi,rdx
   2cd4c:	48 89 c7             	mov    rdi,rax
   2cd4f:	e8 5e f7 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cd54:	66 48 0f 7e c0       	movq   rax,xmm0
   2cd59:	0f 28 c1             	movaps xmm0,xmm1
   2cd5c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2cd60:	f3 0f 11 45 d0       	movss  DWORD PTR [rbp-0x30],xmm0
   2cd65:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2cd69:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   2cd70:	48 89 d6             	mov    rsi,rdx
   2cd73:	48 89 c7             	mov    rdi,rax
   2cd76:	e8 37 f7 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cd7b:	66 48 0f 7e c0       	movq   rax,xmm0
   2cd80:	0f 28 c1             	movaps xmm0,xmm1
   2cd83:	48 89 45 d4          	mov    QWORD PTR [rbp-0x2c],rax
   2cd87:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   2cd8c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2cd90:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   2cd95:	48 8b 45 d4          	mov    rax,QWORD PTR [rbp-0x2c]
   2cd99:	f3 0f 10 4d dc       	movss  xmm1,DWORD PTR [rbp-0x24]
   2cd9e:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cda3:	0f 28 d8             	movaps xmm3,xmm0
   2cda6:	66 48 0f 6e c0       	movq   xmm0,rax
   2cdab:	e8 17 fb ff ff       	call   2c8c7 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2cdb0:	66 48 0f 7e c0       	movq   rax,xmm0
   2cdb5:	0f 28 c1             	movaps xmm0,xmm1
   2cdb8:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2cdbc:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   2cdc1:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2cdc5:	48 8d 45 90          	lea    rax,[rbp-0x70]
   2cdc9:	48 89 d6             	mov    rsi,rdx
   2cdcc:	48 89 c7             	mov    rdi,rax
   2cdcf:	e8 de f6 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cdd4:	66 48 0f 7e c0       	movq   rax,xmm0
   2cdd9:	0f 28 c1             	movaps xmm0,xmm1
   2cddc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2cde0:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2cde5:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2cde9:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   2cdf0:	48 89 d6             	mov    rsi,rdx
   2cdf3:	48 89 c7             	mov    rdi,rax
   2cdf6:	e8 b7 f6 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cdfb:	66 48 0f 7e c0       	movq   rax,xmm0
   2ce00:	0f 28 c1             	movaps xmm0,xmm1
   2ce03:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2ce07:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2ce0c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2ce10:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2ce15:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2ce19:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   2ce1e:	66 48 0f 6e d2       	movq   xmm2,rdx
   2ce23:	0f 28 d8             	movaps xmm3,xmm0
   2ce26:	66 48 0f 6e c0       	movq   xmm0,rax
   2ce2b:	e8 97 fa ff ff       	call   2c8c7 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2ce30:	66 48 0f 7e c0       	movq   rax,xmm0
   2ce35:	0f 28 c1             	movaps xmm0,xmm1
   2ce38:	48 89 45 bc          	mov    QWORD PTR [rbp-0x44],rax
   2ce3c:	f3 0f 11 45 c4       	movss  DWORD PTR [rbp-0x3c],xmm0
   2ce41:	48 8b 55 bc          	mov    rdx,QWORD PTR [rbp-0x44]
   2ce45:	f3 0f 10 45 c4       	movss  xmm0,DWORD PTR [rbp-0x3c]
   2ce4a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2ce4e:	f3 0f 10 4d b8       	movss  xmm1,DWORD PTR [rbp-0x48]
   2ce53:	66 48 0f 6e d2       	movq   xmm2,rdx
   2ce58:	0f 28 d8             	movaps xmm3,xmm0
   2ce5b:	66 48 0f 6e c0       	movq   xmm0,rax
   2ce60:	e8 cb fb ff ff       	call   2ca30 <objl::math::DotV3(objl::Vector3, objl::Vector3)>
   2ce65:	66 0f 7e c0          	movd   eax,xmm0
   2ce69:	66 0f ef c0          	pxor   xmm0,xmm0
   2ce6d:	66 0f 6e e0          	movd   xmm4,eax
   2ce71:	0f 2f e0             	comiss xmm4,xmm0
   2ce74:	0f 93 c0             	setae  al
   2ce77:	84 c0                	test   al,al
   2ce79:	74 07                	je     2ce82 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x1ab>
   2ce7b:	b8 01 00 00 00       	mov    eax,0x1
   2ce80:	eb 05                	jmp    2ce87 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x1b0>
   2ce82:	b8 00 00 00 00       	mov    eax,0x0
   2ce87:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2ce8b:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2ce94:	74 05                	je     2ce9b <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x1c4>
   2ce96:	e8 15 76 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ce9b:	c9                   	leave  
   2ce9c:	c3                   	ret    

000000000002ce9d <objl::algorithm::GenTriNormal(objl::Vector3, objl::Vector3, objl::Vector3)>:
   2ce9d:	55                   	push   rbp
   2ce9e:	48 89 e5             	mov    rbp,rsp
   2cea1:	48 83 c4 80          	add    rsp,0xffffffffffffff80
   2cea5:	66 48 0f 7e c0       	movq   rax,xmm0
   2ceaa:	0f 28 f9             	movaps xmm7,xmm1
   2cead:	66 0f 6f f2          	movdqa xmm6,xmm2
   2ceb1:	0f 28 d3             	movaps xmm2,xmm3
   2ceb4:	66 0f 6f cc          	movdqa xmm1,xmm4
   2ceb8:	0f 28 c5             	movaps xmm0,xmm5
   2cebb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2cebf:	f3 0f 11 7d b8       	movss  DWORD PTR [rbp-0x48],xmm7
   2cec4:	66 0f d6 75 a0       	movq   QWORD PTR [rbp-0x60],xmm6
   2cec9:	f3 0f 11 55 a8       	movss  DWORD PTR [rbp-0x58],xmm2
   2cece:	66 0f d6 4d 90       	movq   QWORD PTR [rbp-0x70],xmm1
   2ced3:	f3 0f 11 45 98       	movss  DWORD PTR [rbp-0x68],xmm0
   2ced8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cee1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cee5:	31 c0                	xor    eax,eax
   2cee7:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2ceeb:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ceef:	48 89 d6             	mov    rsi,rdx
   2cef2:	48 89 c7             	mov    rdi,rax
   2cef5:	e8 b8 f5 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cefa:	66 48 0f 7e c0       	movq   rax,xmm0
   2ceff:	0f 28 c1             	movaps xmm0,xmm1
   2cf02:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2cf06:	f3 0f 11 45 d0       	movss  DWORD PTR [rbp-0x30],xmm0
   2cf0b:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2cf0f:	48 8d 45 90          	lea    rax,[rbp-0x70]
   2cf13:	48 89 d6             	mov    rsi,rdx
   2cf16:	48 89 c7             	mov    rdi,rax
   2cf19:	e8 94 f5 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cf1e:	66 48 0f 7e c0       	movq   rax,xmm0
   2cf23:	0f 28 c1             	movaps xmm0,xmm1
   2cf26:	48 89 45 d4          	mov    QWORD PTR [rbp-0x2c],rax
   2cf2a:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   2cf2f:	48 8b 55 d4          	mov    rdx,QWORD PTR [rbp-0x2c]
   2cf33:	f3 0f 10 45 dc       	movss  xmm0,DWORD PTR [rbp-0x24]
   2cf38:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2cf3c:	f3 0f 10 4d d0       	movss  xmm1,DWORD PTR [rbp-0x30]
   2cf41:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cf46:	0f 28 d8             	movaps xmm3,xmm0
   2cf49:	66 48 0f 6e c0       	movq   xmm0,rax
   2cf4e:	e8 74 f9 ff ff       	call   2c8c7 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2cf53:	66 48 0f 7e c0       	movq   rax,xmm0
   2cf58:	0f 28 c1             	movaps xmm0,xmm1
   2cf5b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2cf5f:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2cf64:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cf68:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2cf6c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2cf6f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2cf72:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2cf76:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2cf7b:	0f 28 c8             	movaps xmm1,xmm0
   2cf7e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2cf82:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2cf8b:	74 05                	je     2cf92 <objl::algorithm::GenTriNormal(objl::Vector3, objl::Vector3, objl::Vector3)+0xf5>
   2cf8d:	e8 1e 75 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2cf92:	66 48 0f 6e c0       	movq   xmm0,rax
   2cf97:	c9                   	leave  
   2cf98:	c3                   	ret    

000000000002cf99 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>:
   2cf99:	55                   	push   rbp
   2cf9a:	48 89 e5             	mov    rbp,rsp
   2cf9d:	48 83 ec 70          	sub    rsp,0x70
   2cfa1:	66 48 0f 7e c0       	movq   rax,xmm0
   2cfa6:	44 0f 28 d1          	movaps xmm10,xmm1
   2cfaa:	66 44 0f 6f ca       	movdqa xmm9,xmm2
   2cfaf:	44 0f 28 c3          	movaps xmm8,xmm3
   2cfb3:	66 0f 6f dc          	movdqa xmm3,xmm4
   2cfb7:	0f 28 d5             	movaps xmm2,xmm5
   2cfba:	66 0f 6f ce          	movdqa xmm1,xmm6
   2cfbe:	0f 28 c7             	movaps xmm0,xmm7
   2cfc1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2cfc5:	f3 44 0f 11 55 c8    	movss  DWORD PTR [rbp-0x38],xmm10
   2cfcb:	66 44 0f d6 4d b0    	movq   QWORD PTR [rbp-0x50],xmm9
   2cfd1:	f3 44 0f 11 45 b8    	movss  DWORD PTR [rbp-0x48],xmm8
   2cfd7:	66 0f d6 5d a0       	movq   QWORD PTR [rbp-0x60],xmm3
   2cfdc:	f3 0f 11 55 a8       	movss  DWORD PTR [rbp-0x58],xmm2
   2cfe1:	66 0f d6 4d 90       	movq   QWORD PTR [rbp-0x70],xmm1
   2cfe6:	f3 0f 11 45 98       	movss  DWORD PTR [rbp-0x68],xmm0
   2cfeb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cff4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cff8:	31 c0                	xor    eax,eax
   2cffa:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
   2cffe:	f3 0f 10 5d 98       	movss  xmm3,DWORD PTR [rbp-0x68]
   2d003:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   2d007:	f3 0f 10 55 a8       	movss  xmm2,DWORD PTR [rbp-0x58]
   2d00c:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   2d010:	f3 0f 10 45 b8       	movss  xmm0,DWORD PTR [rbp-0x48]
   2d015:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d019:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d01e:	66 48 0f 6e f6       	movq   xmm6,rsi
   2d023:	0f 28 fb             	movaps xmm7,xmm3
   2d026:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d02b:	0f 28 ea             	movaps xmm5,xmm2
   2d02e:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d033:	0f 28 d8             	movaps xmm3,xmm0
   2d036:	66 48 0f 6e c0       	movq   xmm0,rax
   2d03b:	e8 97 fc ff ff       	call   2ccd7 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2d040:	84 c0                	test   al,al
   2d042:	0f 84 9b 00 00 00    	je     2d0e3 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14a>
   2d048:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
   2d04c:	f3 0f 10 5d 98       	movss  xmm3,DWORD PTR [rbp-0x68]
   2d051:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   2d055:	f3 0f 10 55 b8       	movss  xmm2,DWORD PTR [rbp-0x48]
   2d05a:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   2d05e:	f3 0f 10 45 a8       	movss  xmm0,DWORD PTR [rbp-0x58]
   2d063:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d067:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d06c:	66 48 0f 6e f6       	movq   xmm6,rsi
   2d071:	0f 28 fb             	movaps xmm7,xmm3
   2d074:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d079:	0f 28 ea             	movaps xmm5,xmm2
   2d07c:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d081:	0f 28 d8             	movaps xmm3,xmm0
   2d084:	66 48 0f 6e c0       	movq   xmm0,rax
   2d089:	e8 49 fc ff ff       	call   2ccd7 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2d08e:	84 c0                	test   al,al
   2d090:	74 51                	je     2d0e3 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14a>
   2d092:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
   2d096:	f3 0f 10 5d a8       	movss  xmm3,DWORD PTR [rbp-0x58]
   2d09b:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   2d09f:	f3 0f 10 55 b8       	movss  xmm2,DWORD PTR [rbp-0x48]
   2d0a4:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   2d0a8:	f3 0f 10 45 98       	movss  xmm0,DWORD PTR [rbp-0x68]
   2d0ad:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d0b1:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d0b6:	66 48 0f 6e f6       	movq   xmm6,rsi
   2d0bb:	0f 28 fb             	movaps xmm7,xmm3
   2d0be:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d0c3:	0f 28 ea             	movaps xmm5,xmm2
   2d0c6:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d0cb:	0f 28 d8             	movaps xmm3,xmm0
   2d0ce:	66 48 0f 6e c0       	movq   xmm0,rax
   2d0d3:	e8 ff fb ff ff       	call   2ccd7 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2d0d8:	84 c0                	test   al,al
   2d0da:	74 07                	je     2d0e3 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14a>
   2d0dc:	b8 01 00 00 00       	mov    eax,0x1
   2d0e1:	eb 05                	jmp    2d0e8 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14f>
   2d0e3:	b8 00 00 00 00       	mov    eax,0x0
   2d0e8:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
   2d0eb:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
   2d0ef:	83 f0 01             	xor    eax,0x1
   2d0f2:	84 c0                	test   al,al
   2d0f4:	74 0a                	je     2d100 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x167>
   2d0f6:	b8 00 00 00 00       	mov    eax,0x0
   2d0fb:	e9 c5 00 00 00       	jmp    2d1c5 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x22c>
   2d100:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
   2d104:	f3 0f 10 55 98       	movss  xmm2,DWORD PTR [rbp-0x68]
   2d109:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   2d10d:	f3 0f 10 45 a8       	movss  xmm0,DWORD PTR [rbp-0x58]
   2d112:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2d116:	f3 0f 10 4d b8       	movss  xmm1,DWORD PTR [rbp-0x48]
   2d11b:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d120:	0f 28 ea             	movaps xmm5,xmm2
   2d123:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d128:	0f 28 d8             	movaps xmm3,xmm0
   2d12b:	66 48 0f 6e c0       	movq   xmm0,rax
   2d130:	e8 68 fd ff ff       	call   2ce9d <objl::algorithm::GenTriNormal(objl::Vector3, objl::Vector3, objl::Vector3)>
   2d135:	66 48 0f 7e c0       	movq   rax,xmm0
   2d13a:	0f 28 c1             	movaps xmm0,xmm1
   2d13d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2d141:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2d146:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2d14a:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2d14f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d153:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d158:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d15d:	0f 28 d8             	movaps xmm3,xmm0
   2d160:	66 48 0f 6e c0       	movq   xmm0,rax
   2d165:	e8 d1 f9 ff ff       	call   2cb3b <objl::math::ProjV3(objl::Vector3, objl::Vector3)>
   2d16a:	66 48 0f 7e c0       	movq   rax,xmm0
   2d16f:	0f 28 c1             	movaps xmm0,xmm1
   2d172:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2d176:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2d17b:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2d17f:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   2d184:	66 48 0f 6e c0       	movq   xmm0,rax
   2d189:	e8 27 f8 ff ff       	call   2c9b5 <objl::math::MagnitudeV3(objl::Vector3)>
   2d18e:	66 0f 7e c0          	movd   eax,xmm0
   2d192:	66 0f ef c0          	pxor   xmm0,xmm0
   2d196:	66 0f 6e f0          	movd   xmm6,eax
   2d19a:	0f 2e f0             	ucomiss xmm6,xmm0
   2d19d:	0f 9b c2             	setnp  dl
   2d1a0:	b9 00 00 00 00       	mov    ecx,0x0
   2d1a5:	66 0f ef c0          	pxor   xmm0,xmm0
   2d1a9:	66 0f 6e f8          	movd   xmm7,eax
   2d1ad:	0f 2e f8             	ucomiss xmm7,xmm0
   2d1b0:	89 c8                	mov    eax,ecx
   2d1b2:	0f 44 c2             	cmove  eax,edx
   2d1b5:	84 c0                	test   al,al
   2d1b7:	74 07                	je     2d1c0 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x227>
   2d1b9:	b8 01 00 00 00       	mov    eax,0x1
   2d1be:	eb 05                	jmp    2d1c5 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x22c>
   2d1c0:	b8 00 00 00 00       	mov    eax,0x0
   2d1c5:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   2d1c9:	64 48 2b 3c 25 28 00 00 00 	sub    rdi,QWORD PTR fs:0x28
   2d1d2:	74 05                	je     2d1d9 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x240>
   2d1d4:	e8 d7 72 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2d1d9:	c9                   	leave  
   2d1da:	c3                   	ret    
   2d1db:	90                   	nop

000000000002d1dc <objl::Loader::Loader()>:
   2d1dc:	55                   	push   rbp
   2d1dd:	48 89 e5             	mov    rbp,rsp
   2d1e0:	48 83 ec 10          	sub    rsp,0x10
   2d1e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2d1e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d1ec:	48 89 c7             	mov    rdi,rax
   2d1ef:	e8 9e 46 00 00       	call   31892 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::vector()>
   2d1f4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d1f8:	48 83 c0 18          	add    rax,0x18
   2d1fc:	48 89 c7             	mov    rdi,rax
   2d1ff:	e8 52 40 00 00       	call   31256 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2d204:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d208:	48 83 c0 30          	add    rax,0x30
   2d20c:	48 89 c7             	mov    rdi,rax
   2d20f:	e8 68 7f ff ff       	call   2517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2d214:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d218:	48 83 c0 48          	add    rax,0x48
   2d21c:	48 89 c7             	mov    rdi,rax
   2d21f:	e8 c2 46 00 00       	call   318e6 <std::vector<objl::Material, std::allocator<objl::Material> >::vector()>
   2d224:	90                   	nop
   2d225:	c9                   	leave  
   2d226:	c3                   	ret    
   2d227:	90                   	nop

000000000002d228 <objl::Loader::~Loader()>:
   2d228:	55                   	push   rbp
   2d229:	48 89 e5             	mov    rbp,rsp
   2d22c:	48 83 ec 10          	sub    rsp,0x10
   2d230:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2d234:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d238:	48 89 c7             	mov    rdi,rax
   2d23b:	e8 2c 5a 00 00       	call   32c6c <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::clear()>
   2d240:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d244:	48 83 c0 48          	add    rax,0x48
   2d248:	48 89 c7             	mov    rdi,rax
   2d24b:	e8 d8 59 00 00       	call   32c28 <std::vector<objl::Material, std::allocator<objl::Material> >::~vector()>
   2d250:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d254:	48 83 c0 30          	add    rax,0x30
   2d258:	48 89 c7             	mov    rdi,rax
   2d25b:	e8 5c 97 ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2d260:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d264:	48 83 c0 18          	add    rax,0x18
   2d268:	48 89 c7             	mov    rdi,rax
   2d26b:	e8 50 51 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2d270:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d274:	48 89 c7             	mov    rdi,rax
   2d277:	e8 c6 58 00 00       	call   32b42 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::~vector()>
   2d27c:	90                   	nop
   2d27d:	c9                   	leave  
   2d27e:	c3                   	ret    
   2d27f:	90                   	nop

000000000002d280 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   2d280:	55                   	push   rbp
   2d281:	48 89 e5             	mov    rbp,rsp
   2d284:	41 55                	push   r13
   2d286:	41 54                	push   r12
   2d288:	53                   	push   rbx
   2d289:	48 81 ec 98 0a 00 00 	sub    rsp,0xa98
   2d290:	48 89 bd 58 f5 ff ff 	mov    QWORD PTR [rbp-0xaa8],rdi
   2d297:	48 89 b5 50 f5 ff ff 	mov    QWORD PTR [rbp-0xab0],rsi
   2d29e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2d2a7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2d2ab:	31 c0                	xor    eax,eax
   2d2ad:	48 8b 85 50 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab0]
   2d2b4:	48 89 c7             	mov    rdi,rax
   2d2b7:	e8 f4 6f fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   2d2bc:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   2d2c0:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d2c7:	48 8b b5 50 f5 ff ff 	mov    rsi,QWORD PTR [rbp-0xab0]
   2d2ce:	b9 04 00 00 00       	mov    ecx,0x4
   2d2d3:	48 89 c7             	mov    rdi,rax
   2d2d6:	e8 45 71 fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   2d2db:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d2e2:	48 8d 35 0d fb 00 00 	lea    rsi,[rip+0xfb0d]        # 3cdf6 <NANO_SEC+0x1b2e>
   2d2e9:	48 89 c7             	mov    rdi,rax
   2d2ec:	e8 a0 59 00 00       	call   32c91 <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d2f1:	89 c3                	mov    ebx,eax
   2d2f3:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d2fa:	48 89 c7             	mov    rdi,rax
   2d2fd:	e8 5e 6f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d302:	84 db                	test   bl,bl
   2d304:	74 0a                	je     2d310 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x90>
   2d306:	bb 00 00 00 00       	mov    ebx,0x0
   2d30b:	e9 b8 14 00 00       	jmp    2e7c8 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1548>
   2d310:	48 8b 8d 50 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xab0]
   2d317:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d31e:	ba 08 00 00 00       	mov    edx,0x8
   2d323:	48 89 ce             	mov    rsi,rcx
   2d326:	48 89 c7             	mov    rdi,rax
   2d329:	e8 92 73 fd ff       	call   46c0 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
   2d32e:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d335:	48 89 c7             	mov    rdi,rax
   2d338:	e8 73 73 fd ff       	call   46b0 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@plt>
   2d33d:	83 f0 01             	xor    eax,0x1
   2d340:	84 c0                	test   al,al
   2d342:	74 0a                	je     2d34e <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xce>
   2d344:	bb 00 00 00 00       	mov    ebx,0x0
   2d349:	e9 6b 14 00 00       	jmp    2e7b9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1539>
   2d34e:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d355:	48 89 c7             	mov    rdi,rax
   2d358:	e8 0f 59 00 00       	call   32c6c <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::clear()>
   2d35d:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d364:	48 83 c0 18          	add    rax,0x18
   2d368:	48 89 c7             	mov    rdi,rax
   2d36b:	e8 4a 59 00 00       	call   32cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2d370:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d377:	48 83 c0 30          	add    rax,0x30
   2d37b:	48 89 c7             	mov    rdi,rax
   2d37e:	e8 5d 59 00 00       	call   32ce0 <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   2d383:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2d38a:	48 89 c7             	mov    rdi,rax
   2d38d:	e8 a8 45 00 00       	call   3193a <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::vector()>
   2d392:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2d399:	48 89 c7             	mov    rdi,rax
   2d39c:	e8 ed 45 00 00       	call   3198e <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::vector()>
   2d3a1:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2d3a8:	48 89 c7             	mov    rdi,rax
   2d3ab:	e8 8a 45 00 00       	call   3193a <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::vector()>
   2d3b0:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2d3b7:	48 89 c7             	mov    rdi,rax
   2d3ba:	e8 97 3e 00 00       	call   31256 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2d3bf:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2d3c6:	48 89 c7             	mov    rdi,rax
   2d3c9:	e8 ae 7d ff ff       	call   2517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2d3ce:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2d3d5:	48 89 c7             	mov    rdi,rax
   2d3d8:	e8 61 7c ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2d3dd:	c6 85 63 f5 ff ff 00 	mov    BYTE PTR [rbp-0xa9d],0x0
   2d3e4:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d3eb:	48 89 c7             	mov    rdi,rax
   2d3ee:	e8 fd 71 fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2d3f3:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2d3fa:	48 89 c7             	mov    rdi,rax
   2d3fd:	e8 a8 f3 ff ff       	call   2c7aa <objl::Mesh::Mesh()>
   2d402:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2d409:	48 89 c7             	mov    rdi,rax
   2d40c:	e8 df 71 fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2d411:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d418:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d41f:	48 89 d6             	mov    rsi,rdx
   2d422:	48 89 c7             	mov    rdi,rax
   2d425:	e8 66 6c fd ff       	call   4090 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
   2d42a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2d42d:	48 83 ea 18          	sub    rdx,0x18
   2d431:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   2d434:	48 01 d0             	add    rax,rdx
   2d437:	48 89 c7             	mov    rdi,rax
   2d43a:	e8 01 71 fd ff       	call   4540 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>
   2d43f:	84 c0                	test   al,al
   2d441:	0f 84 8a 10 00 00    	je     2e4d1 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1251>
   2d447:	bb 00 00 00 00       	mov    ebx,0x0
   2d44c:	41 bc 00 00 00 00    	mov    r12d,0x0
   2d452:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d459:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d460:	48 89 d6             	mov    rsi,rdx
   2d463:	48 89 c7             	mov    rdi,rax
   2d466:	e8 c3 42 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d46b:	bb 01 00 00 00       	mov    ebx,0x1
   2d470:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d477:	48 8d 35 7d f9 00 00 	lea    rsi,[rip+0xf97d]        # 3cdfb <NANO_SEC+0x1b33>
   2d47e:	48 89 c7             	mov    rdi,rax
   2d481:	e8 43 8e ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d486:	84 c0                	test   al,al
   2d488:	75 54                	jne    2d4de <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x25e>
   2d48a:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d491:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d498:	48 89 d6             	mov    rsi,rdx
   2d49b:	48 89 c7             	mov    rdi,rax
   2d49e:	e8 8b 42 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d4a3:	41 bc 01 00 00 00    	mov    r12d,0x1
   2d4a9:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d4b0:	48 8d 35 46 f9 00 00 	lea    rsi,[rip+0xf946]        # 3cdfd <NANO_SEC+0x1b35>
   2d4b7:	48 89 c7             	mov    rdi,rax
   2d4ba:	e8 0a 8e ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d4bf:	84 c0                	test   al,al
   2d4c1:	75 1b                	jne    2d4de <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x25e>
   2d4c3:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2d4ca:	be 00 00 00 00       	mov    esi,0x0
   2d4cf:	48 89 c7             	mov    rdi,rax
   2d4d2:	e8 09 73 fd ff       	call   47e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@plt>
   2d4d7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2d4da:	3c 67                	cmp    al,0x67
   2d4dc:	75 08                	jne    2d4e6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x266>
   2d4de:	41 bd 01 00 00 00    	mov    r13d,0x1
   2d4e4:	eb 06                	jmp    2d4ec <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x26c>
   2d4e6:	41 bd 00 00 00 00    	mov    r13d,0x0
   2d4ec:	45 84 e4             	test   r12b,r12b
   2d4ef:	74 0f                	je     2d500 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x280>
   2d4f1:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d4f8:	48 89 c7             	mov    rdi,rax
   2d4fb:	e8 60 6d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d500:	84 db                	test   bl,bl
   2d502:	74 0f                	je     2d513 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x293>
   2d504:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d50b:	48 89 c7             	mov    rdi,rax
   2d50e:	e8 4d 6d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d513:	45 84 ed             	test   r13b,r13b
   2d516:	0f 84 6c 03 00 00    	je     2d888 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x608>
   2d51c:	0f b6 85 63 f5 ff ff 	movzx  eax,BYTE PTR [rbp-0xa9d]
   2d523:	83 f0 01             	xor    eax,0x1
   2d526:	84 c0                	test   al,al
   2d528:	0f 84 1e 01 00 00    	je     2d64c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3cc>
   2d52e:	c6 85 63 f5 ff ff 01 	mov    BYTE PTR [rbp-0xa9d],0x1
   2d535:	bb 00 00 00 00       	mov    ebx,0x0
   2d53a:	41 bc 00 00 00 00    	mov    r12d,0x0
   2d540:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d547:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d54e:	48 89 d6             	mov    rsi,rdx
   2d551:	48 89 c7             	mov    rdi,rax
   2d554:	e8 d5 41 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d559:	bb 01 00 00 00       	mov    ebx,0x1
   2d55e:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d565:	48 8d 35 8f f8 00 00 	lea    rsi,[rip+0xf88f]        # 3cdfb <NANO_SEC+0x1b33>
   2d56c:	48 89 c7             	mov    rdi,rax
   2d56f:	e8 55 8d ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d574:	84 c0                	test   al,al
   2d576:	75 39                	jne    2d5b1 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x331>
   2d578:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d57f:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d586:	48 89 d6             	mov    rsi,rdx
   2d589:	48 89 c7             	mov    rdi,rax
   2d58c:	e8 9d 41 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d591:	41 bc 01 00 00 00    	mov    r12d,0x1
   2d597:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d59e:	48 8d 35 58 f8 00 00 	lea    rsi,[rip+0xf858]        # 3cdfd <NANO_SEC+0x1b35>
   2d5a5:	48 89 c7             	mov    rdi,rax
   2d5a8:	e8 1c 8d ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d5ad:	84 c0                	test   al,al
   2d5af:	74 08                	je     2d5b9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x339>
   2d5b1:	41 bd 01 00 00 00    	mov    r13d,0x1
   2d5b7:	eb 06                	jmp    2d5bf <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x33f>
   2d5b9:	41 bd 00 00 00 00    	mov    r13d,0x0
   2d5bf:	45 84 e4             	test   r12b,r12b
   2d5c2:	74 0f                	je     2d5d3 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x353>
   2d5c4:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d5cb:	48 89 c7             	mov    rdi,rax
   2d5ce:	e8 8d 6c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d5d3:	84 db                	test   bl,bl
   2d5d5:	74 0f                	je     2d5e6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x366>
   2d5d7:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d5de:	48 89 c7             	mov    rdi,rax
   2d5e1:	e8 7a 6c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d5e6:	45 84 ed             	test   r13b,r13b
   2d5e9:	74 46                	je     2d631 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3b1>
   2d5eb:	48 8d 85 d0 f6 ff ff 	lea    rax,[rbp-0x930]
   2d5f2:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d5f9:	48 89 d6             	mov    rsi,rdx
   2d5fc:	48 89 c7             	mov    rdi,rax
   2d5ff:	e8 dc 3f 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d604:	48 8d 95 d0 f6 ff ff 	lea    rdx,[rbp-0x930]
   2d60b:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d612:	48 89 d6             	mov    rsi,rdx
   2d615:	48 89 c7             	mov    rdi,rax
   2d618:	e8 03 6f fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2d61d:	48 8d 85 d0 f6 ff ff 	lea    rax,[rbp-0x930]
   2d624:	48 89 c7             	mov    rdi,rax
   2d627:	e8 34 6c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d62c:	e9 57 02 00 00       	jmp    2d888 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x608>
   2d631:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d638:	48 8d 35 c0 f7 00 00 	lea    rsi,[rip+0xf7c0]        # 3cdff <NANO_SEC+0x1b37>
   2d63f:	48 89 c7             	mov    rdi,rax
   2d642:	e8 99 6f fd ff       	call   45e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   2d647:	e9 3c 02 00 00       	jmp    2d888 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x608>
   2d64c:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2d653:	48 89 c7             	mov    rdi,rax
   2d656:	e8 67 58 00 00       	call   32ec2 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2d65b:	83 f0 01             	xor    eax,0x1
   2d65e:	84 c0                	test   al,al
   2d660:	74 1d                	je     2d67f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3ff>
   2d662:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2d669:	48 89 c7             	mov    rdi,rax
   2d66c:	e8 b5 58 00 00       	call   32f26 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2d671:	83 f0 01             	xor    eax,0x1
   2d674:	84 c0                	test   al,al
   2d676:	74 07                	je     2d67f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3ff>
   2d678:	b8 01 00 00 00       	mov    eax,0x1
   2d67d:	eb 05                	jmp    2d684 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x404>
   2d67f:	b8 00 00 00 00       	mov    eax,0x0
   2d684:	84 c0                	test   al,al
   2d686:	0f 84 ed 00 00 00    	je     2d779 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4f9>
   2d68c:	48 8d 95 10 f6 ff ff 	lea    rdx,[rbp-0x9f0]
   2d693:	48 8d 8d f0 f5 ff ff 	lea    rcx,[rbp-0xa10]
   2d69a:	48 8d 85 80 f9 ff ff 	lea    rax,[rbp-0x680]
   2d6a1:	48 89 ce             	mov    rsi,rcx
   2d6a4:	48 89 c7             	mov    rdi,rax
   2d6a7:	e8 4a f1 ff ff       	call   2c7f6 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>
   2d6ac:	48 8d 95 80 f9 ff ff 	lea    rdx,[rbp-0x680]
   2d6b3:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2d6ba:	48 89 d6             	mov    rsi,rdx
   2d6bd:	48 89 c7             	mov    rdi,rax
   2d6c0:	e8 ad 44 00 00       	call   31b72 <objl::Mesh::operator=(objl::Mesh&&)>
   2d6c5:	48 8d 85 80 f9 ff ff 	lea    rax,[rbp-0x680]
   2d6cc:	48 89 c7             	mov    rdi,rax
   2d6cf:	e8 d6 42 00 00       	call   319aa <objl::Mesh::~Mesh()>
   2d6d4:	48 8d 95 90 f6 ff ff 	lea    rdx,[rbp-0x970]
   2d6db:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2d6e2:	48 89 d6             	mov    rsi,rdx
   2d6e5:	48 89 c7             	mov    rdi,rax
   2d6e8:	e8 63 69 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2d6ed:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d6f4:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2d6fb:	48 89 d6             	mov    rsi,rdx
   2d6fe:	48 89 c7             	mov    rdi,rax
   2d701:	e8 f4 58 00 00       	call   32ffa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>
   2d706:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2d70d:	48 89 c7             	mov    rdi,rax
   2d710:	e8 a5 55 00 00       	call   32cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2d715:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2d71c:	48 89 c7             	mov    rdi,rax
   2d71f:	e8 bc 55 00 00       	call   32ce0 <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   2d724:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d72b:	48 89 c7             	mov    rdi,rax
   2d72e:	e8 5d 6e fd ff       	call   4590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@plt>
   2d733:	48 8d 85 f0 f6 ff ff 	lea    rax,[rbp-0x910]
   2d73a:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d741:	48 89 d6             	mov    rsi,rdx
   2d744:	48 89 c7             	mov    rdi,rax
   2d747:	e8 94 3e 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d74c:	48 8d 95 f0 f6 ff ff 	lea    rdx,[rbp-0x910]
   2d753:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d75a:	48 89 d6             	mov    rsi,rdx
   2d75d:	48 89 c7             	mov    rdi,rax
   2d760:	e8 bb 6d fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2d765:	48 8d 85 f0 f6 ff ff 	lea    rax,[rbp-0x910]
   2d76c:	48 89 c7             	mov    rdi,rax
   2d76f:	e8 ec 6a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d774:	e9 0f 01 00 00       	jmp    2d888 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x608>
   2d779:	bb 00 00 00 00       	mov    ebx,0x0
   2d77e:	41 bc 00 00 00 00    	mov    r12d,0x0
   2d784:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d78b:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d792:	48 89 d6             	mov    rsi,rdx
   2d795:	48 89 c7             	mov    rdi,rax
   2d798:	e8 91 3f 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d79d:	bb 01 00 00 00       	mov    ebx,0x1
   2d7a2:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d7a9:	48 8d 35 4b f6 00 00 	lea    rsi,[rip+0xf64b]        # 3cdfb <NANO_SEC+0x1b33>
   2d7b0:	48 89 c7             	mov    rdi,rax
   2d7b3:	e8 11 8b ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d7b8:	84 c0                	test   al,al
   2d7ba:	75 39                	jne    2d7f5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x575>
   2d7bc:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d7c3:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d7ca:	48 89 d6             	mov    rsi,rdx
   2d7cd:	48 89 c7             	mov    rdi,rax
   2d7d0:	e8 59 3f 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d7d5:	41 bc 01 00 00 00    	mov    r12d,0x1
   2d7db:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d7e2:	48 8d 35 14 f6 00 00 	lea    rsi,[rip+0xf614]        # 3cdfd <NANO_SEC+0x1b35>
   2d7e9:	48 89 c7             	mov    rdi,rax
   2d7ec:	e8 d8 8a ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d7f1:	84 c0                	test   al,al
   2d7f3:	74 08                	je     2d7fd <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x57d>
   2d7f5:	41 bd 01 00 00 00    	mov    r13d,0x1
   2d7fb:	eb 06                	jmp    2d803 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x583>
   2d7fd:	41 bd 00 00 00 00    	mov    r13d,0x0
   2d803:	45 84 e4             	test   r12b,r12b
   2d806:	74 0f                	je     2d817 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x597>
   2d808:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d80f:	48 89 c7             	mov    rdi,rax
   2d812:	e8 49 6a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d817:	84 db                	test   bl,bl
   2d819:	74 0f                	je     2d82a <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5aa>
   2d81b:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d822:	48 89 c7             	mov    rdi,rax
   2d825:	e8 36 6a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d82a:	45 84 ed             	test   r13b,r13b
   2d82d:	74 43                	je     2d872 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5f2>
   2d82f:	48 8d 85 10 f7 ff ff 	lea    rax,[rbp-0x8f0]
   2d836:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d83d:	48 89 d6             	mov    rsi,rdx
   2d840:	48 89 c7             	mov    rdi,rax
   2d843:	e8 98 3d 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d848:	48 8d 95 10 f7 ff ff 	lea    rdx,[rbp-0x8f0]
   2d84f:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d856:	48 89 d6             	mov    rsi,rdx
   2d859:	48 89 c7             	mov    rdi,rax
   2d85c:	e8 bf 6c fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2d861:	48 8d 85 10 f7 ff ff 	lea    rax,[rbp-0x8f0]
   2d868:	48 89 c7             	mov    rdi,rax
   2d86b:	e8 f0 69 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d870:	eb 16                	jmp    2d888 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x608>
   2d872:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d879:	48 8d 35 7f f5 00 00 	lea    rsi,[rip+0xf57f]        # 3cdff <NANO_SEC+0x1b37>
   2d880:	48 89 c7             	mov    rdi,rax
   2d883:	e8 58 6d fd ff       	call   45e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   2d888:	48 8d 85 30 f7 ff ff 	lea    rax,[rbp-0x8d0]
   2d88f:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d896:	48 89 d6             	mov    rsi,rdx
   2d899:	48 89 c7             	mov    rdi,rax
   2d89c:	e8 8d 3e 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d8a1:	48 8d 85 30 f7 ff ff 	lea    rax,[rbp-0x8d0]
   2d8a8:	48 8d 35 58 f5 00 00 	lea    rsi,[rip+0xf558]        # 3ce07 <NANO_SEC+0x1b3f>
   2d8af:	48 89 c7             	mov    rdi,rax
   2d8b2:	e8 12 8a ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d8b7:	89 c3                	mov    ebx,eax
   2d8b9:	48 8d 85 30 f7 ff ff 	lea    rax,[rbp-0x8d0]
   2d8c0:	48 89 c7             	mov    rdi,rax
   2d8c3:	e8 98 69 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d8c8:	84 db                	test   bl,bl
   2d8ca:	0f 84 59 01 00 00    	je     2da29 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7a9>
   2d8d0:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d8d7:	48 89 c7             	mov    rdi,rax
   2d8da:	e8 5f 77 ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2d8df:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2d8e6:	48 89 c7             	mov    rdi,rax
   2d8e9:	e8 c4 e9 ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   2d8ee:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2d8f5:	48 89 c7             	mov    rdi,rax
   2d8f8:	e8 43 6e fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2d8fd:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2d904:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d90b:	48 8d 35 f7 f4 00 00 	lea    rsi,[rip+0xf4f7]        # 3ce09 <NANO_SEC+0x1b41>
   2d912:	48 89 c7             	mov    rdi,rax
   2d915:	e8 98 85 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2d91a:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d921:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d928:	48 89 d6             	mov    rsi,rdx
   2d92b:	48 89 c7             	mov    rdi,rax
   2d92e:	e8 ad 3c 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d933:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2d93a:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2d941:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d948:	48 89 ce             	mov    rsi,rcx
   2d94b:	48 89 c7             	mov    rdi,rax
   2d94e:	e8 a2 39 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2d953:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d95a:	48 89 c7             	mov    rdi,rax
   2d95d:	e8 fe 68 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d962:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d969:	48 89 c7             	mov    rdi,rax
   2d96c:	e8 ef 68 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d971:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2d978:	48 89 c7             	mov    rdi,rax
   2d97b:	e8 e0 6a fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2d980:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d987:	be 00 00 00 00       	mov    esi,0x0
   2d98c:	48 89 c7             	mov    rdi,rax
   2d98f:	e8 b6 89 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2d994:	be 00 00 00 00       	mov    esi,0x0
   2d999:	48 89 c7             	mov    rdi,rax
   2d99c:	e8 b4 36 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2d9a1:	66 0f 7e c0          	movd   eax,xmm0
   2d9a5:	89 85 50 f6 ff ff    	mov    DWORD PTR [rbp-0x9b0],eax
   2d9ab:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d9b2:	be 01 00 00 00       	mov    esi,0x1
   2d9b7:	48 89 c7             	mov    rdi,rax
   2d9ba:	e8 8b 89 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2d9bf:	be 00 00 00 00       	mov    esi,0x0
   2d9c4:	48 89 c7             	mov    rdi,rax
   2d9c7:	e8 89 36 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2d9cc:	66 0f 7e c0          	movd   eax,xmm0
   2d9d0:	89 85 54 f6 ff ff    	mov    DWORD PTR [rbp-0x9ac],eax
   2d9d6:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d9dd:	be 02 00 00 00       	mov    esi,0x2
   2d9e2:	48 89 c7             	mov    rdi,rax
   2d9e5:	e8 60 89 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2d9ea:	be 00 00 00 00       	mov    esi,0x0
   2d9ef:	48 89 c7             	mov    rdi,rax
   2d9f2:	e8 5e 36 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2d9f7:	66 0f 7e c0          	movd   eax,xmm0
   2d9fb:	89 85 58 f6 ff ff    	mov    DWORD PTR [rbp-0x9a8],eax
   2da01:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2da08:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2da0f:	48 89 d6             	mov    rsi,rdx
   2da12:	48 89 c7             	mov    rdi,rax
   2da15:	e8 5e 56 00 00       	call   33078 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)>
   2da1a:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2da21:	48 89 c7             	mov    rdi,rax
   2da24:	e8 95 86 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2da29:	48 8d 85 50 f7 ff ff 	lea    rax,[rbp-0x8b0]
   2da30:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2da37:	48 89 d6             	mov    rsi,rdx
   2da3a:	48 89 c7             	mov    rdi,rax
   2da3d:	e8 ec 3c 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2da42:	48 8d 85 50 f7 ff ff 	lea    rax,[rbp-0x8b0]
   2da49:	48 8d 35 bb f3 00 00 	lea    rsi,[rip+0xf3bb]        # 3ce0b <NANO_SEC+0x1b43>
   2da50:	48 89 c7             	mov    rdi,rax
   2da53:	e8 71 88 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2da58:	89 c3                	mov    ebx,eax
   2da5a:	48 8d 85 50 f7 ff ff 	lea    rax,[rbp-0x8b0]
   2da61:	48 89 c7             	mov    rdi,rax
   2da64:	e8 f7 67 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2da69:	84 db                	test   bl,bl
   2da6b:	0f 84 2e 01 00 00    	je     2db9f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x91f>
   2da71:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2da78:	48 89 c7             	mov    rdi,rax
   2da7b:	e8 be 75 ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2da80:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2da87:	48 89 c7             	mov    rdi,rax
   2da8a:	e8 a9 e5 ff ff       	call   2c038 <objl::Vector2::Vector2()>
   2da8f:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2da96:	48 89 c7             	mov    rdi,rax
   2da99:	e8 a2 6c fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2da9e:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2daa5:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2daac:	48 8d 35 56 f3 00 00 	lea    rsi,[rip+0xf356]        # 3ce09 <NANO_SEC+0x1b41>
   2dab3:	48 89 c7             	mov    rdi,rax
   2dab6:	e8 f7 83 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2dabb:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dac2:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dac9:	48 89 d6             	mov    rsi,rdx
   2dacc:	48 89 c7             	mov    rdi,rax
   2dacf:	e8 0c 3b 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dad4:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2dadb:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2dae2:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dae9:	48 89 ce             	mov    rsi,rcx
   2daec:	48 89 c7             	mov    rdi,rax
   2daef:	e8 01 38 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2daf4:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dafb:	48 89 c7             	mov    rdi,rax
   2dafe:	e8 5d 67 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2db03:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2db0a:	48 89 c7             	mov    rdi,rax
   2db0d:	e8 4e 67 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2db12:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2db19:	48 89 c7             	mov    rdi,rax
   2db1c:	e8 3f 69 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2db21:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2db28:	be 00 00 00 00       	mov    esi,0x0
   2db2d:	48 89 c7             	mov    rdi,rax
   2db30:	e8 15 88 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2db35:	be 00 00 00 00       	mov    esi,0x0
   2db3a:	48 89 c7             	mov    rdi,rax
   2db3d:	e8 13 35 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2db42:	66 0f 7e c0          	movd   eax,xmm0
   2db46:	89 85 50 f6 ff ff    	mov    DWORD PTR [rbp-0x9b0],eax
   2db4c:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2db53:	be 01 00 00 00       	mov    esi,0x1
   2db58:	48 89 c7             	mov    rdi,rax
   2db5b:	e8 ea 87 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2db60:	be 00 00 00 00       	mov    esi,0x0
   2db65:	48 89 c7             	mov    rdi,rax
   2db68:	e8 e8 34 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2db6d:	66 0f 7e c0          	movd   eax,xmm0
   2db71:	89 85 54 f6 ff ff    	mov    DWORD PTR [rbp-0x9ac],eax
   2db77:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2db7e:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2db85:	48 89 d6             	mov    rsi,rdx
   2db88:	48 89 c7             	mov    rdi,rax
   2db8b:	e8 64 55 00 00       	call   330f4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)>
   2db90:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2db97:	48 89 c7             	mov    rdi,rax
   2db9a:	e8 1f 85 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2db9f:	48 8d 85 70 f7 ff ff 	lea    rax,[rbp-0x890]
   2dba6:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dbad:	48 89 d6             	mov    rsi,rdx
   2dbb0:	48 89 c7             	mov    rdi,rax
   2dbb3:	e8 76 3b 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dbb8:	48 8d 85 70 f7 ff ff 	lea    rax,[rbp-0x890]
   2dbbf:	48 8d 35 48 f2 00 00 	lea    rsi,[rip+0xf248]        # 3ce0e <NANO_SEC+0x1b46>
   2dbc6:	48 89 c7             	mov    rdi,rax
   2dbc9:	e8 fb 86 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2dbce:	89 c3                	mov    ebx,eax
   2dbd0:	48 8d 85 70 f7 ff ff 	lea    rax,[rbp-0x890]
   2dbd7:	48 89 c7             	mov    rdi,rax
   2dbda:	e8 81 66 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dbdf:	84 db                	test   bl,bl
   2dbe1:	0f 84 59 01 00 00    	je     2dd40 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xac0>
   2dbe7:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dbee:	48 89 c7             	mov    rdi,rax
   2dbf1:	e8 48 74 ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2dbf6:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2dbfd:	48 89 c7             	mov    rdi,rax
   2dc00:	e8 ad e6 ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   2dc05:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dc0c:	48 89 c7             	mov    rdi,rax
   2dc0f:	e8 2c 6b fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2dc14:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2dc1b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2dc22:	48 8d 35 e0 f1 00 00 	lea    rsi,[rip+0xf1e0]        # 3ce09 <NANO_SEC+0x1b41>
   2dc29:	48 89 c7             	mov    rdi,rax
   2dc2c:	e8 81 82 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2dc31:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dc38:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dc3f:	48 89 d6             	mov    rsi,rdx
   2dc42:	48 89 c7             	mov    rdi,rax
   2dc45:	e8 96 39 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dc4a:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2dc51:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2dc58:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dc5f:	48 89 ce             	mov    rsi,rcx
   2dc62:	48 89 c7             	mov    rdi,rax
   2dc65:	e8 8b 36 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2dc6a:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dc71:	48 89 c7             	mov    rdi,rax
   2dc74:	e8 e7 65 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dc79:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2dc80:	48 89 c7             	mov    rdi,rax
   2dc83:	e8 d8 65 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dc88:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dc8f:	48 89 c7             	mov    rdi,rax
   2dc92:	e8 c9 67 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2dc97:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dc9e:	be 00 00 00 00       	mov    esi,0x0
   2dca3:	48 89 c7             	mov    rdi,rax
   2dca6:	e8 9f 86 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dcab:	be 00 00 00 00       	mov    esi,0x0
   2dcb0:	48 89 c7             	mov    rdi,rax
   2dcb3:	e8 9d 33 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dcb8:	66 0f 7e c0          	movd   eax,xmm0
   2dcbc:	89 85 50 f6 ff ff    	mov    DWORD PTR [rbp-0x9b0],eax
   2dcc2:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dcc9:	be 01 00 00 00       	mov    esi,0x1
   2dcce:	48 89 c7             	mov    rdi,rax
   2dcd1:	e8 74 86 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dcd6:	be 00 00 00 00       	mov    esi,0x0
   2dcdb:	48 89 c7             	mov    rdi,rax
   2dcde:	e8 72 33 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dce3:	66 0f 7e c0          	movd   eax,xmm0
   2dce7:	89 85 54 f6 ff ff    	mov    DWORD PTR [rbp-0x9ac],eax
   2dced:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dcf4:	be 02 00 00 00       	mov    esi,0x2
   2dcf9:	48 89 c7             	mov    rdi,rax
   2dcfc:	e8 49 86 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dd01:	be 00 00 00 00       	mov    esi,0x0
   2dd06:	48 89 c7             	mov    rdi,rax
   2dd09:	e8 47 33 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dd0e:	66 0f 7e c0          	movd   eax,xmm0
   2dd12:	89 85 58 f6 ff ff    	mov    DWORD PTR [rbp-0x9a8],eax
   2dd18:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2dd1f:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2dd26:	48 89 d6             	mov    rsi,rdx
   2dd29:	48 89 c7             	mov    rdi,rax
   2dd2c:	e8 47 53 00 00       	call   33078 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)>
   2dd31:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dd38:	48 89 c7             	mov    rdi,rax
   2dd3b:	e8 7e 83 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2dd40:	48 8d 85 90 f7 ff ff 	lea    rax,[rbp-0x870]
   2dd47:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dd4e:	48 89 d6             	mov    rsi,rdx
   2dd51:	48 89 c7             	mov    rdi,rax
   2dd54:	e8 d5 39 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dd59:	48 8d 85 90 f7 ff ff 	lea    rax,[rbp-0x870]
   2dd60:	48 8d 35 aa f0 00 00 	lea    rsi,[rip+0xf0aa]        # 3ce11 <NANO_SEC+0x1b49>
   2dd67:	48 89 c7             	mov    rdi,rax
   2dd6a:	e8 5a 85 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2dd6f:	89 c3                	mov    ebx,eax
   2dd71:	48 8d 85 90 f7 ff ff 	lea    rax,[rbp-0x870]
   2dd78:	48 89 c7             	mov    rdi,rax
   2dd7b:	e8 e0 64 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dd80:	84 db                	test   bl,bl
   2dd82:	0f 84 4d 02 00 00    	je     2dfd5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd55>
   2dd88:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2dd8f:	48 89 c7             	mov    rdi,rax
   2dd92:	e8 bf 34 00 00       	call   31256 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2dd97:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dd9e:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2dda5:	48 89 d6             	mov    rsi,rdx
   2dda8:	48 89 c7             	mov    rdi,rax
   2ddab:	e8 c0 63 fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2ddb0:	4c 8d 85 60 fc ff ff 	lea    r8,[rbp-0x3a0]
   2ddb7:	48 8d bd d0 f5 ff ff 	lea    rdi,[rbp-0xa30]
   2ddbe:	48 8d 8d b0 f5 ff ff 	lea    rcx,[rbp-0xa50]
   2ddc5:	48 8d 95 90 f5 ff ff 	lea    rdx,[rbp-0xa70]
   2ddcc:	48 8d b5 50 f6 ff ff 	lea    rsi,[rbp-0x9b0]
   2ddd3:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2ddda:	4d 89 c1             	mov    r9,r8
   2dddd:	49 89 f8             	mov    r8,rdi
   2dde0:	48 89 c7             	mov    rdi,rax
   2dde3:	e8 9c 0d 00 00       	call   2eb84 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2dde8:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ddef:	48 89 c7             	mov    rdi,rax
   2ddf2:	e8 69 64 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ddf7:	c7 85 68 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa98],0x0
   2de01:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2de08:	48 89 c7             	mov    rdi,rax
   2de0b:	e8 4a 83 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2de10:	39 85 68 f5 ff ff    	cmp    DWORD PTR [rbp-0xa98],eax
   2de16:	0f 9c c0             	setl   al
   2de19:	84 c0                	test   al,al
   2de1b:	74 6d                	je     2de8a <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc0a>
   2de1d:	8b 85 68 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa98]
   2de23:	48 63 d0             	movsxd rdx,eax
   2de26:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2de2d:	48 89 d6             	mov    rsi,rdx
   2de30:	48 89 c7             	mov    rdi,rax
   2de33:	e8 8e 83 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2de38:	48 89 c2             	mov    rdx,rax
   2de3b:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2de42:	48 89 d6             	mov    rsi,rdx
   2de45:	48 89 c7             	mov    rdi,rax
   2de48:	e8 23 53 00 00       	call   33170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2de4d:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2de54:	48 8d 58 18          	lea    rbx,[rax+0x18]
   2de58:	8b 85 68 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa98]
   2de5e:	48 63 d0             	movsxd rdx,eax
   2de61:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2de68:	48 89 d6             	mov    rsi,rdx
   2de6b:	48 89 c7             	mov    rdi,rax
   2de6e:	e8 53 83 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2de73:	48 89 c6             	mov    rsi,rax
   2de76:	48 89 df             	mov    rdi,rbx
   2de79:	e8 f2 52 00 00       	call   33170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2de7e:	83 85 68 f5 ff ff 01 	add    DWORD PTR [rbp-0xa98],0x1
   2de85:	e9 77 ff ff ff       	jmp    2de01 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb81>
   2de8a:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2de91:	48 89 c7             	mov    rdi,rax
   2de94:	e8 e3 72 ff ff       	call   2517c <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2de99:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2dea0:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2dea7:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2deae:	48 89 ce             	mov    rsi,rcx
   2deb1:	48 89 c7             	mov    rdi,rax
   2deb4:	e8 cf 13 00 00       	call   2f288 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   2deb9:	c7 85 6c f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa94],0x0
   2dec3:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2deca:	48 89 c7             	mov    rdi,rax
   2decd:	e8 d0 82 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2ded2:	39 85 6c f5 ff ff    	cmp    DWORD PTR [rbp-0xa94],eax
   2ded8:	0f 9c c0             	setl   al
   2dedb:	84 c0                	test   al,al
   2dedd:	0f 84 d4 00 00 00    	je     2dfb7 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd37>
   2dee3:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2deea:	48 89 c7             	mov    rdi,rax
   2deed:	e8 68 82 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2def2:	89 c3                	mov    ebx,eax
   2def4:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2defb:	48 89 c7             	mov    rdi,rax
   2defe:	e8 57 82 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df03:	29 c3                	sub    ebx,eax
   2df05:	8b 85 6c f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa94]
   2df0b:	48 63 d0             	movsxd rdx,eax
   2df0e:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2df15:	48 89 d6             	mov    rsi,rdx
   2df18:	48 89 c7             	mov    rdi,rax
   2df1b:	e8 46 96 ff ff       	call   27566 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>
   2df20:	8b 00                	mov    eax,DWORD PTR [rax]
   2df22:	01 d8                	add    eax,ebx
   2df24:	89 85 64 f5 ff ff    	mov    DWORD PTR [rbp-0xa9c],eax
   2df2a:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2df31:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2df38:	48 89 d6             	mov    rsi,rdx
   2df3b:	48 89 c7             	mov    rdi,rax
   2df3e:	e8 d5 84 ff ff       	call   26418 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   2df43:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2df4a:	48 83 c0 18          	add    rax,0x18
   2df4e:	48 89 c7             	mov    rdi,rax
   2df51:	e8 04 82 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df56:	89 c3                	mov    ebx,eax
   2df58:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2df5f:	48 89 c7             	mov    rdi,rax
   2df62:	e8 f3 81 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df67:	29 c3                	sub    ebx,eax
   2df69:	8b 85 6c f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa94]
   2df6f:	48 63 d0             	movsxd rdx,eax
   2df72:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2df79:	48 89 d6             	mov    rsi,rdx
   2df7c:	48 89 c7             	mov    rdi,rax
   2df7f:	e8 e2 95 ff ff       	call   27566 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>
   2df84:	8b 00                	mov    eax,DWORD PTR [rax]
   2df86:	01 d8                	add    eax,ebx
   2df88:	89 85 64 f5 ff ff    	mov    DWORD PTR [rbp-0xa9c],eax
   2df8e:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2df95:	48 8d 50 30          	lea    rdx,[rax+0x30]
   2df99:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dfa0:	48 89 c6             	mov    rsi,rax
   2dfa3:	48 89 d7             	mov    rdi,rdx
   2dfa6:	e8 6d 84 ff ff       	call   26418 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   2dfab:	83 85 6c f5 ff ff 01 	add    DWORD PTR [rbp-0xa94],0x1
   2dfb2:	e9 0c ff ff ff       	jmp    2dec3 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc43>
   2dfb7:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dfbe:	48 89 c7             	mov    rdi,rax
   2dfc1:	e8 f6 89 ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2dfc6:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2dfcd:	48 89 c7             	mov    rdi,rax
   2dfd0:	e8 eb 43 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2dfd5:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
   2dfdc:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dfe3:	48 89 d6             	mov    rsi,rdx
   2dfe6:	48 89 c7             	mov    rdi,rax
   2dfe9:	e8 40 37 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dfee:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
   2dff5:	48 8d 35 17 ee 00 00 	lea    rsi,[rip+0xee17]        # 3ce13 <NANO_SEC+0x1b4b>
   2dffc:	48 89 c7             	mov    rdi,rax
   2dfff:	e8 c5 82 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e004:	89 c3                	mov    ebx,eax
   2e006:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
   2e00d:	48 89 c7             	mov    rdi,rax
   2e010:	e8 4b 62 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e015:	84 db                	test   bl,bl
   2e017:	0f 84 5a 02 00 00    	je     2e277 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xff7>
   2e01d:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e024:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e02b:	48 89 d6             	mov    rsi,rdx
   2e02e:	48 89 c7             	mov    rdi,rax
   2e031:	e8 aa 35 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e036:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e03d:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e044:	48 89 d6             	mov    rsi,rdx
   2e047:	48 89 c7             	mov    rdi,rax
   2e04a:	e8 1f 4a 00 00       	call   32a6e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2e04f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e056:	48 89 c7             	mov    rdi,rax
   2e059:	e8 02 62 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e05e:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e065:	48 89 c7             	mov    rdi,rax
   2e068:	e8 55 4e 00 00       	call   32ec2 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2e06d:	83 f0 01             	xor    eax,0x1
   2e070:	84 c0                	test   al,al
   2e072:	74 1d                	je     2e091 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe11>
   2e074:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e07b:	48 89 c7             	mov    rdi,rax
   2e07e:	e8 a3 4e 00 00       	call   32f26 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2e083:	83 f0 01             	xor    eax,0x1
   2e086:	84 c0                	test   al,al
   2e088:	74 07                	je     2e091 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe11>
   2e08a:	b8 01 00 00 00       	mov    eax,0x1
   2e08f:	eb 05                	jmp    2e096 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe16>
   2e091:	b8 00 00 00 00       	mov    eax,0x0
   2e096:	84 c0                	test   al,al
   2e098:	0f 84 d9 01 00 00    	je     2e277 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xff7>
   2e09e:	48 8d 95 10 f6 ff ff 	lea    rdx,[rbp-0x9f0]
   2e0a5:	48 8d 8d f0 f5 ff ff 	lea    rcx,[rbp-0xa10]
   2e0ac:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e0b3:	48 89 ce             	mov    rsi,rcx
   2e0b6:	48 89 c7             	mov    rdi,rax
   2e0b9:	e8 38 e7 ff ff       	call   2c7f6 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>
   2e0be:	48 8d 95 f0 fa ff ff 	lea    rdx,[rbp-0x510]
   2e0c5:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e0cc:	48 89 d6             	mov    rsi,rdx
   2e0cf:	48 89 c7             	mov    rdi,rax
   2e0d2:	e8 9b 3a 00 00       	call   31b72 <objl::Mesh::operator=(objl::Mesh&&)>
   2e0d7:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e0de:	48 89 c7             	mov    rdi,rax
   2e0e1:	e8 c4 38 00 00       	call   319aa <objl::Mesh::~Mesh()>
   2e0e6:	48 8d 95 90 f6 ff ff 	lea    rdx,[rbp-0x970]
   2e0ed:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e0f4:	48 89 d6             	mov    rsi,rdx
   2e0f7:	48 89 c7             	mov    rdi,rax
   2e0fa:	e8 51 5f fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e0ff:	c7 85 7c f5 ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0xa84],0x2
   2e109:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e110:	8b 95 7c f5 ff ff    	mov    edx,DWORD PTR [rbp-0xa84]
   2e116:	89 d6                	mov    esi,edx
   2e118:	48 89 c7             	mov    rdi,rax
   2e11b:	e8 73 2f 00 00       	call   31093 <std::__cxx11::to_string(int)>
   2e120:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e127:	48 8d 8d 90 f6 ff ff 	lea    rcx,[rbp-0x970]
   2e12e:	48 8d 15 e5 ec 00 00 	lea    rdx,[rip+0xece5]        # 3ce1a <NANO_SEC+0x1b52>
   2e135:	48 89 ce             	mov    rsi,rcx
   2e138:	48 89 c7             	mov    rdi,rax
   2e13b:	e8 a8 40 00 00       	call   321e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e140:	48 8d 85 d0 f7 ff ff 	lea    rax,[rbp-0x830]
   2e147:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e14e:	48 8d 8d f0 fa ff ff 	lea    rcx,[rbp-0x510]
   2e155:	48 89 ce             	mov    rsi,rcx
   2e158:	48 89 c7             	mov    rdi,rax
   2e15b:	e8 e9 40 00 00       	call   32249 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2e160:	48 8d 95 d0 f7 ff ff 	lea    rdx,[rbp-0x830]
   2e167:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e16e:	48 89 d6             	mov    rsi,rdx
   2e171:	48 89 c7             	mov    rdi,rax
   2e174:	e8 a7 63 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2e179:	48 8d 85 d0 f7 ff ff 	lea    rax,[rbp-0x830]
   2e180:	48 89 c7             	mov    rdi,rax
   2e183:	e8 d8 60 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e188:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e18f:	48 89 c7             	mov    rdi,rax
   2e192:	e8 c9 60 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e197:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e19e:	48 89 c7             	mov    rdi,rax
   2e1a1:	e8 ba 60 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e1a6:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e1ad:	48 89 85 80 f5 ff ff 	mov    QWORD PTR [rbp-0xa80],rax
   2e1b4:	48 8b 85 80 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa80]
   2e1bb:	48 89 c7             	mov    rdi,rax
   2e1be:	e8 29 50 00 00       	call   331ec <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()>
   2e1c3:	48 89 85 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rax
   2e1ca:	48 8b 85 80 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa80]
   2e1d1:	48 89 c7             	mov    rdi,rax
   2e1d4:	e8 5b 50 00 00       	call   33234 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()>
   2e1d9:	48 89 85 70 f6 ff ff 	mov    QWORD PTR [rbp-0x990],rax
   2e1e0:	48 8d 95 70 f6 ff ff 	lea    rdx,[rbp-0x990]
   2e1e7:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e1ee:	48 89 d6             	mov    rsi,rdx
   2e1f1:	48 89 c7             	mov    rdi,rax
   2e1f4:	e8 87 50 00 00       	call   33280 <bool __gnu_cxx::operator!=<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>
   2e1f9:	84 c0                	test   al,al
   2e1fb:	74 42                	je     2e23f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xfbf>
   2e1fd:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e204:	48 89 c7             	mov    rdi,rax
   2e207:	e8 d4 50 00 00       	call   332e0 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator*() const>
   2e20c:	48 89 85 88 f5 ff ff 	mov    QWORD PTR [rbp-0xa78],rax
   2e213:	48 8b 85 88 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa78]
   2e21a:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2e221:	48 89 d6             	mov    rsi,rdx
   2e224:	48 89 c7             	mov    rdi,rax
   2e227:	e8 3e 81 ff ff       	call   2636a <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e22c:	84 c0                	test   al,al
   2e22e:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e235:	48 89 c7             	mov    rdi,rax
   2e238:	e8 7f 50 00 00       	call   332bc <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator++()>
   2e23d:	eb a1                	jmp    2e1e0 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf60>
   2e23f:	90                   	nop
   2e240:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e247:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2e24e:	48 89 d6             	mov    rsi,rdx
   2e251:	48 89 c7             	mov    rdi,rax
   2e254:	e8 a1 4d 00 00       	call   32ffa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>
   2e259:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e260:	48 89 c7             	mov    rdi,rax
   2e263:	e8 52 4a 00 00       	call   32cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2e268:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e26f:	48 89 c7             	mov    rdi,rax
   2e272:	e8 69 4a 00 00       	call   32ce0 <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   2e277:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
   2e27e:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e285:	48 89 d6             	mov    rsi,rdx
   2e288:	48 89 c7             	mov    rdi,rax
   2e28b:	e8 9e 34 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e290:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
   2e297:	48 8d 35 7e eb 00 00 	lea    rsi,[rip+0xeb7e]        # 3ce1c <NANO_SEC+0x1b54>
   2e29e:	48 89 c7             	mov    rdi,rax
   2e2a1:	e8 23 80 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e2a6:	89 c3                	mov    ebx,eax
   2e2a8:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
   2e2af:	48 89 c7             	mov    rdi,rax
   2e2b2:	e8 a9 5f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e2b7:	84 db                	test   bl,bl
   2e2b9:	0f 84 52 f1 ff ff    	je     2d411 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x191>
   2e2bf:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e2c6:	48 89 c7             	mov    rdi,rax
   2e2c9:	e8 70 6d ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2e2ce:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e2d5:	48 89 c7             	mov    rdi,rax
   2e2d8:	e8 63 64 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2e2dd:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2e2e4:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e2eb:	48 8d 35 31 eb 00 00 	lea    rsi,[rip+0xeb31]        # 3ce23 <NANO_SEC+0x1b5b>
   2e2f2:	48 89 c7             	mov    rdi,rax
   2e2f5:	e8 b8 7b ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2e2fa:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e301:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2e308:	48 8b 85 50 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab0]
   2e30f:	48 89 ce             	mov    rsi,rcx
   2e312:	48 89 c7             	mov    rdi,rax
   2e315:	e8 db 2f 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2e31a:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e321:	48 89 c7             	mov    rdi,rax
   2e324:	e8 37 5f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e329:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e330:	48 89 c7             	mov    rdi,rax
   2e333:	e8 28 61 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2e338:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e33f:	48 89 c7             	mov    rdi,rax
   2e342:	e8 f9 63 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2e347:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2e34e:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e355:	48 8d 35 96 ea 00 00 	lea    rsi,[rip+0xea96]        # 3cdf2 <NANO_SEC+0x1b2a>
   2e35c:	48 89 c7             	mov    rdi,rax
   2e35f:	e8 4e 7b ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2e364:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e36b:	48 89 c7             	mov    rdi,rax
   2e36e:	e8 ed 60 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2e373:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e37a:	48 89 c7             	mov    rdi,rax
   2e37d:	e8 a4 7f ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2e382:	48 83 f8 01          	cmp    rax,0x1
   2e386:	0f 95 c0             	setne  al
   2e389:	84 c0                	test   al,al
   2e38b:	0f 84 9b 00 00 00    	je     2e42c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x11ac>
   2e391:	c7 85 70 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa90],0x0
   2e39b:	8b 85 70 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa90]
   2e3a1:	48 63 d8             	movsxd rbx,eax
   2e3a4:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e3ab:	48 89 c7             	mov    rdi,rax
   2e3ae:	e8 73 7f ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2e3b3:	48 83 e8 01          	sub    rax,0x1
   2e3b7:	48 39 c3             	cmp    rbx,rax
   2e3ba:	0f 92 c0             	setb   al
   2e3bd:	84 c0                	test   al,al
   2e3bf:	74 6b                	je     2e42c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x11ac>
   2e3c1:	8b 85 70 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa90]
   2e3c7:	48 63 d0             	movsxd rdx,eax
   2e3ca:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e3d1:	48 89 d6             	mov    rsi,rdx
   2e3d4:	48 89 c7             	mov    rdi,rax
   2e3d7:	e8 6e 7f ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2e3dc:	48 89 c1             	mov    rcx,rax
   2e3df:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e3e6:	48 8d 15 36 ea 00 00 	lea    rdx,[rip+0xea36]        # 3ce23 <NANO_SEC+0x1b5b>
   2e3ed:	48 89 ce             	mov    rsi,rcx
   2e3f0:	48 89 c7             	mov    rdi,rax
   2e3f3:	e8 f0 3d 00 00       	call   321e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e3f8:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e3ff:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e406:	48 89 d6             	mov    rsi,rdx
   2e409:	48 89 c7             	mov    rdi,rax
   2e40c:	e8 4f 61 fd ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e411:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e418:	48 89 c7             	mov    rdi,rax
   2e41b:	e8 40 5e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e420:	83 85 70 f5 ff ff 01 	add    DWORD PTR [rbp-0xa90],0x1
   2e427:	e9 6f ff ff ff       	jmp    2e39b <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x111b>
   2e42c:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e433:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e43a:	48 89 d6             	mov    rsi,rdx
   2e43d:	48 89 c7             	mov    rdi,rax
   2e440:	e8 9b 31 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e445:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e44c:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e453:	48 89 d6             	mov    rsi,rdx
   2e456:	48 89 c7             	mov    rdi,rax
   2e459:	e8 02 61 fd ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e45e:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e465:	48 89 c7             	mov    rdi,rax
   2e468:	e8 f3 5d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e46d:	48 8d 95 f0 fa ff ff 	lea    rdx,[rbp-0x510]
   2e474:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e47b:	48 89 d6             	mov    rsi,rdx
   2e47e:	48 89 c7             	mov    rdi,rax
   2e481:	e8 ea 5c fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e486:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e48d:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e494:	48 89 d6             	mov    rsi,rdx
   2e497:	48 89 c7             	mov    rdi,rax
   2e49a:	e8 6b 1a 00 00       	call   2ff0a <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2e49f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e4a6:	48 89 c7             	mov    rdi,rax
   2e4a9:	e8 b2 5d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e4ae:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e4b5:	48 89 c7             	mov    rdi,rax
   2e4b8:	e8 a3 5d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e4bd:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e4c4:	48 89 c7             	mov    rdi,rax
   2e4c7:	e8 f2 7b ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e4cc:	e9 40 ef ff ff       	jmp    2d411 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x191>
   2e4d1:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e4d8:	48 89 c7             	mov    rdi,rax
   2e4db:	e8 e2 49 00 00       	call   32ec2 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2e4e0:	83 f0 01             	xor    eax,0x1
   2e4e3:	84 c0                	test   al,al
   2e4e5:	74 1d                	je     2e504 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1284>
   2e4e7:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e4ee:	48 89 c7             	mov    rdi,rax
   2e4f1:	e8 30 4a 00 00       	call   32f26 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2e4f6:	83 f0 01             	xor    eax,0x1
   2e4f9:	84 c0                	test   al,al
   2e4fb:	74 07                	je     2e504 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1284>
   2e4fd:	b8 01 00 00 00       	mov    eax,0x1
   2e502:	eb 05                	jmp    2e509 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1289>
   2e504:	b8 00 00 00 00       	mov    eax,0x0
   2e509:	84 c0                	test   al,al
   2e50b:	74 7a                	je     2e587 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1307>
   2e50d:	48 8d 95 10 f6 ff ff 	lea    rdx,[rbp-0x9f0]
   2e514:	48 8d 8d f0 f5 ff ff 	lea    rcx,[rbp-0xa10]
   2e51b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e522:	48 89 ce             	mov    rsi,rcx
   2e525:	48 89 c7             	mov    rdi,rax
   2e528:	e8 c9 e2 ff ff       	call   2c7f6 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>
   2e52d:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e534:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e53b:	48 89 d6             	mov    rsi,rdx
   2e53e:	48 89 c7             	mov    rdi,rax
   2e541:	e8 2c 36 00 00       	call   31b72 <objl::Mesh::operator=(objl::Mesh&&)>
   2e546:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e54d:	48 89 c7             	mov    rdi,rax
   2e550:	e8 55 34 00 00       	call   319aa <objl::Mesh::~Mesh()>
   2e555:	48 8d 95 90 f6 ff ff 	lea    rdx,[rbp-0x970]
   2e55c:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e563:	48 89 d6             	mov    rsi,rdx
   2e566:	48 89 c7             	mov    rdi,rax
   2e569:	e8 e2 5a fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e56e:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e575:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2e57c:	48 89 d6             	mov    rsi,rdx
   2e57f:	48 89 c7             	mov    rdi,rax
   2e582:	e8 73 4a 00 00       	call   32ffa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>
   2e587:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e58e:	48 89 c7             	mov    rdi,rax
   2e591:	e8 0a 5b fd ff       	call   40a0 <std::basic_ifstream<char, std::char_traits<char> >::close()@plt>
   2e596:	c7 85 74 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8c],0x0
   2e5a0:	8b 85 74 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa8c]
   2e5a6:	48 63 d8             	movsxd rbx,eax
   2e5a9:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e5b0:	48 89 c7             	mov    rdi,rax
   2e5b3:	e8 6e 7d ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2e5b8:	48 39 c3             	cmp    rbx,rax
   2e5bb:	0f 92 c0             	setb   al
   2e5be:	84 c0                	test   al,al
   2e5c0:	0f 84 0f 01 00 00    	je     2e6d5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1455>
   2e5c6:	8b 85 74 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa8c]
   2e5cc:	48 63 d0             	movsxd rdx,eax
   2e5cf:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e5d6:	48 89 d6             	mov    rsi,rdx
   2e5d9:	48 89 c7             	mov    rdi,rax
   2e5dc:	e8 69 7d ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2e5e1:	48 89 c2             	mov    rdx,rax
   2e5e4:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e5eb:	48 89 d6             	mov    rsi,rdx
   2e5ee:	48 89 c7             	mov    rdi,rax
   2e5f1:	e8 7a 5b fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e5f6:	c7 85 78 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa88],0x0
   2e600:	8b 85 78 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa88]
   2e606:	48 63 d8             	movsxd rbx,eax
   2e609:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e610:	48 83 c0 48          	add    rax,0x48
   2e614:	48 89 c7             	mov    rdi,rax
   2e617:	e8 d6 4c 00 00       	call   332f2 <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   2e61c:	48 39 c3             	cmp    rbx,rax
   2e61f:	0f 92 c0             	setb   al
   2e622:	84 c0                	test   al,al
   2e624:	0f 84 90 00 00 00    	je     2e6ba <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x143a>
   2e62a:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e631:	48 8d 50 48          	lea    rdx,[rax+0x48]
   2e635:	8b 85 78 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa88]
   2e63b:	48 98                	cdqe   
   2e63d:	48 89 c6             	mov    rsi,rax
   2e640:	48 89 d7             	mov    rdi,rdx
   2e643:	e8 de 4c 00 00       	call   33326 <std::vector<objl::Material, std::allocator<objl::Material> >::operator[](unsigned long)>
   2e648:	48 89 c2             	mov    rdx,rax
   2e64b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e652:	48 89 c6             	mov    rsi,rax
   2e655:	48 89 d7             	mov    rdi,rdx
   2e658:	e8 0d 7d ff ff       	call   2636a <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e65d:	84 c0                	test   al,al
   2e65f:	74 4d                	je     2e6ae <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x142e>
   2e661:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e668:	48 8d 50 48          	lea    rdx,[rax+0x48]
   2e66c:	8b 85 78 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa88]
   2e672:	48 98                	cdqe   
   2e674:	48 89 c6             	mov    rsi,rax
   2e677:	48 89 d7             	mov    rdi,rdx
   2e67a:	e8 a7 4c 00 00       	call   33326 <std::vector<objl::Material, std::allocator<objl::Material> >::operator[](unsigned long)>
   2e67f:	48 89 c3             	mov    rbx,rax
   2e682:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e689:	8b 95 74 f5 ff ff    	mov    edx,DWORD PTR [rbp-0xa8c]
   2e68f:	48 63 d2             	movsxd rdx,edx
   2e692:	48 89 d6             	mov    rsi,rdx
   2e695:	48 89 c7             	mov    rdi,rax
   2e698:	e8 99 7a ff ff       	call   26136 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2e69d:	48 83 c0 50          	add    rax,0x50
   2e6a1:	48 89 de             	mov    rsi,rbx
   2e6a4:	48 89 c7             	mov    rdi,rax
   2e6a7:	e8 40 35 00 00       	call   31bec <objl::Material::operator=(objl::Material const&)>
   2e6ac:	eb 0c                	jmp    2e6ba <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x143a>
   2e6ae:	83 85 78 f5 ff ff 01 	add    DWORD PTR [rbp-0xa88],0x1
   2e6b5:	e9 46 ff ff ff       	jmp    2e600 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1380>
   2e6ba:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e6c1:	48 89 c7             	mov    rdi,rax
   2e6c4:	e8 97 5b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e6c9:	83 85 74 f5 ff ff 01 	add    DWORD PTR [rbp-0xa8c],0x1
   2e6d0:	e9 cb fe ff ff       	jmp    2e5a0 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1320>
   2e6d5:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e6dc:	48 89 c7             	mov    rdi,rax
   2e6df:	e8 66 4c 00 00       	call   3334a <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::empty() const>
   2e6e4:	84 c0                	test   al,al
   2e6e6:	74 35                	je     2e71d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x149d>
   2e6e8:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e6ef:	48 83 c0 18          	add    rax,0x18
   2e6f3:	48 89 c7             	mov    rdi,rax
   2e6f6:	e8 2b 48 00 00       	call   32f26 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2e6fb:	84 c0                	test   al,al
   2e6fd:	74 1e                	je     2e71d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x149d>
   2e6ff:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e706:	48 83 c0 30          	add    rax,0x30
   2e70a:	48 89 c7             	mov    rdi,rax
   2e70d:	e8 b0 47 00 00       	call   32ec2 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2e712:	84 c0                	test   al,al
   2e714:	74 07                	je     2e71d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x149d>
   2e716:	b8 01 00 00 00       	mov    eax,0x1
   2e71b:	eb 05                	jmp    2e722 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14a2>
   2e71d:	b8 00 00 00 00       	mov    eax,0x0
   2e722:	84 c0                	test   al,al
   2e724:	74 07                	je     2e72d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14ad>
   2e726:	bb 00 00 00 00       	mov    ebx,0x0
   2e72b:	eb 05                	jmp    2e732 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14b2>
   2e72d:	bb 01 00 00 00       	mov    ebx,0x1
   2e732:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2e739:	48 89 c7             	mov    rdi,rax
   2e73c:	e8 1f 5b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e741:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e748:	48 89 c7             	mov    rdi,rax
   2e74b:	e8 5a 32 00 00       	call   319aa <objl::Mesh::~Mesh()>
   2e750:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2e757:	48 89 c7             	mov    rdi,rax
   2e75a:	e8 01 5b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e75f:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e766:	48 89 c7             	mov    rdi,rax
   2e769:	e8 50 79 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e76e:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e775:	48 89 c7             	mov    rdi,rax
   2e778:	e8 3f 82 ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2e77d:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e784:	48 89 c7             	mov    rdi,rax
   2e787:	e8 34 3c 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2e78c:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2e793:	48 89 c7             	mov    rdi,rax
   2e796:	e8 0d 46 00 00       	call   32da8 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2e79b:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2e7a2:	48 89 c7             	mov    rdi,rax
   2e7a5:	e8 d4 46 00 00       	call   32e7e <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::~vector()>
   2e7aa:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2e7b1:	48 89 c7             	mov    rdi,rax
   2e7b4:	e8 ef 45 00 00       	call   32da8 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2e7b9:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e7c0:	48 89 c7             	mov    rdi,rax
   2e7c3:	e8 f8 58 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   2e7c8:	89 d8                	mov    eax,ebx
   2e7ca:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   2e7ce:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   2e7d7:	0f 84 98 03 00 00    	je     2eb75 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x18f5>
   2e7dd:	e9 8e 03 00 00       	jmp    2eb70 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x18f0>
   2e7e2:	48 89 c3             	mov    rbx,rax
   2e7e5:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e7ec:	48 89 c7             	mov    rdi,rax
   2e7ef:	e8 6c 5a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e7f4:	48 89 d8             	mov    rax,rbx
   2e7f7:	48 89 c7             	mov    rdi,rax
   2e7fa:	e8 31 5f fd ff       	call   4730 <_Unwind_Resume@plt>
   2e7ff:	49 89 c5             	mov    r13,rax
   2e802:	45 84 e4             	test   r12b,r12b
   2e805:	74 0f                	je     2e816 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1596>
   2e807:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e80e:	48 89 c7             	mov    rdi,rax
   2e811:	e8 4a 5a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e816:	4d 89 ec             	mov    r12,r13
   2e819:	84 db                	test   bl,bl
   2e81b:	74 0f                	je     2e82c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x15ac>
   2e81d:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e824:	48 89 c7             	mov    rdi,rax
   2e827:	e8 34 5a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e82c:	4c 89 e3             	mov    rbx,r12
   2e82f:	e9 96 02 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e834:	49 89 c5             	mov    r13,rax
   2e837:	45 84 e4             	test   r12b,r12b
   2e83a:	74 0f                	je     2e84b <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x15cb>
   2e83c:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e843:	48 89 c7             	mov    rdi,rax
   2e846:	e8 15 5a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e84b:	4d 89 ec             	mov    r12,r13
   2e84e:	84 db                	test   bl,bl
   2e850:	74 0f                	je     2e861 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x15e1>
   2e852:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e859:	48 89 c7             	mov    rdi,rax
   2e85c:	e8 ff 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e861:	4c 89 e3             	mov    rbx,r12
   2e864:	e9 61 02 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e869:	49 89 c5             	mov    r13,rax
   2e86c:	45 84 e4             	test   r12b,r12b
   2e86f:	74 0f                	je     2e880 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1600>
   2e871:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e878:	48 89 c7             	mov    rdi,rax
   2e87b:	e8 e0 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e880:	4d 89 ec             	mov    r12,r13
   2e883:	84 db                	test   bl,bl
   2e885:	74 0f                	je     2e896 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1616>
   2e887:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e88e:	48 89 c7             	mov    rdi,rax
   2e891:	e8 ca 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e896:	4c 89 e3             	mov    rbx,r12
   2e899:	e9 2c 02 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e89e:	48 89 c3             	mov    rbx,rax
   2e8a1:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e8a8:	48 89 c7             	mov    rdi,rax
   2e8ab:	e8 b0 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e8b0:	eb 03                	jmp    2e8b5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1635>
   2e8b2:	48 89 c3             	mov    rbx,rax
   2e8b5:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e8bc:	48 89 c7             	mov    rdi,rax
   2e8bf:	e8 9c 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e8c4:	eb 03                	jmp    2e8c9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1649>
   2e8c6:	48 89 c3             	mov    rbx,rax
   2e8c9:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2e8d0:	48 89 c7             	mov    rdi,rax
   2e8d3:	e8 88 5b fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2e8d8:	eb 03                	jmp    2e8dd <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x165d>
   2e8da:	48 89 c3             	mov    rbx,rax
   2e8dd:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e8e4:	48 89 c7             	mov    rdi,rax
   2e8e7:	e8 d2 77 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e8ec:	e9 d9 01 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e8f1:	48 89 c3             	mov    rbx,rax
   2e8f4:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e8fb:	48 89 c7             	mov    rdi,rax
   2e8fe:	e8 5d 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e903:	eb 03                	jmp    2e908 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1688>
   2e905:	48 89 c3             	mov    rbx,rax
   2e908:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e90f:	48 89 c7             	mov    rdi,rax
   2e912:	e8 49 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e917:	eb 03                	jmp    2e91c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x169c>
   2e919:	48 89 c3             	mov    rbx,rax
   2e91c:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2e923:	48 89 c7             	mov    rdi,rax
   2e926:	e8 35 5b fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2e92b:	eb 03                	jmp    2e930 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x16b0>
   2e92d:	48 89 c3             	mov    rbx,rax
   2e930:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e937:	48 89 c7             	mov    rdi,rax
   2e93a:	e8 7f 77 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e93f:	e9 86 01 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e944:	48 89 c3             	mov    rbx,rax
   2e947:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e94e:	48 89 c7             	mov    rdi,rax
   2e951:	e8 0a 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e956:	eb 03                	jmp    2e95b <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x16db>
   2e958:	48 89 c3             	mov    rbx,rax
   2e95b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e962:	48 89 c7             	mov    rdi,rax
   2e965:	e8 f6 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e96a:	eb 03                	jmp    2e96f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x16ef>
   2e96c:	48 89 c3             	mov    rbx,rax
   2e96f:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2e976:	48 89 c7             	mov    rdi,rax
   2e979:	e8 e2 5a fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2e97e:	eb 03                	jmp    2e983 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1703>
   2e980:	48 89 c3             	mov    rbx,rax
   2e983:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e98a:	48 89 c7             	mov    rdi,rax
   2e98d:	e8 2c 77 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e992:	e9 33 01 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e997:	48 89 c3             	mov    rbx,rax
   2e99a:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e9a1:	48 89 c7             	mov    rdi,rax
   2e9a4:	e8 b7 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e9a9:	eb 17                	jmp    2e9c2 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1742>
   2e9ab:	48 89 c3             	mov    rbx,rax
   2e9ae:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e9b5:	48 89 c7             	mov    rdi,rax
   2e9b8:	e8 ff 7f ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2e9bd:	eb 03                	jmp    2e9c2 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1742>
   2e9bf:	48 89 c3             	mov    rbx,rax
   2e9c2:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e9c9:	48 89 c7             	mov    rdi,rax
   2e9cc:	e8 ef 39 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2e9d1:	e9 f4 00 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e9d6:	48 89 c3             	mov    rbx,rax
   2e9d9:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e9e0:	48 89 c7             	mov    rdi,rax
   2e9e3:	e8 78 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e9e8:	e9 dd 00 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2e9ed:	48 89 c3             	mov    rbx,rax
   2e9f0:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e9f7:	48 89 c7             	mov    rdi,rax
   2e9fa:	e8 61 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e9ff:	eb 03                	jmp    2ea04 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1784>
   2ea01:	48 89 c3             	mov    rbx,rax
   2ea04:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea0b:	48 89 c7             	mov    rdi,rax
   2ea0e:	e8 4d 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea13:	e9 b2 00 00 00       	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2ea18:	48 89 c3             	mov    rbx,rax
   2ea1b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea22:	48 89 c7             	mov    rdi,rax
   2ea25:	e8 36 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea2a:	eb 03                	jmp    2ea2f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x17af>
   2ea2c:	48 89 c3             	mov    rbx,rax
   2ea2f:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2ea36:	48 89 c7             	mov    rdi,rax
   2ea39:	e8 22 5a fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2ea3e:	eb 62                	jmp    2eaa2 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1822>
   2ea40:	48 89 c3             	mov    rbx,rax
   2ea43:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2ea4a:	48 89 c7             	mov    rdi,rax
   2ea4d:	e8 0e 5a fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2ea52:	eb 4e                	jmp    2eaa2 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1822>
   2ea54:	48 89 c3             	mov    rbx,rax
   2ea57:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea5e:	48 89 c7             	mov    rdi,rax
   2ea61:	e8 fa 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea66:	eb 2b                	jmp    2ea93 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1813>
   2ea68:	48 89 c3             	mov    rbx,rax
   2ea6b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea72:	48 89 c7             	mov    rdi,rax
   2ea75:	e8 e6 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea7a:	eb 17                	jmp    2ea93 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1813>
   2ea7c:	48 89 c3             	mov    rbx,rax
   2ea7f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea86:	48 89 c7             	mov    rdi,rax
   2ea89:	e8 d2 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea8e:	eb 03                	jmp    2ea93 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1813>
   2ea90:	48 89 c3             	mov    rbx,rax
   2ea93:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2ea9a:	48 89 c7             	mov    rdi,rax
   2ea9d:	e8 be 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eaa2:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2eaa9:	48 89 c7             	mov    rdi,rax
   2eaac:	e8 0d 76 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2eab1:	eb 17                	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2eab3:	48 89 c3             	mov    rbx,rax
   2eab6:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2eabd:	48 89 c7             	mov    rdi,rax
   2eac0:	e8 9b 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eac5:	eb 03                	jmp    2eaca <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x184a>
   2eac7:	48 89 c3             	mov    rbx,rax
   2eaca:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2ead1:	48 89 c7             	mov    rdi,rax
   2ead4:	e8 87 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ead9:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2eae0:	48 89 c7             	mov    rdi,rax
   2eae3:	e8 c2 2e 00 00       	call   319aa <objl::Mesh::~Mesh()>
   2eae8:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2eaef:	48 89 c7             	mov    rdi,rax
   2eaf2:	e8 69 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eaf7:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2eafe:	48 89 c7             	mov    rdi,rax
   2eb01:	e8 b8 75 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2eb06:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2eb0d:	48 89 c7             	mov    rdi,rax
   2eb10:	e8 a7 7e ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2eb15:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2eb1c:	48 89 c7             	mov    rdi,rax
   2eb1f:	e8 9c 38 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2eb24:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2eb2b:	48 89 c7             	mov    rdi,rax
   2eb2e:	e8 75 42 00 00       	call   32da8 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2eb33:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2eb3a:	48 89 c7             	mov    rdi,rax
   2eb3d:	e8 3c 43 00 00       	call   32e7e <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::~vector()>
   2eb42:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2eb49:	48 89 c7             	mov    rdi,rax
   2eb4c:	e8 57 42 00 00       	call   32da8 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2eb51:	eb 03                	jmp    2eb56 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x18d6>
   2eb53:	48 89 c3             	mov    rbx,rax
   2eb56:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2eb5d:	48 89 c7             	mov    rdi,rax
   2eb60:	e8 5b 55 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   2eb65:	48 89 d8             	mov    rax,rbx
   2eb68:	48 89 c7             	mov    rdi,rax
   2eb6b:	e8 c0 5b fd ff       	call   4730 <_Unwind_Resume@plt>
   2eb70:	e8 3b 59 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2eb75:	48 81 c4 98 0a 00 00 	add    rsp,0xa98
   2eb7c:	5b                   	pop    rbx
   2eb7d:	41 5c                	pop    r12
   2eb7f:	41 5d                	pop    r13
   2eb81:	5d                   	pop    rbp
   2eb82:	c3                   	ret    
   2eb83:	90                   	nop

000000000002eb84 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   2eb84:	55                   	push   rbp
   2eb85:	48 89 e5             	mov    rbp,rsp
   2eb88:	53                   	push   rbx
   2eb89:	48 81 ec 28 01 00 00 	sub    rsp,0x128
   2eb90:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
   2eb97:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
   2eb9e:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
   2eba5:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
   2ebac:	4c 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],r8
   2ebb3:	4c 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],r9
   2ebba:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ebc3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ebc7:	31 c0                	xor    eax,eax
   2ebc9:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2ebd0:	48 89 c7             	mov    rdi,rax
   2ebd3:	e8 66 64 ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2ebd8:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ebdf:	48 89 c7             	mov    rdi,rax
   2ebe2:	e8 57 64 ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2ebe7:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2ebeb:	48 89 c7             	mov    rdi,rax
   2ebee:	e8 5f 31 00 00       	call   31d52 <objl::Vertex::Vertex()>
   2ebf3:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ebfa:	48 89 c7             	mov    rdi,rax
   2ebfd:	e8 3e 5b fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2ec02:	48 8d 95 34 ff ff ff 	lea    rdx,[rbp-0xcc]
   2ec09:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ec0d:	48 8d 35 f5 e1 00 00 	lea    rsi,[rip+0xe1f5]        # 3ce09 <NANO_SEC+0x1b41>
   2ec14:	48 89 c7             	mov    rdi,rax
   2ec17:	e8 96 72 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2ec1c:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ec20:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   2ec27:	48 89 d6             	mov    rsi,rdx
   2ec2a:	48 89 c7             	mov    rdi,rax
   2ec2d:	e8 ae 29 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2ec32:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2ec36:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   2ec3d:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ec41:	48 89 ce             	mov    rsi,rcx
   2ec44:	48 89 c7             	mov    rdi,rax
   2ec47:	e8 a9 26 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2ec4c:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ec50:	48 89 c7             	mov    rdi,rax
   2ec53:	e8 08 56 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ec58:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ec5c:	48 89 c7             	mov    rdi,rax
   2ec5f:	e8 fc 55 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ec64:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ec6b:	48 89 c7             	mov    rdi,rax
   2ec6e:	e8 ed 57 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2ec73:	c6 85 0f ff ff ff 00 	mov    BYTE PTR [rbp-0xf1],0x0
   2ec7a:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
   2ec84:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2ec8b:	48 89 c7             	mov    rdi,rax
   2ec8e:	e8 93 76 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2ec93:	39 85 10 ff ff ff    	cmp    DWORD PTR [rbp-0xf0],eax
   2ec99:	0f 9c c0             	setl   al
   2ec9c:	84 c0                	test   al,al
   2ec9e:	0f 84 ce 03 00 00    	je     2f072 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4ee>
   2eca4:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ecab:	48 89 c7             	mov    rdi,rax
   2ecae:	e8 8d 5a fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   2ecb3:	48 8d 95 34 ff ff ff 	lea    rdx,[rbp-0xcc]
   2ecba:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ecbe:	48 8d 35 5e e1 00 00 	lea    rsi,[rip+0xe15e]        # 3ce23 <NANO_SEC+0x1b5b>
   2ecc5:	48 89 c7             	mov    rdi,rax
   2ecc8:	e8 e5 71 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2eccd:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2ecd3:	48 63 d0             	movsxd rdx,eax
   2ecd6:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2ecdd:	48 89 d6             	mov    rsi,rdx
   2ece0:	48 89 c7             	mov    rdi,rax
   2ece3:	e8 62 76 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ece8:	48 89 c1             	mov    rcx,rax
   2eceb:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2ecef:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ecf6:	48 89 c6             	mov    rsi,rax
   2ecf9:	48 89 cf             	mov    rdi,rcx
   2ecfc:	e8 f4 25 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2ed01:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ed05:	48 89 c7             	mov    rdi,rax
   2ed08:	e8 53 55 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ed0d:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ed14:	48 89 c7             	mov    rdi,rax
   2ed17:	e8 44 57 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2ed1c:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ed23:	48 89 c7             	mov    rdi,rax
   2ed26:	e8 fb 75 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2ed2b:	48 83 f8 01          	cmp    rax,0x1
   2ed2f:	0f 94 c0             	sete   al
   2ed32:	84 c0                	test   al,al
   2ed34:	74 0a                	je     2ed40 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1bc>
   2ed36:	c7 85 14 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xec],0x1
   2ed40:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ed47:	48 89 c7             	mov    rdi,rax
   2ed4a:	e8 d7 75 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2ed4f:	48 83 f8 02          	cmp    rax,0x2
   2ed53:	0f 94 c0             	sete   al
   2ed56:	84 c0                	test   al,al
   2ed58:	74 0a                	je     2ed64 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1e0>
   2ed5a:	c7 85 14 ff ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0xec],0x2
   2ed64:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ed6b:	48 89 c7             	mov    rdi,rax
   2ed6e:	e8 b3 75 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2ed73:	48 83 f8 03          	cmp    rax,0x3
   2ed77:	0f 94 c0             	sete   al
   2ed7a:	84 c0                	test   al,al
   2ed7c:	74 3d                	je     2edbb <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x237>
   2ed7e:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ed85:	be 01 00 00 00       	mov    esi,0x1
   2ed8a:	48 89 c7             	mov    rdi,rax
   2ed8d:	e8 b8 75 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ed92:	48 8d 35 59 e0 00 00 	lea    rsi,[rip+0xe059]        # 3cdf2 <NANO_SEC+0x1b2a>
   2ed99:	48 89 c7             	mov    rdi,rax
   2ed9c:	e8 f0 3e 00 00       	call   32c91 <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2eda1:	84 c0                	test   al,al
   2eda3:	74 0c                	je     2edb1 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x22d>
   2eda5:	c7 85 14 ff ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0xec],0x4
   2edaf:	eb 0a                	jmp    2edbb <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x237>
   2edb1:	c7 85 14 ff ff ff 03 00 00 00 	mov    DWORD PTR [rbp-0xec],0x3
   2edbb:	83 bd 14 ff ff ff 04 	cmp    DWORD PTR [rbp-0xec],0x4
   2edc2:	0f 84 e9 01 00 00    	je     2efb1 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x42d>
   2edc8:	83 bd 14 ff ff ff 04 	cmp    DWORD PTR [rbp-0xec],0x4
   2edcf:	0f 8f 90 02 00 00    	jg     2f065 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e1>
   2edd5:	83 bd 14 ff ff ff 03 	cmp    DWORD PTR [rbp-0xec],0x3
   2eddc:	0f 84 26 01 00 00    	je     2ef08 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x384>
   2ede2:	83 bd 14 ff ff ff 03 	cmp    DWORD PTR [rbp-0xec],0x3
   2ede9:	0f 8f 76 02 00 00    	jg     2f065 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e1>
   2edef:	83 bd 14 ff ff ff 01 	cmp    DWORD PTR [rbp-0xec],0x1
   2edf6:	74 0e                	je     2ee06 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x282>
   2edf8:	83 bd 14 ff ff ff 02 	cmp    DWORD PTR [rbp-0xec],0x2
   2edff:	74 7f                	je     2ee80 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2fc>
   2ee01:	e9 5f 02 00 00       	jmp    2f065 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e1>
   2ee06:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ee0d:	be 00 00 00 00       	mov    esi,0x0
   2ee12:	48 89 c7             	mov    rdi,rax
   2ee15:	e8 30 75 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ee1a:	48 89 c2             	mov    rdx,rax
   2ee1d:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2ee24:	48 89 d6             	mov    rsi,rdx
   2ee27:	48 89 c7             	mov    rdi,rax
   2ee2a:	e8 7f 45 00 00       	call   333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2ee2f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ee32:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2ee36:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2ee39:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2ee3c:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ee43:	66 0f ef c9          	pxor   xmm1,xmm1
   2ee47:	66 0f ef c0          	pxor   xmm0,xmm0
   2ee4b:	48 89 c7             	mov    rdi,rax
   2ee4e:	e8 09 d2 ff ff       	call   2c05c <objl::Vector2::Vector2(float, float)>
   2ee53:	48 8b 85 34 ff ff ff 	mov    rax,QWORD PTR [rbp-0xcc]
   2ee5a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2ee5e:	c6 85 0f ff ff ff 01 	mov    BYTE PTR [rbp-0xf1],0x1
   2ee65:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2ee69:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2ee70:	48 89 d6             	mov    rsi,rdx
   2ee73:	48 89 c7             	mov    rdi,rax
   2ee76:	e8 f5 42 00 00       	call   33170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2ee7b:	e9 e6 01 00 00       	jmp    2f066 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2ee80:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ee87:	be 00 00 00 00       	mov    esi,0x0
   2ee8c:	48 89 c7             	mov    rdi,rax
   2ee8f:	e8 b6 74 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ee94:	48 89 c2             	mov    rdx,rax
   2ee97:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2ee9e:	48 89 d6             	mov    rsi,rdx
   2eea1:	48 89 c7             	mov    rdi,rax
   2eea4:	e8 05 45 00 00       	call   333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2eea9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2eeac:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2eeb0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2eeb3:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2eeb6:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2eebd:	be 01 00 00 00       	mov    esi,0x1
   2eec2:	48 89 c7             	mov    rdi,rax
   2eec5:	e8 80 74 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2eeca:	48 89 c2             	mov    rdx,rax
   2eecd:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   2eed4:	48 89 d6             	mov    rsi,rdx
   2eed7:	48 89 c7             	mov    rdi,rax
   2eeda:	e8 2a 45 00 00       	call   33409 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2eedf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2eee2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2eee6:	c6 85 0f ff ff ff 01 	mov    BYTE PTR [rbp-0xf1],0x1
   2eeed:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2eef1:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2eef8:	48 89 d6             	mov    rsi,rdx
   2eefb:	48 89 c7             	mov    rdi,rax
   2eefe:	e8 6d 42 00 00       	call   33170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2ef03:	e9 5e 01 00 00       	jmp    2f066 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2ef08:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ef0f:	be 00 00 00 00       	mov    esi,0x0
   2ef14:	48 89 c7             	mov    rdi,rax
   2ef17:	e8 2e 74 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ef1c:	48 89 c2             	mov    rdx,rax
   2ef1f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2ef26:	48 89 d6             	mov    rsi,rdx
   2ef29:	48 89 c7             	mov    rdi,rax
   2ef2c:	e8 7d 44 00 00       	call   333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2ef31:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ef34:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2ef38:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2ef3b:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2ef3e:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ef45:	66 0f ef c9          	pxor   xmm1,xmm1
   2ef49:	66 0f ef c0          	pxor   xmm0,xmm0
   2ef4d:	48 89 c7             	mov    rdi,rax
   2ef50:	e8 07 d1 ff ff       	call   2c05c <objl::Vector2::Vector2(float, float)>
   2ef55:	48 8b 85 34 ff ff ff 	mov    rax,QWORD PTR [rbp-0xcc]
   2ef5c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2ef60:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ef67:	be 02 00 00 00       	mov    esi,0x2
   2ef6c:	48 89 c7             	mov    rdi,rax
   2ef6f:	e8 d6 73 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ef74:	48 89 c2             	mov    rdx,rax
   2ef77:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   2ef7e:	48 89 d6             	mov    rsi,rdx
   2ef81:	48 89 c7             	mov    rdi,rax
   2ef84:	e8 25 44 00 00       	call   333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2ef89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ef8c:	48 89 55 8c          	mov    QWORD PTR [rbp-0x74],rdx
   2ef90:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2ef93:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   2ef96:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2ef9a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2efa1:	48 89 d6             	mov    rsi,rdx
   2efa4:	48 89 c7             	mov    rdi,rax
   2efa7:	e8 c4 41 00 00       	call   33170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2efac:	e9 b5 00 00 00       	jmp    2f066 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2efb1:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2efb8:	be 00 00 00 00       	mov    esi,0x0
   2efbd:	48 89 c7             	mov    rdi,rax
   2efc0:	e8 85 73 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2efc5:	48 89 c2             	mov    rdx,rax
   2efc8:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2efcf:	48 89 d6             	mov    rsi,rdx
   2efd2:	48 89 c7             	mov    rdi,rax
   2efd5:	e8 d4 43 00 00       	call   333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2efda:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2efdd:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2efe1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2efe4:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2efe7:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2efee:	be 01 00 00 00       	mov    esi,0x1
   2eff3:	48 89 c7             	mov    rdi,rax
   2eff6:	e8 4f 73 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2effb:	48 89 c2             	mov    rdx,rax
   2effe:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   2f005:	48 89 d6             	mov    rsi,rdx
   2f008:	48 89 c7             	mov    rdi,rax
   2f00b:	e8 f9 43 00 00       	call   33409 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2f010:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2f013:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2f017:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f01e:	be 02 00 00 00       	mov    esi,0x2
   2f023:	48 89 c7             	mov    rdi,rax
   2f026:	e8 1f 73 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2f02b:	48 89 c2             	mov    rdx,rax
   2f02e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   2f035:	48 89 d6             	mov    rsi,rdx
   2f038:	48 89 c7             	mov    rdi,rax
   2f03b:	e8 6e 43 00 00       	call   333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2f040:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f043:	48 89 55 8c          	mov    QWORD PTR [rbp-0x74],rdx
   2f047:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2f04a:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   2f04d:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2f051:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f058:	48 89 d6             	mov    rsi,rdx
   2f05b:	48 89 c7             	mov    rdi,rax
   2f05e:	e8 0d 41 00 00       	call   33170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2f063:	eb 01                	jmp    2f066 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2f065:	90                   	nop
   2f066:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
   2f06d:	e9 12 fc ff ff       	jmp    2ec84 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x100>
   2f072:	80 bd 0f ff ff ff 00 	cmp    BYTE PTR [rbp-0xf1],0x0
   2f079:	0f 84 3f 01 00 00    	je     2f1be <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x63a>
   2f07f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f086:	be 01 00 00 00       	mov    esi,0x1
   2f08b:	48 89 c7             	mov    rdi,rax
   2f08e:	e8 33 71 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f093:	48 89 c3             	mov    rbx,rax
   2f096:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f09d:	be 00 00 00 00       	mov    esi,0x0
   2f0a2:	48 89 c7             	mov    rdi,rax
   2f0a5:	e8 1c 71 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f0aa:	48 89 de             	mov    rsi,rbx
   2f0ad:	48 89 c7             	mov    rdi,rax
   2f0b0:	e8 fd d3 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2f0b5:	66 48 0f 7e c0       	movq   rax,xmm0
   2f0ba:	0f 28 c1             	movaps xmm0,xmm1
   2f0bd:	48 89 85 1c ff ff ff 	mov    QWORD PTR [rbp-0xe4],rax
   2f0c4:	f3 0f 11 85 24 ff ff ff 	movss  DWORD PTR [rbp-0xdc],xmm0
   2f0cc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f0d3:	be 01 00 00 00       	mov    esi,0x1
   2f0d8:	48 89 c7             	mov    rdi,rax
   2f0db:	e8 e6 70 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f0e0:	48 89 c3             	mov    rbx,rax
   2f0e3:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f0ea:	be 02 00 00 00       	mov    esi,0x2
   2f0ef:	48 89 c7             	mov    rdi,rax
   2f0f2:	e8 cf 70 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f0f7:	48 89 de             	mov    rsi,rbx
   2f0fa:	48 89 c7             	mov    rdi,rax
   2f0fd:	e8 b0 d3 ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2f102:	66 48 0f 7e c0       	movq   rax,xmm0
   2f107:	0f 28 c1             	movaps xmm0,xmm1
   2f10a:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
   2f111:	f3 0f 11 85 30 ff ff ff 	movss  DWORD PTR [rbp-0xd0],xmm0
   2f119:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   2f120:	f3 0f 10 85 30 ff ff ff 	movss  xmm0,DWORD PTR [rbp-0xd0]
   2f128:	48 8b 85 1c ff ff ff 	mov    rax,QWORD PTR [rbp-0xe4]
   2f12f:	f3 0f 10 8d 24 ff ff ff 	movss  xmm1,DWORD PTR [rbp-0xdc]
   2f137:	66 48 0f 6e d2       	movq   xmm2,rdx
   2f13c:	0f 28 d8             	movaps xmm3,xmm0
   2f13f:	66 48 0f 6e c0       	movq   xmm0,rax
   2f144:	e8 7e d7 ff ff       	call   2c8c7 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2f149:	66 48 0f 7e c0       	movq   rax,xmm0
   2f14e:	0f 28 c1             	movaps xmm0,xmm1
   2f151:	48 89 85 34 ff ff ff 	mov    QWORD PTR [rbp-0xcc],rax
   2f158:	f3 0f 11 85 3c ff ff ff 	movss  DWORD PTR [rbp-0xc4],xmm0
   2f160:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
   2f16a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f171:	48 89 c7             	mov    rdi,rax
   2f174:	e8 e1 6f ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f179:	39 85 18 ff ff ff    	cmp    DWORD PTR [rbp-0xe8],eax
   2f17f:	0f 9c c0             	setl   al
   2f182:	84 c0                	test   al,al
   2f184:	74 38                	je     2f1be <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x63a>
   2f186:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2f18c:	48 63 d0             	movsxd rdx,eax
   2f18f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f196:	48 89 d6             	mov    rsi,rdx
   2f199:	48 89 c7             	mov    rdi,rax
   2f19c:	e8 25 70 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f1a1:	48 8b 95 34 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xcc]
   2f1a8:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   2f1ac:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
   2f1b2:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2f1b5:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
   2f1bc:	eb ac                	jmp    2f16a <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5e6>
   2f1be:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f1c5:	48 89 c7             	mov    rdi,rax
   2f1c8:	e8 f1 6e ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f1cd:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2f1d4:	48 89 c7             	mov    rdi,rax
   2f1d7:	e8 e2 6e ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f1dc:	90                   	nop
   2f1dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2f1e1:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2f1ea:	0f 84 91 00 00 00    	je     2f281 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6fd>
   2f1f0:	e9 87 00 00 00       	jmp    2f27c <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6f8>
   2f1f5:	48 89 c3             	mov    rbx,rax
   2f1f8:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f1fc:	48 89 c7             	mov    rdi,rax
   2f1ff:	e8 5c 50 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2f204:	eb 03                	jmp    2f209 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x685>
   2f206:	48 89 c3             	mov    rbx,rax
   2f209:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f20d:	48 89 c7             	mov    rdi,rax
   2f210:	e8 4b 50 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2f215:	eb 03                	jmp    2f21a <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x696>
   2f217:	48 89 c3             	mov    rbx,rax
   2f21a:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2f221:	48 89 c7             	mov    rdi,rax
   2f224:	e8 37 52 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2f229:	eb 28                	jmp    2f253 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6cf>
   2f22b:	48 89 c3             	mov    rbx,rax
   2f22e:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f232:	48 89 c7             	mov    rdi,rax
   2f235:	e8 26 50 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2f23a:	eb 03                	jmp    2f23f <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6bb>
   2f23c:	48 89 c3             	mov    rbx,rax
   2f23f:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2f246:	48 89 c7             	mov    rdi,rax
   2f249:	e8 12 52 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   2f24e:	eb 03                	jmp    2f253 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6cf>
   2f250:	48 89 c3             	mov    rbx,rax
   2f253:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f25a:	48 89 c7             	mov    rdi,rax
   2f25d:	e8 5c 6e ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f262:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2f269:	48 89 c7             	mov    rdi,rax
   2f26c:	e8 4d 6e ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f271:	48 89 d8             	mov    rax,rbx
   2f274:	48 89 c7             	mov    rdi,rax
   2f277:	e8 b4 54 fd ff       	call   4730 <_Unwind_Resume@plt>
   2f27c:	e8 2f 52 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2f281:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2f285:	c9                   	leave  
   2f286:	c3                   	ret    
   2f287:	90                   	nop

000000000002f288 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>:
   2f288:	55                   	push   rbp
   2f289:	48 89 e5             	mov    rbp,rsp
   2f28c:	53                   	push   rbx
   2f28d:	48 81 ec 18 01 00 00 	sub    rsp,0x118
   2f294:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
   2f29b:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
   2f2a2:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
   2f2a9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2f2b2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2f2b6:	31 c0                	xor    eax,eax
   2f2b8:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f2bf:	48 89 c7             	mov    rdi,rax
   2f2c2:	e8 93 6e ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f2c7:	48 83 f8 02          	cmp    rax,0x2
   2f2cb:	0f 96 c0             	setbe  al
   2f2ce:	84 c0                	test   al,al
   2f2d0:	0f 85 19 0c 00 00    	jne    2feef <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc67>
   2f2d6:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f2dd:	48 89 c7             	mov    rdi,rax
   2f2e0:	e8 75 6e ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f2e5:	48 83 f8 03          	cmp    rax,0x3
   2f2e9:	0f 94 c0             	sete   al
   2f2ec:	84 c0                	test   al,al
   2f2ee:	74 5c                	je     2f34c <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc4>
   2f2f0:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
   2f2f7:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2f2fb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f302:	48 89 d6             	mov    rsi,rdx
   2f305:	48 89 c7             	mov    rdi,rax
   2f308:	e8 e7 6f ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f30d:	c7 45 c0 01 00 00 00 	mov    DWORD PTR [rbp-0x40],0x1
   2f314:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2f318:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f31f:	48 89 d6             	mov    rsi,rdx
   2f322:	48 89 c7             	mov    rdi,rax
   2f325:	e8 ca 6f ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f32a:	c7 45 c0 02 00 00 00 	mov    DWORD PTR [rbp-0x40],0x2
   2f331:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2f335:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f33c:	48 89 d6             	mov    rsi,rdx
   2f33f:	48 89 c7             	mov    rdi,rax
   2f342:	e8 ad 6f ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f347:	e9 a4 0b 00 00       	jmp    2fef0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc68>
   2f34c:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
   2f353:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f35a:	48 89 d6             	mov    rsi,rdx
   2f35d:	48 89 c7             	mov    rdi,rax
   2f360:	e8 ff 40 00 00       	call   33464 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   2f365:	c7 85 04 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xfc],0x0
   2f36f:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f376:	48 89 c7             	mov    rdi,rax
   2f379:	e8 dc 6d ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f37e:	39 85 04 ff ff ff    	cmp    DWORD PTR [rbp-0xfc],eax
   2f384:	0f 9c c0             	setl   al
   2f387:	84 c0                	test   al,al
   2f389:	0f 84 f7 0a 00 00    	je     2fe86 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbfe>
   2f38f:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f393:	48 89 c7             	mov    rdi,rax
   2f396:	e8 b7 29 00 00       	call   31d52 <objl::Vertex::Vertex()>
   2f39b:	83 bd 04 ff ff ff 00 	cmp    DWORD PTR [rbp-0xfc],0x0
   2f3a2:	75 49                	jne    2f3ed <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x165>
   2f3a4:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f3ab:	48 89 c7             	mov    rdi,rax
   2f3ae:	e8 a7 6d ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f3b3:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   2f3b7:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f3be:	48 89 d6             	mov    rsi,rdx
   2f3c1:	48 89 c7             	mov    rdi,rax
   2f3c4:	e8 fd 6d ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f3c9:	48 89 c1             	mov    rcx,rax
   2f3cc:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f3cf:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f3d3:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   2f3d7:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
   2f3db:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f3df:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f3e3:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   2f3e7:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2f3eb:	eb 40                	jmp    2f42d <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x1a5>
   2f3ed:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f3f3:	83 e8 01             	sub    eax,0x1
   2f3f6:	48 63 d0             	movsxd rdx,eax
   2f3f9:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f400:	48 89 d6             	mov    rsi,rdx
   2f403:	48 89 c7             	mov    rdi,rax
   2f406:	e8 bb 6d ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f40b:	48 89 c1             	mov    rcx,rax
   2f40e:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f411:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f415:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   2f419:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
   2f41d:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f421:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f425:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   2f429:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2f42d:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f433:	48 63 d0             	movsxd rdx,eax
   2f436:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f43d:	48 89 d6             	mov    rsi,rdx
   2f440:	48 89 c7             	mov    rdi,rax
   2f443:	e8 7e 6d ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f448:	48 89 c1             	mov    rcx,rax
   2f44b:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f44e:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f452:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2f456:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   2f45a:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f45e:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f462:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2f466:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2f46a:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f46e:	48 89 c7             	mov    rdi,rax
   2f471:	e8 dc 28 00 00       	call   31d52 <objl::Vertex::Vertex()>
   2f476:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f47c:	48 63 d8             	movsxd rbx,eax
   2f47f:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f486:	48 89 c7             	mov    rdi,rax
   2f489:	e8 cc 6c ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f48e:	48 83 e8 01          	sub    rax,0x1
   2f492:	48 39 c3             	cmp    rbx,rax
   2f495:	0f 94 c0             	sete   al
   2f498:	84 c0                	test   al,al
   2f49a:	74 38                	je     2f4d4 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x24c>
   2f49c:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f4a3:	be 00 00 00 00       	mov    esi,0x0
   2f4a8:	48 89 c7             	mov    rdi,rax
   2f4ab:	e8 16 6d ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f4b0:	48 89 c1             	mov    rcx,rax
   2f4b3:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f4b6:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f4ba:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2f4be:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2f4c2:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f4c6:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f4ca:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2f4ce:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2f4d2:	eb 40                	jmp    2f514 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x28c>
   2f4d4:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f4da:	83 c0 01             	add    eax,0x1
   2f4dd:	48 63 d0             	movsxd rdx,eax
   2f4e0:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f4e7:	48 89 d6             	mov    rsi,rdx
   2f4ea:	48 89 c7             	mov    rdi,rax
   2f4ed:	e8 d4 6c ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f4f2:	48 89 c1             	mov    rcx,rax
   2f4f5:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f4f8:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f4fc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2f500:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2f504:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f508:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f50c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2f510:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2f514:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f51b:	48 89 c7             	mov    rdi,rax
   2f51e:	e8 37 6c ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f523:	48 83 f8 03          	cmp    rax,0x3
   2f527:	0f 94 c0             	sete   al
   2f52a:	84 c0                	test   al,al
   2f52c:	0f 84 4c 01 00 00    	je     2f67e <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x3f6>
   2f532:	c7 85 08 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x0
   2f53c:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f543:	48 89 c7             	mov    rdi,rax
   2f546:	e8 0f 6c ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f54b:	39 85 08 ff ff ff    	cmp    DWORD PTR [rbp-0xf8],eax
   2f551:	0f 9c c0             	setl   al
   2f554:	84 c0                	test   al,al
   2f556:	0f 84 0e 01 00 00    	je     2f66a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x3e2>
   2f55c:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f562:	48 63 d0             	movsxd rdx,eax
   2f565:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f56c:	48 89 d6             	mov    rsi,rdx
   2f56f:	48 89 c7             	mov    rdi,rax
   2f572:	e8 01 40 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f577:	48 89 c2             	mov    rdx,rax
   2f57a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f57e:	48 89 c6             	mov    rsi,rax
   2f581:	48 89 d7             	mov    rdi,rdx
   2f584:	e8 9f cd ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f589:	84 c0                	test   al,al
   2f58b:	74 25                	je     2f5b2 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x32a>
   2f58d:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f593:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f599:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f5a0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f5a7:	48 89 d6             	mov    rsi,rdx
   2f5aa:	48 89 c7             	mov    rdi,rax
   2f5ad:	e8 42 6d ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f5b2:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f5b8:	48 63 d0             	movsxd rdx,eax
   2f5bb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f5c2:	48 89 d6             	mov    rsi,rdx
   2f5c5:	48 89 c7             	mov    rdi,rax
   2f5c8:	e8 ab 3f 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f5cd:	48 89 c2             	mov    rdx,rax
   2f5d0:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f5d4:	48 89 c6             	mov    rsi,rax
   2f5d7:	48 89 d7             	mov    rdi,rdx
   2f5da:	e8 49 cd ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f5df:	84 c0                	test   al,al
   2f5e1:	74 25                	je     2f608 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x380>
   2f5e3:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f5e9:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f5ef:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f5f6:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f5fd:	48 89 d6             	mov    rsi,rdx
   2f600:	48 89 c7             	mov    rdi,rax
   2f603:	e8 ec 6c ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f608:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f60e:	48 63 d0             	movsxd rdx,eax
   2f611:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f618:	48 89 d6             	mov    rsi,rdx
   2f61b:	48 89 c7             	mov    rdi,rax
   2f61e:	e8 55 3f 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f623:	48 89 c2             	mov    rdx,rax
   2f626:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f62a:	48 89 c6             	mov    rsi,rax
   2f62d:	48 89 d7             	mov    rdi,rdx
   2f630:	e8 f3 cc ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f635:	84 c0                	test   al,al
   2f637:	74 25                	je     2f65e <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x3d6>
   2f639:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f63f:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f645:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f64c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f653:	48 89 d6             	mov    rsi,rdx
   2f656:	48 89 c7             	mov    rdi,rax
   2f659:	e8 96 6c ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f65e:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   2f665:	e9 d2 fe ff ff       	jmp    2f53c <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x2b4>
   2f66a:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f671:	48 89 c7             	mov    rdi,rax
   2f674:	e8 41 36 00 00       	call   32cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2f679:	e9 08 08 00 00       	jmp    2fe86 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbfe>
   2f67e:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f685:	48 89 c7             	mov    rdi,rax
   2f688:	e8 cd 6a ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f68d:	48 83 f8 04          	cmp    rax,0x4
   2f691:	0f 94 c0             	sete   al
   2f694:	84 c0                	test   al,al
   2f696:	0f 84 9f 03 00 00    	je     2fa3b <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x7b3>
   2f69c:	c7 85 0c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf4],0x0
   2f6a6:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f6ad:	48 89 c7             	mov    rdi,rax
   2f6b0:	e8 a5 6a ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f6b5:	39 85 0c ff ff ff    	cmp    DWORD PTR [rbp-0xf4],eax
   2f6bb:	0f 9c c0             	setl   al
   2f6be:	84 c0                	test   al,al
   2f6c0:	0f 84 0e 01 00 00    	je     2f7d4 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x54c>
   2f6c6:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f6cc:	48 63 d0             	movsxd rdx,eax
   2f6cf:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f6d6:	48 89 d6             	mov    rsi,rdx
   2f6d9:	48 89 c7             	mov    rdi,rax
   2f6dc:	e8 97 3e 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f6e1:	48 89 c2             	mov    rdx,rax
   2f6e4:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f6e8:	48 89 c6             	mov    rsi,rax
   2f6eb:	48 89 d7             	mov    rdi,rdx
   2f6ee:	e8 35 cc ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f6f3:	84 c0                	test   al,al
   2f6f5:	74 25                	je     2f71c <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x494>
   2f6f7:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f6fd:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f703:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f70a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f711:	48 89 d6             	mov    rsi,rdx
   2f714:	48 89 c7             	mov    rdi,rax
   2f717:	e8 d8 6b ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f71c:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f722:	48 63 d0             	movsxd rdx,eax
   2f725:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f72c:	48 89 d6             	mov    rsi,rdx
   2f72f:	48 89 c7             	mov    rdi,rax
   2f732:	e8 41 3e 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f737:	48 89 c2             	mov    rdx,rax
   2f73a:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f73e:	48 89 c6             	mov    rsi,rax
   2f741:	48 89 d7             	mov    rdi,rdx
   2f744:	e8 df cb ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f749:	84 c0                	test   al,al
   2f74b:	74 25                	je     2f772 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x4ea>
   2f74d:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f753:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f759:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f760:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f767:	48 89 d6             	mov    rsi,rdx
   2f76a:	48 89 c7             	mov    rdi,rax
   2f76d:	e8 82 6b ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f772:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f778:	48 63 d0             	movsxd rdx,eax
   2f77b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f782:	48 89 d6             	mov    rsi,rdx
   2f785:	48 89 c7             	mov    rdi,rax
   2f788:	e8 eb 3d 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f78d:	48 89 c2             	mov    rdx,rax
   2f790:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f794:	48 89 c6             	mov    rsi,rax
   2f797:	48 89 d7             	mov    rdi,rdx
   2f79a:	e8 89 cb ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f79f:	84 c0                	test   al,al
   2f7a1:	74 25                	je     2f7c8 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x540>
   2f7a3:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f7a9:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f7af:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f7b6:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f7bd:	48 89 d6             	mov    rsi,rdx
   2f7c0:	48 89 c7             	mov    rdi,rax
   2f7c3:	e8 2c 6b ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f7c8:	83 85 0c ff ff ff 01 	add    DWORD PTR [rbp-0xf4],0x1
   2f7cf:	e9 d2 fe ff ff       	jmp    2f6a6 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x41e>
   2f7d4:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
   2f7db:	48 89 c7             	mov    rdi,rax
   2f7de:	e8 cf ca ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   2f7e3:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
   2f7ed:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f7f4:	48 89 c7             	mov    rdi,rax
   2f7f7:	e8 5e 69 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f7fc:	39 85 10 ff ff ff    	cmp    DWORD PTR [rbp-0xf0],eax
   2f802:	0f 9c c0             	setl   al
   2f805:	84 c0                	test   al,al
   2f807:	0f 84 df 00 00 00    	je     2f8ec <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x664>
   2f80d:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f813:	48 63 d0             	movsxd rdx,eax
   2f816:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f81d:	48 89 d6             	mov    rsi,rdx
   2f820:	48 89 c7             	mov    rdi,rax
   2f823:	e8 9e 69 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f828:	48 89 c2             	mov    rdx,rax
   2f82b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f82f:	48 89 c6             	mov    rsi,rax
   2f832:	48 89 d7             	mov    rdi,rdx
   2f835:	e8 5a cb ff ff       	call   2c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2f83a:	84 c0                	test   al,al
   2f83c:	74 69                	je     2f8a7 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x61f>
   2f83e:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f844:	48 63 d0             	movsxd rdx,eax
   2f847:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f84e:	48 89 d6             	mov    rsi,rdx
   2f851:	48 89 c7             	mov    rdi,rax
   2f854:	e8 6d 69 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f859:	48 89 c2             	mov    rdx,rax
   2f85c:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f860:	48 89 c6             	mov    rsi,rax
   2f863:	48 89 d7             	mov    rdi,rdx
   2f866:	e8 29 cb ff ff       	call   2c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2f86b:	84 c0                	test   al,al
   2f86d:	74 38                	je     2f8a7 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x61f>
   2f86f:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f875:	48 63 d0             	movsxd rdx,eax
   2f878:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f87f:	48 89 d6             	mov    rsi,rdx
   2f882:	48 89 c7             	mov    rdi,rax
   2f885:	e8 3c 69 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f88a:	48 89 c2             	mov    rdx,rax
   2f88d:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f891:	48 89 c6             	mov    rsi,rax
   2f894:	48 89 d7             	mov    rdi,rdx
   2f897:	e8 f8 ca ff ff       	call   2c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2f89c:	84 c0                	test   al,al
   2f89e:	74 07                	je     2f8a7 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x61f>
   2f8a0:	b8 01 00 00 00       	mov    eax,0x1
   2f8a5:	eb 05                	jmp    2f8ac <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x624>
   2f8a7:	b8 00 00 00 00       	mov    eax,0x0
   2f8ac:	84 c0                	test   al,al
   2f8ae:	74 30                	je     2f8e0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x658>
   2f8b0:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f8b6:	48 63 d0             	movsxd rdx,eax
   2f8b9:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f8c0:	48 89 d6             	mov    rsi,rdx
   2f8c3:	48 89 c7             	mov    rdi,rax
   2f8c6:	e8 fb 68 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f8cb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f8ce:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
   2f8d5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2f8d8:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
   2f8de:	eb 0c                	jmp    2f8ec <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x664>
   2f8e0:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
   2f8e7:	e9 01 ff ff ff       	jmp    2f7ed <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x565>
   2f8ec:	c7 85 14 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xec],0x0
   2f8f6:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f8fd:	48 89 c7             	mov    rdi,rax
   2f900:	e8 55 68 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f905:	39 85 14 ff ff ff    	cmp    DWORD PTR [rbp-0xec],eax
   2f90b:	0f 9c c0             	setl   al
   2f90e:	84 c0                	test   al,al
   2f910:	0f 84 11 01 00 00    	je     2fa27 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x79f>
   2f916:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f91c:	48 63 d0             	movsxd rdx,eax
   2f91f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f926:	48 89 d6             	mov    rsi,rdx
   2f929:	48 89 c7             	mov    rdi,rax
   2f92c:	e8 47 3c 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f931:	48 89 c2             	mov    rdx,rax
   2f934:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f938:	48 89 c6             	mov    rsi,rax
   2f93b:	48 89 d7             	mov    rdi,rdx
   2f93e:	e8 e5 c9 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f943:	84 c0                	test   al,al
   2f945:	74 25                	je     2f96c <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x6e4>
   2f947:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f94d:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   2f953:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2f95a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f961:	48 89 d6             	mov    rsi,rdx
   2f964:	48 89 c7             	mov    rdi,rax
   2f967:	e8 88 69 ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f96c:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f972:	48 63 d0             	movsxd rdx,eax
   2f975:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f97c:	48 89 d6             	mov    rsi,rdx
   2f97f:	48 89 c7             	mov    rdi,rax
   2f982:	e8 f1 3b 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f987:	48 89 c2             	mov    rdx,rax
   2f98a:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f98e:	48 89 c6             	mov    rsi,rax
   2f991:	48 89 d7             	mov    rdi,rdx
   2f994:	e8 8f c9 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f999:	84 c0                	test   al,al
   2f99b:	74 25                	je     2f9c2 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x73a>
   2f99d:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f9a3:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   2f9a9:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2f9b0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f9b7:	48 89 d6             	mov    rsi,rdx
   2f9ba:	48 89 c7             	mov    rdi,rax
   2f9bd:	e8 32 69 ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f9c2:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f9c8:	48 63 d0             	movsxd rdx,eax
   2f9cb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f9d2:	48 89 d6             	mov    rsi,rdx
   2f9d5:	48 89 c7             	mov    rdi,rax
   2f9d8:	e8 9b 3b 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f9dd:	48 89 c2             	mov    rdx,rax
   2f9e0:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
   2f9e7:	48 89 c6             	mov    rsi,rax
   2f9ea:	48 89 d7             	mov    rdi,rdx
   2f9ed:	e8 36 c9 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f9f2:	84 c0                	test   al,al
   2f9f4:	74 25                	je     2fa1b <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x793>
   2f9f6:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f9fc:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   2fa02:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2fa09:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fa10:	48 89 d6             	mov    rsi,rdx
   2fa13:	48 89 c7             	mov    rdi,rax
   2fa16:	e8 d9 68 ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fa1b:	83 85 14 ff ff ff 01 	add    DWORD PTR [rbp-0xec],0x1
   2fa22:	e9 cf fe ff ff       	jmp    2f8f6 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x66e>
   2fa27:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fa2e:	48 89 c7             	mov    rdi,rax
   2fa31:	e8 84 32 00 00       	call   32cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2fa36:	e9 4b 04 00 00       	jmp    2fe86 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbfe>
   2fa3b:	48 8d 55 a0          	lea    rdx,[rbp-0x60]
   2fa3f:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2fa43:	48 89 d6             	mov    rsi,rdx
   2fa46:	48 89 c7             	mov    rdi,rax
   2fa49:	e8 64 ca ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2fa4e:	66 48 0f 7e c0       	movq   rax,xmm0
   2fa53:	0f 28 c1             	movaps xmm0,xmm1
   2fa56:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2fa5d:	f3 0f 11 85 50 ff ff ff 	movss  DWORD PTR [rbp-0xb0],xmm0
   2fa65:	48 8d 55 a0          	lea    rdx,[rbp-0x60]
   2fa69:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2fa6d:	48 89 d6             	mov    rsi,rdx
   2fa70:	48 89 c7             	mov    rdi,rax
   2fa73:	e8 3a ca ff ff       	call   2c4b2 <objl::Vector3::operator-(objl::Vector3 const&) const>
   2fa78:	66 48 0f 7e c0       	movq   rax,xmm0
   2fa7d:	0f 28 c1             	movaps xmm0,xmm1
   2fa80:	48 89 85 54 ff ff ff 	mov    QWORD PTR [rbp-0xac],rax
   2fa87:	f3 0f 11 85 5c ff ff ff 	movss  DWORD PTR [rbp-0xa4],xmm0
   2fa8f:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   2fa96:	f3 0f 10 85 50 ff ff ff 	movss  xmm0,DWORD PTR [rbp-0xb0]
   2fa9e:	48 8b 85 54 ff ff ff 	mov    rax,QWORD PTR [rbp-0xac]
   2faa5:	f3 0f 10 8d 5c ff ff ff 	movss  xmm1,DWORD PTR [rbp-0xa4]
   2faad:	66 48 0f 6e d2       	movq   xmm2,rdx
   2fab2:	0f 28 d8             	movaps xmm3,xmm0
   2fab5:	66 48 0f 6e c0       	movq   xmm0,rax
   2faba:	e8 cb cf ff ff       	call   2ca8a <objl::math::AngleBetweenV3(objl::Vector3, objl::Vector3)>
   2fabf:	66 0f ef c9          	pxor   xmm1,xmm1
   2fac3:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   2fac7:	f2 0f 10 05 01 d4 00 00 	movsd  xmm0,QWORD PTR [rip+0xd401]        # 3ced0 <NANO_SEC+0x1c08>
   2facf:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2fad3:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   2fad7:	f3 0f 11 85 24 ff ff ff 	movss  DWORD PTR [rbp-0xdc],xmm0
   2fadf:	66 0f ef c0          	pxor   xmm0,xmm0
   2fae3:	0f 2f 85 24 ff ff ff 	comiss xmm0,DWORD PTR [rbp-0xdc]
   2faea:	72 15                	jb     2fb01 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x879>
   2faec:	f3 0f 10 85 24 ff ff ff 	movss  xmm0,DWORD PTR [rbp-0xdc]
   2faf4:	0f 2f 05 dd d3 00 00 	comiss xmm0,DWORD PTR [rip+0xd3dd]        # 3ced8 <NANO_SEC+0x1c10>
   2fafb:	0f 83 75 03 00 00    	jae    2fe76 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbee>
   2fb01:	c6 85 03 ff ff ff 00 	mov    BYTE PTR [rbp-0xfd],0x0
   2fb08:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
   2fb12:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fb19:	48 89 c7             	mov    rdi,rax
   2fb1c:	e8 39 66 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fb21:	39 85 18 ff ff ff    	cmp    DWORD PTR [rbp-0xe8],eax
   2fb27:	0f 9c c0             	setl   al
   2fb2a:	84 c0                	test   al,al
   2fb2c:	0f 84 20 01 00 00    	je     2fc52 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9ca>
   2fb32:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fb38:	48 63 d0             	movsxd rdx,eax
   2fb3b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fb42:	48 89 d6             	mov    rsi,rdx
   2fb45:	48 89 c7             	mov    rdi,rax
   2fb48:	e8 2b 3a 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fb4d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   2fb51:	f3 0f 10 5d c8       	movss  xmm3,DWORD PTR [rbp-0x38]
   2fb56:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
   2fb5a:	f3 0f 10 55 a8       	movss  xmm2,DWORD PTR [rbp-0x58]
   2fb5f:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   2fb63:	f3 0f 10 45 88       	movss  xmm0,DWORD PTR [rbp-0x78]
   2fb68:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2fb6b:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2fb70:	66 48 0f 6e f7       	movq   xmm6,rdi
   2fb75:	0f 28 fb             	movaps xmm7,xmm3
   2fb78:	66 48 0f 6e e6       	movq   xmm4,rsi
   2fb7d:	0f 28 ea             	movaps xmm5,xmm2
   2fb80:	66 48 0f 6e d1       	movq   xmm2,rcx
   2fb85:	0f 28 d8             	movaps xmm3,xmm0
   2fb88:	66 48 0f 6e c2       	movq   xmm0,rdx
   2fb8d:	e8 07 d4 ff ff       	call   2cf99 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2fb92:	84 c0                	test   al,al
   2fb94:	0f 84 9a 00 00 00    	je     2fc34 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9ac>
   2fb9a:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fba0:	48 63 d0             	movsxd rdx,eax
   2fba3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fbaa:	48 89 d6             	mov    rsi,rdx
   2fbad:	48 89 c7             	mov    rdi,rax
   2fbb0:	e8 c3 39 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fbb5:	48 89 c2             	mov    rdx,rax
   2fbb8:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2fbbc:	48 89 c6             	mov    rsi,rax
   2fbbf:	48 89 d7             	mov    rdi,rdx
   2fbc2:	e8 cd c7 ff ff       	call   2c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2fbc7:	84 c0                	test   al,al
   2fbc9:	74 69                	je     2fc34 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9ac>
   2fbcb:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fbd1:	48 63 d0             	movsxd rdx,eax
   2fbd4:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fbdb:	48 89 d6             	mov    rsi,rdx
   2fbde:	48 89 c7             	mov    rdi,rax
   2fbe1:	e8 92 39 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fbe6:	48 89 c2             	mov    rdx,rax
   2fbe9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2fbed:	48 89 c6             	mov    rsi,rax
   2fbf0:	48 89 d7             	mov    rdi,rdx
   2fbf3:	e8 9c c7 ff ff       	call   2c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2fbf8:	84 c0                	test   al,al
   2fbfa:	74 38                	je     2fc34 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9ac>
   2fbfc:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fc02:	48 63 d0             	movsxd rdx,eax
   2fc05:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fc0c:	48 89 d6             	mov    rsi,rdx
   2fc0f:	48 89 c7             	mov    rdi,rax
   2fc12:	e8 61 39 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fc17:	48 89 c2             	mov    rdx,rax
   2fc1a:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2fc1e:	48 89 c6             	mov    rsi,rax
   2fc21:	48 89 d7             	mov    rdi,rdx
   2fc24:	e8 6b c7 ff ff       	call   2c394 <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2fc29:	84 c0                	test   al,al
   2fc2b:	74 07                	je     2fc34 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9ac>
   2fc2d:	b8 01 00 00 00       	mov    eax,0x1
   2fc32:	eb 05                	jmp    2fc39 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9b1>
   2fc34:	b8 00 00 00 00       	mov    eax,0x0
   2fc39:	84 c0                	test   al,al
   2fc3b:	74 09                	je     2fc46 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9be>
   2fc3d:	c6 85 03 ff ff ff 01 	mov    BYTE PTR [rbp-0xfd],0x1
   2fc44:	eb 0c                	jmp    2fc52 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9ca>
   2fc46:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
   2fc4d:	e9 c0 fe ff ff       	jmp    2fb12 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x88a>
   2fc52:	80 bd 03 ff ff ff 00 	cmp    BYTE PTR [rbp-0xfd],0x0
   2fc59:	0f 85 1a 02 00 00    	jne    2fe79 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbf1>
   2fc5f:	c7 85 1c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe4],0x0
   2fc69:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fc70:	48 89 c7             	mov    rdi,rax
   2fc73:	e8 e2 64 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fc78:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   2fc7e:	0f 9c c0             	setl   al
   2fc81:	84 c0                	test   al,al
   2fc83:	0f 84 0e 01 00 00    	je     2fd97 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xb0f>
   2fc89:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fc8f:	48 63 d0             	movsxd rdx,eax
   2fc92:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fc99:	48 89 d6             	mov    rsi,rdx
   2fc9c:	48 89 c7             	mov    rdi,rax
   2fc9f:	e8 d4 38 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fca4:	48 89 c2             	mov    rdx,rax
   2fca7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2fcab:	48 89 c6             	mov    rsi,rax
   2fcae:	48 89 d7             	mov    rdi,rdx
   2fcb1:	e8 72 c6 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fcb6:	84 c0                	test   al,al
   2fcb8:	74 25                	je     2fcdf <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xa57>
   2fcba:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fcc0:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2fcc6:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2fccd:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fcd4:	48 89 d6             	mov    rsi,rdx
   2fcd7:	48 89 c7             	mov    rdi,rax
   2fcda:	e8 15 66 ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fcdf:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fce5:	48 63 d0             	movsxd rdx,eax
   2fce8:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fcef:	48 89 d6             	mov    rsi,rdx
   2fcf2:	48 89 c7             	mov    rdi,rax
   2fcf5:	e8 7e 38 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fcfa:	48 89 c2             	mov    rdx,rax
   2fcfd:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2fd01:	48 89 c6             	mov    rsi,rax
   2fd04:	48 89 d7             	mov    rdi,rdx
   2fd07:	e8 1c c6 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fd0c:	84 c0                	test   al,al
   2fd0e:	74 25                	je     2fd35 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xaad>
   2fd10:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fd16:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2fd1c:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2fd23:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fd2a:	48 89 d6             	mov    rsi,rdx
   2fd2d:	48 89 c7             	mov    rdi,rax
   2fd30:	e8 bf 65 ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fd35:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fd3b:	48 63 d0             	movsxd rdx,eax
   2fd3e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fd45:	48 89 d6             	mov    rsi,rdx
   2fd48:	48 89 c7             	mov    rdi,rax
   2fd4b:	e8 28 38 00 00       	call   33578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fd50:	48 89 c2             	mov    rdx,rax
   2fd53:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2fd57:	48 89 c6             	mov    rsi,rax
   2fd5a:	48 89 d7             	mov    rdi,rdx
   2fd5d:	e8 c6 c5 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fd62:	84 c0                	test   al,al
   2fd64:	74 25                	je     2fd8b <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xb03>
   2fd66:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fd6c:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2fd72:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2fd79:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fd80:	48 89 d6             	mov    rsi,rdx
   2fd83:	48 89 c7             	mov    rdi,rax
   2fd86:	e8 69 65 ff ff       	call   262f4 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fd8b:	83 85 1c ff ff ff 01 	add    DWORD PTR [rbp-0xe4],0x1
   2fd92:	e9 d2 fe ff ff       	jmp    2fc69 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9e1>
   2fd97:	c7 85 20 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe0],0x0
   2fda1:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fda8:	48 89 c7             	mov    rdi,rax
   2fdab:	e8 aa 63 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fdb0:	39 85 20 ff ff ff    	cmp    DWORD PTR [rbp-0xe0],eax
   2fdb6:	0f 9c c0             	setl   al
   2fdb9:	84 c0                	test   al,al
   2fdbb:	0f 84 a9 00 00 00    	je     2fe6a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbe2>
   2fdc1:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
   2fdc7:	48 63 d0             	movsxd rdx,eax
   2fdca:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fdd1:	48 89 d6             	mov    rsi,rdx
   2fdd4:	48 89 c7             	mov    rdi,rax
   2fdd7:	e8 ea 63 ff ff       	call   261c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2fddc:	48 89 c2             	mov    rdx,rax
   2fddf:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2fde3:	48 89 c6             	mov    rsi,rax
   2fde6:	48 89 d7             	mov    rdi,rdx
   2fde9:	e8 3a c5 ff ff       	call   2c328 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fdee:	84 c0                	test   al,al
   2fdf0:	74 6c                	je     2fe5e <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbd6>
   2fdf2:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
   2fdf8:	48 63 d8             	movsxd rbx,eax
   2fdfb:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fe02:	48 89 c7             	mov    rdi,rax
   2fe05:	e8 8e 37 00 00       	call   33598 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   2fe0a:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
   2fe11:	48 8d 85 28 ff ff ff 	lea    rax,[rbp-0xd8]
   2fe18:	48 89 de             	mov    rsi,rbx
   2fe1b:	48 89 c7             	mov    rdi,rax
   2fe1e:	e8 bd 37 00 00       	call   335e0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   2fe23:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
   2fe2a:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2fe31:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
   2fe38:	48 89 d6             	mov    rsi,rdx
   2fe3b:	48 89 c7             	mov    rdi,rax
   2fe3e:	e8 ff 37 00 00       	call   33642 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator<objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, __gnu_cxx::__enable_if<std::__are_same<objl::Vertex*, objl::Vertex*>::__value, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__type> const&)>
   2fe43:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   2fe4a:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fe51:	48 89 d6             	mov    rsi,rdx
   2fe54:	48 89 c7             	mov    rdi,rax
   2fe57:	e8 10 38 00 00       	call   3366c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::erase(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   2fe5c:	eb 0c                	jmp    2fe6a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbe2>
   2fe5e:	83 85 20 ff ff ff 01 	add    DWORD PTR [rbp-0xe0],0x1
   2fe65:	e9 37 ff ff ff       	jmp    2fda1 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xb19>
   2fe6a:	c7 85 04 ff ff ff ff ff ff ff 	mov    DWORD PTR [rbp-0xfc],0xffffffff
   2fe74:	eb 04                	jmp    2fe7a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbf2>
   2fe76:	90                   	nop
   2fe77:	eb 01                	jmp    2fe7a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbf2>
   2fe79:	90                   	nop
   2fe7a:	83 85 04 ff ff ff 01 	add    DWORD PTR [rbp-0xfc],0x1
   2fe81:	e9 e9 f4 ff ff       	jmp    2f36f <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xe7>
   2fe86:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fe8d:	48 89 c7             	mov    rdi,rax
   2fe90:	e8 0d 63 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2fe95:	48 85 c0             	test   rax,rax
   2fe98:	0f 94 c0             	sete   al
   2fe9b:	84 c0                	test   al,al
   2fe9d:	75 1e                	jne    2febd <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc35>
   2fe9f:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fea6:	48 89 c7             	mov    rdi,rax
   2fea9:	e8 ac 62 ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2feae:	48 85 c0             	test   rax,rax
   2feb1:	0f 94 c0             	sete   al
   2feb4:	84 c0                	test   al,al
   2feb6:	75 08                	jne    2fec0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc38>
   2feb8:	e9 a8 f4 ff ff       	jmp    2f365 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xdd>
   2febd:	90                   	nop
   2febe:	eb 01                	jmp    2fec1 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc39>
   2fec0:	90                   	nop
   2fec1:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fec8:	48 89 c7             	mov    rdi,rax
   2fecb:	e8 f0 24 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2fed0:	eb 1e                	jmp    2fef0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc68>
   2fed2:	48 89 c3             	mov    rbx,rax
   2fed5:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fedc:	48 89 c7             	mov    rdi,rax
   2fedf:	e8 dc 24 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2fee4:	48 89 d8             	mov    rax,rbx
   2fee7:	48 89 c7             	mov    rdi,rax
   2feea:	e8 41 48 fd ff       	call   4730 <_Unwind_Resume@plt>
   2feef:	90                   	nop
   2fef0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2fef4:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2fefd:	74 05                	je     2ff04 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc7c>
   2feff:	e8 ac 45 fd ff       	call   44b0 <__stack_chk_fail@plt>
   2ff04:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ff08:	c9                   	leave  
   2ff09:	c3                   	ret    

000000000002ff0a <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   2ff0a:	55                   	push   rbp
   2ff0b:	48 89 e5             	mov    rbp,rsp
   2ff0e:	41 56                	push   r14
   2ff10:	41 55                	push   r13
   2ff12:	41 54                	push   r12
   2ff14:	53                   	push   rbx
   2ff15:	48 81 ec 30 07 00 00 	sub    rsp,0x730
   2ff1c:	48 89 bd b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rdi
   2ff23:	48 89 b5 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rsi
   2ff2a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ff33:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2ff37:	31 c0                	xor    eax,eax
   2ff39:	48 8b 85 b0 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x750]
   2ff40:	48 89 c7             	mov    rdi,rax
   2ff43:	e8 68 43 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   2ff48:	48 89 c3             	mov    rbx,rax
   2ff4b:	48 8b 85 b0 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x750]
   2ff52:	48 89 c7             	mov    rdi,rax
   2ff55:	e8 56 43 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   2ff5a:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   2ff5e:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2ff65:	48 8b b5 b0 f8 ff ff 	mov    rsi,QWORD PTR [rbp-0x750]
   2ff6c:	48 89 d9             	mov    rcx,rbx
   2ff6f:	48 89 c7             	mov    rdi,rax
   2ff72:	e8 a9 44 fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   2ff77:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2ff7e:	48 8d 35 a0 ce 00 00 	lea    rsi,[rip+0xcea0]        # 3ce25 <NANO_SEC+0x1b5d>
   2ff85:	48 89 c7             	mov    rdi,rax
   2ff88:	e8 04 2d 00 00       	call   32c91 <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2ff8d:	89 c3                	mov    ebx,eax
   2ff8f:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2ff96:	48 89 c7             	mov    rdi,rax
   2ff99:	e8 c2 42 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ff9e:	84 db                	test   bl,bl
   2ffa0:	74 0a                	je     2ffac <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa2>
   2ffa2:	bb 00 00 00 00       	mov    ebx,0x0
   2ffa7:	e9 e3 0d 00 00       	jmp    30d8f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe85>
   2ffac:	48 8b 8d b0 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x750]
   2ffb3:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2ffba:	ba 08 00 00 00       	mov    edx,0x8
   2ffbf:	48 89 ce             	mov    rsi,rcx
   2ffc2:	48 89 c7             	mov    rdi,rax
   2ffc5:	e8 f6 46 fd ff       	call   46c0 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
   2ffca:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2ffd1:	48 89 c7             	mov    rdi,rax
   2ffd4:	e8 d7 46 fd ff       	call   46b0 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@plt>
   2ffd9:	83 f0 01             	xor    eax,0x1
   2ffdc:	84 c0                	test   al,al
   2ffde:	74 0a                	je     2ffea <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe0>
   2ffe0:	bb 00 00 00 00       	mov    ebx,0x0
   2ffe5:	e9 96 0d 00 00       	jmp    30d80 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe76>
   2ffea:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   2fff1:	48 89 c7             	mov    rdi,rax
   2fff4:	e8 cb c6 ff ff       	call   2c6c4 <objl::Material::Material()>
   2fff9:	c6 85 cf f8 ff ff 00 	mov    BYTE PTR [rbp-0x731],0x0
   30000:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   30007:	48 89 c7             	mov    rdi,rax
   3000a:	e8 e1 45 fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   3000f:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30016:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   3001d:	48 89 d6             	mov    rsi,rdx
   30020:	48 89 c7             	mov    rdi,rax
   30023:	e8 68 40 fd ff       	call   4090 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
   30028:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3002b:	48 83 ea 18          	sub    rdx,0x18
   3002f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   30032:	48 01 d0             	add    rax,rdx
   30035:	48 89 c7             	mov    rdi,rax
   30038:	e8 03 45 fd ff       	call   4540 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>
   3003d:	84 c0                	test   al,al
   3003f:	0f 84 dd 0c 00 00    	je     30d22 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe18>
   30045:	48 8d 85 10 f9 ff ff 	lea    rax,[rbp-0x6f0]
   3004c:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30053:	48 89 d6             	mov    rsi,rdx
   30056:	48 89 c7             	mov    rdi,rax
   30059:	e8 d0 16 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3005e:	48 8d 85 10 f9 ff ff 	lea    rax,[rbp-0x6f0]
   30065:	48 8d 35 be cd 00 00 	lea    rsi,[rip+0xcdbe]        # 3ce2a <NANO_SEC+0x1b62>
   3006c:	48 89 c7             	mov    rdi,rax
   3006f:	e8 55 62 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30074:	89 c3                	mov    ebx,eax
   30076:	48 8d 85 10 f9 ff ff 	lea    rax,[rbp-0x6f0]
   3007d:	48 89 c7             	mov    rdi,rax
   30080:	e8 db 41 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30085:	84 db                	test   bl,bl
   30087:	0f 84 5b 01 00 00    	je     301e8 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2de>
   3008d:	0f b6 85 cf f8 ff ff 	movzx  eax,BYTE PTR [rbp-0x731]
   30094:	83 f0 01             	xor    eax,0x1
   30097:	84 c0                	test   al,al
   30099:	0f 84 82 00 00 00    	je     30121 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x217>
   3009f:	c6 85 cf f8 ff ff 01 	mov    BYTE PTR [rbp-0x731],0x1
   300a6:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   300ad:	48 89 c7             	mov    rdi,rax
   300b0:	e8 fb 41 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   300b5:	48 83 f8 07          	cmp    rax,0x7
   300b9:	0f 97 c0             	seta   al
   300bc:	84 c0                	test   al,al
   300be:	74 46                	je     30106 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1fc>
   300c0:	48 8d 85 30 f9 ff ff 	lea    rax,[rbp-0x6d0]
   300c7:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   300ce:	48 89 d6             	mov    rsi,rdx
   300d1:	48 89 c7             	mov    rdi,rax
   300d4:	e8 07 15 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   300d9:	48 8d 95 30 f9 ff ff 	lea    rdx,[rbp-0x6d0]
   300e0:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   300e7:	48 89 d6             	mov    rsi,rdx
   300ea:	48 89 c7             	mov    rdi,rax
   300ed:	e8 2e 44 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   300f2:	48 8d 85 30 f9 ff ff 	lea    rax,[rbp-0x6d0]
   300f9:	48 89 c7             	mov    rdi,rax
   300fc:	e8 5f 41 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30101:	e9 e2 00 00 00       	jmp    301e8 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2de>
   30106:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   3010d:	48 8d 35 1d cd 00 00 	lea    rsi,[rip+0xcd1d]        # 3ce31 <NANO_SEC+0x1b69>
   30114:	48 89 c7             	mov    rdi,rax
   30117:	e8 c4 44 fd ff       	call   45e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   3011c:	e9 c7 00 00 00       	jmp    301e8 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2de>
   30121:	48 8b 85 b8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x748]
   30128:	48 8d 50 48          	lea    rdx,[rax+0x48]
   3012c:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30133:	48 89 c6             	mov    rsi,rax
   30136:	48 89 d7             	mov    rdi,rdx
   30139:	e8 c0 35 00 00       	call   336fe <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)>
   3013e:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30145:	48 89 c7             	mov    rdi,rax
   30148:	e8 77 c5 ff ff       	call   2c6c4 <objl::Material::Material()>
   3014d:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   30154:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   3015b:	48 89 d6             	mov    rsi,rdx
   3015e:	48 89 c7             	mov    rdi,rax
   30161:	e8 a6 18 00 00       	call   31a0c <objl::Material::operator=(objl::Material&&)>
   30166:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3016d:	48 89 c7             	mov    rdi,rax
   30170:	e8 fd 10 00 00       	call   31272 <objl::Material::~Material()>
   30175:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   3017c:	48 89 c7             	mov    rdi,rax
   3017f:	e8 2c 41 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   30184:	48 83 f8 07          	cmp    rax,0x7
   30188:	0f 97 c0             	seta   al
   3018b:	84 c0                	test   al,al
   3018d:	74 43                	je     301d2 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2c8>
   3018f:	48 8d 85 50 f9 ff ff 	lea    rax,[rbp-0x6b0]
   30196:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3019d:	48 89 d6             	mov    rsi,rdx
   301a0:	48 89 c7             	mov    rdi,rax
   301a3:	e8 38 14 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   301a8:	48 8d 95 50 f9 ff ff 	lea    rdx,[rbp-0x6b0]
   301af:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   301b6:	48 89 d6             	mov    rsi,rdx
   301b9:	48 89 c7             	mov    rdi,rax
   301bc:	e8 5f 43 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   301c1:	48 8d 85 50 f9 ff ff 	lea    rax,[rbp-0x6b0]
   301c8:	48 89 c7             	mov    rdi,rax
   301cb:	e8 90 40 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   301d0:	eb 16                	jmp    301e8 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2de>
   301d2:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   301d9:	48 8d 35 51 cc 00 00 	lea    rsi,[rip+0xcc51]        # 3ce31 <NANO_SEC+0x1b69>
   301e0:	48 89 c7             	mov    rdi,rax
   301e3:	e8 f8 43 fd ff       	call   45e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   301e8:	48 8d 85 70 f9 ff ff 	lea    rax,[rbp-0x690]
   301ef:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   301f6:	48 89 d6             	mov    rsi,rdx
   301f9:	48 89 c7             	mov    rdi,rax
   301fc:	e8 2d 15 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30201:	48 8d 85 70 f9 ff ff 	lea    rax,[rbp-0x690]
   30208:	48 8d 35 27 cc 00 00 	lea    rsi,[rip+0xcc27]        # 3ce36 <NANO_SEC+0x1b6e>
   3020f:	48 89 c7             	mov    rdi,rax
   30212:	e8 b2 60 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30217:	89 c3                	mov    ebx,eax
   30219:	48 8d 85 70 f9 ff ff 	lea    rax,[rbp-0x690]
   30220:	48 89 c7             	mov    rdi,rax
   30223:	e8 38 40 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30228:	84 db                	test   bl,bl
   3022a:	0f 84 63 01 00 00    	je     30393 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x489>
   30230:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30237:	48 89 c7             	mov    rdi,rax
   3023a:	e8 ff 4d ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   3023f:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30246:	48 89 c7             	mov    rdi,rax
   30249:	e8 f2 44 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   3024e:	48 8d 95 ce f8 ff ff 	lea    rdx,[rbp-0x732]
   30255:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3025c:	48 8d 35 a6 cb 00 00 	lea    rsi,[rip+0xcba6]        # 3ce09 <NANO_SEC+0x1b41>
   30263:	48 89 c7             	mov    rdi,rax
   30266:	e8 47 5c ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   3026b:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30272:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30279:	48 89 d6             	mov    rsi,rdx
   3027c:	48 89 c7             	mov    rdi,rax
   3027f:	e8 5c 13 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30284:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   3028b:	48 8d 8d d0 f8 ff ff 	lea    rcx,[rbp-0x730]
   30292:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30299:	48 89 ce             	mov    rsi,rcx
   3029c:	48 89 c7             	mov    rdi,rax
   3029f:	e8 51 10 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   302a4:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   302ab:	48 89 c7             	mov    rdi,rax
   302ae:	e8 ad 3f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   302b3:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   302ba:	48 89 c7             	mov    rdi,rax
   302bd:	e8 9e 3f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   302c2:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   302c9:	48 89 c7             	mov    rdi,rax
   302cc:	e8 8f 41 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   302d1:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   302d8:	48 89 c7             	mov    rdi,rax
   302db:	e8 46 60 ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   302e0:	48 83 f8 03          	cmp    rax,0x3
   302e4:	0f 95 c0             	setne  al
   302e7:	84 c0                	test   al,al
   302e9:	74 0a                	je     302f5 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3eb>
   302eb:	bb 00 00 00 00       	mov    ebx,0x0
   302f0:	e9 86 00 00 00       	jmp    3037b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x471>
   302f5:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   302fc:	be 00 00 00 00       	mov    esi,0x0
   30301:	48 89 c7             	mov    rdi,rax
   30304:	e8 41 60 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   30309:	be 00 00 00 00       	mov    esi,0x0
   3030e:	48 89 c7             	mov    rdi,rax
   30311:	e8 3f 0d 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   30316:	66 0f 7e c0          	movd   eax,xmm0
   3031a:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
   30320:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30327:	be 01 00 00 00       	mov    esi,0x1
   3032c:	48 89 c7             	mov    rdi,rax
   3032f:	e8 16 60 ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   30334:	be 00 00 00 00       	mov    esi,0x0
   30339:	48 89 c7             	mov    rdi,rax
   3033c:	e8 14 0d 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   30341:	66 0f 7e c0          	movd   eax,xmm0
   30345:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
   3034b:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30352:	be 02 00 00 00       	mov    esi,0x2
   30357:	48 89 c7             	mov    rdi,rax
   3035a:	e8 eb 5f ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3035f:	be 00 00 00 00       	mov    esi,0x0
   30364:	48 89 c7             	mov    rdi,rax
   30367:	e8 e9 0c 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3036c:	66 0f 7e c0          	movd   eax,xmm0
   30370:	89 85 b8 fb ff ff    	mov    DWORD PTR [rbp-0x448],eax
   30376:	bb 01 00 00 00       	mov    ebx,0x1
   3037b:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30382:	48 89 c7             	mov    rdi,rax
   30385:	e8 34 5d ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   3038a:	83 fb 01             	cmp    ebx,0x1
   3038d:	0f 85 7c fc ff ff    	jne    3000f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x105>
   30393:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
   3039a:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   303a1:	48 89 d6             	mov    rsi,rdx
   303a4:	48 89 c7             	mov    rdi,rax
   303a7:	e8 82 13 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   303ac:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
   303b3:	48 8d 35 7f ca 00 00 	lea    rsi,[rip+0xca7f]        # 3ce39 <NANO_SEC+0x1b71>
   303ba:	48 89 c7             	mov    rdi,rax
   303bd:	e8 07 5f ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   303c2:	89 c3                	mov    ebx,eax
   303c4:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
   303cb:	48 89 c7             	mov    rdi,rax
   303ce:	e8 8d 3e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   303d3:	84 db                	test   bl,bl
   303d5:	0f 84 63 01 00 00    	je     3053e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x634>
   303db:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   303e2:	48 89 c7             	mov    rdi,rax
   303e5:	e8 54 4c ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   303ea:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   303f1:	48 89 c7             	mov    rdi,rax
   303f4:	e8 47 43 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   303f9:	48 8d 95 ce f8 ff ff 	lea    rdx,[rbp-0x732]
   30400:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30407:	48 8d 35 fb c9 00 00 	lea    rsi,[rip+0xc9fb]        # 3ce09 <NANO_SEC+0x1b41>
   3040e:	48 89 c7             	mov    rdi,rax
   30411:	e8 9c 5a ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   30416:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   3041d:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30424:	48 89 d6             	mov    rsi,rdx
   30427:	48 89 c7             	mov    rdi,rax
   3042a:	e8 b1 11 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3042f:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   30436:	48 8d 8d d0 f8 ff ff 	lea    rcx,[rbp-0x730]
   3043d:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30444:	48 89 ce             	mov    rsi,rcx
   30447:	48 89 c7             	mov    rdi,rax
   3044a:	e8 a6 0e 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   3044f:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30456:	48 89 c7             	mov    rdi,rax
   30459:	e8 02 3e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3045e:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30465:	48 89 c7             	mov    rdi,rax
   30468:	e8 f3 3d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3046d:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30474:	48 89 c7             	mov    rdi,rax
   30477:	e8 e4 3f fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   3047c:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30483:	48 89 c7             	mov    rdi,rax
   30486:	e8 9b 5e ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   3048b:	48 83 f8 03          	cmp    rax,0x3
   3048f:	0f 95 c0             	setne  al
   30492:	84 c0                	test   al,al
   30494:	74 0a                	je     304a0 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x596>
   30496:	bb 00 00 00 00       	mov    ebx,0x0
   3049b:	e9 86 00 00 00       	jmp    30526 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x61c>
   304a0:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   304a7:	be 00 00 00 00       	mov    esi,0x0
   304ac:	48 89 c7             	mov    rdi,rax
   304af:	e8 96 5e ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   304b4:	be 00 00 00 00       	mov    esi,0x0
   304b9:	48 89 c7             	mov    rdi,rax
   304bc:	e8 94 0b 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   304c1:	66 0f 7e c0          	movd   eax,xmm0
   304c5:	89 85 bc fb ff ff    	mov    DWORD PTR [rbp-0x444],eax
   304cb:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   304d2:	be 01 00 00 00       	mov    esi,0x1
   304d7:	48 89 c7             	mov    rdi,rax
   304da:	e8 6b 5e ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   304df:	be 00 00 00 00       	mov    esi,0x0
   304e4:	48 89 c7             	mov    rdi,rax
   304e7:	e8 69 0b 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   304ec:	66 0f 7e c0          	movd   eax,xmm0
   304f0:	89 85 c0 fb ff ff    	mov    DWORD PTR [rbp-0x440],eax
   304f6:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   304fd:	be 02 00 00 00       	mov    esi,0x2
   30502:	48 89 c7             	mov    rdi,rax
   30505:	e8 40 5e ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3050a:	be 00 00 00 00       	mov    esi,0x0
   3050f:	48 89 c7             	mov    rdi,rax
   30512:	e8 3e 0b 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   30517:	66 0f 7e c0          	movd   eax,xmm0
   3051b:	89 85 c4 fb ff ff    	mov    DWORD PTR [rbp-0x43c],eax
   30521:	bb 01 00 00 00       	mov    ebx,0x1
   30526:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3052d:	48 89 c7             	mov    rdi,rax
   30530:	e8 89 5b ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30535:	83 fb 01             	cmp    ebx,0x1
   30538:	0f 85 d1 fa ff ff    	jne    3000f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x105>
   3053e:	48 8d 85 b0 f9 ff ff 	lea    rax,[rbp-0x650]
   30545:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3054c:	48 89 d6             	mov    rsi,rdx
   3054f:	48 89 c7             	mov    rdi,rax
   30552:	e8 d7 11 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30557:	48 8d 85 b0 f9 ff ff 	lea    rax,[rbp-0x650]
   3055e:	48 8d 35 d7 c8 00 00 	lea    rsi,[rip+0xc8d7]        # 3ce3c <NANO_SEC+0x1b74>
   30565:	48 89 c7             	mov    rdi,rax
   30568:	e8 5c 5d ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   3056d:	89 c3                	mov    ebx,eax
   3056f:	48 8d 85 b0 f9 ff ff 	lea    rax,[rbp-0x650]
   30576:	48 89 c7             	mov    rdi,rax
   30579:	e8 e2 3c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3057e:	84 db                	test   bl,bl
   30580:	0f 84 63 01 00 00    	je     306e9 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7df>
   30586:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3058d:	48 89 c7             	mov    rdi,rax
   30590:	e8 a9 4a ff ff       	call   2503e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   30595:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   3059c:	48 89 c7             	mov    rdi,rax
   3059f:	e8 9c 41 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   305a4:	48 8d 95 ce f8 ff ff 	lea    rdx,[rbp-0x732]
   305ab:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   305b2:	48 8d 35 50 c8 00 00 	lea    rsi,[rip+0xc850]        # 3ce09 <NANO_SEC+0x1b41>
   305b9:	48 89 c7             	mov    rdi,rax
   305bc:	e8 f1 58 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   305c1:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   305c8:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   305cf:	48 89 d6             	mov    rsi,rdx
   305d2:	48 89 c7             	mov    rdi,rax
   305d5:	e8 06 10 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   305da:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   305e1:	48 8d 8d d0 f8 ff ff 	lea    rcx,[rbp-0x730]
   305e8:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   305ef:	48 89 ce             	mov    rsi,rcx
   305f2:	48 89 c7             	mov    rdi,rax
   305f5:	e8 fb 0c 00 00       	call   312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   305fa:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30601:	48 89 c7             	mov    rdi,rax
   30604:	e8 57 3c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30609:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30610:	48 89 c7             	mov    rdi,rax
   30613:	e8 48 3c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30618:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   3061f:	48 89 c7             	mov    rdi,rax
   30622:	e8 39 3e fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   30627:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3062e:	48 89 c7             	mov    rdi,rax
   30631:	e8 f0 5c ff ff       	call   26326 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   30636:	48 83 f8 03          	cmp    rax,0x3
   3063a:	0f 95 c0             	setne  al
   3063d:	84 c0                	test   al,al
   3063f:	74 0a                	je     3064b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x741>
   30641:	bb 00 00 00 00       	mov    ebx,0x0
   30646:	e9 86 00 00 00       	jmp    306d1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7c7>
   3064b:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30652:	be 00 00 00 00       	mov    esi,0x0
   30657:	48 89 c7             	mov    rdi,rax
   3065a:	e8 eb 5c ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3065f:	be 00 00 00 00       	mov    esi,0x0
   30664:	48 89 c7             	mov    rdi,rax
   30667:	e8 e9 09 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3066c:	66 0f 7e c0          	movd   eax,xmm0
   30670:	89 85 c8 fb ff ff    	mov    DWORD PTR [rbp-0x438],eax
   30676:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3067d:	be 01 00 00 00       	mov    esi,0x1
   30682:	48 89 c7             	mov    rdi,rax
   30685:	e8 c0 5c ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3068a:	be 00 00 00 00       	mov    esi,0x0
   3068f:	48 89 c7             	mov    rdi,rax
   30692:	e8 be 09 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   30697:	66 0f 7e c0          	movd   eax,xmm0
   3069b:	89 85 cc fb ff ff    	mov    DWORD PTR [rbp-0x434],eax
   306a1:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   306a8:	be 02 00 00 00       	mov    esi,0x2
   306ad:	48 89 c7             	mov    rdi,rax
   306b0:	e8 95 5c ff ff       	call   2634a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   306b5:	be 00 00 00 00       	mov    esi,0x0
   306ba:	48 89 c7             	mov    rdi,rax
   306bd:	e8 93 09 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   306c2:	66 0f 7e c0          	movd   eax,xmm0
   306c6:	89 85 d0 fb ff ff    	mov    DWORD PTR [rbp-0x430],eax
   306cc:	bb 01 00 00 00       	mov    ebx,0x1
   306d1:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   306d8:	48 89 c7             	mov    rdi,rax
   306db:	e8 de 59 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   306e0:	83 fb 01             	cmp    ebx,0x1
   306e3:	0f 85 26 f9 ff ff    	jne    3000f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x105>
   306e9:	48 8d 85 d0 f9 ff ff 	lea    rax,[rbp-0x630]
   306f0:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   306f7:	48 89 d6             	mov    rsi,rdx
   306fa:	48 89 c7             	mov    rdi,rax
   306fd:	e8 2c 10 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30702:	48 8d 85 d0 f9 ff ff 	lea    rax,[rbp-0x630]
   30709:	48 8d 35 2f c7 00 00 	lea    rsi,[rip+0xc72f]        # 3ce3f <NANO_SEC+0x1b77>
   30710:	48 89 c7             	mov    rdi,rax
   30713:	e8 b1 5b ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30718:	89 c3                	mov    ebx,eax
   3071a:	48 8d 85 d0 f9 ff ff 	lea    rax,[rbp-0x630]
   30721:	48 89 c7             	mov    rdi,rax
   30724:	e8 37 3b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30729:	84 db                	test   bl,bl
   3072b:	74 46                	je     30773 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x869>
   3072d:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30734:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3073b:	48 89 d6             	mov    rsi,rdx
   3073e:	48 89 c7             	mov    rdi,rax
   30741:	e8 9a 0e 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30746:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3074d:	be 00 00 00 00       	mov    esi,0x0
   30752:	48 89 c7             	mov    rdi,rax
   30755:	e8 fb 08 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3075a:	66 0f 7e c0          	movd   eax,xmm0
   3075e:	89 85 d4 fb ff ff    	mov    DWORD PTR [rbp-0x42c],eax
   30764:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3076b:	48 89 c7             	mov    rdi,rax
   3076e:	e8 ed 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30773:	48 8d 85 f0 f9 ff ff 	lea    rax,[rbp-0x610]
   3077a:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30781:	48 89 d6             	mov    rsi,rdx
   30784:	48 89 c7             	mov    rdi,rax
   30787:	e8 a2 0f 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3078c:	48 8d 85 f0 f9 ff ff 	lea    rax,[rbp-0x610]
   30793:	48 8d 35 a8 c6 00 00 	lea    rsi,[rip+0xc6a8]        # 3ce42 <NANO_SEC+0x1b7a>
   3079a:	48 89 c7             	mov    rdi,rax
   3079d:	e8 27 5b ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   307a2:	89 c3                	mov    ebx,eax
   307a4:	48 8d 85 f0 f9 ff ff 	lea    rax,[rbp-0x610]
   307ab:	48 89 c7             	mov    rdi,rax
   307ae:	e8 ad 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   307b3:	84 db                	test   bl,bl
   307b5:	74 46                	je     307fd <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8f3>
   307b7:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   307be:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   307c5:	48 89 d6             	mov    rsi,rdx
   307c8:	48 89 c7             	mov    rdi,rax
   307cb:	e8 10 0e 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   307d0:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   307d7:	be 00 00 00 00       	mov    esi,0x0
   307dc:	48 89 c7             	mov    rdi,rax
   307df:	e8 71 08 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   307e4:	66 0f 7e c0          	movd   eax,xmm0
   307e8:	89 85 d8 fb ff ff    	mov    DWORD PTR [rbp-0x428],eax
   307ee:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   307f5:	48 89 c7             	mov    rdi,rax
   307f8:	e8 63 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   307fd:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
   30804:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3080b:	48 89 d6             	mov    rsi,rdx
   3080e:	48 89 c7             	mov    rdi,rax
   30811:	e8 18 0f 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30816:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
   3081d:	48 8d 35 21 c6 00 00 	lea    rsi,[rip+0xc621]        # 3ce45 <NANO_SEC+0x1b7d>
   30824:	48 89 c7             	mov    rdi,rax
   30827:	e8 9d 5a ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   3082c:	89 c3                	mov    ebx,eax
   3082e:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
   30835:	48 89 c7             	mov    rdi,rax
   30838:	e8 23 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3083d:	84 db                	test   bl,bl
   3083f:	74 46                	je     30887 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x97d>
   30841:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30848:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3084f:	48 89 d6             	mov    rsi,rdx
   30852:	48 89 c7             	mov    rdi,rax
   30855:	e8 86 0d 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3085a:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30861:	be 00 00 00 00       	mov    esi,0x0
   30866:	48 89 c7             	mov    rdi,rax
   30869:	e8 e7 07 00 00       	call   31055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3086e:	66 0f 7e c0          	movd   eax,xmm0
   30872:	89 85 dc fb ff ff    	mov    DWORD PTR [rbp-0x424],eax
   30878:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3087f:	48 89 c7             	mov    rdi,rax
   30882:	e8 d9 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30887:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
   3088e:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30895:	48 89 d6             	mov    rsi,rdx
   30898:	48 89 c7             	mov    rdi,rax
   3089b:	e8 8e 0e 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   308a0:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
   308a7:	48 8d 35 99 c5 00 00 	lea    rsi,[rip+0xc599]        # 3ce47 <NANO_SEC+0x1b7f>
   308ae:	48 89 c7             	mov    rdi,rax
   308b1:	e8 13 5a ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   308b6:	89 c3                	mov    ebx,eax
   308b8:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
   308bf:	48 89 c7             	mov    rdi,rax
   308c2:	e8 99 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   308c7:	84 db                	test   bl,bl
   308c9:	74 47                	je     30912 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa08>
   308cb:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   308d2:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   308d9:	48 89 d6             	mov    rsi,rdx
   308dc:	48 89 c7             	mov    rdi,rax
   308df:	e8 fc 0c 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   308e4:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   308eb:	ba 0a 00 00 00       	mov    edx,0xa
   308f0:	be 00 00 00 00       	mov    esi,0x0
   308f5:	48 89 c7             	mov    rdi,rax
   308f8:	e8 11 07 00 00       	call   3100e <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>
   308fd:	89 85 e0 fb ff ff    	mov    DWORD PTR [rbp-0x420],eax
   30903:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3090a:	48 89 c7             	mov    rdi,rax
   3090d:	e8 4e 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30912:	48 8d 85 50 fa ff ff 	lea    rax,[rbp-0x5b0]
   30919:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30920:	48 89 d6             	mov    rsi,rdx
   30923:	48 89 c7             	mov    rdi,rax
   30926:	e8 03 0e 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3092b:	48 8d 85 50 fa ff ff 	lea    rax,[rbp-0x5b0]
   30932:	48 8d 35 14 c5 00 00 	lea    rsi,[rip+0xc514]        # 3ce4d <NANO_SEC+0x1b85>
   30939:	48 89 c7             	mov    rdi,rax
   3093c:	e8 88 59 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30941:	89 c3                	mov    ebx,eax
   30943:	48 8d 85 50 fa ff ff 	lea    rax,[rbp-0x5b0]
   3094a:	48 89 c7             	mov    rdi,rax
   3094d:	e8 0e 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30952:	84 db                	test   bl,bl
   30954:	74 45                	je     3099b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa91>
   30956:	48 8d 85 70 fa ff ff 	lea    rax,[rbp-0x590]
   3095d:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30964:	48 89 d6             	mov    rsi,rdx
   30967:	48 89 c7             	mov    rdi,rax
   3096a:	e8 71 0c 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3096f:	48 8d 85 70 fa ff ff 	lea    rax,[rbp-0x590]
   30976:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   3097d:	48 83 c2 58          	add    rdx,0x58
   30981:	48 89 c6             	mov    rsi,rax
   30984:	48 89 d7             	mov    rdi,rdx
   30987:	e8 94 3b fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   3098c:	48 8d 85 70 fa ff ff 	lea    rax,[rbp-0x590]
   30993:	48 89 c7             	mov    rdi,rax
   30996:	e8 c5 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3099b:	48 8d 85 90 fa ff ff 	lea    rax,[rbp-0x570]
   309a2:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   309a9:	48 89 d6             	mov    rsi,rdx
   309ac:	48 89 c7             	mov    rdi,rax
   309af:	e8 7a 0d 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   309b4:	48 8d 85 90 fa ff ff 	lea    rax,[rbp-0x570]
   309bb:	48 8d 35 92 c4 00 00 	lea    rsi,[rip+0xc492]        # 3ce54 <NANO_SEC+0x1b8c>
   309c2:	48 89 c7             	mov    rdi,rax
   309c5:	e8 ff 58 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   309ca:	89 c3                	mov    ebx,eax
   309cc:	48 8d 85 90 fa ff ff 	lea    rax,[rbp-0x570]
   309d3:	48 89 c7             	mov    rdi,rax
   309d6:	e8 85 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   309db:	84 db                	test   bl,bl
   309dd:	74 45                	je     30a24 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb1a>
   309df:	48 8d 85 b0 fa ff ff 	lea    rax,[rbp-0x550]
   309e6:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   309ed:	48 89 d6             	mov    rsi,rdx
   309f0:	48 89 c7             	mov    rdi,rax
   309f3:	e8 e8 0b 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   309f8:	48 8d 85 b0 fa ff ff 	lea    rax,[rbp-0x550]
   309ff:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30a06:	48 83 c2 78          	add    rdx,0x78
   30a0a:	48 89 c6             	mov    rsi,rax
   30a0d:	48 89 d7             	mov    rdi,rdx
   30a10:	e8 0b 3b fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30a15:	48 8d 85 b0 fa ff ff 	lea    rax,[rbp-0x550]
   30a1c:	48 89 c7             	mov    rdi,rax
   30a1f:	e8 3c 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30a24:	48 8d 85 d0 fa ff ff 	lea    rax,[rbp-0x530]
   30a2b:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30a32:	48 89 d6             	mov    rsi,rdx
   30a35:	48 89 c7             	mov    rdi,rax
   30a38:	e8 f1 0c 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30a3d:	48 8d 85 d0 fa ff ff 	lea    rax,[rbp-0x530]
   30a44:	48 8d 35 10 c4 00 00 	lea    rsi,[rip+0xc410]        # 3ce5b <NANO_SEC+0x1b93>
   30a4b:	48 89 c7             	mov    rdi,rax
   30a4e:	e8 76 58 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30a53:	89 c3                	mov    ebx,eax
   30a55:	48 8d 85 d0 fa ff ff 	lea    rax,[rbp-0x530]
   30a5c:	48 89 c7             	mov    rdi,rax
   30a5f:	e8 fc 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30a64:	84 db                	test   bl,bl
   30a66:	74 48                	je     30ab0 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xba6>
   30a68:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   30a6f:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30a76:	48 89 d6             	mov    rsi,rdx
   30a79:	48 89 c7             	mov    rdi,rax
   30a7c:	e8 5f 0b 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30a81:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   30a88:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30a8f:	48 81 c2 98 00 00 00 	add    rdx,0x98
   30a96:	48 89 c6             	mov    rsi,rax
   30a99:	48 89 d7             	mov    rdi,rdx
   30a9c:	e8 7f 3a fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30aa1:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   30aa8:	48 89 c7             	mov    rdi,rax
   30aab:	e8 b0 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ab0:	48 8d 85 10 fb ff ff 	lea    rax,[rbp-0x4f0]
   30ab7:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30abe:	48 89 d6             	mov    rsi,rdx
   30ac1:	48 89 c7             	mov    rdi,rax
   30ac4:	e8 65 0c 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30ac9:	48 8d 85 10 fb ff ff 	lea    rax,[rbp-0x4f0]
   30ad0:	48 8d 35 8b c3 00 00 	lea    rsi,[rip+0xc38b]        # 3ce62 <NANO_SEC+0x1b9a>
   30ad7:	48 89 c7             	mov    rdi,rax
   30ada:	e8 ea 57 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30adf:	89 c3                	mov    ebx,eax
   30ae1:	48 8d 85 10 fb ff ff 	lea    rax,[rbp-0x4f0]
   30ae8:	48 89 c7             	mov    rdi,rax
   30aeb:	e8 70 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30af0:	84 db                	test   bl,bl
   30af2:	74 48                	je     30b3c <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc32>
   30af4:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   30afb:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30b02:	48 89 d6             	mov    rsi,rdx
   30b05:	48 89 c7             	mov    rdi,rax
   30b08:	e8 d3 0a 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30b0d:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   30b14:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30b1b:	48 81 c2 b8 00 00 00 	add    rdx,0xb8
   30b22:	48 89 c6             	mov    rsi,rax
   30b25:	48 89 d7             	mov    rdi,rdx
   30b28:	e8 f3 39 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30b2d:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   30b34:	48 89 c7             	mov    rdi,rax
   30b37:	e8 24 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30b3c:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30b43:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30b4a:	48 89 d6             	mov    rsi,rdx
   30b4d:	48 89 c7             	mov    rdi,rax
   30b50:	e8 d9 0b 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30b55:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30b5c:	48 8d 35 06 c3 00 00 	lea    rsi,[rip+0xc306]        # 3ce69 <NANO_SEC+0x1ba1>
   30b63:	48 89 c7             	mov    rdi,rax
   30b66:	e8 5e 57 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30b6b:	89 c3                	mov    ebx,eax
   30b6d:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30b74:	48 89 c7             	mov    rdi,rax
   30b77:	e8 e4 36 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30b7c:	84 db                	test   bl,bl
   30b7e:	74 48                	je     30bc8 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xcbe>
   30b80:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30b87:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30b8e:	48 89 d6             	mov    rsi,rdx
   30b91:	48 89 c7             	mov    rdi,rax
   30b94:	e8 47 0a 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30b99:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30ba0:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30ba7:	48 81 c2 d8 00 00 00 	add    rdx,0xd8
   30bae:	48 89 c6             	mov    rsi,rax
   30bb1:	48 89 d7             	mov    rdi,rdx
   30bb4:	e8 67 39 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30bb9:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30bc0:	48 89 c7             	mov    rdi,rax
   30bc3:	e8 98 36 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30bc8:	bb 00 00 00 00       	mov    ebx,0x0
   30bcd:	41 bc 00 00 00 00    	mov    r12d,0x0
   30bd3:	41 bd 00 00 00 00    	mov    r13d,0x0
   30bd9:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30be0:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30be7:	48 89 d6             	mov    rsi,rdx
   30bea:	48 89 c7             	mov    rdi,rax
   30bed:	e8 3c 0b 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30bf2:	bb 01 00 00 00       	mov    ebx,0x1
   30bf7:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30bfe:	48 8d 35 6a c2 00 00 	lea    rsi,[rip+0xc26a]        # 3ce6f <NANO_SEC+0x1ba7>
   30c05:	48 89 c7             	mov    rdi,rax
   30c08:	e8 bc 56 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30c0d:	84 c0                	test   al,al
   30c0f:	75 72                	jne    30c83 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd79>
   30c11:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30c18:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30c1f:	48 89 d6             	mov    rsi,rdx
   30c22:	48 89 c7             	mov    rdi,rax
   30c25:	e8 04 0b 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30c2a:	41 bc 01 00 00 00    	mov    r12d,0x1
   30c30:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30c37:	48 8d 35 3a c2 00 00 	lea    rsi,[rip+0xc23a]        # 3ce78 <NANO_SEC+0x1bb0>
   30c3e:	48 89 c7             	mov    rdi,rax
   30c41:	e8 83 56 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30c46:	84 c0                	test   al,al
   30c48:	75 39                	jne    30c83 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd79>
   30c4a:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30c51:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30c58:	48 89 d6             	mov    rsi,rdx
   30c5b:	48 89 c7             	mov    rdi,rax
   30c5e:	e8 cb 0a 00 00       	call   3172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30c63:	41 bd 01 00 00 00    	mov    r13d,0x1
   30c69:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30c70:	48 8d 35 0a c2 00 00 	lea    rsi,[rip+0xc20a]        # 3ce81 <NANO_SEC+0x1bb9>
   30c77:	48 89 c7             	mov    rdi,rax
   30c7a:	e8 4a 56 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30c7f:	84 c0                	test   al,al
   30c81:	74 08                	je     30c8b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd81>
   30c83:	41 be 01 00 00 00    	mov    r14d,0x1
   30c89:	eb 06                	jmp    30c91 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd87>
   30c8b:	41 be 00 00 00 00    	mov    r14d,0x0
   30c91:	45 84 ed             	test   r13b,r13b
   30c94:	74 0f                	je     30ca5 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd9b>
   30c96:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30c9d:	48 89 c7             	mov    rdi,rax
   30ca0:	e8 bb 35 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ca5:	45 84 e4             	test   r12b,r12b
   30ca8:	74 0f                	je     30cb9 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdaf>
   30caa:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30cb1:	48 89 c7             	mov    rdi,rax
   30cb4:	e8 a7 35 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30cb9:	84 db                	test   bl,bl
   30cbb:	74 0f                	je     30ccc <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdc2>
   30cbd:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30cc4:	48 89 c7             	mov    rdi,rax
   30cc7:	e8 94 35 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ccc:	45 84 f6             	test   r14b,r14b
   30ccf:	0f 84 3a f3 ff ff    	je     3000f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x105>
   30cd5:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30cdc:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30ce3:	48 89 d6             	mov    rsi,rdx
   30ce6:	48 89 c7             	mov    rdi,rax
   30ce9:	e8 f2 08 00 00       	call   315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30cee:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30cf5:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30cfc:	48 81 c2 f8 00 00 00 	add    rdx,0xf8
   30d03:	48 89 c6             	mov    rsi,rax
   30d06:	48 89 d7             	mov    rdi,rdx
   30d09:	e8 12 38 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30d0e:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30d15:	48 89 c7             	mov    rdi,rax
   30d18:	e8 43 35 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30d1d:	e9 ed f2 ff ff       	jmp    3000f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x105>
   30d22:	48 8b 85 b8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x748]
   30d29:	48 8d 50 48          	lea    rdx,[rax+0x48]
   30d2d:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30d34:	48 89 c6             	mov    rsi,rax
   30d37:	48 89 d7             	mov    rdi,rdx
   30d3a:	e8 bf 29 00 00       	call   336fe <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)>
   30d3f:	48 8b 85 b8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x748]
   30d46:	48 83 c0 48          	add    rax,0x48
   30d4a:	48 89 c7             	mov    rdi,rax
   30d4d:	e8 2a 2a 00 00       	call   3377c <std::vector<objl::Material, std::allocator<objl::Material> >::empty() const>
   30d52:	84 c0                	test   al,al
   30d54:	74 07                	je     30d5d <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe53>
   30d56:	bb 00 00 00 00       	mov    ebx,0x0
   30d5b:	eb 05                	jmp    30d62 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe58>
   30d5d:	bb 01 00 00 00       	mov    ebx,0x1
   30d62:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   30d69:	48 89 c7             	mov    rdi,rax
   30d6c:	e8 ef 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30d71:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30d78:	48 89 c7             	mov    rdi,rax
   30d7b:	e8 f2 04 00 00       	call   31272 <objl::Material::~Material()>
   30d80:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30d87:	48 89 c7             	mov    rdi,rax
   30d8a:	e8 31 33 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   30d8f:	89 d8                	mov    eax,ebx
   30d91:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   30d95:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   30d9e:	0f 84 fc 01 00 00    	je     30fa0 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1096>
   30da4:	e9 f2 01 00 00       	jmp    30f9b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1091>
   30da9:	48 89 c3             	mov    rbx,rax
   30dac:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30db3:	48 89 c7             	mov    rdi,rax
   30db6:	e8 a5 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30dbb:	48 89 d8             	mov    rax,rbx
   30dbe:	48 89 c7             	mov    rdi,rax
   30dc1:	e8 6a 39 fd ff       	call   4730 <_Unwind_Resume@plt>
   30dc6:	48 89 c3             	mov    rbx,rax
   30dc9:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30dd0:	48 89 c7             	mov    rdi,rax
   30dd3:	e8 88 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30dd8:	eb 03                	jmp    30ddd <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xed3>
   30dda:	48 89 c3             	mov    rbx,rax
   30ddd:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30de4:	48 89 c7             	mov    rdi,rax
   30de7:	e8 74 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30dec:	eb 03                	jmp    30df1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xee7>
   30dee:	48 89 c3             	mov    rbx,rax
   30df1:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30df8:	48 89 c7             	mov    rdi,rax
   30dfb:	e8 60 36 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   30e00:	eb 03                	jmp    30e05 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xefb>
   30e02:	48 89 c3             	mov    rbx,rax
   30e05:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30e0c:	48 89 c7             	mov    rdi,rax
   30e0f:	e8 aa 52 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30e14:	e9 45 01 00 00       	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30e19:	48 89 c3             	mov    rbx,rax
   30e1c:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30e23:	48 89 c7             	mov    rdi,rax
   30e26:	e8 35 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30e2b:	eb 03                	jmp    30e30 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf26>
   30e2d:	48 89 c3             	mov    rbx,rax
   30e30:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30e37:	48 89 c7             	mov    rdi,rax
   30e3a:	e8 21 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30e3f:	eb 03                	jmp    30e44 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf3a>
   30e41:	48 89 c3             	mov    rbx,rax
   30e44:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30e4b:	48 89 c7             	mov    rdi,rax
   30e4e:	e8 0d 36 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   30e53:	eb 03                	jmp    30e58 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf4e>
   30e55:	48 89 c3             	mov    rbx,rax
   30e58:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30e5f:	48 89 c7             	mov    rdi,rax
   30e62:	e8 57 52 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30e67:	e9 f2 00 00 00       	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30e6c:	48 89 c3             	mov    rbx,rax
   30e6f:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30e76:	48 89 c7             	mov    rdi,rax
   30e79:	e8 e2 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30e7e:	eb 03                	jmp    30e83 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf79>
   30e80:	48 89 c3             	mov    rbx,rax
   30e83:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30e8a:	48 89 c7             	mov    rdi,rax
   30e8d:	e8 ce 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30e92:	eb 03                	jmp    30e97 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf8d>
   30e94:	48 89 c3             	mov    rbx,rax
   30e97:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30e9e:	48 89 c7             	mov    rdi,rax
   30ea1:	e8 ba 35 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   30ea6:	eb 03                	jmp    30eab <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xfa1>
   30ea8:	48 89 c3             	mov    rbx,rax
   30eab:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30eb2:	48 89 c7             	mov    rdi,rax
   30eb5:	e8 04 52 ff ff       	call   260be <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30eba:	e9 9f 00 00 00       	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30ebf:	48 89 c3             	mov    rbx,rax
   30ec2:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30ec9:	48 89 c7             	mov    rdi,rax
   30ecc:	e8 8f 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ed1:	e9 88 00 00 00       	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30ed6:	48 89 c3             	mov    rbx,rax
   30ed9:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30ee0:	48 89 c7             	mov    rdi,rax
   30ee3:	e8 78 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ee8:	eb 74                	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30eea:	48 89 c3             	mov    rbx,rax
   30eed:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30ef4:	48 89 c7             	mov    rdi,rax
   30ef7:	e8 64 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30efc:	eb 60                	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30efe:	48 89 c3             	mov    rbx,rax
   30f01:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30f08:	48 89 c7             	mov    rdi,rax
   30f0b:	e8 50 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f10:	eb 4c                	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30f12:	49 89 c6             	mov    r14,rax
   30f15:	45 84 ed             	test   r13b,r13b
   30f18:	74 0f                	je     30f29 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x101f>
   30f1a:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30f21:	48 89 c7             	mov    rdi,rax
   30f24:	e8 37 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f29:	4d 89 f5             	mov    r13,r14
   30f2c:	45 84 e4             	test   r12b,r12b
   30f2f:	74 0f                	je     30f40 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1036>
   30f31:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30f38:	48 89 c7             	mov    rdi,rax
   30f3b:	e8 20 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f40:	4d 89 ec             	mov    r12,r13
   30f43:	84 db                	test   bl,bl
   30f45:	74 0f                	je     30f56 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x104c>
   30f47:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30f4e:	48 89 c7             	mov    rdi,rax
   30f51:	e8 0a 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f56:	4c 89 e3             	mov    rbx,r12
   30f59:	eb 03                	jmp    30f5e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1054>
   30f5b:	48 89 c3             	mov    rbx,rax
   30f5e:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   30f65:	48 89 c7             	mov    rdi,rax
   30f68:	e8 f3 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f6d:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30f74:	48 89 c7             	mov    rdi,rax
   30f77:	e8 f6 02 00 00       	call   31272 <objl::Material::~Material()>
   30f7c:	eb 03                	jmp    30f81 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1077>
   30f7e:	48 89 c3             	mov    rbx,rax
   30f81:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30f88:	48 89 c7             	mov    rdi,rax
   30f8b:	e8 30 31 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   30f90:	48 89 d8             	mov    rax,rbx
   30f93:	48 89 c7             	mov    rdi,rax
   30f96:	e8 95 37 fd ff       	call   4730 <_Unwind_Resume@plt>
   30f9b:	e8 10 35 fd ff       	call   44b0 <__stack_chk_fail@plt>
   30fa0:	48 81 c4 30 07 00 00 	add    rsp,0x730
   30fa7:	5b                   	pop    rbx
   30fa8:	41 5c                	pop    r12
   30faa:	41 5d                	pop    r13
   30fac:	41 5e                	pop    r14
   30fae:	5d                   	pop    rbp
   30faf:	c3                   	ret    

0000000000030fb0 <__static_initialization_and_destruction_0(int, int)>:
   30fb0:	55                   	push   rbp
   30fb1:	48 89 e5             	mov    rbp,rsp
   30fb4:	48 83 ec 10          	sub    rsp,0x10
   30fb8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   30fbb:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   30fbe:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   30fc2:	75 32                	jne    30ff6 <__static_initialization_and_destruction_0(int, int)+0x46>
   30fc4:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
   30fcb:	75 29                	jne    30ff6 <__static_initialization_and_destruction_0(int, int)+0x46>
   30fcd:	48 8d 3d 6d a7 01 00 	lea    rdi,[rip+0x1a76d]        # 4b741 <std::__ioinit>
   30fd4:	e8 87 36 fd ff       	call   4660 <std::ios_base::Init::Init()@plt>
   30fd9:	48 8d 15 28 a4 01 00 	lea    rdx,[rip+0x1a428]        # 4b408 <__dso_handle>
   30fe0:	48 8d 35 5a a7 01 00 	lea    rsi,[rip+0x1a75a]        # 4b741 <std::__ioinit>
   30fe7:	48 8b 05 0a a0 01 00 	mov    rax,QWORD PTR [rip+0x1a00a]        # 4aff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
   30fee:	48 89 c7             	mov    rdi,rax
   30ff1:	e8 ba 33 fd ff       	call   43b0 <__cxa_atexit@plt>
   30ff6:	90                   	nop
   30ff7:	c9                   	leave  
   30ff8:	c3                   	ret    

0000000000030ff9 <_GLOBAL__sub_I__ZN4objl7Vector2C2Ev>:
   30ff9:	55                   	push   rbp
   30ffa:	48 89 e5             	mov    rbp,rsp
   30ffd:	be ff ff 00 00       	mov    esi,0xffff
   31002:	bf 01 00 00 00       	mov    edi,0x1
   31007:	e8 a4 ff ff ff       	call   30fb0 <__static_initialization_and_destruction_0(int, int)>
   3100c:	5d                   	pop    rbp
   3100d:	c3                   	ret    

000000000003100e <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>:
   3100e:	55                   	push   rbp
   3100f:	48 89 e5             	mov    rbp,rsp
   31012:	48 83 ec 20          	sub    rsp,0x20
   31016:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3101a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3101e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   31021:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31025:	48 89 c7             	mov    rdi,rax
   31028:	e8 23 31 fd ff       	call   4150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>
   3102d:	48 89 c2             	mov    rdx,rax
   31030:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
   31033:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31037:	41 89 c8             	mov    r8d,ecx
   3103a:	48 89 c1             	mov    rcx,rax
   3103d:	48 8d 35 a4 bd 00 00 	lea    rsi,[rip+0xbda4]        # 3cde8 <NANO_SEC+0x1b20>
   31044:	48 8b 05 85 9f 01 00 	mov    rax,QWORD PTR [rip+0x19f85]        # 4afd0 <strtol@GLIBC_2.2.5>
   3104b:	48 89 c7             	mov    rdi,rax
   3104e:	e8 bb 0d 00 00       	call   31e0e <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)>
   31053:	c9                   	leave  
   31054:	c3                   	ret    

0000000000031055 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>:
   31055:	55                   	push   rbp
   31056:	48 89 e5             	mov    rbp,rsp
   31059:	48 83 ec 10          	sub    rsp,0x10
   3105d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31061:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31065:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31069:	48 89 c7             	mov    rdi,rax
   3106c:	e8 df 30 fd ff       	call   4150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>
   31071:	48 89 c2             	mov    rdx,rax
   31074:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31078:	48 89 c1             	mov    rcx,rax
   3107b:	48 8d 35 6b bd 00 00 	lea    rsi,[rip+0xbd6b]        # 3cded <NANO_SEC+0x1b25>
   31082:	48 8b 05 3f 9f 01 00 	mov    rax,QWORD PTR [rip+0x19f3f]        # 4afc8 <strtof@GLIBC_2.2.5>
   31089:	48 89 c7             	mov    rdi,rax
   3108c:	e8 e6 0e 00 00       	call   31f77 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)>
   31091:	c9                   	leave  
   31092:	c3                   	ret    

0000000000031093 <std::__cxx11::to_string(int)>:
   31093:	55                   	push   rbp
   31094:	48 89 e5             	mov    rbp,rsp
   31097:	53                   	push   rbx
   31098:	48 83 ec 38          	sub    rsp,0x38
   3109c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   310a0:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
   310a3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   310ac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   310b0:	31 c0                	xor    eax,eax
   310b2:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   310b5:	c1 e8 1f             	shr    eax,0x1f
   310b8:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
   310bb:	80 7d df 00          	cmp    BYTE PTR [rbp-0x21],0x0
   310bf:	74 07                	je     310c8 <std::__cxx11::to_string(int)+0x35>
   310c1:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   310c4:	f7 d8                	neg    eax
   310c6:	eb 03                	jmp    310cb <std::__cxx11::to_string(int)+0x38>
   310c8:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   310cb:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   310ce:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   310d1:	be 0a 00 00 00       	mov    esi,0xa
   310d6:	89 c7                	mov    edi,eax
   310d8:	e8 b9 00 00 00       	call   31196 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>
   310dd:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   310e0:	48 8d 45 de          	lea    rax,[rbp-0x22]
   310e4:	48 89 c7             	mov    rdi,rax
   310e7:	e8 54 36 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   310ec:	0f b6 55 df          	movzx  edx,BYTE PTR [rbp-0x21]
   310f0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   310f3:	01 d0                	add    eax,edx
   310f5:	89 c6                	mov    esi,eax
   310f7:	48 8d 55 de          	lea    rdx,[rbp-0x22]
   310fb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   310ff:	48 89 d1             	mov    rcx,rdx
   31102:	ba 2d 00 00 00       	mov    edx,0x2d
   31107:	48 89 c7             	mov    rdi,rax
   3110a:	e8 79 0f 00 00       	call   32088 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)>
   3110f:	48 8d 45 de          	lea    rax,[rbp-0x22]
   31113:	48 89 c7             	mov    rdi,rax
   31116:	e8 45 33 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   3111b:	0f b6 55 df          	movzx  edx,BYTE PTR [rbp-0x21]
   3111f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31123:	48 89 d6             	mov    rsi,rdx
   31126:	48 89 c7             	mov    rdi,rax
   31129:	e8 b2 36 fd ff       	call   47e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@plt>
   3112e:	48 89 c1             	mov    rcx,rax
   31131:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   31134:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   31137:	89 c6                	mov    esi,eax
   31139:	48 89 cf             	mov    rdi,rcx
   3113c:	e8 bf 0f 00 00       	call   32100 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
   31141:	90                   	nop
   31142:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31146:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3114f:	74 3b                	je     3118c <std::__cxx11::to_string(int)+0xf9>
   31151:	eb 34                	jmp    31187 <std::__cxx11::to_string(int)+0xf4>
   31153:	48 89 c3             	mov    rbx,rax
   31156:	48 8d 45 de          	lea    rax,[rbp-0x22]
   3115a:	48 89 c7             	mov    rdi,rax
   3115d:	e8 fe 32 fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   31162:	48 89 d8             	mov    rax,rbx
   31165:	48 89 c7             	mov    rdi,rax
   31168:	e8 c3 35 fd ff       	call   4730 <_Unwind_Resume@plt>
   3116d:	48 89 c3             	mov    rbx,rax
   31170:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31174:	48 89 c7             	mov    rdi,rax
   31177:	e8 e4 30 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3117c:	48 89 d8             	mov    rax,rbx
   3117f:	48 89 c7             	mov    rdi,rax
   31182:	e8 a9 35 fd ff       	call   4730 <_Unwind_Resume@plt>
   31187:	e8 24 33 fd ff       	call   44b0 <__stack_chk_fail@plt>
   3118c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31190:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   31194:	c9                   	leave  
   31195:	c3                   	ret    

0000000000031196 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
   31196:	55                   	push   rbp
   31197:	48 89 e5             	mov    rbp,rsp
   3119a:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
   3119d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
   311a0:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
   311a7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   311aa:	0f af c0             	imul   eax,eax
   311ad:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   311b0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   311b3:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   311b6:	0f af c2             	imul   eax,edx
   311b9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   311bc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   311bf:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   311c3:	89 c0                	mov    eax,eax
   311c5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   311c9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   311cc:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
   311cf:	73 05                	jae    311d6 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x40>
   311d1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   311d4:	eb 46                	jmp    3121c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   311d6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   311d9:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
   311dc:	73 08                	jae    311e6 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x50>
   311de:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   311e1:	83 c0 01             	add    eax,0x1
   311e4:	eb 36                	jmp    3121c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   311e6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   311e9:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
   311ec:	73 08                	jae    311f6 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x60>
   311ee:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   311f1:	83 c0 02             	add    eax,0x2
   311f4:	eb 26                	jmp    3121c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   311f6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   311f9:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
   311fd:	76 08                	jbe    31207 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x71>
   311ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   31202:	83 c0 03             	add    eax,0x3
   31205:	eb 15                	jmp    3121c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   31207:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   3120a:	ba 00 00 00 00       	mov    edx,0x0
   3120f:	48 f7 75 f8          	div    QWORD PTR [rbp-0x8]
   31213:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   31216:	83 45 ec 04          	add    DWORD PTR [rbp-0x14],0x4
   3121a:	eb ad                	jmp    311c9 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x33>
   3121c:	5d                   	pop    rbp
   3121d:	c3                   	ret    

000000000003121e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::~_Vector_impl()>:
   3121e:	55                   	push   rbp
   3121f:	48 89 e5             	mov    rbp,rsp
   31222:	48 83 ec 10          	sub    rsp,0x10
   31226:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3122a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3122e:	48 89 c7             	mov    rdi,rax
   31231:	e8 20 11 00 00       	call   32356 <std::allocator<objl::Vertex>::~allocator()>
   31236:	90                   	nop
   31237:	c9                   	leave  
   31238:	c3                   	ret    
   31239:	90                   	nop

000000000003123a <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base()>:
   3123a:	55                   	push   rbp
   3123b:	48 89 e5             	mov    rbp,rsp
   3123e:	48 83 ec 10          	sub    rsp,0x10
   31242:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31246:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3124a:	48 89 c7             	mov    rdi,rax
   3124d:	e8 dc 10 00 00       	call   3232e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl()>
   31252:	90                   	nop
   31253:	c9                   	leave  
   31254:	c3                   	ret    
   31255:	90                   	nop

0000000000031256 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>:
   31256:	55                   	push   rbp
   31257:	48 89 e5             	mov    rbp,rsp
   3125a:	48 83 ec 10          	sub    rsp,0x10
   3125e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31262:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31266:	48 89 c7             	mov    rdi,rax
   31269:	e8 cc ff ff ff       	call   3123a <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base()>
   3126e:	90                   	nop
   3126f:	c9                   	leave  
   31270:	c3                   	ret    
   31271:	90                   	nop

0000000000031272 <objl::Material::~Material()>:
   31272:	55                   	push   rbp
   31273:	48 89 e5             	mov    rbp,rsp
   31276:	48 83 ec 10          	sub    rsp,0x10
   3127a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3127e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31282:	48 05 f8 00 00 00    	add    rax,0xf8
   31288:	48 89 c7             	mov    rdi,rax
   3128b:	e8 d0 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31290:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31294:	48 05 d8 00 00 00    	add    rax,0xd8
   3129a:	48 89 c7             	mov    rdi,rax
   3129d:	e8 be 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   312a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   312a6:	48 05 b8 00 00 00    	add    rax,0xb8
   312ac:	48 89 c7             	mov    rdi,rax
   312af:	e8 ac 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   312b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   312b8:	48 05 98 00 00 00    	add    rax,0x98
   312be:	48 89 c7             	mov    rdi,rax
   312c1:	e8 9a 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   312c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   312ca:	48 83 c0 78          	add    rax,0x78
   312ce:	48 89 c7             	mov    rdi,rax
   312d1:	e8 8a 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   312d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   312da:	48 83 c0 58          	add    rax,0x58
   312de:	48 89 c7             	mov    rdi,rax
   312e1:	e8 7a 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   312e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   312ea:	48 89 c7             	mov    rdi,rax
   312ed:	e8 6e 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   312f2:	90                   	nop
   312f3:	c9                   	leave  
   312f4:	c3                   	ret    

00000000000312f5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   312f5:	55                   	push   rbp
   312f6:	48 89 e5             	mov    rbp,rsp
   312f9:	53                   	push   rbx
   312fa:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
   31301:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
   31308:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
   3130f:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
   31316:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3131f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   31323:	31 c0                	xor    eax,eax
   31325:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   3132c:	48 89 c7             	mov    rdi,rax
   3132f:	e8 14 17 00 00       	call   32a48 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::clear()>
   31334:	48 8d 45 80          	lea    rax,[rbp-0x80]
   31338:	48 89 c7             	mov    rdi,rax
   3133b:	e8 b0 32 fd ff       	call   45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   31340:	c7 85 7c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x84],0x0
   3134a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   31351:	48 89 c7             	mov    rdi,rax
   31354:	e8 57 2f fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   31359:	39 85 7c ff ff ff    	cmp    DWORD PTR [rbp-0x84],eax
   3135f:	0f 9c c0             	setl   al
   31362:	84 c0                	test   al,al
   31364:	0f 84 ec 01 00 00    	je     31556 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x261>
   3136a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   31371:	48 89 c7             	mov    rdi,rax
   31374:	e8 37 2f fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   31379:	48 89 c1             	mov    rcx,rax
   3137c:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   31382:	48 63 d0             	movsxd rdx,eax
   31385:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   31389:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
   31390:	48 89 c7             	mov    rdi,rax
   31393:	e8 88 30 fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   31398:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
   3139f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   313a3:	48 89 d6             	mov    rsi,rdx
   313a6:	48 89 c7             	mov    rdi,rax
   313a9:	e8 bc 4f ff ff       	call   2636a <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   313ae:	84 c0                	test   al,al
   313b0:	0f 84 b1 00 00 00    	je     31467 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x172>
   313b6:	48 8d 45 80          	lea    rax,[rbp-0x80]
   313ba:	48 89 c7             	mov    rdi,rax
   313bd:	e8 3e 33 fd ff       	call   4700 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@plt>
   313c2:	83 f0 01             	xor    eax,0x1
   313c5:	84 c0                	test   al,al
   313c7:	74 3f                	je     31408 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x113>
   313c9:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   313cd:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   313d4:	48 89 d6             	mov    rsi,rdx
   313d7:	48 89 c7             	mov    rdi,rax
   313da:	e8 b5 50 ff ff       	call   26494 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   313df:	48 8d 45 80          	lea    rax,[rbp-0x80]
   313e3:	48 89 c7             	mov    rdi,rax
   313e6:	e8 a5 31 fd ff       	call   4590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@plt>
   313eb:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   313f2:	48 89 c7             	mov    rdi,rax
   313f5:	e8 b6 2e fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   313fa:	83 e8 01             	sub    eax,0x1
   313fd:	01 85 7c ff ff ff    	add    DWORD PTR [rbp-0x84],eax
   31403:	e9 2c 01 00 00       	jmp    31534 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x23f>
   31408:	48 8d 85 7b ff ff ff 	lea    rax,[rbp-0x85]
   3140f:	48 89 c7             	mov    rdi,rax
   31412:	e8 29 33 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   31417:	48 8d 95 7b ff ff ff 	lea    rdx,[rbp-0x85]
   3141e:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   31422:	48 8d 35 c9 b9 00 00 	lea    rsi,[rip+0xb9c9]        # 3cdf2 <NANO_SEC+0x1b2a>
   31429:	48 89 c7             	mov    rdi,rax
   3142c:	e8 81 4a ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   31431:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   31435:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   3143c:	48 89 d6             	mov    rsi,rdx
   3143f:	48 89 c7             	mov    rdi,rax
   31442:	e8 27 16 00 00       	call   32a6e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   31447:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   3144b:	48 89 c7             	mov    rdi,rax
   3144e:	e8 0d 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31453:	48 8d 85 7b ff ff ff 	lea    rax,[rbp-0x85]
   3145a:	48 89 c7             	mov    rdi,rax
   3145d:	e8 fe 2f fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   31462:	e9 cd 00 00 00       	jmp    31534 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x23f>
   31467:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   3146d:	48 63 d8             	movsxd rbx,eax
   31470:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   31477:	48 89 c7             	mov    rdi,rax
   3147a:	e8 31 2e fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3147f:	48 01 c3             	add    rbx,rax
   31482:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   31489:	48 89 c7             	mov    rdi,rax
   3148c:	e8 1f 2e fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   31491:	48 39 c3             	cmp    rbx,rax
   31494:	0f 93 c0             	setae  al
   31497:	84 c0                	test   al,al
   31499:	74 6a                	je     31505 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x210>
   3149b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   314a2:	48 89 c7             	mov    rdi,rax
   314a5:	e8 06 2e fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   314aa:	48 89 c1             	mov    rcx,rax
   314ad:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   314b3:	48 63 d0             	movsxd rdx,eax
   314b6:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   314ba:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
   314c1:	48 89 c7             	mov    rdi,rax
   314c4:	e8 57 2f fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   314c9:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   314cd:	48 8d 45 80          	lea    rax,[rbp-0x80]
   314d1:	48 89 d6             	mov    rsi,rdx
   314d4:	48 89 c7             	mov    rdi,rax
   314d7:	e8 84 30 fd ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   314dc:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   314e0:	48 89 c7             	mov    rdi,rax
   314e3:	e8 78 2d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   314e8:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   314ec:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   314f3:	48 89 d6             	mov    rsi,rdx
   314f6:	48 89 c7             	mov    rdi,rax
   314f9:	e8 96 4f ff ff       	call   26494 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   314fe:	bb 00 00 00 00       	mov    ebx,0x0
   31503:	eb 34                	jmp    31539 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x244>
   31505:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   3150b:	48 63 d0             	movsxd rdx,eax
   3150e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   31515:	48 89 d6             	mov    rsi,rdx
   31518:	48 89 c7             	mov    rdi,rax
   3151b:	e8 60 2f fd ff       	call   4480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const@plt>
   31520:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   31523:	0f be d0             	movsx  edx,al
   31526:	48 8d 45 80          	lea    rax,[rbp-0x80]
   3152a:	89 d6                	mov    esi,edx
   3152c:	48 89 c7             	mov    rdi,rax
   3152f:	e8 3c 2d fd ff       	call   4270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)@plt>
   31534:	bb 01 00 00 00       	mov    ebx,0x1
   31539:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   3153d:	48 89 c7             	mov    rdi,rax
   31540:	e8 1b 2d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31545:	83 fb 01             	cmp    ebx,0x1
   31548:	75 0c                	jne    31556 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x261>
   3154a:	83 85 7c ff ff ff 01 	add    DWORD PTR [rbp-0x84],0x1
   31551:	e9 f4 fd ff ff       	jmp    3134a <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x55>
   31556:	48 8d 45 80          	lea    rax,[rbp-0x80]
   3155a:	48 89 c7             	mov    rdi,rax
   3155d:	e8 fe 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31562:	90                   	nop
   31563:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31567:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   31570:	74 68                	je     315da <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2e5>
   31572:	eb 61                	jmp    315d5 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2e0>
   31574:	48 89 c3             	mov    rbx,rax
   31577:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   3157b:	48 89 c7             	mov    rdi,rax
   3157e:	e8 dd 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31583:	eb 03                	jmp    31588 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x293>
   31585:	48 89 c3             	mov    rbx,rax
   31588:	48 8d 85 7b ff ff ff 	lea    rax,[rbp-0x85]
   3158f:	48 89 c7             	mov    rdi,rax
   31592:	e8 c9 2e fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   31597:	eb 14                	jmp    315ad <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2b8>
   31599:	48 89 c3             	mov    rbx,rax
   3159c:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   315a0:	48 89 c7             	mov    rdi,rax
   315a3:	e8 b8 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   315a8:	eb 03                	jmp    315ad <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2b8>
   315aa:	48 89 c3             	mov    rbx,rax
   315ad:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   315b1:	48 89 c7             	mov    rdi,rax
   315b4:	e8 a7 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   315b9:	eb 03                	jmp    315be <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2c9>
   315bb:	48 89 c3             	mov    rbx,rax
   315be:	48 8d 45 80          	lea    rax,[rbp-0x80]
   315c2:	48 89 c7             	mov    rdi,rax
   315c5:	e8 96 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   315ca:	48 89 d8             	mov    rax,rbx
   315cd:	48 89 c7             	mov    rdi,rax
   315d0:	e8 5b 31 fd ff       	call   4730 <_Unwind_Resume@plt>
   315d5:	e8 d6 2e fd ff       	call   44b0 <__stack_chk_fail@plt>
   315da:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   315de:	c9                   	leave  
   315df:	c3                   	ret    

00000000000315e0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   315e0:	55                   	push   rbp
   315e1:	48 89 e5             	mov    rbp,rsp
   315e4:	53                   	push   rbx
   315e5:	48 83 ec 48          	sub    rsp,0x48
   315e9:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   315ed:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   315f1:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   315fa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   315fe:	31 c0                	xor    eax,eax
   31600:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31604:	ba 00 00 00 00       	mov    edx,0x0
   31609:	48 8d 35 e3 b7 00 00 	lea    rsi,[rip+0xb7e3]        # 3cdf3 <NANO_SEC+0x1b2b>
   31610:	48 89 c7             	mov    rdi,rax
   31613:	e8 18 2c fd ff       	call   4230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>
   31618:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   3161c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   31620:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31624:	48 8d 35 c8 b7 00 00 	lea    rsi,[rip+0xb7c8]        # 3cdf3 <NANO_SEC+0x1b2b>
   3162b:	48 89 c7             	mov    rdi,rax
   3162e:	e8 8d 2b fd ff       	call   41c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@plt>
   31633:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   31637:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   3163b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   3163f:	48 8d 35 ad b7 00 00 	lea    rsi,[rip+0xb7ad]        # 3cdf3 <NANO_SEC+0x1b2b>
   31646:	48 89 c7             	mov    rdi,rax
   31649:	e8 e2 2b fd ff       	call   4230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>
   3164e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   31652:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31656:	48 c7 c2 ff ff ff ff 	mov    rdx,0xffffffffffffffff
   3165d:	48 8d 35 8f b7 00 00 	lea    rsi,[rip+0xb78f]        # 3cdf3 <NANO_SEC+0x1b2b>
   31664:	48 89 c7             	mov    rdi,rax
   31667:	e8 f4 30 fd ff       	call   4760 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const@plt>
   3166c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   31670:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   31675:	74 29                	je     316a0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
   31677:	48 83 7d e0 ff       	cmp    QWORD PTR [rbp-0x20],0xffffffffffffffff
   3167c:	74 22                	je     316a0 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
   3167e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31682:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
   31686:	48 8d 48 01          	lea    rcx,[rax+0x1]
   3168a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   3168e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   31692:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   31696:	48 89 c7             	mov    rdi,rax
   31699:	e8 82 2d fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   3169e:	eb 70                	jmp    31710 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
   316a0:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   316a5:	74 1d                	je     316c4 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe4>
   316a7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   316ab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   316af:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   316b3:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   316ba:	48 89 c7             	mov    rdi,rax
   316bd:	e8 5e 2d fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   316c2:	eb 4c                	jmp    31710 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
   316c4:	48 8d 45 c7          	lea    rax,[rbp-0x39]
   316c8:	48 89 c7             	mov    rdi,rax
   316cb:	e8 70 30 fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   316d0:	48 8d 55 c7          	lea    rdx,[rbp-0x39]
   316d4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   316d8:	48 8d 35 13 b7 00 00 	lea    rsi,[rip+0xb713]        # 3cdf2 <NANO_SEC+0x1b2a>
   316df:	48 89 c7             	mov    rdi,rax
   316e2:	e8 cb 47 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   316e7:	90                   	nop
   316e8:	48 8d 45 c7          	lea    rax,[rbp-0x39]
   316ec:	48 89 c7             	mov    rdi,rax
   316ef:	e8 6c 2d fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   316f4:	eb 1a                	jmp    31710 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
   316f6:	48 89 c3             	mov    rbx,rax
   316f9:	48 8d 45 c7          	lea    rax,[rbp-0x39]
   316fd:	48 89 c7             	mov    rdi,rax
   31700:	e8 5b 2d fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   31705:	48 89 d8             	mov    rax,rbx
   31708:	48 89 c7             	mov    rdi,rax
   3170b:	e8 20 30 fd ff       	call   4730 <_Unwind_Resume@plt>
   31710:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31714:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3171d:	74 05                	je     31724 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x144>
   3171f:	e8 8c 2d fd ff       	call   44b0 <__stack_chk_fail@plt>
   31724:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   31728:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3172c:	c9                   	leave  
   3172d:	c3                   	ret    

000000000003172e <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   3172e:	55                   	push   rbp
   3172f:	48 89 e5             	mov    rbp,rsp
   31732:	53                   	push   rbx
   31733:	48 83 ec 38          	sub    rsp,0x38
   31737:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   3173b:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   3173f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   31748:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3174c:	31 c0                	xor    eax,eax
   3174e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   31752:	48 89 c7             	mov    rdi,rax
   31755:	e8 a6 2f fd ff       	call   4700 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@plt>
   3175a:	83 f0 01             	xor    eax,0x1
   3175d:	84 c0                	test   al,al
   3175f:	0f 84 8a 00 00 00    	je     317ef <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc1>
   31765:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   31769:	ba 00 00 00 00       	mov    edx,0x0
   3176e:	48 8d 35 7e b6 00 00 	lea    rsi,[rip+0xb67e]        # 3cdf3 <NANO_SEC+0x1b2b>
   31775:	48 89 c7             	mov    rdi,rax
   31778:	e8 b3 2a fd ff       	call   4230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>
   3177d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   31781:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   31785:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   31789:	48 8d 35 63 b6 00 00 	lea    rsi,[rip+0xb663]        # 3cdf3 <NANO_SEC+0x1b2b>
   31790:	48 89 c7             	mov    rdi,rax
   31793:	e8 28 2a fd ff       	call   41c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@plt>
   31798:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   3179c:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   317a1:	74 28                	je     317cb <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
   317a3:	48 83 7d e0 ff       	cmp    QWORD PTR [rbp-0x20],0xffffffffffffffff
   317a8:	74 21                	je     317cb <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
   317aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   317ae:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
   317b2:	48 89 c1             	mov    rcx,rax
   317b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   317b9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   317bd:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   317c1:	48 89 c7             	mov    rdi,rax
   317c4:	e8 57 2c fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   317c9:	eb 70                	jmp    3183b <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10d>
   317cb:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   317d0:	74 1d                	je     317ef <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc1>
   317d2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   317d6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   317da:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   317de:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   317e5:	48 89 c7             	mov    rdi,rax
   317e8:	e8 33 2c fd ff       	call   4420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   317ed:	eb 4c                	jmp    3183b <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10d>
   317ef:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   317f3:	48 89 c7             	mov    rdi,rax
   317f6:	e8 45 2f fd ff       	call   4740 <std::allocator<char>::allocator()@plt>
   317fb:	48 8d 55 d7          	lea    rdx,[rbp-0x29]
   317ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31803:	48 8d 35 e8 b5 00 00 	lea    rsi,[rip+0xb5e8]        # 3cdf2 <NANO_SEC+0x1b2a>
   3180a:	48 89 c7             	mov    rdi,rax
   3180d:	e8 a0 46 ff ff       	call   25eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   31812:	90                   	nop
   31813:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   31817:	48 89 c7             	mov    rdi,rax
   3181a:	e8 41 2c fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   3181f:	eb 1a                	jmp    3183b <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10d>
   31821:	48 89 c3             	mov    rbx,rax
   31824:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   31828:	48 89 c7             	mov    rdi,rax
   3182b:	e8 30 2c fd ff       	call   4460 <std::allocator<char>::~allocator()@plt>
   31830:	48 89 d8             	mov    rax,rbx
   31833:	48 89 c7             	mov    rdi,rax
   31836:	e8 f5 2e fd ff       	call   4730 <_Unwind_Resume@plt>
   3183b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3183f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   31848:	74 05                	je     3184f <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x121>
   3184a:	e8 61 2c fd ff       	call   44b0 <__stack_chk_fail@plt>
   3184f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31853:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   31857:	c9                   	leave  
   31858:	c3                   	ret    
   31859:	90                   	nop

000000000003185a <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::~_Vector_impl()>:
   3185a:	55                   	push   rbp
   3185b:	48 89 e5             	mov    rbp,rsp
   3185e:	48 83 ec 10          	sub    rsp,0x10
   31862:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31866:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3186a:	48 89 c7             	mov    rdi,rax
   3186d:	e8 56 12 00 00       	call   32ac8 <std::allocator<objl::Mesh>::~allocator()>
   31872:	90                   	nop
   31873:	c9                   	leave  
   31874:	c3                   	ret    
   31875:	90                   	nop

0000000000031876 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_base()>:
   31876:	55                   	push   rbp
   31877:	48 89 e5             	mov    rbp,rsp
   3187a:	48 83 ec 10          	sub    rsp,0x10
   3187e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31882:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31886:	48 89 c7             	mov    rdi,rax
   31889:	e8 12 12 00 00       	call   32aa0 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::_Vector_impl()>
   3188e:	90                   	nop
   3188f:	c9                   	leave  
   31890:	c3                   	ret    
   31891:	90                   	nop

0000000000031892 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::vector()>:
   31892:	55                   	push   rbp
   31893:	48 89 e5             	mov    rbp,rsp
   31896:	48 83 ec 10          	sub    rsp,0x10
   3189a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3189e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   318a2:	48 89 c7             	mov    rdi,rax
   318a5:	e8 cc ff ff ff       	call   31876 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_base()>
   318aa:	90                   	nop
   318ab:	c9                   	leave  
   318ac:	c3                   	ret    
   318ad:	90                   	nop

00000000000318ae <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::~_Vector_impl()>:
   318ae:	55                   	push   rbp
   318af:	48 89 e5             	mov    rbp,rsp
   318b2:	48 83 ec 10          	sub    rsp,0x10
   318b6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   318ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   318be:	48 89 c7             	mov    rdi,rax
   318c1:	e8 e8 12 00 00       	call   32bae <std::allocator<objl::Material>::~allocator()>
   318c6:	90                   	nop
   318c7:	c9                   	leave  
   318c8:	c3                   	ret    
   318c9:	90                   	nop

00000000000318ca <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_base()>:
   318ca:	55                   	push   rbp
   318cb:	48 89 e5             	mov    rbp,rsp
   318ce:	48 83 ec 10          	sub    rsp,0x10
   318d2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   318d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   318da:	48 89 c7             	mov    rdi,rax
   318dd:	e8 a4 12 00 00       	call   32b86 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::_Vector_impl()>
   318e2:	90                   	nop
   318e3:	c9                   	leave  
   318e4:	c3                   	ret    
   318e5:	90                   	nop

00000000000318e6 <std::vector<objl::Material, std::allocator<objl::Material> >::vector()>:
   318e6:	55                   	push   rbp
   318e7:	48 89 e5             	mov    rbp,rsp
   318ea:	48 83 ec 10          	sub    rsp,0x10
   318ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   318f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   318f6:	48 89 c7             	mov    rdi,rax
   318f9:	e8 cc ff ff ff       	call   318ca <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_base()>
   318fe:	90                   	nop
   318ff:	c9                   	leave  
   31900:	c3                   	ret    
   31901:	90                   	nop

0000000000031902 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::~_Vector_impl()>:
   31902:	55                   	push   rbp
   31903:	48 89 e5             	mov    rbp,rsp
   31906:	48 83 ec 10          	sub    rsp,0x10
   3190a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3190e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31912:	48 89 c7             	mov    rdi,rax
   31915:	e8 14 14 00 00       	call   32d2e <std::allocator<objl::Vector3>::~allocator()>
   3191a:	90                   	nop
   3191b:	c9                   	leave  
   3191c:	c3                   	ret    
   3191d:	90                   	nop

000000000003191e <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_base()>:
   3191e:	55                   	push   rbp
   3191f:	48 89 e5             	mov    rbp,rsp
   31922:	48 83 ec 10          	sub    rsp,0x10
   31926:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3192a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3192e:	48 89 c7             	mov    rdi,rax
   31931:	e8 d0 13 00 00       	call   32d06 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::_Vector_impl()>
   31936:	90                   	nop
   31937:	c9                   	leave  
   31938:	c3                   	ret    
   31939:	90                   	nop

000000000003193a <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::vector()>:
   3193a:	55                   	push   rbp
   3193b:	48 89 e5             	mov    rbp,rsp
   3193e:	48 83 ec 10          	sub    rsp,0x10
   31942:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31946:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3194a:	48 89 c7             	mov    rdi,rax
   3194d:	e8 cc ff ff ff       	call   3191e <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_base()>
   31952:	90                   	nop
   31953:	c9                   	leave  
   31954:	c3                   	ret    
   31955:	90                   	nop

0000000000031956 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::~_Vector_impl()>:
   31956:	55                   	push   rbp
   31957:	48 89 e5             	mov    rbp,rsp
   3195a:	48 83 ec 10          	sub    rsp,0x10
   3195e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31962:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31966:	48 89 c7             	mov    rdi,rax
   31969:	e8 a6 14 00 00       	call   32e14 <std::allocator<objl::Vector2>::~allocator()>
   3196e:	90                   	nop
   3196f:	c9                   	leave  
   31970:	c3                   	ret    
   31971:	90                   	nop

0000000000031972 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_base()>:
   31972:	55                   	push   rbp
   31973:	48 89 e5             	mov    rbp,rsp
   31976:	48 83 ec 10          	sub    rsp,0x10
   3197a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3197e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31982:	48 89 c7             	mov    rdi,rax
   31985:	e8 62 14 00 00       	call   32dec <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::_Vector_impl()>
   3198a:	90                   	nop
   3198b:	c9                   	leave  
   3198c:	c3                   	ret    
   3198d:	90                   	nop

000000000003198e <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::vector()>:
   3198e:	55                   	push   rbp
   3198f:	48 89 e5             	mov    rbp,rsp
   31992:	48 83 ec 10          	sub    rsp,0x10
   31996:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3199a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3199e:	48 89 c7             	mov    rdi,rax
   319a1:	e8 cc ff ff ff       	call   31972 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_base()>
   319a6:	90                   	nop
   319a7:	c9                   	leave  
   319a8:	c3                   	ret    
   319a9:	90                   	nop

00000000000319aa <objl::Mesh::~Mesh()>:
   319aa:	55                   	push   rbp
   319ab:	48 89 e5             	mov    rbp,rsp
   319ae:	48 83 ec 10          	sub    rsp,0x10
   319b2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   319b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319ba:	48 83 c0 50          	add    rax,0x50
   319be:	48 89 c7             	mov    rdi,rax
   319c1:	e8 ac f8 ff ff       	call   31272 <objl::Material::~Material()>
   319c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319ca:	48 83 c0 38          	add    rax,0x38
   319ce:	48 89 c7             	mov    rdi,rax
   319d1:	e8 e6 4f ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   319d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319da:	48 83 c0 20          	add    rax,0x20
   319de:	48 89 c7             	mov    rdi,rax
   319e1:	e8 da 09 00 00       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   319e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319ea:	48 89 c7             	mov    rdi,rax
   319ed:	e8 6e 28 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   319f2:	90                   	nop
   319f3:	c9                   	leave  
   319f4:	c3                   	ret    

00000000000319f5 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_always_equal()>:
   319f5:	55                   	push   rbp
   319f6:	48 89 e5             	mov    rbp,rsp
   319f9:	b8 01 00 00 00       	mov    eax,0x1
   319fe:	5d                   	pop    rbp
   319ff:	c3                   	ret    

0000000000031a00 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_always_equal()>:
   31a00:	55                   	push   rbp
   31a01:	48 89 e5             	mov    rbp,rsp
   31a04:	b8 01 00 00 00       	mov    eax,0x1
   31a09:	5d                   	pop    rbp
   31a0a:	c3                   	ret    
   31a0b:	90                   	nop

0000000000031a0c <objl::Material::operator=(objl::Material&&)>:
   31a0c:	55                   	push   rbp
   31a0d:	48 89 e5             	mov    rbp,rsp
   31a10:	48 83 ec 10          	sub    rsp,0x10
   31a14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31a18:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31a1c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31a20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a24:	48 89 d6             	mov    rsi,rdx
   31a27:	48 89 c7             	mov    rdi,rax
   31a2a:	e8 f1 2a fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31a2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a33:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31a37:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   31a3b:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   31a3f:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   31a42:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   31a45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a49:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31a4d:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   31a51:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   31a55:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   31a58:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   31a5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a5f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31a63:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   31a67:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   31a6b:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   31a6e:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   31a71:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31a75:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   31a7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a7e:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   31a83:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31a87:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   31a8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a90:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   31a95:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31a99:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   31a9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31aa2:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   31aa7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31aab:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   31aae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ab2:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   31ab5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31ab9:	48 8d 50 58          	lea    rdx,[rax+0x58]
   31abd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ac1:	48 83 c0 58          	add    rax,0x58
   31ac5:	48 89 d6             	mov    rsi,rdx
   31ac8:	48 89 c7             	mov    rdi,rax
   31acb:	e8 50 2a fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31ad0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31ad4:	48 8d 50 78          	lea    rdx,[rax+0x78]
   31ad8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31adc:	48 83 c0 78          	add    rax,0x78
   31ae0:	48 89 d6             	mov    rsi,rdx
   31ae3:	48 89 c7             	mov    rdi,rax
   31ae6:	e8 35 2a fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31aeb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31aef:	48 8d 90 98 00 00 00 	lea    rdx,[rax+0x98]
   31af6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31afa:	48 05 98 00 00 00    	add    rax,0x98
   31b00:	48 89 d6             	mov    rsi,rdx
   31b03:	48 89 c7             	mov    rdi,rax
   31b06:	e8 15 2a fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31b0b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31b0f:	48 8d 90 b8 00 00 00 	lea    rdx,[rax+0xb8]
   31b16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b1a:	48 05 b8 00 00 00    	add    rax,0xb8
   31b20:	48 89 d6             	mov    rsi,rdx
   31b23:	48 89 c7             	mov    rdi,rax
   31b26:	e8 f5 29 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31b2b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31b2f:	48 8d 90 d8 00 00 00 	lea    rdx,[rax+0xd8]
   31b36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b3a:	48 05 d8 00 00 00    	add    rax,0xd8
   31b40:	48 89 d6             	mov    rsi,rdx
   31b43:	48 89 c7             	mov    rdi,rax
   31b46:	e8 d5 29 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31b4b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31b4f:	48 8d 90 f8 00 00 00 	lea    rdx,[rax+0xf8]
   31b56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b5a:	48 05 f8 00 00 00    	add    rax,0xf8
   31b60:	48 89 d6             	mov    rsi,rdx
   31b63:	48 89 c7             	mov    rdi,rax
   31b66:	e8 b5 29 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31b6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b6f:	c9                   	leave  
   31b70:	c3                   	ret    
   31b71:	90                   	nop

0000000000031b72 <objl::Mesh::operator=(objl::Mesh&&)>:
   31b72:	55                   	push   rbp
   31b73:	48 89 e5             	mov    rbp,rsp
   31b76:	48 83 ec 10          	sub    rsp,0x10
   31b7a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31b7e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31b82:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31b86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b8a:	48 89 d6             	mov    rsi,rdx
   31b8d:	48 89 c7             	mov    rdi,rax
   31b90:	e8 8b 29 fd ff       	call   4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31b95:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31b99:	48 8d 50 20          	lea    rdx,[rax+0x20]
   31b9d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ba1:	48 83 c0 20          	add    rax,0x20
   31ba5:	48 89 d6             	mov    rsi,rdx
   31ba8:	48 89 c7             	mov    rdi,rax
   31bab:	e8 da 13 00 00       	call   32f8a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>
   31bb0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31bb4:	48 8d 50 38          	lea    rdx,[rax+0x38]
   31bb8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31bbc:	48 83 c0 38          	add    rax,0x38
   31bc0:	48 89 d6             	mov    rsi,rdx
   31bc3:	48 89 c7             	mov    rdi,rax
   31bc6:	e8 f7 13 00 00       	call   32fc2 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> >&&)>
   31bcb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31bcf:	48 8d 50 50          	lea    rdx,[rax+0x50]
   31bd3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31bd7:	48 83 c0 50          	add    rax,0x50
   31bdb:	48 89 d6             	mov    rsi,rdx
   31bde:	48 89 c7             	mov    rdi,rax
   31be1:	e8 26 fe ff ff       	call   31a0c <objl::Material::operator=(objl::Material&&)>
   31be6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31bea:	c9                   	leave  
   31beb:	c3                   	ret    

0000000000031bec <objl::Material::operator=(objl::Material const&)>:
   31bec:	55                   	push   rbp
   31bed:	48 89 e5             	mov    rbp,rsp
   31bf0:	48 83 ec 10          	sub    rsp,0x10
   31bf4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31bf8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31bfc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31c00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c04:	48 89 d6             	mov    rsi,rdx
   31c07:	48 89 c7             	mov    rdi,rax
   31c0a:	e8 41 24 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31c0f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c13:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31c17:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   31c1b:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   31c1f:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   31c22:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   31c25:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c29:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31c2d:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   31c31:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   31c35:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   31c38:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   31c3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c3f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31c43:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   31c47:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   31c4b:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   31c4e:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   31c51:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c55:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   31c5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c5e:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   31c63:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c67:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   31c6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c70:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   31c75:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c79:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   31c7e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c82:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   31c87:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c8b:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   31c8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c92:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   31c95:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c99:	48 8d 50 58          	lea    rdx,[rax+0x58]
   31c9d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ca1:	48 83 c0 58          	add    rax,0x58
   31ca5:	48 89 d6             	mov    rsi,rdx
   31ca8:	48 89 c7             	mov    rdi,rax
   31cab:	e8 a0 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31cb0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31cb4:	48 8d 50 78          	lea    rdx,[rax+0x78]
   31cb8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31cbc:	48 83 c0 78          	add    rax,0x78
   31cc0:	48 89 d6             	mov    rsi,rdx
   31cc3:	48 89 c7             	mov    rdi,rax
   31cc6:	e8 85 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31ccb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31ccf:	48 8d 90 98 00 00 00 	lea    rdx,[rax+0x98]
   31cd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31cda:	48 05 98 00 00 00    	add    rax,0x98
   31ce0:	48 89 d6             	mov    rsi,rdx
   31ce3:	48 89 c7             	mov    rdi,rax
   31ce6:	e8 65 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31ceb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31cef:	48 8d 90 b8 00 00 00 	lea    rdx,[rax+0xb8]
   31cf6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31cfa:	48 05 b8 00 00 00    	add    rax,0xb8
   31d00:	48 89 d6             	mov    rsi,rdx
   31d03:	48 89 c7             	mov    rdi,rax
   31d06:	e8 45 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31d0b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31d0f:	48 8d 90 d8 00 00 00 	lea    rdx,[rax+0xd8]
   31d16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d1a:	48 05 d8 00 00 00    	add    rax,0xd8
   31d20:	48 89 d6             	mov    rsi,rdx
   31d23:	48 89 c7             	mov    rdi,rax
   31d26:	e8 25 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31d2b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31d2f:	48 8d 90 f8 00 00 00 	lea    rdx,[rax+0xf8]
   31d36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d3a:	48 05 f8 00 00 00    	add    rax,0xf8
   31d40:	48 89 d6             	mov    rsi,rdx
   31d43:	48 89 c7             	mov    rdi,rax
   31d46:	e8 05 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31d4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d4f:	c9                   	leave  
   31d50:	c3                   	ret    
   31d51:	90                   	nop

0000000000031d52 <objl::Vertex::Vertex()>:
   31d52:	55                   	push   rbp
   31d53:	48 89 e5             	mov    rbp,rsp
   31d56:	48 83 ec 08          	sub    rsp,0x8
   31d5a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31d5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d62:	48 89 c7             	mov    rdi,rax
   31d65:	e8 48 a5 ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   31d6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d6e:	48 83 c0 0c          	add    rax,0xc
   31d72:	48 89 c7             	mov    rdi,rax
   31d75:	e8 38 a5 ff ff       	call   2c2b2 <objl::Vector3::Vector3()>
   31d7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d7e:	48 83 c0 18          	add    rax,0x18
   31d82:	48 89 c7             	mov    rdi,rax
   31d85:	e8 ae a2 ff ff       	call   2c038 <objl::Vector2::Vector2()>
   31d8a:	90                   	nop
   31d8b:	c9                   	leave  
   31d8c:	c3                   	ret    
   31d8d:	90                   	nop

0000000000031d8e <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()>:
   31d8e:	55                   	push   rbp
   31d8f:	48 89 e5             	mov    rbp,rsp
   31d92:	48 83 ec 10          	sub    rsp,0x10
   31d96:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31d9a:	e8 c1 22 fd ff       	call   4060 <__errno_location@plt>
   31d9f:	8b 10                	mov    edx,DWORD PTR [rax]
   31da1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31da5:	89 10                	mov    DWORD PTR [rax],edx
   31da7:	e8 b4 22 fd ff       	call   4060 <__errno_location@plt>
   31dac:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   31db2:	90                   	nop
   31db3:	c9                   	leave  
   31db4:	c3                   	ret    
   31db5:	90                   	nop

0000000000031db6 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>:
   31db6:	55                   	push   rbp
   31db7:	48 89 e5             	mov    rbp,rsp
   31dba:	48 83 ec 10          	sub    rsp,0x10
   31dbe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31dc2:	e8 99 22 fd ff       	call   4060 <__errno_location@plt>
   31dc7:	8b 00                	mov    eax,DWORD PTR [rax]
   31dc9:	85 c0                	test   eax,eax
   31dcb:	75 0d                	jne    31dda <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()+0x24>
   31dcd:	e8 8e 22 fd ff       	call   4060 <__errno_location@plt>
   31dd2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   31dd6:	8b 12                	mov    edx,DWORD PTR [rdx]
   31dd8:	89 10                	mov    DWORD PTR [rax],edx
   31dda:	90                   	nop
   31ddb:	c9                   	leave  
   31ddc:	c3                   	ret    

0000000000031ddd <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)>:
   31ddd:	55                   	push   rbp
   31dde:	48 89 e5             	mov    rbp,rsp
   31de1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31de5:	48 b8 ff ff ff 7f ff ff ff ff 	movabs rax,0xffffffff7fffffff
   31def:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
   31df3:	7e 0b                	jle    31e00 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)+0x23>
   31df5:	b8 00 00 00 80       	mov    eax,0x80000000
   31dfa:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
   31dfe:	7c 07                	jl     31e07 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)+0x2a>
   31e00:	b8 01 00 00 00       	mov    eax,0x1
   31e05:	eb 05                	jmp    31e0c <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)+0x2f>
   31e07:	b8 00 00 00 00       	mov    eax,0x0
   31e0c:	5d                   	pop    rbp
   31e0d:	c3                   	ret    

0000000000031e0e <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)>:
   31e0e:	55                   	push   rbp
   31e0f:	48 89 e5             	mov    rbp,rsp
   31e12:	53                   	push   rbx
   31e13:	48 83 ec 68          	sub    rsp,0x68
   31e17:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   31e1b:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   31e1f:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   31e23:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
   31e27:	44 89 45 9c          	mov    DWORD PTR [rbp-0x64],r8d
   31e2b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   31e34:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   31e38:	31 c0                	xor    eax,eax
   31e3a:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   31e3e:	48 89 c7             	mov    rdi,rax
   31e41:	e8 48 ff ff ff       	call   31d8e <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()>
   31e46:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
   31e4a:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
   31e4d:	48 8d 4d d8          	lea    rcx,[rbp-0x28]
   31e51:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   31e55:	48 89 ce             	mov    rsi,rcx
   31e58:	48 89 c7             	mov    rdi,rax
   31e5b:	41 ff d0             	call   r8
   31e5e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   31e62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   31e66:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
   31e6a:	75 0c                	jne    31e78 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x6a>
   31e6c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31e70:	48 89 c7             	mov    rdi,rax
   31e73:	e8 d8 23 fd ff       	call   4250 <std::__throw_invalid_argument(char const*)@plt>
   31e78:	e8 e3 21 fd ff       	call   4060 <__errno_location@plt>
   31e7d:	8b 00                	mov    eax,DWORD PTR [rax]
   31e7f:	83 f8 22             	cmp    eax,0x22
   31e82:	74 10                	je     31e94 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x86>
   31e84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31e88:	48 89 c7             	mov    rdi,rax
   31e8b:	e8 4d ff ff ff       	call   31ddd <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)>
   31e90:	84 c0                	test   al,al
   31e92:	74 07                	je     31e9b <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x8d>
   31e94:	b8 01 00 00 00       	mov    eax,0x1
   31e99:	eb 05                	jmp    31ea0 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x92>
   31e9b:	b8 00 00 00 00       	mov    eax,0x0
   31ea0:	84 c0                	test   al,al
   31ea2:	74 0c                	je     31eb0 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0xa2>
   31ea4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31ea8:	48 89 c7             	mov    rdi,rax
   31eab:	e8 60 27 fd ff       	call   4610 <std::__throw_out_of_range(char const*)@plt>
   31eb0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31eb4:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
   31eb7:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   31ebc:	74 12                	je     31ed0 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0xc2>
   31ebe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   31ec2:	48 2b 45 a8          	sub    rax,QWORD PTR [rbp-0x58]
   31ec6:	48 89 c2             	mov    rdx,rax
   31ec9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   31ecd:	48 89 10             	mov    QWORD PTR [rax],rdx
   31ed0:	8b 5d d4             	mov    ebx,DWORD PTR [rbp-0x2c]
   31ed3:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   31ed7:	48 89 c7             	mov    rdi,rax
   31eda:	e8 d7 fe ff ff       	call   31db6 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>
   31edf:	89 d8                	mov    eax,ebx
   31ee1:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
   31ee5:	64 48 2b 34 25 28 00 00 00 	sub    rsi,QWORD PTR fs:0x28
   31eee:	74 21                	je     31f11 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x103>
   31ef0:	eb 1a                	jmp    31f0c <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0xfe>
   31ef2:	48 89 c3             	mov    rbx,rax
   31ef5:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   31ef9:	48 89 c7             	mov    rdi,rax
   31efc:	e8 b5 fe ff ff       	call   31db6 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>
   31f01:	48 89 d8             	mov    rax,rbx
   31f04:	48 89 c7             	mov    rdi,rax
   31f07:	e8 24 28 fd ff       	call   4730 <_Unwind_Resume@plt>
   31f0c:	e8 9f 25 fd ff       	call   44b0 <__stack_chk_fail@plt>
   31f11:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   31f15:	c9                   	leave  
   31f16:	c3                   	ret    
   31f17:	90                   	nop

0000000000031f18 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::_Save_errno()>:
   31f18:	55                   	push   rbp
   31f19:	48 89 e5             	mov    rbp,rsp
   31f1c:	48 83 ec 10          	sub    rsp,0x10
   31f20:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31f24:	e8 37 21 fd ff       	call   4060 <__errno_location@plt>
   31f29:	8b 10                	mov    edx,DWORD PTR [rax]
   31f2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31f2f:	89 10                	mov    DWORD PTR [rax],edx
   31f31:	e8 2a 21 fd ff       	call   4060 <__errno_location@plt>
   31f36:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   31f3c:	90                   	nop
   31f3d:	c9                   	leave  
   31f3e:	c3                   	ret    
   31f3f:	90                   	nop

0000000000031f40 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()>:
   31f40:	55                   	push   rbp
   31f41:	48 89 e5             	mov    rbp,rsp
   31f44:	48 83 ec 10          	sub    rsp,0x10
   31f48:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31f4c:	e8 0f 21 fd ff       	call   4060 <__errno_location@plt>
   31f51:	8b 00                	mov    eax,DWORD PTR [rax]
   31f53:	85 c0                	test   eax,eax
   31f55:	75 0d                	jne    31f64 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()+0x24>
   31f57:	e8 04 21 fd ff       	call   4060 <__errno_location@plt>
   31f5c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   31f60:	8b 12                	mov    edx,DWORD PTR [rdx]
   31f62:	89 10                	mov    DWORD PTR [rax],edx
   31f64:	90                   	nop
   31f65:	c9                   	leave  
   31f66:	c3                   	ret    

0000000000031f67 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Range_chk::_S_chk(float, std::integral_constant<bool, false>)>:
   31f67:	55                   	push   rbp
   31f68:	48 89 e5             	mov    rbp,rsp
   31f6b:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   31f70:	b8 00 00 00 00       	mov    eax,0x0
   31f75:	5d                   	pop    rbp
   31f76:	c3                   	ret    

0000000000031f77 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)>:
   31f77:	55                   	push   rbp
   31f78:	48 89 e5             	mov    rbp,rsp
   31f7b:	53                   	push   rbx
   31f7c:	48 83 ec 58          	sub    rsp,0x58
   31f80:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   31f84:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   31f88:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   31f8c:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   31f90:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   31f99:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   31f9d:	31 c0                	xor    eax,eax
   31f9f:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   31fa3:	48 89 c7             	mov    rdi,rax
   31fa6:	e8 6d ff ff ff       	call   31f18 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::_Save_errno()>
   31fab:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
   31faf:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   31fb3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   31fb7:	48 89 d6             	mov    rsi,rdx
   31fba:	48 89 c7             	mov    rdi,rax
   31fbd:	ff d1                	call   rcx
   31fbf:	66 0f 7e c0          	movd   eax,xmm0
   31fc3:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   31fc6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31fca:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
   31fce:	75 0c                	jne    31fdc <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x65>
   31fd0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   31fd4:	48 89 c7             	mov    rdi,rax
   31fd7:	e8 74 22 fd ff       	call   4250 <std::__throw_invalid_argument(char const*)@plt>
   31fdc:	e8 7f 20 fd ff       	call   4060 <__errno_location@plt>
   31fe1:	8b 00                	mov    eax,DWORD PTR [rax]
   31fe3:	83 f8 22             	cmp    eax,0x22
   31fe6:	74 10                	je     31ff8 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x81>
   31fe8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   31feb:	66 0f 6e c0          	movd   xmm0,eax
   31fef:	e8 73 ff ff ff       	call   31f67 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Range_chk::_S_chk(float, std::integral_constant<bool, false>)>
   31ff4:	84 c0                	test   al,al
   31ff6:	74 07                	je     31fff <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x88>
   31ff8:	b8 01 00 00 00       	mov    eax,0x1
   31ffd:	eb 05                	jmp    32004 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x8d>
   31fff:	b8 00 00 00 00       	mov    eax,0x0
   32004:	84 c0                	test   al,al
   32006:	74 0c                	je     32014 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x9d>
   32008:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3200c:	48 89 c7             	mov    rdi,rax
   3200f:	e8 fc 25 fd ff       	call   4610 <std::__throw_out_of_range(char const*)@plt>
   32014:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   32019:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   3201e:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   32023:	74 12                	je     32037 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0xc0>
   32025:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   32029:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
   3202d:	48 89 c2             	mov    rdx,rax
   32030:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   32034:	48 89 10             	mov    QWORD PTR [rax],rdx
   32037:	f3 0f 10 4d dc       	movss  xmm1,DWORD PTR [rbp-0x24]
   3203c:	f3 0f 11 4d ac       	movss  DWORD PTR [rbp-0x54],xmm1
   32041:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   32045:	48 89 c7             	mov    rdi,rax
   32048:	e8 f3 fe ff ff       	call   31f40 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()>
   3204d:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   32052:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32056:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3205f:	74 21                	je     32082 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x10b>
   32061:	eb 1a                	jmp    3207d <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x106>
   32063:	48 89 c3             	mov    rbx,rax
   32066:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   3206a:	48 89 c7             	mov    rdi,rax
   3206d:	e8 ce fe ff ff       	call   31f40 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()>
   32072:	48 89 d8             	mov    rax,rbx
   32075:	48 89 c7             	mov    rdi,rax
   32078:	e8 b3 26 fd ff       	call   4730 <_Unwind_Resume@plt>
   3207d:	e8 2e 24 fd ff       	call   44b0 <__stack_chk_fail@plt>
   32082:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   32086:	c9                   	leave  
   32087:	c3                   	ret    

0000000000032088 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)>:
   32088:	55                   	push   rbp
   32089:	48 89 e5             	mov    rbp,rsp
   3208c:	53                   	push   rbx
   3208d:	48 83 ec 28          	sub    rsp,0x28
   32091:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32095:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   32099:	89 d0                	mov    eax,edx
   3209b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   3209f:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
   320a2:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   320a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   320aa:	48 89 c7             	mov    rdi,rax
   320ad:	e8 7e 22 fd ff       	call   4330 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
   320b2:	48 89 c1             	mov    rcx,rax
   320b5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   320b9:	48 89 c2             	mov    rdx,rax
   320bc:	48 89 ce             	mov    rsi,rcx
   320bf:	48 89 df             	mov    rdi,rbx
   320c2:	e8 89 23 fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>
   320c7:	0f be 55 dc          	movsx  edx,BYTE PTR [rbp-0x24]
   320cb:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   320cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   320d3:	48 89 ce             	mov    rsi,rcx
   320d6:	48 89 c7             	mov    rdi,rax
   320d9:	e8 02 24 fd ff       	call   44e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   320de:	eb 1a                	jmp    320fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)+0x72>
   320e0:	48 89 c3             	mov    rbx,rax
   320e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   320e7:	48 89 c7             	mov    rdi,rax
   320ea:	e8 21 33 ff ff       	call   25410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
   320ef:	48 89 d8             	mov    rax,rbx
   320f2:	48 89 c7             	mov    rdi,rax
   320f5:	e8 36 26 fd ff       	call   4730 <_Unwind_Resume@plt>
   320fa:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   320fe:	c9                   	leave  
   320ff:	c3                   	ret    

0000000000032100 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
   32100:	55                   	push   rbp
   32101:	48 89 e5             	mov    rbp,rsp
   32104:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32108:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   3210b:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   3210e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   32111:	83 e8 01             	sub    eax,0x1
   32114:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   32117:	83 7d e0 63          	cmp    DWORD PTR [rbp-0x20],0x63
   3211b:	76 79                	jbe    32196 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x96>
   3211d:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   32120:	89 d0                	mov    eax,edx
   32122:	48 69 c0 1f 85 eb 51 	imul   rax,rax,0x51eb851f
   32129:	48 c1 e8 20          	shr    rax,0x20
   3212d:	c1 e8 05             	shr    eax,0x5
   32130:	6b c8 64             	imul   ecx,eax,0x64
   32133:	89 d0                	mov    eax,edx
   32135:	29 c8                	sub    eax,ecx
   32137:	01 c0                	add    eax,eax
   32139:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   3213c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   3213f:	89 c0                	mov    eax,eax
   32141:	48 69 c0 1f 85 eb 51 	imul   rax,rax,0x51eb851f
   32148:	48 c1 e8 20          	shr    rax,0x20
   3214c:	c1 e8 05             	shr    eax,0x5
   3214f:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   32152:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   32155:	8d 48 01             	lea    ecx,[rax+0x1]
   32158:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   3215b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3215f:	48 01 c2             	add    rdx,rax
   32162:	89 c9                	mov    ecx,ecx
   32164:	48 8d 05 75 ad 00 00 	lea    rax,[rip+0xad75]        # 3cee0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   3216b:	0f b6 04 01          	movzx  eax,BYTE PTR [rcx+rax*1]
   3216f:	88 02                	mov    BYTE PTR [rdx],al
   32171:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   32174:	83 e8 01             	sub    eax,0x1
   32177:	89 c2                	mov    edx,eax
   32179:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3217d:	48 01 c2             	add    rdx,rax
   32180:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   32183:	48 8d 0d 56 ad 00 00 	lea    rcx,[rip+0xad56]        # 3cee0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   3218a:	0f b6 04 08          	movzx  eax,BYTE PTR [rax+rcx*1]
   3218e:	88 02                	mov    BYTE PTR [rdx],al
   32190:	83 6d f4 02          	sub    DWORD PTR [rbp-0xc],0x2
   32194:	eb 81                	jmp    32117 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x17>
   32196:	83 7d e0 09          	cmp    DWORD PTR [rbp-0x20],0x9
   3219a:	76 3b                	jbe    321d7 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xd7>
   3219c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   3219f:	01 c0                	add    eax,eax
   321a1:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   321a4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   321a7:	8d 48 01             	lea    ecx,[rax+0x1]
   321aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   321ae:	48 8d 50 01          	lea    rdx,[rax+0x1]
   321b2:	89 c9                	mov    ecx,ecx
   321b4:	48 8d 05 25 ad 00 00 	lea    rax,[rip+0xad25]        # 3cee0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   321bb:	0f b6 04 01          	movzx  eax,BYTE PTR [rcx+rax*1]
   321bf:	88 02                	mov    BYTE PTR [rdx],al
   321c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   321c4:	48 8d 15 15 ad 00 00 	lea    rdx,[rip+0xad15]        # 3cee0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   321cb:	0f b6 14 10          	movzx  edx,BYTE PTR [rax+rdx*1]
   321cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   321d3:	88 10                	mov    BYTE PTR [rax],dl
   321d5:	eb 0e                	jmp    321e5 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xe5>
   321d7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   321da:	83 c0 30             	add    eax,0x30
   321dd:	89 c2                	mov    edx,eax
   321df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   321e3:	88 10                	mov    BYTE PTR [rax],dl
   321e5:	90                   	nop
   321e6:	5d                   	pop    rbp
   321e7:	c3                   	ret    

00000000000321e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
   321e8:	55                   	push   rbp
   321e9:	48 89 e5             	mov    rbp,rsp
   321ec:	53                   	push   rbx
   321ed:	48 83 ec 28          	sub    rsp,0x28
   321f1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   321f5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   321f9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   321fd:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   32201:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32205:	48 89 d6             	mov    rsi,rdx
   32208:	48 89 c7             	mov    rdi,rax
   3220b:	e8 60 1f fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   32210:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   32214:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32218:	48 89 d6             	mov    rsi,rdx
   3221b:	48 89 c7             	mov    rdi,rax
   3221e:	e8 8d 25 fd ff       	call   47b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   32223:	eb 1a                	jmp    3223f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)+0x57>
   32225:	48 89 c3             	mov    rbx,rax
   32228:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3222c:	48 89 c7             	mov    rdi,rax
   3222f:	e8 2c 20 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   32234:	48 89 d8             	mov    rax,rbx
   32237:	48 89 c7             	mov    rdi,rax
   3223a:	e8 f1 24 fd ff       	call   4730 <_Unwind_Resume@plt>
   3223f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32243:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   32247:	c9                   	leave  
   32248:	c3                   	ret    

0000000000032249 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   32249:	55                   	push   rbp
   3224a:	48 89 e5             	mov    rbp,rsp
   3224d:	53                   	push   rbx
   3224e:	48 83 ec 38          	sub    rsp,0x38
   32252:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   32256:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   3225a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   3225e:	c6 45 e7 00          	mov    BYTE PTR [rbp-0x19],0x0
   32262:	c6 45 e7 01          	mov    BYTE PTR [rbp-0x19],0x1
   32266:	80 7d e7 00          	cmp    BYTE PTR [rbp-0x19],0x0
   3226a:	0f 84 87 00 00 00    	je     322f7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
   32270:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32274:	48 89 c7             	mov    rdi,rax
   32277:	e8 34 20 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3227c:	48 89 c3             	mov    rbx,rax
   3227f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32283:	48 89 c7             	mov    rdi,rax
   32286:	e8 25 20 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3228b:	48 01 d8             	add    rax,rbx
   3228e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   32292:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32296:	48 89 c7             	mov    rdi,rax
   32299:	e8 a2 1d fd ff       	call   4040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@plt>
   3229e:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
   322a2:	76 19                	jbe    322bd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
   322a4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   322a8:	48 89 c7             	mov    rdi,rax
   322ab:	e8 90 1d fd ff       	call   4040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@plt>
   322b0:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
   322b4:	77 07                	ja     322bd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
   322b6:	b8 01 00 00 00       	mov    eax,0x1
   322bb:	eb 05                	jmp    322c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x79>
   322bd:	b8 00 00 00 00       	mov    eax,0x0
   322c2:	84 c0                	test   al,al
   322c4:	74 31                	je     322f7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
   322c6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   322ca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   322ce:	be 00 00 00 00       	mov    esi,0x0
   322d3:	48 89 c7             	mov    rdi,rax
   322d6:	e8 c5 23 fd ff       	call   46a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   322db:	48 89 c7             	mov    rdi,rax
   322de:	e8 ad 31 ff ff       	call   25490 <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   322e3:	48 89 c2             	mov    rdx,rax
   322e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   322ea:	48 89 d6             	mov    rsi,rdx
   322ed:	48 89 c7             	mov    rdi,rax
   322f0:	e8 4b 1f fd ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   322f5:	eb 2d                	jmp    32324 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xdb>
   322f7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   322fb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   322ff:	48 89 d6             	mov    rsi,rdx
   32302:	48 89 c7             	mov    rdi,rax
   32305:	e8 b6 24 fd ff       	call   47c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3230a:	48 89 c7             	mov    rdi,rax
   3230d:	e8 7e 31 ff ff       	call   25490 <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   32312:	48 89 c2             	mov    rdx,rax
   32315:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32319:	48 89 d6             	mov    rsi,rdx
   3231c:	48 89 c7             	mov    rdi,rax
   3231f:	e8 1c 1f fd ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   32324:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32328:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3232c:	c9                   	leave  
   3232d:	c3                   	ret    

000000000003232e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl()>:
   3232e:	55                   	push   rbp
   3232f:	48 89 e5             	mov    rbp,rsp
   32332:	48 83 ec 10          	sub    rsp,0x10
   32336:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3233a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3233e:	48 89 c7             	mov    rdi,rax
   32341:	e8 9a 14 00 00       	call   337e0 <std::allocator<objl::Vertex>::allocator()>
   32346:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3234a:	48 89 c7             	mov    rdi,rax
   3234d:	e8 aa 14 00 00       	call   337fc <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>
   32352:	90                   	nop
   32353:	c9                   	leave  
   32354:	c3                   	ret    
   32355:	90                   	nop

0000000000032356 <std::allocator<objl::Vertex>::~allocator()>:
   32356:	55                   	push   rbp
   32357:	48 89 e5             	mov    rbp,rsp
   3235a:	48 83 ec 10          	sub    rsp,0x10
   3235e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32362:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32366:	48 89 c7             	mov    rdi,rax
   32369:	e8 bc 14 00 00       	call   3382a <__gnu_cxx::new_allocator<objl::Vertex>::~new_allocator()>
   3236e:	90                   	nop
   3236f:	c9                   	leave  
   32370:	c3                   	ret    
   32371:	90                   	nop

0000000000032372 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::~_Vector_base()>:
   32372:	55                   	push   rbp
   32373:	48 89 e5             	mov    rbp,rsp
   32376:	48 83 ec 10          	sub    rsp,0x10
   3237a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3237e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32382:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32386:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3238a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   3238d:	48 89 d0             	mov    rax,rdx
   32390:	48 29 c8             	sub    rax,rcx
   32393:	48 c1 f8 05          	sar    rax,0x5
   32397:	48 89 c2             	mov    rdx,rax
   3239a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3239e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   323a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323a5:	48 89 ce             	mov    rsi,rcx
   323a8:	48 89 c7             	mov    rdi,rax
   323ab:	e8 86 14 00 00       	call   33836 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   323b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323b4:	48 89 c7             	mov    rdi,rax
   323b7:	e8 62 ee ff ff       	call   3121e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::~_Vector_impl()>
   323bc:	90                   	nop
   323bd:	c9                   	leave  
   323be:	c3                   	ret    
   323bf:	90                   	nop

00000000000323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>:
   323c0:	55                   	push   rbp
   323c1:	48 89 e5             	mov    rbp,rsp
   323c4:	48 83 ec 10          	sub    rsp,0x10
   323c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   323cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323d0:	48 89 c7             	mov    rdi,rax
   323d3:	e8 94 14 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   323d8:	48 89 c2             	mov    rdx,rax
   323db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323df:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   323e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   323ea:	48 89 ce             	mov    rsi,rcx
   323ed:	48 89 c7             	mov    rdi,rax
   323f0:	e8 85 14 00 00       	call   3387a <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   323f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323f9:	48 89 c7             	mov    rdi,rax
   323fc:	e8 71 ff ff ff       	call   32372 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::~_Vector_base()>
   32401:	90                   	nop
   32402:	c9                   	leave  
   32403:	c3                   	ret    

0000000000032404 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_propagate_on_copy_assign()>:
   32404:	55                   	push   rbp
   32405:	48 89 e5             	mov    rbp,rsp
   32408:	b8 00 00 00 00       	mov    eax,0x0
   3240d:	5d                   	pop    rbp
   3240e:	c3                   	ret    
   3240f:	90                   	nop

0000000000032410 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>:
   32410:	55                   	push   rbp
   32411:	48 89 e5             	mov    rbp,rsp
   32414:	41 56                	push   r14
   32416:	41 55                	push   r13
   32418:	41 54                	push   r12
   3241a:	53                   	push   rbx
   3241b:	48 83 ec 20          	sub    rsp,0x20
   3241f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   32423:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   32427:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3242b:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
   3242f:	0f 84 e0 02 00 00    	je     32715 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x305>
   32435:	e8 ca ff ff ff       	call   32404 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_propagate_on_copy_assign()>
   3243a:	84 c0                	test   al,al
   3243c:	0f 84 d0 00 00 00    	je     32512 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x102>
   32442:	e8 ae f5 ff ff       	call   319f5 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_always_equal()>
   32447:	83 f0 01             	xor    eax,0x1
   3244a:	84 c0                	test   al,al
   3244c:	74 31                	je     3247f <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x6f>
   3244e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32452:	48 89 c7             	mov    rdi,rax
   32455:	e8 4a 14 00 00       	call   338a4 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   3245a:	48 89 c3             	mov    rbx,rax
   3245d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32461:	48 89 c7             	mov    rdi,rax
   32464:	e8 03 14 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   32469:	48 89 de             	mov    rsi,rbx
   3246c:	48 89 c7             	mov    rdi,rax
   3246f:	e8 3e 14 00 00       	call   338b2 <std::operator!=(std::allocator<objl::Vertex> const&, std::allocator<objl::Vertex> const&)>
   32474:	84 c0                	test   al,al
   32476:	74 07                	je     3247f <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x6f>
   32478:	b8 01 00 00 00       	mov    eax,0x1
   3247d:	eb 05                	jmp    32484 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x74>
   3247f:	b8 00 00 00 00       	mov    eax,0x0
   32484:	84 c0                	test   al,al
   32486:	74 64                	je     324ec <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xdc>
   32488:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3248c:	48 89 c7             	mov    rdi,rax
   3248f:	e8 26 08 00 00       	call   32cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   32494:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32498:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   3249c:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   324a0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   324a4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   324a7:	48 29 f1             	sub    rcx,rsi
   324aa:	48 89 ca             	mov    rdx,rcx
   324ad:	48 c1 fa 05          	sar    rdx,0x5
   324b1:	48 89 d6             	mov    rsi,rdx
   324b4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   324b8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   324bb:	48 89 f2             	mov    rdx,rsi
   324be:	48 89 ce             	mov    rsi,rcx
   324c1:	48 89 c7             	mov    rdi,rax
   324c4:	e8 6d 13 00 00       	call   33836 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   324c9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   324cd:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   324d4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   324d8:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   324e0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   324e4:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   324ec:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   324f0:	48 89 c7             	mov    rdi,rax
   324f3:	e8 ac 13 00 00       	call   338a4 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   324f8:	48 89 c3             	mov    rbx,rax
   324fb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   324ff:	48 89 c7             	mov    rdi,rax
   32502:	e8 65 13 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   32507:	48 89 de             	mov    rsi,rbx
   3250a:	48 89 c7             	mov    rdi,rax
   3250d:	e8 b3 13 00 00       	call   338c5 <void std::__alloc_on_copy<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex> const&)>
   32512:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32516:	48 89 c7             	mov    rdi,rax
   32519:	e8 3c 3c ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   3251e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   32522:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32526:	48 89 c7             	mov    rdi,rax
   32529:	e8 a6 13 00 00       	call   338d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::capacity() const>
   3252e:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   32532:	0f 97 c0             	seta   al
   32535:	84 c0                	test   al,al
   32537:	0f 84 bd 00 00 00    	je     325fa <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x1ea>
   3253d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32541:	48 89 c7             	mov    rdi,rax
   32544:	e8 f7 13 00 00       	call   33940 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   32549:	48 89 c3             	mov    rbx,rax
   3254c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32550:	48 89 c7             	mov    rdi,rax
   32553:	e8 a0 13 00 00       	call   338f8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   32558:	48 89 c2             	mov    rdx,rax
   3255b:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   3255f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32563:	48 89 d9             	mov    rcx,rbx
   32566:	48 89 c7             	mov    rdi,rax
   32569:	e8 1e 14 00 00       	call   3398c <objl::Vertex* std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(unsigned long, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   3256e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   32572:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32576:	48 89 c7             	mov    rdi,rax
   32579:	e8 ee 12 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   3257e:	48 89 c2             	mov    rdx,rax
   32581:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32585:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32589:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3258d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32590:	48 89 ce             	mov    rsi,rcx
   32593:	48 89 c7             	mov    rdi,rax
   32596:	e8 df 12 00 00       	call   3387a <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   3259b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3259f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   325a3:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   325a7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   325ab:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   325ae:	48 29 f1             	sub    rcx,rsi
   325b1:	48 89 ca             	mov    rdx,rcx
   325b4:	48 c1 fa 05          	sar    rdx,0x5
   325b8:	48 89 d6             	mov    rsi,rdx
   325bb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   325bf:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   325c2:	48 89 f2             	mov    rdx,rsi
   325c5:	48 89 ce             	mov    rsi,rcx
   325c8:	48 89 c7             	mov    rdi,rax
   325cb:	e8 66 12 00 00       	call   33836 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   325d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325d4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   325d8:	48 89 10             	mov    QWORD PTR [rax],rdx
   325db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325df:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   325e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   325e6:	48 c1 e0 05          	shl    rax,0x5
   325ea:	48 01 c2             	add    rdx,rax
   325ed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325f1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   325f5:	e9 01 01 00 00       	jmp    326fb <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x2eb>
   325fa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325fe:	48 89 c7             	mov    rdi,rax
   32601:	e8 54 3b ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   32606:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   3260a:	0f 96 c0             	setbe  al
   3260d:	84 c0                	test   al,al
   3260f:	74 69                	je     3267a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x26a>
   32611:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32615:	48 89 c7             	mov    rdi,rax
   32618:	e8 4f 12 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   3261d:	49 89 c4             	mov    r12,rax
   32620:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32624:	48 89 c7             	mov    rdi,rax
   32627:	e8 42 14 00 00       	call   33a6e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   3262c:	48 89 c3             	mov    rbx,rax
   3262f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32633:	48 89 c7             	mov    rdi,rax
   32636:	e8 5d 0f 00 00       	call   33598 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   3263b:	49 89 c6             	mov    r14,rax
   3263e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32642:	48 89 c7             	mov    rdi,rax
   32645:	e8 f6 12 00 00       	call   33940 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   3264a:	49 89 c5             	mov    r13,rax
   3264d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32651:	48 89 c7             	mov    rdi,rax
   32654:	e8 9f 12 00 00       	call   338f8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   32659:	4c 89 f2             	mov    rdx,r14
   3265c:	4c 89 ee             	mov    rsi,r13
   3265f:	48 89 c7             	mov    rdi,rax
   32662:	e8 bb 13 00 00       	call   33a22 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   32667:	4c 89 e2             	mov    rdx,r12
   3266a:	48 89 de             	mov    rsi,rbx
   3266d:	48 89 c7             	mov    rdi,rax
   32670:	e8 45 14 00 00       	call   33aba <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, std::allocator<objl::Vertex>&)>
   32675:	e9 81 00 00 00       	jmp    326fb <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x2eb>
   3267a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3267e:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   32681:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32685:	4c 8b 20             	mov    r12,QWORD PTR [rax]
   32688:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3268c:	48 89 c7             	mov    rdi,rax
   3268f:	e8 c6 3a ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   32694:	48 c1 e0 05          	shl    rax,0x5
   32698:	49 8d 0c 04          	lea    rcx,[r12+rax*1]
   3269c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   326a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   326a3:	48 89 da             	mov    rdx,rbx
   326a6:	48 89 ce             	mov    rsi,rcx
   326a9:	48 89 c7             	mov    rdi,rax
   326ac:	e8 33 14 00 00       	call   33ae4 <objl::Vertex* std::copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   326b1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326b5:	48 89 c7             	mov    rdi,rax
   326b8:	e8 af 11 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   326bd:	49 89 c5             	mov    r13,rax
   326c0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326c4:	4c 8b 60 08          	mov    r12,QWORD PTR [rax+0x8]
   326c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   326cc:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
   326d0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   326d4:	4c 8b 30             	mov    r14,QWORD PTR [rax]
   326d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326db:	48 89 c7             	mov    rdi,rax
   326de:	e8 77 3a ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   326e3:	48 c1 e0 05          	shl    rax,0x5
   326e7:	4c 01 f0             	add    rax,r14
   326ea:	4c 89 e9             	mov    rcx,r13
   326ed:	4c 89 e2             	mov    rdx,r12
   326f0:	48 89 de             	mov    rsi,rbx
   326f3:	48 89 c7             	mov    rdi,rax
   326f6:	e8 34 14 00 00       	call   33b2f <objl::Vertex* std::__uninitialized_copy_a<objl::Vertex*, objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   326fb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326ff:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32702:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32706:	48 c1 e0 05          	shl    rax,0x5
   3270a:	48 01 c2             	add    rdx,rax
   3270d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32711:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   32715:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32719:	48 83 c4 20          	add    rsp,0x20
   3271d:	5b                   	pop    rbx
   3271e:	41 5c                	pop    r12
   32720:	41 5d                	pop    r13
   32722:	41 5e                	pop    r14
   32724:	5d                   	pop    rbp
   32725:	c3                   	ret    

0000000000032726 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_propagate_on_copy_assign()>:
   32726:	55                   	push   rbp
   32727:	48 89 e5             	mov    rbp,rsp
   3272a:	b8 00 00 00 00       	mov    eax,0x0
   3272f:	5d                   	pop    rbp
   32730:	c3                   	ret    
   32731:	90                   	nop

0000000000032732 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)>:
   32732:	55                   	push   rbp
   32733:	48 89 e5             	mov    rbp,rsp
   32736:	41 56                	push   r14
   32738:	41 55                	push   r13
   3273a:	41 54                	push   r12
   3273c:	53                   	push   rbx
   3273d:	48 83 ec 20          	sub    rsp,0x20
   32741:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   32745:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   32749:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3274d:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
   32751:	0f 84 e0 02 00 00    	je     32a37 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x305>
   32757:	e8 ca ff ff ff       	call   32726 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_propagate_on_copy_assign()>
   3275c:	84 c0                	test   al,al
   3275e:	0f 84 d0 00 00 00    	je     32834 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x102>
   32764:	e8 97 f2 ff ff       	call   31a00 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_always_equal()>
   32769:	83 f0 01             	xor    eax,0x1
   3276c:	84 c0                	test   al,al
   3276e:	74 31                	je     327a1 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x6f>
   32770:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32774:	48 89 c7             	mov    rdi,rax
   32777:	e8 b8 8c ff ff       	call   2b434 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   3277c:	48 89 c3             	mov    rbx,rax
   3277f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32783:	48 89 c7             	mov    rdi,rax
   32786:	e8 81 60 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   3278b:	48 89 de             	mov    rsi,rbx
   3278e:	48 89 c7             	mov    rdi,rax
   32791:	e8 ca 13 00 00       	call   33b60 <std::operator!=(std::allocator<unsigned int> const&, std::allocator<unsigned int> const&)>
   32796:	84 c0                	test   al,al
   32798:	74 07                	je     327a1 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x6f>
   3279a:	b8 01 00 00 00       	mov    eax,0x1
   3279f:	eb 05                	jmp    327a6 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x74>
   327a1:	b8 00 00 00 00       	mov    eax,0x0
   327a6:	84 c0                	test   al,al
   327a8:	74 64                	je     3280e <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0xdc>
   327aa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327ae:	48 89 c7             	mov    rdi,rax
   327b1:	e8 2a 05 00 00       	call   32ce0 <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   327b6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327ba:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   327be:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   327c2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   327c6:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   327c9:	48 29 f1             	sub    rcx,rsi
   327cc:	48 89 ca             	mov    rdx,rcx
   327cf:	48 c1 fa 02          	sar    rdx,0x2
   327d3:	48 89 d6             	mov    rsi,rdx
   327d6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   327da:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   327dd:	48 89 f2             	mov    rdx,rsi
   327e0:	48 89 ce             	mov    rsi,rcx
   327e3:	48 89 c7             	mov    rdi,rax
   327e6:	e8 eb 5f ff ff       	call   287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   327eb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327ef:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   327f6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327fa:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   32802:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32806:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   3280e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32812:	48 89 c7             	mov    rdi,rax
   32815:	e8 1a 8c ff ff       	call   2b434 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   3281a:	48 89 c3             	mov    rbx,rax
   3281d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32821:	48 89 c7             	mov    rdi,rax
   32824:	e8 e3 5f ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   32829:	48 89 de             	mov    rsi,rbx
   3282c:	48 89 c7             	mov    rdi,rax
   3282f:	e8 3f 13 00 00       	call   33b73 <void std::__alloc_on_copy<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int> const&)>
   32834:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32838:	48 89 c7             	mov    rdi,rax
   3283b:	e8 62 39 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   32840:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   32844:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32848:	48 89 c7             	mov    rdi,rax
   3284b:	e8 32 13 00 00       	call   33b82 <std::vector<unsigned int, std::allocator<unsigned int> >::capacity() const>
   32850:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   32854:	0f 97 c0             	seta   al
   32857:	84 c0                	test   al,al
   32859:	0f 84 bd 00 00 00    	je     3291c <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x1ea>
   3285f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32863:	48 89 c7             	mov    rdi,rax
   32866:	e8 83 13 00 00       	call   33bee <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   3286b:	48 89 c3             	mov    rbx,rax
   3286e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32872:	48 89 c7             	mov    rdi,rax
   32875:	e8 2c 13 00 00       	call   33ba6 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   3287a:	48 89 c2             	mov    rdx,rax
   3287d:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   32881:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32885:	48 89 d9             	mov    rcx,rbx
   32888:	48 89 c7             	mov    rdi,rax
   3288b:	e8 aa 13 00 00       	call   33c3a <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(unsigned long, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   32890:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   32894:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32898:	48 89 c7             	mov    rdi,rax
   3289b:	e8 6c 5f ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   328a0:	48 89 c2             	mov    rdx,rax
   328a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328a7:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   328ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328af:	48 8b 00             	mov    rax,QWORD PTR [rax]
   328b2:	48 89 ce             	mov    rsi,rcx
   328b5:	48 89 c7             	mov    rdi,rax
   328b8:	e8 5d 5f ff ff       	call   2881a <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   328bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328c1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   328c5:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   328c9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   328cd:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   328d0:	48 29 f1             	sub    rcx,rsi
   328d3:	48 89 ca             	mov    rdx,rcx
   328d6:	48 c1 fa 02          	sar    rdx,0x2
   328da:	48 89 d6             	mov    rsi,rdx
   328dd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   328e1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   328e4:	48 89 f2             	mov    rdx,rsi
   328e7:	48 89 ce             	mov    rsi,rcx
   328ea:	48 89 c7             	mov    rdi,rax
   328ed:	e8 e4 5e ff ff       	call   287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   328f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328f6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   328fa:	48 89 10             	mov    QWORD PTR [rax],rdx
   328fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32901:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32904:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32908:	48 c1 e0 02          	shl    rax,0x2
   3290c:	48 01 c2             	add    rdx,rax
   3290f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32913:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   32917:	e9 01 01 00 00       	jmp    32a1d <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x2eb>
   3291c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32920:	48 89 c7             	mov    rdi,rax
   32923:	e8 7a 38 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   32928:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   3292c:	0f 96 c0             	setbe  al
   3292f:	84 c0                	test   al,al
   32931:	74 69                	je     3299c <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x26a>
   32933:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32937:	48 89 c7             	mov    rdi,rax
   3293a:	e8 cd 5e ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   3293f:	49 89 c4             	mov    r12,rax
   32942:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32946:	48 89 c7             	mov    rdi,rax
   32949:	e8 78 55 ff ff       	call   27ec6 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   3294e:	48 89 c3             	mov    rbx,rax
   32951:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32955:	48 89 c7             	mov    rdi,rax
   32958:	e8 07 70 ff ff       	call   29964 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>
   3295d:	49 89 c6             	mov    r14,rax
   32960:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32964:	48 89 c7             	mov    rdi,rax
   32967:	e8 82 12 00 00       	call   33bee <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   3296c:	49 89 c5             	mov    r13,rax
   3296f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32973:	48 89 c7             	mov    rdi,rax
   32976:	e8 2b 12 00 00       	call   33ba6 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   3297b:	4c 89 f2             	mov    rdx,r14
   3297e:	4c 89 ee             	mov    rsi,r13
   32981:	48 89 c7             	mov    rdi,rax
   32984:	e8 47 13 00 00       	call   33cd0 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   32989:	4c 89 e2             	mov    rdx,r12
   3298c:	48 89 de             	mov    rsi,rbx
   3298f:	48 89 c7             	mov    rdi,rax
   32992:	e8 84 13 00 00       	call   33d1b <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<unsigned int>&)>
   32997:	e9 81 00 00 00       	jmp    32a1d <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x2eb>
   3299c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329a0:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   329a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   329a7:	4c 8b 20             	mov    r12,QWORD PTR [rax]
   329aa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329ae:	48 89 c7             	mov    rdi,rax
   329b1:	e8 ec 37 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   329b6:	48 c1 e0 02          	shl    rax,0x2
   329ba:	49 8d 0c 04          	lea    rcx,[r12+rax*1]
   329be:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   329c2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   329c5:	48 89 da             	mov    rdx,rbx
   329c8:	48 89 ce             	mov    rsi,rcx
   329cb:	48 89 c7             	mov    rdi,rax
   329ce:	e8 72 13 00 00       	call   33d45 <unsigned int* std::copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   329d3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329d7:	48 89 c7             	mov    rdi,rax
   329da:	e8 2d 5e ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   329df:	49 89 c5             	mov    r13,rax
   329e2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329e6:	4c 8b 60 08          	mov    r12,QWORD PTR [rax+0x8]
   329ea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   329ee:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
   329f2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   329f6:	4c 8b 30             	mov    r14,QWORD PTR [rax]
   329f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329fd:	48 89 c7             	mov    rdi,rax
   32a00:	e8 9d 37 ff ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   32a05:	48 c1 e0 02          	shl    rax,0x2
   32a09:	4c 01 f0             	add    rax,r14
   32a0c:	4c 89 e9             	mov    rcx,r13
   32a0f:	4c 89 e2             	mov    rdx,r12
   32a12:	48 89 de             	mov    rsi,rbx
   32a15:	48 89 c7             	mov    rdi,rax
   32a18:	e8 73 13 00 00       	call   33d90 <unsigned int* std::__uninitialized_copy_a<unsigned int*, unsigned int*, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   32a1d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a21:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32a24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32a28:	48 c1 e0 02          	shl    rax,0x2
   32a2c:	48 01 c2             	add    rdx,rax
   32a2f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a33:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   32a37:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a3b:	48 83 c4 20          	add    rsp,0x20
   32a3f:	5b                   	pop    rbx
   32a40:	41 5c                	pop    r12
   32a42:	41 5d                	pop    r13
   32a44:	41 5e                	pop    r14
   32a46:	5d                   	pop    rbp
   32a47:	c3                   	ret    

0000000000032a48 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::clear()>:
   32a48:	55                   	push   rbp
   32a49:	48 89 e5             	mov    rbp,rsp
   32a4c:	48 83 ec 10          	sub    rsp,0x10
   32a50:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32a54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32a58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32a5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32a5f:	48 89 d6             	mov    rsi,rdx
   32a62:	48 89 c7             	mov    rdi,rax
   32a65:	e8 58 13 00 00       	call   33dc2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   32a6a:	90                   	nop
   32a6b:	c9                   	leave  
   32a6c:	c3                   	ret    
   32a6d:	90                   	nop

0000000000032a6e <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   32a6e:	55                   	push   rbp
   32a6f:	48 89 e5             	mov    rbp,rsp
   32a72:	48 83 ec 10          	sub    rsp,0x10
   32a76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32a7a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   32a7e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32a82:	48 89 c7             	mov    rdi,rax
   32a85:	e8 06 2a ff ff       	call   25490 <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   32a8a:	48 89 c2             	mov    rdx,rax
   32a8d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32a91:	48 89 d6             	mov    rsi,rdx
   32a94:	48 89 c7             	mov    rdi,rax
   32a97:	e8 86 13 00 00       	call   33e22 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   32a9c:	90                   	nop
   32a9d:	c9                   	leave  
   32a9e:	c3                   	ret    
   32a9f:	90                   	nop

0000000000032aa0 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::_Vector_impl()>:
   32aa0:	55                   	push   rbp
   32aa1:	48 89 e5             	mov    rbp,rsp
   32aa4:	48 83 ec 10          	sub    rsp,0x10
   32aa8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32aac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ab0:	48 89 c7             	mov    rdi,rax
   32ab3:	e8 0e 14 00 00       	call   33ec6 <std::allocator<objl::Mesh>::allocator()>
   32ab8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32abc:	48 89 c7             	mov    rdi,rax
   32abf:	e8 1e 14 00 00       	call   33ee2 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl_data::_Vector_impl_data()>
   32ac4:	90                   	nop
   32ac5:	c9                   	leave  
   32ac6:	c3                   	ret    
   32ac7:	90                   	nop

0000000000032ac8 <std::allocator<objl::Mesh>::~allocator()>:
   32ac8:	55                   	push   rbp
   32ac9:	48 89 e5             	mov    rbp,rsp
   32acc:	48 83 ec 10          	sub    rsp,0x10
   32ad0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32ad4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ad8:	48 89 c7             	mov    rdi,rax
   32adb:	e8 30 14 00 00       	call   33f10 <__gnu_cxx::new_allocator<objl::Mesh>::~new_allocator()>
   32ae0:	90                   	nop
   32ae1:	c9                   	leave  
   32ae2:	c3                   	ret    
   32ae3:	90                   	nop

0000000000032ae4 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::~_Vector_base()>:
   32ae4:	55                   	push   rbp
   32ae5:	48 89 e5             	mov    rbp,rsp
   32ae8:	48 83 ec 10          	sub    rsp,0x10
   32aec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32af0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32af4:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32af8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32afc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32aff:	48 89 d0             	mov    rax,rdx
   32b02:	48 29 c8             	sub    rax,rcx
   32b05:	48 c1 f8 03          	sar    rax,0x3
   32b09:	48 89 c2             	mov    rdx,rax
   32b0c:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   32b16:	48 0f af c2          	imul   rax,rdx
   32b1a:	48 89 c2             	mov    rdx,rax
   32b1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b21:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32b24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b28:	48 89 ce             	mov    rsi,rcx
   32b2b:	48 89 c7             	mov    rdi,rax
   32b2e:	e8 e9 13 00 00       	call   33f1c <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>
   32b33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b37:	48 89 c7             	mov    rdi,rax
   32b3a:	e8 1b ed ff ff       	call   3185a <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::~_Vector_impl()>
   32b3f:	90                   	nop
   32b40:	c9                   	leave  
   32b41:	c3                   	ret    

0000000000032b42 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::~vector()>:
   32b42:	55                   	push   rbp
   32b43:	48 89 e5             	mov    rbp,rsp
   32b46:	48 83 ec 10          	sub    rsp,0x10
   32b4a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32b4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b52:	48 89 c7             	mov    rdi,rax
   32b55:	e8 f8 13 00 00       	call   33f52 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   32b5a:	48 89 c2             	mov    rdx,rax
   32b5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b61:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32b65:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b69:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32b6c:	48 89 ce             	mov    rsi,rcx
   32b6f:	48 89 c7             	mov    rdi,rax
   32b72:	e8 e9 13 00 00       	call   33f60 <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   32b77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b7b:	48 89 c7             	mov    rdi,rax
   32b7e:	e8 61 ff ff ff       	call   32ae4 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::~_Vector_base()>
   32b83:	90                   	nop
   32b84:	c9                   	leave  
   32b85:	c3                   	ret    

0000000000032b86 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::_Vector_impl()>:
   32b86:	55                   	push   rbp
   32b87:	48 89 e5             	mov    rbp,rsp
   32b8a:	48 83 ec 10          	sub    rsp,0x10
   32b8e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32b92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b96:	48 89 c7             	mov    rdi,rax
   32b99:	e8 ec 13 00 00       	call   33f8a <std::allocator<objl::Material>::allocator()>
   32b9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ba2:	48 89 c7             	mov    rdi,rax
   32ba5:	e8 fc 13 00 00       	call   33fa6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl_data::_Vector_impl_data()>
   32baa:	90                   	nop
   32bab:	c9                   	leave  
   32bac:	c3                   	ret    
   32bad:	90                   	nop

0000000000032bae <std::allocator<objl::Material>::~allocator()>:
   32bae:	55                   	push   rbp
   32baf:	48 89 e5             	mov    rbp,rsp
   32bb2:	48 83 ec 10          	sub    rsp,0x10
   32bb6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32bba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32bbe:	48 89 c7             	mov    rdi,rax
   32bc1:	e8 0e 14 00 00       	call   33fd4 <__gnu_cxx::new_allocator<objl::Material>::~new_allocator()>
   32bc6:	90                   	nop
   32bc7:	c9                   	leave  
   32bc8:	c3                   	ret    
   32bc9:	90                   	nop

0000000000032bca <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::~_Vector_base()>:
   32bca:	55                   	push   rbp
   32bcb:	48 89 e5             	mov    rbp,rsp
   32bce:	48 83 ec 10          	sub    rsp,0x10
   32bd2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32bd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32bda:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32bde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32be2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32be5:	48 89 d0             	mov    rax,rdx
   32be8:	48 29 c8             	sub    rax,rcx
   32beb:	48 c1 f8 03          	sar    rax,0x3
   32bef:	48 89 c2             	mov    rdx,rax
   32bf2:	48 b8 8b af f8 8a af f8 8a af 	movabs rax,0xaf8af8af8af8af8b
   32bfc:	48 0f af c2          	imul   rax,rdx
   32c00:	48 89 c2             	mov    rdx,rax
   32c03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c07:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32c0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c0e:	48 89 ce             	mov    rsi,rcx
   32c11:	48 89 c7             	mov    rdi,rax
   32c14:	e8 c7 13 00 00       	call   33fe0 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>
   32c19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c1d:	48 89 c7             	mov    rdi,rax
   32c20:	e8 89 ec ff ff       	call   318ae <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::~_Vector_impl()>
   32c25:	90                   	nop
   32c26:	c9                   	leave  
   32c27:	c3                   	ret    

0000000000032c28 <std::vector<objl::Material, std::allocator<objl::Material> >::~vector()>:
   32c28:	55                   	push   rbp
   32c29:	48 89 e5             	mov    rbp,rsp
   32c2c:	48 83 ec 10          	sub    rsp,0x10
   32c30:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32c34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c38:	48 89 c7             	mov    rdi,rax
   32c3b:	e8 d6 13 00 00       	call   34016 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   32c40:	48 89 c2             	mov    rdx,rax
   32c43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c47:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32c4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c4f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32c52:	48 89 ce             	mov    rsi,rcx
   32c55:	48 89 c7             	mov    rdi,rax
   32c58:	e8 c7 13 00 00       	call   34024 <void std::_Destroy<objl::Material*, objl::Material>(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   32c5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c61:	48 89 c7             	mov    rdi,rax
   32c64:	e8 61 ff ff ff       	call   32bca <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::~_Vector_base()>
   32c69:	90                   	nop
   32c6a:	c9                   	leave  
   32c6b:	c3                   	ret    

0000000000032c6c <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::clear()>:
   32c6c:	55                   	push   rbp
   32c6d:	48 89 e5             	mov    rbp,rsp
   32c70:	48 83 ec 10          	sub    rsp,0x10
   32c74:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32c78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32c7f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c83:	48 89 d6             	mov    rsi,rdx
   32c86:	48 89 c7             	mov    rdi,rax
   32c89:	e8 c0 13 00 00       	call   3404e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_erase_at_end(objl::Mesh*)>
   32c8e:	90                   	nop
   32c8f:	c9                   	leave  
   32c90:	c3                   	ret    

0000000000032c91 <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
   32c91:	55                   	push   rbp
   32c92:	48 89 e5             	mov    rbp,rsp
   32c95:	48 83 ec 10          	sub    rsp,0x10
   32c99:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32c9d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   32ca1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   32ca5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ca9:	48 89 d6             	mov    rsi,rdx
   32cac:	48 89 c7             	mov    rdi,rax
   32caf:	e8 15 36 ff ff       	call   262c9 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   32cb4:	83 f0 01             	xor    eax,0x1
   32cb7:	c9                   	leave  
   32cb8:	c3                   	ret    
   32cb9:	90                   	nop

0000000000032cba <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>:
   32cba:	55                   	push   rbp
   32cbb:	48 89 e5             	mov    rbp,rsp
   32cbe:	48 83 ec 10          	sub    rsp,0x10
   32cc2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32cc6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cca:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32ccd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cd1:	48 89 d6             	mov    rsi,rdx
   32cd4:	48 89 c7             	mov    rdi,rax
   32cd7:	e8 e4 13 00 00       	call   340c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase_at_end(objl::Vertex*)>
   32cdc:	90                   	nop
   32cdd:	c9                   	leave  
   32cde:	c3                   	ret    
   32cdf:	90                   	nop

0000000000032ce0 <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>:
   32ce0:	55                   	push   rbp
   32ce1:	48 89 e5             	mov    rbp,rsp
   32ce4:	48 83 ec 10          	sub    rsp,0x10
   32ce8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32cec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cf0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32cf3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cf7:	48 89 d6             	mov    rsi,rdx
   32cfa:	48 89 c7             	mov    rdi,rax
   32cfd:	e8 1e 14 00 00       	call   34120 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_erase_at_end(unsigned int*)>
   32d02:	90                   	nop
   32d03:	c9                   	leave  
   32d04:	c3                   	ret    
   32d05:	90                   	nop

0000000000032d06 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::_Vector_impl()>:
   32d06:	55                   	push   rbp
   32d07:	48 89 e5             	mov    rbp,rsp
   32d0a:	48 83 ec 10          	sub    rsp,0x10
   32d0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32d12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d16:	48 89 c7             	mov    rdi,rax
   32d19:	e8 62 14 00 00       	call   34180 <std::allocator<objl::Vector3>::allocator()>
   32d1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d22:	48 89 c7             	mov    rdi,rax
   32d25:	e8 72 14 00 00       	call   3419c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl_data::_Vector_impl_data()>
   32d2a:	90                   	nop
   32d2b:	c9                   	leave  
   32d2c:	c3                   	ret    
   32d2d:	90                   	nop

0000000000032d2e <std::allocator<objl::Vector3>::~allocator()>:
   32d2e:	55                   	push   rbp
   32d2f:	48 89 e5             	mov    rbp,rsp
   32d32:	48 83 ec 10          	sub    rsp,0x10
   32d36:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32d3a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d3e:	48 89 c7             	mov    rdi,rax
   32d41:	e8 84 14 00 00       	call   341ca <__gnu_cxx::new_allocator<objl::Vector3>::~new_allocator()>
   32d46:	90                   	nop
   32d47:	c9                   	leave  
   32d48:	c3                   	ret    
   32d49:	90                   	nop

0000000000032d4a <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::~_Vector_base()>:
   32d4a:	55                   	push   rbp
   32d4b:	48 89 e5             	mov    rbp,rsp
   32d4e:	48 83 ec 10          	sub    rsp,0x10
   32d52:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32d56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d5a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32d5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d62:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32d65:	48 89 d0             	mov    rax,rdx
   32d68:	48 29 c8             	sub    rax,rcx
   32d6b:	48 c1 f8 02          	sar    rax,0x2
   32d6f:	48 89 c2             	mov    rdx,rax
   32d72:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   32d7c:	48 0f af c2          	imul   rax,rdx
   32d80:	48 89 c2             	mov    rdx,rax
   32d83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d87:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32d8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d8e:	48 89 ce             	mov    rsi,rcx
   32d91:	48 89 c7             	mov    rdi,rax
   32d94:	e8 3d 14 00 00       	call   341d6 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)>
   32d99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d9d:	48 89 c7             	mov    rdi,rax
   32da0:	e8 5d eb ff ff       	call   31902 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::~_Vector_impl()>
   32da5:	90                   	nop
   32da6:	c9                   	leave  
   32da7:	c3                   	ret    

0000000000032da8 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>:
   32da8:	55                   	push   rbp
   32da9:	48 89 e5             	mov    rbp,rsp
   32dac:	48 83 ec 10          	sub    rsp,0x10
   32db0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32db4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32db8:	48 89 c7             	mov    rdi,rax
   32dbb:	e8 4c 14 00 00       	call   3420c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>
   32dc0:	48 89 c2             	mov    rdx,rax
   32dc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32dc7:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32dcb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32dcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32dd2:	48 89 ce             	mov    rsi,rcx
   32dd5:	48 89 c7             	mov    rdi,rax
   32dd8:	e8 3d 14 00 00       	call   3421a <void std::_Destroy<objl::Vector3*, objl::Vector3>(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   32ddd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32de1:	48 89 c7             	mov    rdi,rax
   32de4:	e8 61 ff ff ff       	call   32d4a <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::~_Vector_base()>
   32de9:	90                   	nop
   32dea:	c9                   	leave  
   32deb:	c3                   	ret    

0000000000032dec <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::_Vector_impl()>:
   32dec:	55                   	push   rbp
   32ded:	48 89 e5             	mov    rbp,rsp
   32df0:	48 83 ec 10          	sub    rsp,0x10
   32df4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32df8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32dfc:	48 89 c7             	mov    rdi,rax
   32dff:	e8 40 14 00 00       	call   34244 <std::allocator<objl::Vector2>::allocator()>
   32e04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e08:	48 89 c7             	mov    rdi,rax
   32e0b:	e8 50 14 00 00       	call   34260 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl_data::_Vector_impl_data()>
   32e10:	90                   	nop
   32e11:	c9                   	leave  
   32e12:	c3                   	ret    
   32e13:	90                   	nop

0000000000032e14 <std::allocator<objl::Vector2>::~allocator()>:
   32e14:	55                   	push   rbp
   32e15:	48 89 e5             	mov    rbp,rsp
   32e18:	48 83 ec 10          	sub    rsp,0x10
   32e1c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32e20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e24:	48 89 c7             	mov    rdi,rax
   32e27:	e8 62 14 00 00       	call   3428e <__gnu_cxx::new_allocator<objl::Vector2>::~new_allocator()>
   32e2c:	90                   	nop
   32e2d:	c9                   	leave  
   32e2e:	c3                   	ret    
   32e2f:	90                   	nop

0000000000032e30 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::~_Vector_base()>:
   32e30:	55                   	push   rbp
   32e31:	48 89 e5             	mov    rbp,rsp
   32e34:	48 83 ec 10          	sub    rsp,0x10
   32e38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32e3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e40:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32e44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e48:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32e4b:	48 89 d0             	mov    rax,rdx
   32e4e:	48 29 c8             	sub    rax,rcx
   32e51:	48 c1 f8 03          	sar    rax,0x3
   32e55:	48 89 c2             	mov    rdx,rax
   32e58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e5c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32e5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e63:	48 89 ce             	mov    rsi,rcx
   32e66:	48 89 c7             	mov    rdi,rax
   32e69:	e8 2c 14 00 00       	call   3429a <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)>
   32e6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e72:	48 89 c7             	mov    rdi,rax
   32e75:	e8 dc ea ff ff       	call   31956 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::~_Vector_impl()>
   32e7a:	90                   	nop
   32e7b:	c9                   	leave  
   32e7c:	c3                   	ret    
   32e7d:	90                   	nop

0000000000032e7e <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::~vector()>:
   32e7e:	55                   	push   rbp
   32e7f:	48 89 e5             	mov    rbp,rsp
   32e82:	48 83 ec 10          	sub    rsp,0x10
   32e86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32e8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e8e:	48 89 c7             	mov    rdi,rax
   32e91:	e8 3a 14 00 00       	call   342d0 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>
   32e96:	48 89 c2             	mov    rdx,rax
   32e99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e9d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32ea1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ea5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32ea8:	48 89 ce             	mov    rsi,rcx
   32eab:	48 89 c7             	mov    rdi,rax
   32eae:	e8 2b 14 00 00       	call   342de <void std::_Destroy<objl::Vector2*, objl::Vector2>(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   32eb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32eb7:	48 89 c7             	mov    rdi,rax
   32eba:	e8 71 ff ff ff       	call   32e30 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::~_Vector_base()>
   32ebf:	90                   	nop
   32ec0:	c9                   	leave  
   32ec1:	c3                   	ret    

0000000000032ec2 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>:
   32ec2:	55                   	push   rbp
   32ec3:	48 89 e5             	mov    rbp,rsp
   32ec6:	48 83 ec 30          	sub    rsp,0x30
   32eca:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   32ece:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32ed7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32edb:	31 c0                	xor    eax,eax
   32edd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32ee1:	48 89 c7             	mov    rdi,rax
   32ee4:	e8 05 0d 00 00       	call   33bee <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   32ee9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   32eed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32ef1:	48 89 c7             	mov    rdi,rax
   32ef4:	e8 ad 0c 00 00       	call   33ba6 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   32ef9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   32efd:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   32f01:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   32f05:	48 89 d6             	mov    rsi,rdx
   32f08:	48 89 c7             	mov    rdi,rax
   32f0b:	e8 f8 13 00 00       	call   34308 <bool __gnu_cxx::operator==<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>
   32f10:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   32f14:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   32f1d:	74 05                	je     32f24 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const+0x62>
   32f1f:	e8 8c 15 fd ff       	call   44b0 <__stack_chk_fail@plt>
   32f24:	c9                   	leave  
   32f25:	c3                   	ret    

0000000000032f26 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>:
   32f26:	55                   	push   rbp
   32f27:	48 89 e5             	mov    rbp,rsp
   32f2a:	48 83 ec 30          	sub    rsp,0x30
   32f2e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   32f32:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32f3b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32f3f:	31 c0                	xor    eax,eax
   32f41:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32f45:	48 89 c7             	mov    rdi,rax
   32f48:	e8 f3 09 00 00       	call   33940 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   32f4d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   32f51:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32f55:	48 89 c7             	mov    rdi,rax
   32f58:	e8 9b 09 00 00       	call   338f8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   32f5d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   32f61:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   32f65:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   32f69:	48 89 d6             	mov    rsi,rdx
   32f6c:	48 89 c7             	mov    rdi,rax
   32f6f:	e8 cf 13 00 00       	call   34343 <bool __gnu_cxx::operator==<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   32f74:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   32f78:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   32f81:	74 05                	je     32f88 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const+0x62>
   32f83:	e8 28 15 fd ff       	call   44b0 <__stack_chk_fail@plt>
   32f88:	c9                   	leave  
   32f89:	c3                   	ret    

0000000000032f8a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>:
   32f8a:	55                   	push   rbp
   32f8b:	48 89 e5             	mov    rbp,rsp
   32f8e:	48 83 ec 20          	sub    rsp,0x20
   32f92:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32f96:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   32f9a:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   32f9e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   32fa2:	48 89 c7             	mov    rdi,rax
   32fa5:	e8 d4 13 00 00       	call   3437e <std::remove_reference<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>::type&& std::move<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&)>
   32faa:	48 89 c2             	mov    rdx,rax
   32fad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32fb1:	48 89 d6             	mov    rsi,rdx
   32fb4:	48 89 c7             	mov    rdi,rax
   32fb7:	e8 d0 13 00 00       	call   3438c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_move_assign(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&, std::integral_constant<bool, true>)>
   32fbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32fc0:	c9                   	leave  
   32fc1:	c3                   	ret    

0000000000032fc2 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> >&&)>:
   32fc2:	55                   	push   rbp
   32fc3:	48 89 e5             	mov    rbp,rsp
   32fc6:	48 83 ec 20          	sub    rsp,0x20
   32fca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32fce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   32fd2:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   32fd6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   32fda:	48 89 c7             	mov    rdi,rax
   32fdd:	e8 6f 14 00 00       	call   34451 <std::remove_reference<std::vector<unsigned int, std::allocator<unsigned int> >&>::type&& std::move<std::vector<unsigned int, std::allocator<unsigned int> >&>(std::vector<unsigned int, std::allocator<unsigned int> >&)>
   32fe2:	48 89 c2             	mov    rdx,rax
   32fe5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32fe9:	48 89 d6             	mov    rsi,rdx
   32fec:	48 89 c7             	mov    rdi,rax
   32fef:	e8 6c 14 00 00       	call   34460 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_move_assign(std::vector<unsigned int, std::allocator<unsigned int> >&&, std::integral_constant<bool, true>)>
   32ff4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32ff8:	c9                   	leave  
   32ff9:	c3                   	ret    

0000000000032ffa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>:
   32ffa:	55                   	push   rbp
   32ffb:	48 89 e5             	mov    rbp,rsp
   32ffe:	48 83 ec 10          	sub    rsp,0x10
   33002:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33006:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3300a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3300e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33012:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33016:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   3301a:	48 39 c2             	cmp    rdx,rax
   3301d:	74 34                	je     33053 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)+0x59>
   3301f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33023:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33027:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3302b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3302f:	48 89 ce             	mov    rsi,rcx
   33032:	48 89 c7             	mov    rdi,rax
   33035:	e8 eb 14 00 00       	call   34525 <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh const&>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh const&)>
   3303a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3303e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33042:	48 8d 90 68 01 00 00 	lea    rdx,[rax+0x168]
   33049:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3304d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33051:	eb 22                	jmp    33075 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)+0x7b>
   33053:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33057:	48 89 c7             	mov    rdi,rax
   3305a:	e8 d5 01 00 00       	call   33234 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()>
   3305f:	48 89 c1             	mov    rcx,rax
   33062:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33066:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3306a:	48 89 ce             	mov    rsi,rcx
   3306d:	48 89 c7             	mov    rdi,rax
   33070:	e8 e9 14 00 00       	call   3455e <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)>
   33075:	90                   	nop
   33076:	c9                   	leave  
   33077:	c3                   	ret    

0000000000033078 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)>:
   33078:	55                   	push   rbp
   33079:	48 89 e5             	mov    rbp,rsp
   3307c:	48 83 ec 10          	sub    rsp,0x10
   33080:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33084:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33088:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3308c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33090:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33094:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33098:	48 39 c2             	cmp    rdx,rax
   3309b:	74 31                	je     330ce <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)+0x56>
   3309d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   330a1:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   330a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   330a9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   330ad:	48 89 ce             	mov    rsi,rcx
   330b0:	48 89 c7             	mov    rdi,rax
   330b3:	e8 f9 16 00 00       	call   347b1 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3 const&>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3 const&)>
   330b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   330bc:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   330c0:	48 8d 50 0c          	lea    rdx,[rax+0xc]
   330c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   330c8:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   330cc:	eb 22                	jmp    330f0 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)+0x78>
   330ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   330d2:	48 89 c7             	mov    rdi,rax
   330d5:	e8 10 17 00 00       	call   347ea <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::end()>
   330da:	48 89 c1             	mov    rcx,rax
   330dd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   330e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   330e5:	48 89 ce             	mov    rsi,rcx
   330e8:	48 89 c7             	mov    rdi,rax
   330eb:	e8 46 17 00 00       	call   34836 <void std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_realloc_insert<objl::Vector3 const&>(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >, objl::Vector3 const&)>
   330f0:	90                   	nop
   330f1:	c9                   	leave  
   330f2:	c3                   	ret    
   330f3:	90                   	nop

00000000000330f4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)>:
   330f4:	55                   	push   rbp
   330f5:	48 89 e5             	mov    rbp,rsp
   330f8:	48 83 ec 10          	sub    rsp,0x10
   330fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33100:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33104:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33108:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3310c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33110:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33114:	48 39 c2             	cmp    rdx,rax
   33117:	74 31                	je     3314a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)+0x56>
   33119:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3311d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33121:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33125:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33129:	48 89 ce             	mov    rsi,rcx
   3312c:	48 89 c7             	mov    rdi,rax
   3312f:	e8 dc 18 00 00       	call   34a10 <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2 const&>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2 const&)>
   33134:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33138:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   3313c:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33140:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33144:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33148:	eb 22                	jmp    3316c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)+0x78>
   3314a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3314e:	48 89 c7             	mov    rdi,rax
   33151:	e8 f4 18 00 00       	call   34a4a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::end()>
   33156:	48 89 c1             	mov    rcx,rax
   33159:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3315d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33161:	48 89 ce             	mov    rsi,rcx
   33164:	48 89 c7             	mov    rdi,rax
   33167:	e8 2a 19 00 00       	call   34a96 <void std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_realloc_insert<objl::Vector2 const&>(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >, objl::Vector2 const&)>
   3316c:	90                   	nop
   3316d:	c9                   	leave  
   3316e:	c3                   	ret    
   3316f:	90                   	nop

0000000000033170 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>:
   33170:	55                   	push   rbp
   33171:	48 89 e5             	mov    rbp,rsp
   33174:	48 83 ec 10          	sub    rsp,0x10
   33178:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3317c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33180:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33184:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33188:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3318c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33190:	48 39 c2             	cmp    rdx,rax
   33193:	74 31                	je     331c6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)+0x56>
   33195:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33199:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   3319d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331a1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   331a5:	48 89 ce             	mov    rsi,rcx
   331a8:	48 89 c7             	mov    rdi,rax
   331ab:	e8 9b 1a 00 00       	call   34c4b <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex const&>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex const&)>
   331b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331b4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   331b8:	48 8d 50 20          	lea    rdx,[rax+0x20]
   331bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331c0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   331c4:	eb 22                	jmp    331e8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)+0x78>
   331c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331ca:	48 89 c7             	mov    rdi,rax
   331cd:	e8 9c 08 00 00       	call   33a6e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   331d2:	48 89 c1             	mov    rcx,rax
   331d5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   331d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331dd:	48 89 ce             	mov    rsi,rcx
   331e0:	48 89 c7             	mov    rdi,rax
   331e3:	e8 9c 1a 00 00       	call   34c84 <void std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_realloc_insert<objl::Vertex const&>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex const&)>
   331e8:	90                   	nop
   331e9:	c9                   	leave  
   331ea:	c3                   	ret    
   331eb:	90                   	nop

00000000000331ec <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()>:
   331ec:	55                   	push   rbp
   331ed:	48 89 e5             	mov    rbp,rsp
   331f0:	48 83 ec 20          	sub    rsp,0x20
   331f4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   331f8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33201:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33205:	31 c0                	xor    eax,eax
   33207:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3320b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3320f:	48 89 d6             	mov    rsi,rdx
   33212:	48 89 c7             	mov    rdi,rax
   33215:	e8 1e 1c 00 00       	call   34e38 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh* const&)>
   3321a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3321e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   33222:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   3322b:	74 05                	je     33232 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()+0x46>
   3322d:	e8 7e 12 fd ff       	call   44b0 <__stack_chk_fail@plt>
   33232:	c9                   	leave  
   33233:	c3                   	ret    

0000000000033234 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()>:
   33234:	55                   	push   rbp
   33235:	48 89 e5             	mov    rbp,rsp
   33238:	48 83 ec 20          	sub    rsp,0x20
   3323c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33240:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33249:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3324d:	31 c0                	xor    eax,eax
   3324f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33253:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33257:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3325b:	48 89 d6             	mov    rsi,rdx
   3325e:	48 89 c7             	mov    rdi,rax
   33261:	e8 d2 1b 00 00       	call   34e38 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh* const&)>
   33266:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3326a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3326e:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33277:	74 05                	je     3327e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()+0x4a>
   33279:	e8 32 12 fd ff       	call   44b0 <__stack_chk_fail@plt>
   3327e:	c9                   	leave  
   3327f:	c3                   	ret    

0000000000033280 <bool __gnu_cxx::operator!=<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>:
   33280:	55                   	push   rbp
   33281:	48 89 e5             	mov    rbp,rsp
   33284:	53                   	push   rbx
   33285:	48 83 ec 18          	sub    rsp,0x18
   33289:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3328d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33291:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33295:	48 89 c7             	mov    rdi,rax
   33298:	e8 b9 1b 00 00       	call   34e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   3329d:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   332a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   332a4:	48 89 c7             	mov    rdi,rax
   332a7:	e8 aa 1b 00 00       	call   34e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   332ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
   332af:	48 39 c3             	cmp    rbx,rax
   332b2:	0f 95 c0             	setne  al
   332b5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   332b9:	c9                   	leave  
   332ba:	c3                   	ret    
   332bb:	90                   	nop

00000000000332bc <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator++()>:
   332bc:	55                   	push   rbp
   332bd:	48 89 e5             	mov    rbp,rsp
   332c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   332c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   332cb:	48 8d 90 68 01 00 00 	lea    rdx,[rax+0x168]
   332d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332d6:	48 89 10             	mov    QWORD PTR [rax],rdx
   332d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332dd:	5d                   	pop    rbp
   332de:	c3                   	ret    
   332df:	90                   	nop

00000000000332e0 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator*() const>:
   332e0:	55                   	push   rbp
   332e1:	48 89 e5             	mov    rbp,rsp
   332e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   332e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
   332ef:	5d                   	pop    rbp
   332f0:	c3                   	ret    
   332f1:	90                   	nop

00000000000332f2 <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>:
   332f2:	55                   	push   rbp
   332f3:	48 89 e5             	mov    rbp,rsp
   332f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   332fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332fe:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33302:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33306:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   33309:	48 89 d0             	mov    rax,rdx
   3330c:	48 29 c8             	sub    rax,rcx
   3330f:	48 c1 f8 03          	sar    rax,0x3
   33313:	48 89 c2             	mov    rdx,rax
   33316:	48 b8 8b af f8 8a af f8 8a af 	movabs rax,0xaf8af8af8af8af8b
   33320:	48 0f af c2          	imul   rax,rdx
   33324:	5d                   	pop    rbp
   33325:	c3                   	ret    

0000000000033326 <std::vector<objl::Material, std::allocator<objl::Material> >::operator[](unsigned long)>:
   33326:	55                   	push   rbp
   33327:	48 89 e5             	mov    rbp,rsp
   3332a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3332e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33332:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33336:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   33339:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3333d:	48 69 c0 18 01 00 00 	imul   rax,rax,0x118
   33344:	48 01 d0             	add    rax,rdx
   33347:	5d                   	pop    rbp
   33348:	c3                   	ret    
   33349:	90                   	nop

000000000003334a <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::empty() const>:
   3334a:	55                   	push   rbp
   3334b:	48 89 e5             	mov    rbp,rsp
   3334e:	48 83 ec 30          	sub    rsp,0x30
   33352:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33356:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3335f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33363:	31 c0                	xor    eax,eax
   33365:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33369:	48 89 c7             	mov    rdi,rax
   3336c:	e8 3b 1b 00 00       	call   34eac <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end() const>
   33371:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   33375:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33379:	48 89 c7             	mov    rdi,rax
   3337c:	e8 e3 1a 00 00       	call   34e64 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin() const>
   33381:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33385:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   33389:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   3338d:	48 89 d6             	mov    rsi,rdx
   33390:	48 89 c7             	mov    rdi,rax
   33393:	e8 60 1b 00 00       	call   34ef8 <bool __gnu_cxx::operator==<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>
   33398:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3339c:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   333a5:	74 05                	je     333ac <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::empty() const+0x62>
   333a7:	e8 04 11 fd ff       	call   44b0 <__stack_chk_fail@plt>
   333ac:	c9                   	leave  
   333ad:	c3                   	ret    

00000000000333ae <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   333ae:	55                   	push   rbp
   333af:	48 89 e5             	mov    rbp,rsp
   333b2:	48 83 ec 20          	sub    rsp,0x20
   333b6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   333ba:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   333be:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   333c2:	ba 0a 00 00 00       	mov    edx,0xa
   333c7:	be 00 00 00 00       	mov    esi,0x0
   333cc:	48 89 c7             	mov    rdi,rax
   333cf:	e8 3a dc ff ff       	call   3100e <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>
   333d4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   333d7:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   333db:	79 11                	jns    333ee <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x40>
   333dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   333e1:	48 89 c7             	mov    rdi,rax
   333e4:	e8 4b 1b 00 00       	call   34f34 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   333e9:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   333ec:	eb 04                	jmp    333f2 <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x44>
   333ee:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
   333f2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   333f5:	48 63 d0             	movsxd rdx,eax
   333f8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   333fc:	48 89 d6             	mov    rsi,rdx
   333ff:	48 89 c7             	mov    rdi,rax
   33402:	e8 61 1b 00 00       	call   34f68 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::operator[](unsigned long) const>
   33407:	c9                   	leave  
   33408:	c3                   	ret    

0000000000033409 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   33409:	55                   	push   rbp
   3340a:	48 89 e5             	mov    rbp,rsp
   3340d:	48 83 ec 20          	sub    rsp,0x20
   33411:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33415:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33419:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3341d:	ba 0a 00 00 00       	mov    edx,0xa
   33422:	be 00 00 00 00       	mov    esi,0x0
   33427:	48 89 c7             	mov    rdi,rax
   3342a:	e8 df db ff ff       	call   3100e <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>
   3342f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   33432:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   33436:	79 11                	jns    33449 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x40>
   33438:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3343c:	48 89 c7             	mov    rdi,rax
   3343f:	e8 4e 1b 00 00       	call   34f92 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   33444:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   33447:	eb 04                	jmp    3344d <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x44>
   33449:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
   3344d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   33450:	48 63 d0             	movsxd rdx,eax
   33453:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33457:	48 89 d6             	mov    rsi,rdx
   3345a:	48 89 c7             	mov    rdi,rax
   3345d:	e8 54 1b 00 00       	call   34fb6 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::operator[](unsigned long) const>
   33462:	c9                   	leave  
   33463:	c3                   	ret    

0000000000033464 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>:
   33464:	55                   	push   rbp
   33465:	48 89 e5             	mov    rbp,rsp
   33468:	41 55                	push   r13
   3346a:	41 54                	push   r12
   3346c:	53                   	push   rbx
   3346d:	48 83 ec 28          	sub    rsp,0x28
   33471:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   33475:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   33479:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33482:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   33486:	31 c0                	xor    eax,eax
   33488:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   3348c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   33490:	48 89 c7             	mov    rdi,rax
   33493:	e8 0c 04 00 00       	call   338a4 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   33498:	48 89 c2             	mov    rdx,rax
   3349b:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   3349f:	48 89 d6             	mov    rsi,rdx
   334a2:	48 89 c7             	mov    rdi,rax
   334a5:	e8 2c 1b 00 00       	call   34fd6 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_select_on_copy(std::allocator<objl::Vertex> const&)>
   334aa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   334ae:	48 89 c7             	mov    rdi,rax
   334b1:	e8 a4 2c ff ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   334b6:	48 89 c1             	mov    rcx,rax
   334b9:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   334bd:	48 89 c2             	mov    rdx,rax
   334c0:	48 89 ce             	mov    rsi,rcx
   334c3:	48 89 df             	mov    rdi,rbx
   334c6:	e8 57 1b 00 00       	call   35022 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(unsigned long, std::allocator<objl::Vertex> const&)>
   334cb:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   334cf:	48 89 c7             	mov    rdi,rax
   334d2:	e8 7f ee ff ff       	call   32356 <std::allocator<objl::Vertex>::~allocator()>
   334d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   334db:	48 89 c7             	mov    rdi,rax
   334de:	e8 89 03 00 00       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   334e3:	49 89 c5             	mov    r13,rax
   334e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   334ea:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   334ed:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   334f1:	48 89 c7             	mov    rdi,rax
   334f4:	e8 47 04 00 00       	call   33940 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   334f9:	49 89 c4             	mov    r12,rax
   334fc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   33500:	48 89 c7             	mov    rdi,rax
   33503:	e8 f0 03 00 00       	call   338f8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   33508:	4c 89 e9             	mov    rcx,r13
   3350b:	48 89 da             	mov    rdx,rbx
   3350e:	4c 89 e6             	mov    rsi,r12
   33511:	48 89 c7             	mov    rdi,rax
   33514:	e8 66 1b 00 00       	call   3507f <objl::Vertex* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, std::allocator<objl::Vertex>&)>
   33519:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   3351d:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
   33521:	90                   	nop
   33522:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33526:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3352f:	74 3b                	je     3356c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x108>
   33531:	eb 34                	jmp    33567 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x103>
   33533:	48 89 c3             	mov    rbx,rax
   33536:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   3353a:	48 89 c7             	mov    rdi,rax
   3353d:	e8 14 ee ff ff       	call   32356 <std::allocator<objl::Vertex>::~allocator()>
   33542:	48 89 d8             	mov    rax,rbx
   33545:	48 89 c7             	mov    rdi,rax
   33548:	e8 e3 11 fd ff       	call   4730 <_Unwind_Resume@plt>
   3354d:	48 89 c3             	mov    rbx,rax
   33550:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   33554:	48 89 c7             	mov    rdi,rax
   33557:	e8 16 ee ff ff       	call   32372 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::~_Vector_base()>
   3355c:	48 89 d8             	mov    rax,rbx
   3355f:	48 89 c7             	mov    rdi,rax
   33562:	e8 c9 11 fd ff       	call   4730 <_Unwind_Resume@plt>
   33567:	e8 44 0f fd ff       	call   44b0 <__stack_chk_fail@plt>
   3356c:	48 83 c4 28          	add    rsp,0x28
   33570:	5b                   	pop    rbx
   33571:	41 5c                	pop    r12
   33573:	41 5d                	pop    r13
   33575:	5d                   	pop    rbp
   33576:	c3                   	ret    
   33577:	90                   	nop

0000000000033578 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>:
   33578:	55                   	push   rbp
   33579:	48 89 e5             	mov    rbp,rsp
   3357c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33580:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33584:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33588:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3358b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3358f:	48 c1 e0 05          	shl    rax,0x5
   33593:	48 01 d0             	add    rax,rdx
   33596:	5d                   	pop    rbp
   33597:	c3                   	ret    

0000000000033598 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>:
   33598:	55                   	push   rbp
   33599:	48 89 e5             	mov    rbp,rsp
   3359c:	48 83 ec 20          	sub    rsp,0x20
   335a0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   335a4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   335ad:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   335b1:	31 c0                	xor    eax,eax
   335b3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   335b7:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   335bb:	48 89 d6             	mov    rsi,rdx
   335be:	48 89 c7             	mov    rdi,rax
   335c1:	e8 ea 1a 00 00       	call   350b0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>
   335c6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   335ca:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   335ce:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   335d7:	74 05                	je     335de <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()+0x46>
   335d9:	e8 d2 0e fd ff       	call   44b0 <__stack_chk_fail@plt>
   335de:	c9                   	leave  
   335df:	c3                   	ret    

00000000000335e0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>:
   335e0:	55                   	push   rbp
   335e1:	48 89 e5             	mov    rbp,rsp
   335e4:	48 83 ec 30          	sub    rsp,0x30
   335e8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   335ec:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   335f0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   335f9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   335fd:	31 c0                	xor    eax,eax
   335ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33603:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   33606:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3360a:	48 c1 e0 05          	shl    rax,0x5
   3360e:	48 01 d0             	add    rax,rdx
   33611:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33615:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   33619:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3361d:	48 89 d6             	mov    rsi,rdx
   33620:	48 89 c7             	mov    rdi,rax
   33623:	e8 88 1a 00 00       	call   350b0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>
   33628:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3362c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   33630:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33639:	74 05                	je     33640 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const+0x60>
   3363b:	e8 70 0e fd ff       	call   44b0 <__stack_chk_fail@plt>
   33640:	c9                   	leave  
   33641:	c3                   	ret    

0000000000033642 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator<objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, __gnu_cxx::__enable_if<std::__are_same<objl::Vertex*, objl::Vertex*>::__value, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__type> const&)>:
   33642:	55                   	push   rbp
   33643:	48 89 e5             	mov    rbp,rsp
   33646:	48 83 ec 10          	sub    rsp,0x10
   3364a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3364e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33652:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33656:	48 89 c7             	mov    rdi,rax
   33659:	e8 70 1a 00 00       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3365e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   33661:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33665:	48 89 10             	mov    QWORD PTR [rax],rdx
   33668:	90                   	nop
   33669:	c9                   	leave  
   3366a:	c3                   	ret    
   3366b:	90                   	nop

000000000003366c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::erase(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   3366c:	55                   	push   rbp
   3366d:	48 89 e5             	mov    rbp,rsp
   33670:	53                   	push   rbx
   33671:	48 83 ec 38          	sub    rsp,0x38
   33675:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   33679:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   3367d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33686:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3368a:	31 c0                	xor    eax,eax
   3368c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   33690:	48 89 c7             	mov    rdi,rax
   33693:	e8 44 1a 00 00       	call   350dc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::cbegin() const>
   33698:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   3369c:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   336a0:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   336a4:	48 89 d6             	mov    rsi,rdx
   336a7:	48 89 c7             	mov    rdi,rax
   336aa:	e8 75 1a 00 00       	call   35124 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   336af:	48 89 c3             	mov    rbx,rax
   336b2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   336b6:	48 89 c7             	mov    rdi,rax
   336b9:	e8 da fe ff ff       	call   33598 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   336be:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   336c2:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   336c6:	48 89 de             	mov    rsi,rbx
   336c9:	48 89 c7             	mov    rdi,rax
   336cc:	e8 0f ff ff ff       	call   335e0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   336d1:	48 89 c2             	mov    rdx,rax
   336d4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   336d8:	48 89 d6             	mov    rsi,rdx
   336db:	48 89 c7             	mov    rdi,rax
   336de:	e8 81 1a 00 00       	call   35164 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   336e3:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   336e7:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   336f0:	74 05                	je     336f7 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::erase(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0x8b>
   336f2:	e8 b9 0d fd ff       	call   44b0 <__stack_chk_fail@plt>
   336f7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   336fb:	c9                   	leave  
   336fc:	c3                   	ret    
   336fd:	90                   	nop

00000000000336fe <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)>:
   336fe:	55                   	push   rbp
   336ff:	48 89 e5             	mov    rbp,rsp
   33702:	48 83 ec 10          	sub    rsp,0x10
   33706:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3370a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3370e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33712:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33716:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3371a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   3371e:	48 39 c2             	cmp    rdx,rax
   33721:	74 34                	je     33757 <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)+0x59>
   33723:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33727:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   3372b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3372f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33733:	48 89 ce             	mov    rsi,rcx
   33736:	48 89 c7             	mov    rdi,rax
   33739:	e8 00 1b 00 00       	call   3523e <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material const&>(std::allocator<objl::Material>&, objl::Material*, objl::Material const&)>
   3373e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33742:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33746:	48 8d 90 18 01 00 00 	lea    rdx,[rax+0x118]
   3374d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33751:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33755:	eb 22                	jmp    33779 <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)+0x7b>
   33757:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3375b:	48 89 c7             	mov    rdi,rax
   3375e:	e8 15 1b 00 00       	call   35278 <std::vector<objl::Material, std::allocator<objl::Material> >::end()>
   33763:	48 89 c1             	mov    rcx,rax
   33766:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3376a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3376e:	48 89 ce             	mov    rsi,rcx
   33771:	48 89 c7             	mov    rdi,rax
   33774:	e8 4b 1b 00 00       	call   352c4 <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)>
   33779:	90                   	nop
   3377a:	c9                   	leave  
   3377b:	c3                   	ret    

000000000003377c <std::vector<objl::Material, std::allocator<objl::Material> >::empty() const>:
   3377c:	55                   	push   rbp
   3377d:	48 89 e5             	mov    rbp,rsp
   33780:	48 83 ec 30          	sub    rsp,0x30
   33784:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33788:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33791:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33795:	31 c0                	xor    eax,eax
   33797:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3379b:	48 89 c7             	mov    rdi,rax
   3379e:	e8 bd 1d 00 00       	call   35560 <std::vector<objl::Material, std::allocator<objl::Material> >::end() const>
   337a3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   337a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   337ab:	48 89 c7             	mov    rdi,rax
   337ae:	e8 65 1d 00 00       	call   35518 <std::vector<objl::Material, std::allocator<objl::Material> >::begin() const>
   337b3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   337b7:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   337bb:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   337bf:	48 89 d6             	mov    rsi,rdx
   337c2:	48 89 c7             	mov    rdi,rax
   337c5:	e8 e2 1d 00 00       	call   355ac <bool __gnu_cxx::operator==<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>
   337ca:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   337ce:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   337d7:	74 05                	je     337de <std::vector<objl::Material, std::allocator<objl::Material> >::empty() const+0x62>
   337d9:	e8 d2 0c fd ff       	call   44b0 <__stack_chk_fail@plt>
   337de:	c9                   	leave  
   337df:	c3                   	ret    

00000000000337e0 <std::allocator<objl::Vertex>::allocator()>:
   337e0:	55                   	push   rbp
   337e1:	48 89 e5             	mov    rbp,rsp
   337e4:	48 83 ec 10          	sub    rsp,0x10
   337e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   337ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   337f0:	48 89 c7             	mov    rdi,rax
   337f3:	e8 f0 1d 00 00       	call   355e8 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator()>
   337f8:	90                   	nop
   337f9:	c9                   	leave  
   337fa:	c3                   	ret    
   337fb:	90                   	nop

00000000000337fc <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>:
   337fc:	55                   	push   rbp
   337fd:	48 89 e5             	mov    rbp,rsp
   33800:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33804:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33808:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   3380f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33813:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   3381b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3381f:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   33827:	90                   	nop
   33828:	5d                   	pop    rbp
   33829:	c3                   	ret    

000000000003382a <__gnu_cxx::new_allocator<objl::Vertex>::~new_allocator()>:
   3382a:	55                   	push   rbp
   3382b:	48 89 e5             	mov    rbp,rsp
   3382e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33832:	90                   	nop
   33833:	5d                   	pop    rbp
   33834:	c3                   	ret    
   33835:	90                   	nop

0000000000033836 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>:
   33836:	55                   	push   rbp
   33837:	48 89 e5             	mov    rbp,rsp
   3383a:	48 83 ec 20          	sub    rsp,0x20
   3383e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33842:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33846:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3384a:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   3384f:	74 17                	je     33868 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)+0x32>
   33851:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33855:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33859:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3385d:	48 89 ce             	mov    rsi,rcx
   33860:	48 89 c7             	mov    rdi,rax
   33863:	e8 8b 1d 00 00       	call   355f3 <std::allocator_traits<std::allocator<objl::Vertex> >::deallocate(std::allocator<objl::Vertex>&, objl::Vertex*, unsigned long)>
   33868:	90                   	nop
   33869:	c9                   	leave  
   3386a:	c3                   	ret    
   3386b:	90                   	nop

000000000003386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>:
   3386c:	55                   	push   rbp
   3386d:	48 89 e5             	mov    rbp,rsp
   33870:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33874:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33878:	5d                   	pop    rbp
   33879:	c3                   	ret    

000000000003387a <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   3387a:	55                   	push   rbp
   3387b:	48 89 e5             	mov    rbp,rsp
   3387e:	48 83 ec 20          	sub    rsp,0x20
   33882:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33886:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3388a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3388e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33892:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33896:	48 89 d6             	mov    rsi,rdx
   33899:	48 89 c7             	mov    rdi,rax
   3389c:	e8 80 1d 00 00       	call   35621 <void std::_Destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>
   338a1:	90                   	nop
   338a2:	c9                   	leave  
   338a3:	c3                   	ret    

00000000000338a4 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>:
   338a4:	55                   	push   rbp
   338a5:	48 89 e5             	mov    rbp,rsp
   338a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   338ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   338b0:	5d                   	pop    rbp
   338b1:	c3                   	ret    

00000000000338b2 <std::operator!=(std::allocator<objl::Vertex> const&, std::allocator<objl::Vertex> const&)>:
   338b2:	55                   	push   rbp
   338b3:	48 89 e5             	mov    rbp,rsp
   338b6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   338ba:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   338be:	b8 00 00 00 00       	mov    eax,0x0
   338c3:	5d                   	pop    rbp
   338c4:	c3                   	ret    

00000000000338c5 <void std::__alloc_on_copy<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex> const&)>:
   338c5:	55                   	push   rbp
   338c6:	48 89 e5             	mov    rbp,rsp
   338c9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   338cd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   338d1:	90                   	nop
   338d2:	5d                   	pop    rbp
   338d3:	c3                   	ret    

00000000000338d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::capacity() const>:
   338d4:	55                   	push   rbp
   338d5:	48 89 e5             	mov    rbp,rsp
   338d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   338dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   338e0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   338e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   338e8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   338eb:	48 89 d0             	mov    rax,rdx
   338ee:	48 29 c8             	sub    rax,rcx
   338f1:	48 c1 f8 05          	sar    rax,0x5
   338f5:	5d                   	pop    rbp
   338f6:	c3                   	ret    
   338f7:	90                   	nop

00000000000338f8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>:
   338f8:	55                   	push   rbp
   338f9:	48 89 e5             	mov    rbp,rsp
   338fc:	48 83 ec 20          	sub    rsp,0x20
   33900:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33904:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3390d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33911:	31 c0                	xor    eax,eax
   33913:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33917:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3391b:	48 89 d6             	mov    rsi,rdx
   3391e:	48 89 c7             	mov    rdi,rax
   33921:	e8 22 1d 00 00       	call   35648 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>
   33926:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3392a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3392e:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33937:	74 05                	je     3393e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const+0x46>
   33939:	e8 72 0b fd ff       	call   44b0 <__stack_chk_fail@plt>
   3393e:	c9                   	leave  
   3393f:	c3                   	ret    

0000000000033940 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>:
   33940:	55                   	push   rbp
   33941:	48 89 e5             	mov    rbp,rsp
   33944:	48 83 ec 20          	sub    rsp,0x20
   33948:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3394c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33955:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33959:	31 c0                	xor    eax,eax
   3395b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3395f:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33963:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33967:	48 89 d6             	mov    rsi,rdx
   3396a:	48 89 c7             	mov    rdi,rax
   3396d:	e8 d6 1c 00 00       	call   35648 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>
   33972:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33976:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3397a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33983:	74 05                	je     3398a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const+0x4a>
   33985:	e8 26 0b fd ff       	call   44b0 <__stack_chk_fail@plt>
   3398a:	c9                   	leave  
   3398b:	c3                   	ret    

000000000003398c <objl::Vertex* std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(unsigned long, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   3398c:	55                   	push   rbp
   3398d:	48 89 e5             	mov    rbp,rsp
   33990:	53                   	push   rbx
   33991:	48 83 ec 38          	sub    rsp,0x38
   33995:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33999:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   3399d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   339a1:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   339a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   339a9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   339ad:	48 89 d6             	mov    rsi,rdx
   339b0:	48 89 c7             	mov    rdi,rax
   339b3:	e8 ae 1c 00 00       	call   35666 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>
   339b8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   339bc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   339c0:	48 89 c7             	mov    rdi,rax
   339c3:	e8 a4 fe ff ff       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   339c8:	48 89 c1             	mov    rcx,rax
   339cb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   339cf:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   339d3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   339d7:	48 89 c7             	mov    rdi,rax
   339da:	e8 a0 16 00 00       	call   3507f <objl::Vertex* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, std::allocator<objl::Vertex>&)>
   339df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   339e3:	eb 37                	jmp    33a1c <objl::Vertex* std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(unsigned long, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0x90>
   339e5:	48 89 c7             	mov    rdi,rax
   339e8:	e8 53 07 fd ff       	call   4140 <__cxa_begin_catch@plt>
   339ed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   339f1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   339f5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   339f9:	48 89 ce             	mov    rsi,rcx
   339fc:	48 89 c7             	mov    rdi,rax
   339ff:	e8 32 fe ff ff       	call   33836 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   33a04:	e8 17 0c fd ff       	call   4620 <__cxa_rethrow@plt>
   33a09:	48 89 c3             	mov    rbx,rax
   33a0c:	e8 cf 0c fd ff       	call   46e0 <__cxa_end_catch@plt>
   33a11:	48 89 d8             	mov    rax,rbx
   33a14:	48 89 c7             	mov    rdi,rax
   33a17:	e8 14 0d fd ff       	call   4730 <_Unwind_Resume@plt>
   33a1c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33a20:	c9                   	leave  
   33a21:	c3                   	ret    

0000000000033a22 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   33a22:	55                   	push   rbp
   33a23:	48 89 e5             	mov    rbp,rsp
   33a26:	53                   	push   rbx
   33a27:	48 83 ec 28          	sub    rsp,0x28
   33a2b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33a2f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33a33:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33a37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33a3b:	48 89 c7             	mov    rdi,rax
   33a3e:	e8 56 1c 00 00       	call   35699 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33a43:	48 89 c3             	mov    rbx,rax
   33a46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33a4a:	48 89 c7             	mov    rdi,rax
   33a4d:	e8 47 1c 00 00       	call   35699 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33a52:	48 89 c1             	mov    rcx,rax
   33a55:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33a59:	48 89 c2             	mov    rdx,rax
   33a5c:	48 89 de             	mov    rsi,rbx
   33a5f:	48 89 cf             	mov    rdi,rcx
   33a62:	e8 40 1c 00 00       	call   356a7 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33a67:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33a6b:	c9                   	leave  
   33a6c:	c3                   	ret    
   33a6d:	90                   	nop

0000000000033a6e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>:
   33a6e:	55                   	push   rbp
   33a6f:	48 89 e5             	mov    rbp,rsp
   33a72:	48 83 ec 20          	sub    rsp,0x20
   33a76:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33a7a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33a83:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33a87:	31 c0                	xor    eax,eax
   33a89:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33a8d:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33a91:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33a95:	48 89 d6             	mov    rsi,rdx
   33a98:	48 89 c7             	mov    rdi,rax
   33a9b:	e8 10 16 00 00       	call   350b0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>
   33aa0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33aa4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   33aa8:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33ab1:	74 05                	je     33ab8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()+0x4a>
   33ab3:	e8 f8 09 fd ff       	call   44b0 <__stack_chk_fail@plt>
   33ab8:	c9                   	leave  
   33ab9:	c3                   	ret    

0000000000033aba <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, std::allocator<objl::Vertex>&)>:
   33aba:	55                   	push   rbp
   33abb:	48 89 e5             	mov    rbp,rsp
   33abe:	48 83 ec 20          	sub    rsp,0x20
   33ac2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33ac6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33aca:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33ace:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33ad2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33ad6:	48 89 d6             	mov    rsi,rdx
   33ad9:	48 89 c7             	mov    rdi,rax
   33adc:	e8 30 1c 00 00       	call   35711 <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33ae1:	90                   	nop
   33ae2:	c9                   	leave  
   33ae3:	c3                   	ret    

0000000000033ae4 <objl::Vertex* std::copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   33ae4:	55                   	push   rbp
   33ae5:	48 89 e5             	mov    rbp,rsp
   33ae8:	53                   	push   rbx
   33ae9:	48 83 ec 28          	sub    rsp,0x28
   33aed:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33af1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33af5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33af9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33afd:	48 89 c7             	mov    rdi,rax
   33b00:	e8 32 1c 00 00       	call   35737 <objl::Vertex* std::__miter_base<objl::Vertex*>(objl::Vertex*)>
   33b05:	48 89 c3             	mov    rbx,rax
   33b08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33b0c:	48 89 c7             	mov    rdi,rax
   33b0f:	e8 23 1c 00 00       	call   35737 <objl::Vertex* std::__miter_base<objl::Vertex*>(objl::Vertex*)>
   33b14:	48 89 c1             	mov    rcx,rax
   33b17:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33b1b:	48 89 c2             	mov    rdx,rax
   33b1e:	48 89 de             	mov    rsi,rbx
   33b21:	48 89 cf             	mov    rdi,rcx
   33b24:	e8 1c 1c 00 00       	call   35745 <objl::Vertex* std::__copy_move_a<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   33b29:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33b2d:	c9                   	leave  
   33b2e:	c3                   	ret    

0000000000033b2f <objl::Vertex* std::__uninitialized_copy_a<objl::Vertex*, objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   33b2f:	55                   	push   rbp
   33b30:	48 89 e5             	mov    rbp,rsp
   33b33:	48 83 ec 20          	sub    rsp,0x20
   33b37:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33b3b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33b3f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33b43:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   33b47:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33b4b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   33b4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33b53:	48 89 ce             	mov    rsi,rcx
   33b56:	48 89 c7             	mov    rdi,rax
   33b59:	e8 51 1c 00 00       	call   357af <objl::Vertex* std::uninitialized_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   33b5e:	c9                   	leave  
   33b5f:	c3                   	ret    

0000000000033b60 <std::operator!=(std::allocator<unsigned int> const&, std::allocator<unsigned int> const&)>:
   33b60:	55                   	push   rbp
   33b61:	48 89 e5             	mov    rbp,rsp
   33b64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33b68:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33b6c:	b8 00 00 00 00       	mov    eax,0x0
   33b71:	5d                   	pop    rbp
   33b72:	c3                   	ret    

0000000000033b73 <void std::__alloc_on_copy<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int> const&)>:
   33b73:	55                   	push   rbp
   33b74:	48 89 e5             	mov    rbp,rsp
   33b77:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33b7b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33b7f:	90                   	nop
   33b80:	5d                   	pop    rbp
   33b81:	c3                   	ret    

0000000000033b82 <std::vector<unsigned int, std::allocator<unsigned int> >::capacity() const>:
   33b82:	55                   	push   rbp
   33b83:	48 89 e5             	mov    rbp,rsp
   33b86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33b8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33b8e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   33b92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33b96:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   33b99:	48 89 d0             	mov    rax,rdx
   33b9c:	48 29 c8             	sub    rax,rcx
   33b9f:	48 c1 f8 02          	sar    rax,0x2
   33ba3:	5d                   	pop    rbp
   33ba4:	c3                   	ret    
   33ba5:	90                   	nop

0000000000033ba6 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>:
   33ba6:	55                   	push   rbp
   33ba7:	48 89 e5             	mov    rbp,rsp
   33baa:	48 83 ec 20          	sub    rsp,0x20
   33bae:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33bb2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33bbb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33bbf:	31 c0                	xor    eax,eax
   33bc1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33bc5:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33bc9:	48 89 d6             	mov    rsi,rdx
   33bcc:	48 89 c7             	mov    rdi,rax
   33bcf:	e8 0c 1c 00 00       	call   357e0 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&)>
   33bd4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33bd8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   33bdc:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33be5:	74 05                	je     33bec <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const+0x46>
   33be7:	e8 c4 08 fd ff       	call   44b0 <__stack_chk_fail@plt>
   33bec:	c9                   	leave  
   33bed:	c3                   	ret    

0000000000033bee <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>:
   33bee:	55                   	push   rbp
   33bef:	48 89 e5             	mov    rbp,rsp
   33bf2:	48 83 ec 20          	sub    rsp,0x20
   33bf6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33bfa:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33c03:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33c07:	31 c0                	xor    eax,eax
   33c09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33c0d:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33c11:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33c15:	48 89 d6             	mov    rsi,rdx
   33c18:	48 89 c7             	mov    rdi,rax
   33c1b:	e8 c0 1b 00 00       	call   357e0 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&)>
   33c20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33c24:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   33c28:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   33c31:	74 05                	je     33c38 <std::vector<unsigned int, std::allocator<unsigned int> >::end() const+0x4a>
   33c33:	e8 78 08 fd ff       	call   44b0 <__stack_chk_fail@plt>
   33c38:	c9                   	leave  
   33c39:	c3                   	ret    

0000000000033c3a <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(unsigned long, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   33c3a:	55                   	push   rbp
   33c3b:	48 89 e5             	mov    rbp,rsp
   33c3e:	53                   	push   rbx
   33c3f:	48 83 ec 38          	sub    rsp,0x38
   33c43:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33c47:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   33c4b:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   33c4f:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   33c53:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33c57:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   33c5b:	48 89 d6             	mov    rsi,rdx
   33c5e:	48 89 c7             	mov    rdi,rax
   33c61:	e8 86 5d ff ff       	call   299ec <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   33c66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33c6a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33c6e:	48 89 c7             	mov    rdi,rax
   33c71:	e8 96 4b ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   33c76:	48 89 c1             	mov    rcx,rax
   33c79:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33c7d:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   33c81:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   33c85:	48 89 c7             	mov    rdi,rax
   33c88:	e8 70 1b 00 00       	call   357fd <unsigned int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, std::allocator<unsigned int>&)>
   33c8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33c91:	eb 37                	jmp    33cca <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(unsigned long, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)+0x90>
   33c93:	48 89 c7             	mov    rdi,rax
   33c96:	e8 a5 04 fd ff       	call   4140 <__cxa_begin_catch@plt>
   33c9b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33c9f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   33ca3:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   33ca7:	48 89 ce             	mov    rsi,rcx
   33caa:	48 89 c7             	mov    rdi,rax
   33cad:	e8 24 4b ff ff       	call   287d6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   33cb2:	e8 69 09 fd ff       	call   4620 <__cxa_rethrow@plt>
   33cb7:	48 89 c3             	mov    rbx,rax
   33cba:	e8 21 0a fd ff       	call   46e0 <__cxa_end_catch@plt>
   33cbf:	48 89 d8             	mov    rax,rbx
   33cc2:	48 89 c7             	mov    rdi,rax
   33cc5:	e8 66 0a fd ff       	call   4730 <_Unwind_Resume@plt>
   33cca:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33cce:	c9                   	leave  
   33ccf:	c3                   	ret    

0000000000033cd0 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   33cd0:	55                   	push   rbp
   33cd1:	48 89 e5             	mov    rbp,rsp
   33cd4:	53                   	push   rbx
   33cd5:	48 83 ec 28          	sub    rsp,0x28
   33cd9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33cdd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33ce1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33ce5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33ce9:	48 89 c7             	mov    rdi,rax
   33cec:	e8 3d 1b 00 00       	call   3582e <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33cf1:	48 89 c3             	mov    rbx,rax
   33cf4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33cf8:	48 89 c7             	mov    rdi,rax
   33cfb:	e8 2e 1b 00 00       	call   3582e <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33d00:	48 89 c1             	mov    rcx,rax
   33d03:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33d07:	48 89 c2             	mov    rdx,rax
   33d0a:	48 89 de             	mov    rsi,rbx
   33d0d:	48 89 cf             	mov    rdi,rcx
   33d10:	e8 27 1b 00 00       	call   3583c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33d15:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33d19:	c9                   	leave  
   33d1a:	c3                   	ret    

0000000000033d1b <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<unsigned int>&)>:
   33d1b:	55                   	push   rbp
   33d1c:	48 89 e5             	mov    rbp,rsp
   33d1f:	48 83 ec 20          	sub    rsp,0x20
   33d23:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33d27:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33d2b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33d2f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33d33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33d37:	48 89 d6             	mov    rsi,rdx
   33d3a:	48 89 c7             	mov    rdi,rax
   33d3d:	e8 64 1b 00 00       	call   358a6 <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33d42:	90                   	nop
   33d43:	c9                   	leave  
   33d44:	c3                   	ret    

0000000000033d45 <unsigned int* std::copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   33d45:	55                   	push   rbp
   33d46:	48 89 e5             	mov    rbp,rsp
   33d49:	53                   	push   rbx
   33d4a:	48 83 ec 28          	sub    rsp,0x28
   33d4e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33d52:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33d56:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33d5a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33d5e:	48 89 c7             	mov    rdi,rax
   33d61:	e8 66 1b 00 00       	call   358cc <unsigned int* std::__miter_base<unsigned int*>(unsigned int*)>
   33d66:	48 89 c3             	mov    rbx,rax
   33d69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33d6d:	48 89 c7             	mov    rdi,rax
   33d70:	e8 57 1b 00 00       	call   358cc <unsigned int* std::__miter_base<unsigned int*>(unsigned int*)>
   33d75:	48 89 c1             	mov    rcx,rax
   33d78:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33d7c:	48 89 c2             	mov    rdx,rax
   33d7f:	48 89 de             	mov    rsi,rbx
   33d82:	48 89 cf             	mov    rdi,rcx
   33d85:	e8 50 1b 00 00       	call   358da <unsigned int* std::__copy_move_a<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   33d8a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33d8e:	c9                   	leave  
   33d8f:	c3                   	ret    

0000000000033d90 <unsigned int* std::__uninitialized_copy_a<unsigned int*, unsigned int*, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   33d90:	55                   	push   rbp
   33d91:	48 89 e5             	mov    rbp,rsp
   33d94:	48 83 ec 20          	sub    rsp,0x20
   33d98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33d9c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33da0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33da4:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   33da8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33dac:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   33db0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33db4:	48 89 ce             	mov    rsi,rcx
   33db7:	48 89 c7             	mov    rdi,rax
   33dba:	e8 85 1b 00 00       	call   35944 <unsigned int* std::uninitialized_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   33dbf:	c9                   	leave  
   33dc0:	c3                   	ret    
   33dc1:	90                   	nop

0000000000033dc2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   33dc2:	55                   	push   rbp
   33dc3:	48 89 e5             	mov    rbp,rsp
   33dc6:	48 83 ec 20          	sub    rsp,0x20
   33dca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33dce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33dd2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33dd6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33dda:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   33dde:	48 c1 f8 05          	sar    rax,0x5
   33de2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33de6:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   33deb:	74 32                	je     33e1f <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x5d>
   33ded:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33df1:	48 89 c7             	mov    rdi,rax
   33df4:	e8 81 3d ff ff       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   33df9:	48 89 c2             	mov    rdx,rax
   33dfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e00:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33e04:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33e08:	48 89 ce             	mov    rsi,rcx
   33e0b:	48 89 c7             	mov    rdi,rax
   33e0e:	e8 75 3d ff ff       	call   27b88 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   33e13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e17:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   33e1b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33e1f:	90                   	nop
   33e20:	c9                   	leave  
   33e21:	c3                   	ret    

0000000000033e22 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   33e22:	55                   	push   rbp
   33e23:	48 89 e5             	mov    rbp,rsp
   33e26:	53                   	push   rbx
   33e27:	48 83 ec 18          	sub    rsp,0x18
   33e2b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33e2f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33e33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e37:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33e3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e3f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33e43:	48 39 c2             	cmp    rdx,rax
   33e46:	74 3c                	je     33e84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x62>
   33e48:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33e4c:	48 89 c7             	mov    rdi,rax
   33e4f:	e8 8d 81 ff ff       	call   2bfe1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   33e54:	48 89 c2             	mov    rdx,rax
   33e57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e5b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33e5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e63:	48 89 ce             	mov    rsi,rcx
   33e66:	48 89 c7             	mov    rdi,rax
   33e69:	e8 3a 81 ff ff       	call   2bfa8 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   33e6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e72:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33e76:	48 8d 50 20          	lea    rdx,[rax+0x20]
   33e7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e7e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33e82:	eb 30                	jmp    33eb4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>
   33e84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33e88:	48 89 c7             	mov    rdi,rax
   33e8b:	e8 51 81 ff ff       	call   2bfe1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   33e90:	48 89 c3             	mov    rbx,rax
   33e93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e97:	48 89 c7             	mov    rdi,rax
   33e9a:	e8 61 42 ff ff       	call   28100 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>
   33e9f:	48 89 c1             	mov    rcx,rax
   33ea2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33ea6:	48 89 da             	mov    rdx,rbx
   33ea9:	48 89 ce             	mov    rsi,rcx
   33eac:	48 89 c7             	mov    rdi,rax
   33eaf:	e8 c2 1a 00 00       	call   35976 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   33eb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33eb8:	48 89 c7             	mov    rdi,rax
   33ebb:	e8 6a 1c 00 00       	call   35b2a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::back()>
   33ec0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33ec4:	c9                   	leave  
   33ec5:	c3                   	ret    

0000000000033ec6 <std::allocator<objl::Mesh>::allocator()>:
   33ec6:	55                   	push   rbp
   33ec7:	48 89 e5             	mov    rbp,rsp
   33eca:	48 83 ec 10          	sub    rsp,0x10
   33ece:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33ed2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33ed6:	48 89 c7             	mov    rdi,rax
   33ed9:	e8 ae 1c 00 00       	call   35b8c <__gnu_cxx::new_allocator<objl::Mesh>::new_allocator()>
   33ede:	90                   	nop
   33edf:	c9                   	leave  
   33ee0:	c3                   	ret    
   33ee1:	90                   	nop

0000000000033ee2 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl_data::_Vector_impl_data()>:
   33ee2:	55                   	push   rbp
   33ee3:	48 89 e5             	mov    rbp,rsp
   33ee6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33eea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33eee:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   33ef5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33ef9:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   33f01:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33f05:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   33f0d:	90                   	nop
   33f0e:	5d                   	pop    rbp
   33f0f:	c3                   	ret    

0000000000033f10 <__gnu_cxx::new_allocator<objl::Mesh>::~new_allocator()>:
   33f10:	55                   	push   rbp
   33f11:	48 89 e5             	mov    rbp,rsp
   33f14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33f18:	90                   	nop
   33f19:	5d                   	pop    rbp
   33f1a:	c3                   	ret    
   33f1b:	90                   	nop

0000000000033f1c <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>:
   33f1c:	55                   	push   rbp
   33f1d:	48 89 e5             	mov    rbp,rsp
   33f20:	48 83 ec 20          	sub    rsp,0x20
   33f24:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33f28:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33f2c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33f30:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   33f35:	74 17                	je     33f4e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)+0x32>
   33f37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33f3b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33f3f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   33f43:	48 89 ce             	mov    rsi,rcx
   33f46:	48 89 c7             	mov    rdi,rax
   33f49:	e8 49 1c 00 00       	call   35b97 <std::allocator_traits<std::allocator<objl::Mesh> >::deallocate(std::allocator<objl::Mesh>&, objl::Mesh*, unsigned long)>
   33f4e:	90                   	nop
   33f4f:	c9                   	leave  
   33f50:	c3                   	ret    
   33f51:	90                   	nop

0000000000033f52 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>:
   33f52:	55                   	push   rbp
   33f53:	48 89 e5             	mov    rbp,rsp
   33f56:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33f5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33f5e:	5d                   	pop    rbp
   33f5f:	c3                   	ret    

0000000000033f60 <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   33f60:	55                   	push   rbp
   33f61:	48 89 e5             	mov    rbp,rsp
   33f64:	48 83 ec 20          	sub    rsp,0x20
   33f68:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33f6c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33f70:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33f74:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33f78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33f7c:	48 89 d6             	mov    rsi,rdx
   33f7f:	48 89 c7             	mov    rdi,rax
   33f82:	e8 3e 1c 00 00       	call   35bc5 <void std::_Destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>
   33f87:	90                   	nop
   33f88:	c9                   	leave  
   33f89:	c3                   	ret    

0000000000033f8a <std::allocator<objl::Material>::allocator()>:
   33f8a:	55                   	push   rbp
   33f8b:	48 89 e5             	mov    rbp,rsp
   33f8e:	48 83 ec 10          	sub    rsp,0x10
   33f92:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33f96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33f9a:	48 89 c7             	mov    rdi,rax
   33f9d:	e8 4a 1c 00 00       	call   35bec <__gnu_cxx::new_allocator<objl::Material>::new_allocator()>
   33fa2:	90                   	nop
   33fa3:	c9                   	leave  
   33fa4:	c3                   	ret    
   33fa5:	90                   	nop

0000000000033fa6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl_data::_Vector_impl_data()>:
   33fa6:	55                   	push   rbp
   33fa7:	48 89 e5             	mov    rbp,rsp
   33faa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33fae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33fb2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   33fb9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33fbd:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   33fc5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33fc9:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   33fd1:	90                   	nop
   33fd2:	5d                   	pop    rbp
   33fd3:	c3                   	ret    

0000000000033fd4 <__gnu_cxx::new_allocator<objl::Material>::~new_allocator()>:
   33fd4:	55                   	push   rbp
   33fd5:	48 89 e5             	mov    rbp,rsp
   33fd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33fdc:	90                   	nop
   33fdd:	5d                   	pop    rbp
   33fde:	c3                   	ret    
   33fdf:	90                   	nop

0000000000033fe0 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>:
   33fe0:	55                   	push   rbp
   33fe1:	48 89 e5             	mov    rbp,rsp
   33fe4:	48 83 ec 20          	sub    rsp,0x20
   33fe8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33fec:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33ff0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33ff4:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   33ff9:	74 17                	je     34012 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)+0x32>
   33ffb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33fff:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   34003:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34007:	48 89 ce             	mov    rsi,rcx
   3400a:	48 89 c7             	mov    rdi,rax
   3400d:	e8 e5 1b 00 00       	call   35bf7 <std::allocator_traits<std::allocator<objl::Material> >::deallocate(std::allocator<objl::Material>&, objl::Material*, unsigned long)>
   34012:	90                   	nop
   34013:	c9                   	leave  
   34014:	c3                   	ret    
   34015:	90                   	nop

0000000000034016 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>:
   34016:	55                   	push   rbp
   34017:	48 89 e5             	mov    rbp,rsp
   3401a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3401e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34022:	5d                   	pop    rbp
   34023:	c3                   	ret    

0000000000034024 <void std::_Destroy<objl::Material*, objl::Material>(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   34024:	55                   	push   rbp
   34025:	48 89 e5             	mov    rbp,rsp
   34028:	48 83 ec 20          	sub    rsp,0x20
   3402c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34030:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34034:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34038:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3403c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34040:	48 89 d6             	mov    rsi,rdx
   34043:	48 89 c7             	mov    rdi,rax
   34046:	e8 da 1b 00 00       	call   35c25 <void std::_Destroy<objl::Material*>(objl::Material*, objl::Material*)>
   3404b:	90                   	nop
   3404c:	c9                   	leave  
   3404d:	c3                   	ret    

000000000003404e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_erase_at_end(objl::Mesh*)>:
   3404e:	55                   	push   rbp
   3404f:	48 89 e5             	mov    rbp,rsp
   34052:	48 83 ec 20          	sub    rsp,0x20
   34056:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3405a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3405e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34062:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34066:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   3406a:	48 c1 f8 03          	sar    rax,0x3
   3406e:	48 89 c2             	mov    rdx,rax
   34071:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   3407b:	48 0f af c2          	imul   rax,rdx
   3407f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34083:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   34088:	74 32                	je     340bc <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_erase_at_end(objl::Mesh*)+0x6e>
   3408a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3408e:	48 89 c7             	mov    rdi,rax
   34091:	e8 bc fe ff ff       	call   33f52 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   34096:	48 89 c2             	mov    rdx,rax
   34099:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3409d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   340a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   340a5:	48 89 ce             	mov    rsi,rcx
   340a8:	48 89 c7             	mov    rdi,rax
   340ab:	e8 b0 fe ff ff       	call   33f60 <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   340b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   340b4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   340b8:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   340bc:	90                   	nop
   340bd:	c9                   	leave  
   340be:	c3                   	ret    
   340bf:	90                   	nop

00000000000340c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase_at_end(objl::Vertex*)>:
   340c0:	55                   	push   rbp
   340c1:	48 89 e5             	mov    rbp,rsp
   340c4:	48 83 ec 20          	sub    rsp,0x20
   340c8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   340cc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   340d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   340d4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   340d8:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   340dc:	48 c1 f8 05          	sar    rax,0x5
   340e0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   340e4:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   340e9:	74 32                	je     3411d <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase_at_end(objl::Vertex*)+0x5d>
   340eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   340ef:	48 89 c7             	mov    rdi,rax
   340f2:	e8 75 f7 ff ff       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   340f7:	48 89 c2             	mov    rdx,rax
   340fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   340fe:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   34102:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34106:	48 89 ce             	mov    rsi,rcx
   34109:	48 89 c7             	mov    rdi,rax
   3410c:	e8 69 f7 ff ff       	call   3387a <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   34111:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34115:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34119:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3411d:	90                   	nop
   3411e:	c9                   	leave  
   3411f:	c3                   	ret    

0000000000034120 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_erase_at_end(unsigned int*)>:
   34120:	55                   	push   rbp
   34121:	48 89 e5             	mov    rbp,rsp
   34124:	48 83 ec 20          	sub    rsp,0x20
   34128:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3412c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34130:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34134:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34138:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   3413c:	48 c1 f8 02          	sar    rax,0x2
   34140:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34144:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   34149:	74 32                	je     3417d <std::vector<unsigned int, std::allocator<unsigned int> >::_M_erase_at_end(unsigned int*)+0x5d>
   3414b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3414f:	48 89 c7             	mov    rdi,rax
   34152:	e8 b5 46 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   34157:	48 89 c2             	mov    rdx,rax
   3415a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3415e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   34162:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34166:	48 89 ce             	mov    rsi,rcx
   34169:	48 89 c7             	mov    rdi,rax
   3416c:	e8 a9 46 ff ff       	call   2881a <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   34171:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34175:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34179:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3417d:	90                   	nop
   3417e:	c9                   	leave  
   3417f:	c3                   	ret    

0000000000034180 <std::allocator<objl::Vector3>::allocator()>:
   34180:	55                   	push   rbp
   34181:	48 89 e5             	mov    rbp,rsp
   34184:	48 83 ec 10          	sub    rsp,0x10
   34188:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3418c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34190:	48 89 c7             	mov    rdi,rax
   34193:	e8 b4 1a 00 00       	call   35c4c <__gnu_cxx::new_allocator<objl::Vector3>::new_allocator()>
   34198:	90                   	nop
   34199:	c9                   	leave  
   3419a:	c3                   	ret    
   3419b:	90                   	nop

000000000003419c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl_data::_Vector_impl_data()>:
   3419c:	55                   	push   rbp
   3419d:	48 89 e5             	mov    rbp,rsp
   341a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   341a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   341a8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   341af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   341b3:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   341bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   341bf:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   341c7:	90                   	nop
   341c8:	5d                   	pop    rbp
   341c9:	c3                   	ret    

00000000000341ca <__gnu_cxx::new_allocator<objl::Vector3>::~new_allocator()>:
   341ca:	55                   	push   rbp
   341cb:	48 89 e5             	mov    rbp,rsp
   341ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   341d2:	90                   	nop
   341d3:	5d                   	pop    rbp
   341d4:	c3                   	ret    
   341d5:	90                   	nop

00000000000341d6 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)>:
   341d6:	55                   	push   rbp
   341d7:	48 89 e5             	mov    rbp,rsp
   341da:	48 83 ec 20          	sub    rsp,0x20
   341de:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   341e2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   341e6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   341ea:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   341ef:	74 17                	je     34208 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)+0x32>
   341f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   341f5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   341f9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   341fd:	48 89 ce             	mov    rsi,rcx
   34200:	48 89 c7             	mov    rdi,rax
   34203:	e8 4f 1a 00 00       	call   35c57 <std::allocator_traits<std::allocator<objl::Vector3> >::deallocate(std::allocator<objl::Vector3>&, objl::Vector3*, unsigned long)>
   34208:	90                   	nop
   34209:	c9                   	leave  
   3420a:	c3                   	ret    
   3420b:	90                   	nop

000000000003420c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>:
   3420c:	55                   	push   rbp
   3420d:	48 89 e5             	mov    rbp,rsp
   34210:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34214:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34218:	5d                   	pop    rbp
   34219:	c3                   	ret    

000000000003421a <void std::_Destroy<objl::Vector3*, objl::Vector3>(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   3421a:	55                   	push   rbp
   3421b:	48 89 e5             	mov    rbp,rsp
   3421e:	48 83 ec 20          	sub    rsp,0x20
   34222:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34226:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3422a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3422e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   34232:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34236:	48 89 d6             	mov    rsi,rdx
   34239:	48 89 c7             	mov    rdi,rax
   3423c:	e8 44 1a 00 00       	call   35c85 <void std::_Destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>
   34241:	90                   	nop
   34242:	c9                   	leave  
   34243:	c3                   	ret    

0000000000034244 <std::allocator<objl::Vector2>::allocator()>:
   34244:	55                   	push   rbp
   34245:	48 89 e5             	mov    rbp,rsp
   34248:	48 83 ec 10          	sub    rsp,0x10
   3424c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34250:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34254:	48 89 c7             	mov    rdi,rax
   34257:	e8 50 1a 00 00       	call   35cac <__gnu_cxx::new_allocator<objl::Vector2>::new_allocator()>
   3425c:	90                   	nop
   3425d:	c9                   	leave  
   3425e:	c3                   	ret    
   3425f:	90                   	nop

0000000000034260 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl_data::_Vector_impl_data()>:
   34260:	55                   	push   rbp
   34261:	48 89 e5             	mov    rbp,rsp
   34264:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34268:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3426c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   34273:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34277:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   3427f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34283:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   3428b:	90                   	nop
   3428c:	5d                   	pop    rbp
   3428d:	c3                   	ret    

000000000003428e <__gnu_cxx::new_allocator<objl::Vector2>::~new_allocator()>:
   3428e:	55                   	push   rbp
   3428f:	48 89 e5             	mov    rbp,rsp
   34292:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34296:	90                   	nop
   34297:	5d                   	pop    rbp
   34298:	c3                   	ret    
   34299:	90                   	nop

000000000003429a <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)>:
   3429a:	55                   	push   rbp
   3429b:	48 89 e5             	mov    rbp,rsp
   3429e:	48 83 ec 20          	sub    rsp,0x20
   342a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   342a6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   342aa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   342ae:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   342b3:	74 17                	je     342cc <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)+0x32>
   342b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   342b9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   342bd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   342c1:	48 89 ce             	mov    rsi,rcx
   342c4:	48 89 c7             	mov    rdi,rax
   342c7:	e8 eb 19 00 00       	call   35cb7 <std::allocator_traits<std::allocator<objl::Vector2> >::deallocate(std::allocator<objl::Vector2>&, objl::Vector2*, unsigned long)>
   342cc:	90                   	nop
   342cd:	c9                   	leave  
   342ce:	c3                   	ret    
   342cf:	90                   	nop

00000000000342d0 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>:
   342d0:	55                   	push   rbp
   342d1:	48 89 e5             	mov    rbp,rsp
   342d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   342d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   342dc:	5d                   	pop    rbp
   342dd:	c3                   	ret    

00000000000342de <void std::_Destroy<objl::Vector2*, objl::Vector2>(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   342de:	55                   	push   rbp
   342df:	48 89 e5             	mov    rbp,rsp
   342e2:	48 83 ec 20          	sub    rsp,0x20
   342e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   342ea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   342ee:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   342f2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   342f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   342fa:	48 89 d6             	mov    rsi,rdx
   342fd:	48 89 c7             	mov    rdi,rax
   34300:	e8 e0 19 00 00       	call   35ce5 <void std::_Destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>
   34305:	90                   	nop
   34306:	c9                   	leave  
   34307:	c3                   	ret    

0000000000034308 <bool __gnu_cxx::operator==<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>:
   34308:	55                   	push   rbp
   34309:	48 89 e5             	mov    rbp,rsp
   3430c:	53                   	push   rbx
   3430d:	48 83 ec 18          	sub    rsp,0x18
   34311:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34315:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34319:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3431d:	48 89 c7             	mov    rdi,rax
   34320:	e8 e7 19 00 00       	call   35d0c <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   34325:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   34328:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3432c:	48 89 c7             	mov    rdi,rax
   3432f:	e8 d8 19 00 00       	call   35d0c <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   34334:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34337:	48 39 c3             	cmp    rbx,rax
   3433a:	0f 94 c0             	sete   al
   3433d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34341:	c9                   	leave  
   34342:	c3                   	ret    

0000000000034343 <bool __gnu_cxx::operator==<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   34343:	55                   	push   rbp
   34344:	48 89 e5             	mov    rbp,rsp
   34347:	53                   	push   rbx
   34348:	48 83 ec 18          	sub    rsp,0x18
   3434c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34350:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34354:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34358:	48 89 c7             	mov    rdi,rax
   3435b:	e8 ba 19 00 00       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   34360:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   34363:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34367:	48 89 c7             	mov    rdi,rax
   3436a:	e8 ab 19 00 00       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3436f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34372:	48 39 c3             	cmp    rbx,rax
   34375:	0f 94 c0             	sete   al
   34378:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3437c:	c9                   	leave  
   3437d:	c3                   	ret    

000000000003437e <std::remove_reference<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>::type&& std::move<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&)>:
   3437e:	55                   	push   rbp
   3437f:	48 89 e5             	mov    rbp,rsp
   34382:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34386:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3438a:	5d                   	pop    rbp
   3438b:	c3                   	ret    

000000000003438c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_move_assign(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&, std::integral_constant<bool, true>)>:
   3438c:	55                   	push   rbp
   3438d:	48 89 e5             	mov    rbp,rsp
   34390:	53                   	push   rbx
   34391:	48 83 ec 48          	sub    rsp,0x48
   34395:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   34399:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   3439d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   343a6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   343aa:	31 c0                	xor    eax,eax
   343ac:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   343b0:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   343b4:	48 89 d6             	mov    rsi,rdx
   343b7:	48 89 c7             	mov    rdi,rax
   343ba:	e8 69 19 00 00       	call   35d28 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::get_allocator() const>
   343bf:	48 8d 55 cf          	lea    rdx,[rbp-0x31]
   343c3:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   343c7:	48 89 d6             	mov    rsi,rdx
   343ca:	48 89 c7             	mov    rdi,rax
   343cd:	e8 8a 19 00 00       	call   35d5c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::allocator<objl::Vertex> const&)>
   343d2:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   343d6:	48 89 c7             	mov    rdi,rax
   343d9:	e8 78 df ff ff       	call   32356 <std::allocator<objl::Vertex>::~allocator()>
   343de:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   343e2:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   343e6:	48 89 d6             	mov    rsi,rdx
   343e9:	48 89 c7             	mov    rdi,rax
   343ec:	e8 91 19 00 00       	call   35d82 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)>
   343f1:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   343f5:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   343f9:	48 89 d6             	mov    rsi,rdx
   343fc:	48 89 c7             	mov    rdi,rax
   343ff:	e8 7e 19 00 00       	call   35d82 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)>
   34404:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   34408:	48 89 c7             	mov    rdi,rax
   3440b:	e8 5c f4 ff ff       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   34410:	48 89 c3             	mov    rbx,rax
   34413:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   34417:	48 89 c7             	mov    rdi,rax
   3441a:	e8 4d f4 ff ff       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   3441f:	48 89 de             	mov    rsi,rbx
   34422:	48 89 c7             	mov    rdi,rax
   34425:	e8 d3 19 00 00       	call   35dfd <void std::__alloc_on_move<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex>&)>
   3442a:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   3442e:	48 89 c7             	mov    rdi,rax
   34431:	e8 8a df ff ff       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   34436:	90                   	nop
   34437:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3443b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34444:	74 05                	je     3444b <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_move_assign(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&, std::integral_constant<bool, true>)+0xbf>
   34446:	e8 65 00 fd ff       	call   44b0 <__stack_chk_fail@plt>
   3444b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3444f:	c9                   	leave  
   34450:	c3                   	ret    

0000000000034451 <std::remove_reference<std::vector<unsigned int, std::allocator<unsigned int> >&>::type&& std::move<std::vector<unsigned int, std::allocator<unsigned int> >&>(std::vector<unsigned int, std::allocator<unsigned int> >&)>:
   34451:	55                   	push   rbp
   34452:	48 89 e5             	mov    rbp,rsp
   34455:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34459:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3445d:	5d                   	pop    rbp
   3445e:	c3                   	ret    
   3445f:	90                   	nop

0000000000034460 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_move_assign(std::vector<unsigned int, std::allocator<unsigned int> >&&, std::integral_constant<bool, true>)>:
   34460:	55                   	push   rbp
   34461:	48 89 e5             	mov    rbp,rsp
   34464:	53                   	push   rbx
   34465:	48 83 ec 48          	sub    rsp,0x48
   34469:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   3446d:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   34471:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3447a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3447e:	31 c0                	xor    eax,eax
   34480:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34484:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   34488:	48 89 d6             	mov    rsi,rdx
   3448b:	48 89 c7             	mov    rdi,rax
   3448e:	e8 89 19 00 00       	call   35e1c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::get_allocator() const>
   34493:	48 8d 55 cf          	lea    rdx,[rbp-0x31]
   34497:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   3449b:	48 89 d6             	mov    rsi,rdx
   3449e:	48 89 c7             	mov    rdi,rax
   344a1:	e8 aa 19 00 00       	call   35e50 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::allocator<unsigned int> const&)>
   344a6:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   344aa:	48 89 c7             	mov    rdi,rax
   344ad:	e8 a0 24 ff ff       	call   26952 <std::allocator<unsigned int>::~allocator()>
   344b2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   344b6:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   344ba:	48 89 d6             	mov    rsi,rdx
   344bd:	48 89 c7             	mov    rdi,rax
   344c0:	e8 b1 19 00 00       	call   35e76 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)>
   344c5:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   344c9:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   344cd:	48 89 d6             	mov    rsi,rdx
   344d0:	48 89 c7             	mov    rdi,rax
   344d3:	e8 9e 19 00 00       	call   35e76 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)>
   344d8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   344dc:	48 89 c7             	mov    rdi,rax
   344df:	e8 28 43 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   344e4:	48 89 c3             	mov    rbx,rax
   344e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   344eb:	48 89 c7             	mov    rdi,rax
   344ee:	e8 19 43 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   344f3:	48 89 de             	mov    rsi,rbx
   344f6:	48 89 c7             	mov    rdi,rax
   344f9:	e8 f3 19 00 00       	call   35ef1 <void std::__alloc_on_move<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int>&)>
   344fe:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   34502:	48 89 c7             	mov    rdi,rax
   34505:	e8 b2 24 ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   3450a:	90                   	nop
   3450b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3450f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34518:	74 05                	je     3451f <std::vector<unsigned int, std::allocator<unsigned int> >::_M_move_assign(std::vector<unsigned int, std::allocator<unsigned int> >&&, std::integral_constant<bool, true>)+0xbf>
   3451a:	e8 91 ff fc ff       	call   44b0 <__stack_chk_fail@plt>
   3451f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34523:	c9                   	leave  
   34524:	c3                   	ret    

0000000000034525 <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh const&>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh const&)>:
   34525:	55                   	push   rbp
   34526:	48 89 e5             	mov    rbp,rsp
   34529:	48 83 ec 20          	sub    rsp,0x20
   3452d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34531:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34535:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34539:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3453d:	48 89 c7             	mov    rdi,rax
   34540:	e8 cb 19 00 00       	call   35f10 <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>
   34545:	48 89 c2             	mov    rdx,rax
   34548:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3454c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34550:	48 89 ce             	mov    rsi,rcx
   34553:	48 89 c7             	mov    rdi,rax
   34556:	e8 79 1c 00 00       	call   361d4 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh const&>(objl::Mesh*, objl::Mesh const&)>
   3455b:	90                   	nop
   3455c:	c9                   	leave  
   3455d:	c3                   	ret    

000000000003455e <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)>:
   3455e:	55                   	push   rbp
   3455f:	48 89 e5             	mov    rbp,rsp
   34562:	53                   	push   rbx
   34563:	48 83 ec 68          	sub    rsp,0x68
   34567:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   3456b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   3456f:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   34573:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3457c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34580:	31 c0                	xor    eax,eax
   34582:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34586:	48 8d 15 f9 88 00 00 	lea    rdx,[rip+0x88f9]        # 3ce86 <NANO_SEC+0x1bbe>
   3458d:	be 01 00 00 00       	mov    esi,0x1
   34592:	48 89 c7             	mov    rdi,rax
   34595:	e8 a8 1c 00 00       	call   36242 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const>
   3459a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   3459e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   345a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   345a5:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   345a9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   345ad:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   345b1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   345b5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   345b9:	48 89 c7             	mov    rdi,rax
   345bc:	e8 2b ec ff ff       	call   331ec <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()>
   345c1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   345c5:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   345c9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   345cd:	48 89 d6             	mov    rsi,rdx
   345d0:	48 89 c7             	mov    rdi,rax
   345d3:	e8 55 1d 00 00       	call   3632d <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::difference_type __gnu_cxx::operator-<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>
   345d8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   345dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   345e0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   345e4:	48 89 d6             	mov    rsi,rdx
   345e7:	48 89 c7             	mov    rdi,rax
   345ea:	e8 8f 1d 00 00       	call   3637e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)>
   345ef:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   345f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   345f7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   345fb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   345ff:	48 89 c7             	mov    rdi,rax
   34602:	e8 09 19 00 00       	call   35f10 <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>
   34607:	48 89 c2             	mov    rdx,rax
   3460a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3460e:	48 69 c8 68 01 00 00 	imul   rcx,rax,0x168
   34615:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34619:	48 01 c1             	add    rcx,rax
   3461c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34620:	48 89 ce             	mov    rsi,rcx
   34623:	48 89 c7             	mov    rdi,rax
   34626:	e8 fa fe ff ff       	call   34525 <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh const&>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh const&)>
   3462b:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34633:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34637:	48 89 c7             	mov    rdi,rax
   3463a:	e8 13 f9 ff ff       	call   33f52 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   3463f:	48 89 c3             	mov    rbx,rax
   34642:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34646:	48 89 c7             	mov    rdi,rax
   34649:	e8 08 08 00 00       	call   34e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   3464e:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34651:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34655:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34659:	48 89 d9             	mov    rcx,rbx
   3465c:	48 89 c7             	mov    rdi,rax
   3465f:	e8 4d 1d 00 00       	call   363b1 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   34664:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34668:	48 81 45 e0 68 01 00 00 	add    QWORD PTR [rbp-0x20],0x168
   34670:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34674:	48 89 c7             	mov    rdi,rax
   34677:	e8 d6 f8 ff ff       	call   33f52 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   3467c:	48 89 c3             	mov    rbx,rax
   3467f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34683:	48 89 c7             	mov    rdi,rax
   34686:	e8 cb 07 00 00       	call   34e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   3468b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3468e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34692:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34696:	48 89 d9             	mov    rcx,rbx
   34699:	48 89 c7             	mov    rdi,rax
   3469c:	e8 10 1d 00 00       	call   363b1 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   346a1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   346a5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346a9:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   346ad:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   346b1:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   346b5:	48 89 d1             	mov    rcx,rdx
   346b8:	48 c1 f9 03          	sar    rcx,0x3
   346bc:	48 ba a5 4f fa a4 4f fa a4 4f 	movabs rdx,0x4fa4fa4fa4fa4fa5
   346c6:	48 0f af d1          	imul   rdx,rcx
   346ca:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   346ce:	48 89 ce             	mov    rsi,rcx
   346d1:	48 89 c7             	mov    rdi,rax
   346d4:	e8 43 f8 ff ff       	call   33f1c <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>
   346d9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346dd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   346e1:	48 89 10             	mov    QWORD PTR [rax],rdx
   346e4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346e8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   346ec:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   346f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   346f4:	48 69 d0 68 01 00 00 	imul   rdx,rax,0x168
   346fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   346ff:	48 01 c2             	add    rdx,rax
   34702:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34706:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   3470a:	90                   	nop
   3470b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3470f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34718:	0f 84 8d 00 00 00    	je     347ab <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x24d>
   3471e:	e9 83 00 00 00       	jmp    347a6 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x248>
   34723:	48 89 c7             	mov    rdi,rax
   34726:	e8 15 fa fc ff       	call   4140 <__cxa_begin_catch@plt>
   3472b:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   34730:	75 23                	jne    34755 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x1f7>
   34732:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34736:	48 69 d0 68 01 00 00 	imul   rdx,rax,0x168
   3473d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34741:	48 01 c2             	add    rdx,rax
   34744:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34748:	48 89 d6             	mov    rsi,rdx
   3474b:	48 89 c7             	mov    rdi,rax
   3474e:	e8 90 1c 00 00       	call   363e3 <void std::allocator_traits<std::allocator<objl::Mesh> >::destroy<objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*)>
   34753:	eb 22                	jmp    34777 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x219>
   34755:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34759:	48 89 c7             	mov    rdi,rax
   3475c:	e8 f1 f7 ff ff       	call   33f52 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   34761:	48 89 c2             	mov    rdx,rax
   34764:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   34768:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3476c:	48 89 ce             	mov    rsi,rcx
   3476f:	48 89 c7             	mov    rdi,rax
   34772:	e8 e9 f7 ff ff       	call   33f60 <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   34777:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3477b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   3477f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   34783:	48 89 ce             	mov    rsi,rcx
   34786:	48 89 c7             	mov    rdi,rax
   34789:	e8 8e f7 ff ff       	call   33f1c <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>
   3478e:	e8 8d fe fc ff       	call   4620 <__cxa_rethrow@plt>
   34793:	48 89 c3             	mov    rbx,rax
   34796:	e8 45 ff fc ff       	call   46e0 <__cxa_end_catch@plt>
   3479b:	48 89 d8             	mov    rax,rbx
   3479e:	48 89 c7             	mov    rdi,rax
   347a1:	e8 8a ff fc ff       	call   4730 <_Unwind_Resume@plt>
   347a6:	e8 05 fd fc ff       	call   44b0 <__stack_chk_fail@plt>
   347ab:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   347af:	c9                   	leave  
   347b0:	c3                   	ret    

00000000000347b1 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3 const&>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3 const&)>:
   347b1:	55                   	push   rbp
   347b2:	48 89 e5             	mov    rbp,rsp
   347b5:	48 83 ec 20          	sub    rsp,0x20
   347b9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   347bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   347c1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   347c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   347c9:	48 89 c7             	mov    rdi,rax
   347cc:	e8 38 1c 00 00       	call   36409 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>
   347d1:	48 89 c2             	mov    rdx,rax
   347d4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   347d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   347dc:	48 89 ce             	mov    rsi,rcx
   347df:	48 89 c7             	mov    rdi,rax
   347e2:	e8 31 1c 00 00       	call   36418 <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3 const&>(objl::Vector3*, objl::Vector3 const&)>
   347e7:	90                   	nop
   347e8:	c9                   	leave  
   347e9:	c3                   	ret    

00000000000347ea <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::end()>:
   347ea:	55                   	push   rbp
   347eb:	48 89 e5             	mov    rbp,rsp
   347ee:	48 83 ec 20          	sub    rsp,0x20
   347f2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   347f6:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   347ff:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34803:	31 c0                	xor    eax,eax
   34805:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34809:	48 8d 50 08          	lea    rdx,[rax+0x8]
   3480d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34811:	48 89 d6             	mov    rsi,rdx
   34814:	48 89 c7             	mov    rdi,rax
   34817:	e8 44 1c 00 00       	call   36460 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::__normal_iterator(objl::Vector3* const&)>
   3481c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34820:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   34824:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   3482d:	74 05                	je     34834 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::end()+0x4a>
   3482f:	e8 7c fc fc ff       	call   44b0 <__stack_chk_fail@plt>
   34834:	c9                   	leave  
   34835:	c3                   	ret    

0000000000034836 <void std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_realloc_insert<objl::Vector3 const&>(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >, objl::Vector3 const&)>:
   34836:	55                   	push   rbp
   34837:	48 89 e5             	mov    rbp,rsp
   3483a:	53                   	push   rbx
   3483b:	48 83 ec 68          	sub    rsp,0x68
   3483f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   34843:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34847:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   3484b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34854:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34858:	31 c0                	xor    eax,eax
   3485a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3485e:	48 8d 15 21 86 00 00 	lea    rdx,[rip+0x8621]        # 3ce86 <NANO_SEC+0x1bbe>
   34865:	be 01 00 00 00       	mov    esi,0x1
   3486a:	48 89 c7             	mov    rdi,rax
   3486d:	e8 0c 1c 00 00       	call   3647e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const>
   34872:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   34876:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3487a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3487d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   34881:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34885:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34889:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   3488d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34891:	48 89 c7             	mov    rdi,rax
   34894:	e8 d1 1c 00 00       	call   3656a <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::begin()>
   34899:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   3489d:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   348a1:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   348a5:	48 89 d6             	mov    rsi,rdx
   348a8:	48 89 c7             	mov    rdi,rax
   348ab:	e8 02 1d 00 00       	call   365b2 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::difference_type __gnu_cxx::operator-<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&, __gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&)>
   348b0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   348b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   348b8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   348bc:	48 89 d6             	mov    rsi,rdx
   348bf:	48 89 c7             	mov    rdi,rax
   348c2:	e8 3b 1d 00 00       	call   36602 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)>
   348c7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   348cb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   348cf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   348d3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   348d7:	48 89 c7             	mov    rdi,rax
   348da:	e8 2a 1b 00 00       	call   36409 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>
   348df:	48 89 c6             	mov    rsi,rax
   348e2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   348e6:	48 89 d0             	mov    rax,rdx
   348e9:	48 01 c0             	add    rax,rax
   348ec:	48 01 d0             	add    rax,rdx
   348ef:	48 c1 e0 02          	shl    rax,0x2
   348f3:	48 89 c2             	mov    rdx,rax
   348f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   348fa:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   348fe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34902:	48 89 f2             	mov    rdx,rsi
   34905:	48 89 ce             	mov    rsi,rcx
   34908:	48 89 c7             	mov    rdi,rax
   3490b:	e8 a1 fe ff ff       	call   347b1 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3 const&>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3 const&)>
   34910:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34918:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3491c:	48 89 c7             	mov    rdi,rax
   3491f:	e8 e8 f8 ff ff       	call   3420c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>
   34924:	48 89 c3             	mov    rbx,rax
   34927:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   3492b:	48 89 c7             	mov    rdi,rax
   3492e:	e8 35 1d 00 00       	call   36668 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   34933:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34936:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3493a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3493e:	48 89 d9             	mov    rcx,rbx
   34941:	48 89 c7             	mov    rdi,rax
   34944:	e8 ec 1c 00 00       	call   36635 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   34949:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   3494d:	48 83 45 e0 0c       	add    QWORD PTR [rbp-0x20],0xc
   34952:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34956:	48 89 c7             	mov    rdi,rax
   34959:	e8 ae f8 ff ff       	call   3420c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>
   3495e:	48 89 c3             	mov    rbx,rax
   34961:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34965:	48 89 c7             	mov    rdi,rax
   34968:	e8 fb 1c 00 00       	call   36668 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   3496d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34970:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34974:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34978:	48 89 d9             	mov    rcx,rbx
   3497b:	48 89 c7             	mov    rdi,rax
   3497e:	e8 b2 1c 00 00       	call   36635 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   34983:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34987:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3498b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   3498f:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   34993:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   34997:	48 89 d1             	mov    rcx,rdx
   3499a:	48 c1 f9 02          	sar    rcx,0x2
   3499e:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   349a8:	48 0f af d1          	imul   rdx,rcx
   349ac:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   349b0:	48 89 ce             	mov    rsi,rcx
   349b3:	48 89 c7             	mov    rdi,rax
   349b6:	e8 1b f8 ff ff       	call   341d6 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)>
   349bb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   349bf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   349c3:	48 89 10             	mov    QWORD PTR [rax],rdx
   349c6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   349ca:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   349ce:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   349d2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   349d6:	48 89 d0             	mov    rax,rdx
   349d9:	48 01 c0             	add    rax,rax
   349dc:	48 01 d0             	add    rax,rdx
   349df:	48 c1 e0 02          	shl    rax,0x2
   349e3:	48 89 c2             	mov    rdx,rax
   349e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   349ea:	48 01 c2             	add    rdx,rax
   349ed:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   349f1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   349f5:	90                   	nop
   349f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   349fa:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34a03:	74 05                	je     34a0a <void std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_realloc_insert<objl::Vector3 const&>(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >, objl::Vector3 const&)+0x1d4>
   34a05:	e8 a6 fa fc ff       	call   44b0 <__stack_chk_fail@plt>
   34a0a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34a0e:	c9                   	leave  
   34a0f:	c3                   	ret    

0000000000034a10 <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2 const&>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2 const&)>:
   34a10:	55                   	push   rbp
   34a11:	48 89 e5             	mov    rbp,rsp
   34a14:	48 83 ec 20          	sub    rsp,0x20
   34a18:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34a1c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34a20:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34a24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34a28:	48 89 c7             	mov    rdi,rax
   34a2b:	e8 6c 1c 00 00       	call   3669c <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>
   34a30:	48 89 c2             	mov    rdx,rax
   34a33:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34a37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34a3b:	48 89 ce             	mov    rsi,rcx
   34a3e:	48 89 c7             	mov    rdi,rax
   34a41:	e8 64 1c 00 00       	call   366aa <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2 const&>(objl::Vector2*, objl::Vector2 const&)>
   34a46:	90                   	nop
   34a47:	c9                   	leave  
   34a48:	c3                   	ret    
   34a49:	90                   	nop

0000000000034a4a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::end()>:
   34a4a:	55                   	push   rbp
   34a4b:	48 89 e5             	mov    rbp,rsp
   34a4e:	48 83 ec 20          	sub    rsp,0x20
   34a52:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34a56:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34a5f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34a63:	31 c0                	xor    eax,eax
   34a65:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34a69:	48 8d 50 08          	lea    rdx,[rax+0x8]
   34a6d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34a71:	48 89 d6             	mov    rsi,rdx
   34a74:	48 89 c7             	mov    rdi,rax
   34a77:	e8 70 1c 00 00       	call   366ec <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::__normal_iterator(objl::Vector2* const&)>
   34a7c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34a80:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   34a84:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   34a8d:	74 05                	je     34a94 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::end()+0x4a>
   34a8f:	e8 1c fa fc ff       	call   44b0 <__stack_chk_fail@plt>
   34a94:	c9                   	leave  
   34a95:	c3                   	ret    

0000000000034a96 <void std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_realloc_insert<objl::Vector2 const&>(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >, objl::Vector2 const&)>:
   34a96:	55                   	push   rbp
   34a97:	48 89 e5             	mov    rbp,rsp
   34a9a:	53                   	push   rbx
   34a9b:	48 83 ec 68          	sub    rsp,0x68
   34a9f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   34aa3:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34aa7:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   34aab:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34ab4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34ab8:	31 c0                	xor    eax,eax
   34aba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34abe:	48 8d 15 c1 83 00 00 	lea    rdx,[rip+0x83c1]        # 3ce86 <NANO_SEC+0x1bbe>
   34ac5:	be 01 00 00 00       	mov    esi,0x1
   34aca:	48 89 c7             	mov    rdi,rax
   34acd:	e8 38 1c 00 00       	call   3670a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const>
   34ad2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   34ad6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ada:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34add:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   34ae1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ae5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34ae9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   34aed:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34af1:	48 89 c7             	mov    rdi,rax
   34af4:	e8 fd 1c 00 00       	call   367f6 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::begin()>
   34af9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   34afd:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   34b01:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34b05:	48 89 d6             	mov    rsi,rdx
   34b08:	48 89 c7             	mov    rdi,rax
   34b0b:	e8 2e 1d 00 00       	call   3683e <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::difference_type __gnu_cxx::operator-<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&, __gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&)>
   34b10:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   34b14:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34b18:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34b1c:	48 89 d6             	mov    rsi,rdx
   34b1f:	48 89 c7             	mov    rdi,rax
   34b22:	e8 57 1d 00 00       	call   3687e <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)>
   34b27:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   34b2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34b2f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34b33:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   34b37:	48 89 c7             	mov    rdi,rax
   34b3a:	e8 5d 1b 00 00       	call   3669c <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>
   34b3f:	48 89 c2             	mov    rdx,rax
   34b42:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34b46:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   34b4e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34b52:	48 01 c1             	add    rcx,rax
   34b55:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34b59:	48 89 ce             	mov    rsi,rcx
   34b5c:	48 89 c7             	mov    rdi,rax
   34b5f:	e8 ac fe ff ff       	call   34a10 <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2 const&>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2 const&)>
   34b64:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34b6c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34b70:	48 89 c7             	mov    rdi,rax
   34b73:	e8 58 f7 ff ff       	call   342d0 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>
   34b78:	48 89 c3             	mov    rbx,rax
   34b7b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34b7f:	48 89 c7             	mov    rdi,rax
   34b82:	e8 5d 1d 00 00       	call   368e4 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   34b87:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34b8a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34b8e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34b92:	48 89 d9             	mov    rcx,rbx
   34b95:	48 89 c7             	mov    rdi,rax
   34b98:	e8 14 1d 00 00       	call   368b1 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   34b9d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34ba1:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
   34ba6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34baa:	48 89 c7             	mov    rdi,rax
   34bad:	e8 1e f7 ff ff       	call   342d0 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>
   34bb2:	48 89 c3             	mov    rbx,rax
   34bb5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34bb9:	48 89 c7             	mov    rdi,rax
   34bbc:	e8 23 1d 00 00       	call   368e4 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   34bc1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34bc4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34bc8:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34bcc:	48 89 d9             	mov    rcx,rbx
   34bcf:	48 89 c7             	mov    rdi,rax
   34bd2:	e8 da 1c 00 00       	call   368b1 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   34bd7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34bdb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34bdf:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   34be3:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   34be7:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   34beb:	48 c1 fa 03          	sar    rdx,0x3
   34bef:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   34bf3:	48 89 ce             	mov    rsi,rcx
   34bf6:	48 89 c7             	mov    rdi,rax
   34bf9:	e8 9c f6 ff ff       	call   3429a <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)>
   34bfe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34c02:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34c06:	48 89 10             	mov    QWORD PTR [rax],rdx
   34c09:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34c0d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34c11:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34c15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   34c19:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   34c21:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34c25:	48 01 c2             	add    rdx,rax
   34c28:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34c2c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   34c30:	90                   	nop
   34c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34c35:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34c3e:	74 05                	je     34c45 <void std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_realloc_insert<objl::Vector2 const&>(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >, objl::Vector2 const&)+0x1af>
   34c40:	e8 6b f8 fc ff       	call   44b0 <__stack_chk_fail@plt>
   34c45:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34c49:	c9                   	leave  
   34c4a:	c3                   	ret    

0000000000034c4b <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex const&>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex const&)>:
   34c4b:	55                   	push   rbp
   34c4c:	48 89 e5             	mov    rbp,rsp
   34c4f:	48 83 ec 20          	sub    rsp,0x20
   34c53:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34c57:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34c5b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34c5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34c63:	48 89 c7             	mov    rdi,rax
   34c66:	e8 ad 1c 00 00       	call   36918 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   34c6b:	48 89 c2             	mov    rdx,rax
   34c6e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34c72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34c76:	48 89 ce             	mov    rsi,rcx
   34c79:	48 89 c7             	mov    rdi,rax
   34c7c:	e8 a5 1c 00 00       	call   36926 <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>
   34c81:	90                   	nop
   34c82:	c9                   	leave  
   34c83:	c3                   	ret    

0000000000034c84 <void std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_realloc_insert<objl::Vertex const&>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex const&)>:
   34c84:	55                   	push   rbp
   34c85:	48 89 e5             	mov    rbp,rsp
   34c88:	53                   	push   rbx
   34c89:	48 83 ec 68          	sub    rsp,0x68
   34c8d:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   34c91:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34c95:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   34c99:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34ca2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34ca6:	31 c0                	xor    eax,eax
   34ca8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34cac:	48 8d 15 d3 81 00 00 	lea    rdx,[rip+0x81d3]        # 3ce86 <NANO_SEC+0x1bbe>
   34cb3:	be 01 00 00 00       	mov    esi,0x1
   34cb8:	48 89 c7             	mov    rdi,rax
   34cbb:	e8 c4 1c 00 00       	call   36984 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const>
   34cc0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   34cc4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34cc8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34ccb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   34ccf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34cd3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34cd7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   34cdb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34cdf:	48 89 c7             	mov    rdi,rax
   34ce2:	e8 b1 e8 ff ff       	call   33598 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   34ce7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   34ceb:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   34cef:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34cf3:	48 89 d6             	mov    rsi,rdx
   34cf6:	48 89 c7             	mov    rdi,rax
   34cf9:	e8 71 1d 00 00       	call   36a6f <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   34cfe:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   34d02:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d06:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34d0a:	48 89 d6             	mov    rsi,rdx
   34d0d:	48 89 c7             	mov    rdi,rax
   34d10:	e8 51 09 00 00       	call   35666 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>
   34d15:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   34d19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34d1d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34d21:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   34d25:	48 89 c7             	mov    rdi,rax
   34d28:	e8 eb 1b 00 00       	call   36918 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   34d2d:	48 89 c2             	mov    rdx,rax
   34d30:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34d34:	48 c1 e0 05          	shl    rax,0x5
   34d38:	48 89 c1             	mov    rcx,rax
   34d3b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34d3f:	48 01 c1             	add    rcx,rax
   34d42:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d46:	48 89 ce             	mov    rsi,rcx
   34d49:	48 89 c7             	mov    rdi,rax
   34d4c:	e8 fa fe ff ff       	call   34c4b <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex const&>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex const&)>
   34d51:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34d59:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d5d:	48 89 c7             	mov    rdi,rax
   34d60:	e8 07 eb ff ff       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   34d65:	48 89 c3             	mov    rbx,rax
   34d68:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34d6c:	48 89 c7             	mov    rdi,rax
   34d6f:	e8 5a 03 00 00       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   34d74:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34d77:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34d7b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34d7f:	48 89 d9             	mov    rcx,rbx
   34d82:	48 89 c7             	mov    rdi,rax
   34d85:	e8 24 1d 00 00       	call   36aae <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   34d8a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34d8e:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   34d93:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d97:	48 89 c7             	mov    rdi,rax
   34d9a:	e8 cd ea ff ff       	call   3386c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   34d9f:	48 89 c3             	mov    rbx,rax
   34da2:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34da6:	48 89 c7             	mov    rdi,rax
   34da9:	e8 20 03 00 00       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   34dae:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34db1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34db5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34db9:	48 89 d9             	mov    rcx,rbx
   34dbc:	48 89 c7             	mov    rdi,rax
   34dbf:	e8 ea 1c 00 00       	call   36aae <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   34dc4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34dc8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34dcc:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   34dd0:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   34dd4:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   34dd8:	48 c1 fa 05          	sar    rdx,0x5
   34ddc:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   34de0:	48 89 ce             	mov    rsi,rcx
   34de3:	48 89 c7             	mov    rdi,rax
   34de6:	e8 4b ea ff ff       	call   33836 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   34deb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34def:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34df3:	48 89 10             	mov    QWORD PTR [rax],rdx
   34df6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34dfa:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34dfe:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34e02:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   34e06:	48 c1 e0 05          	shl    rax,0x5
   34e0a:	48 89 c2             	mov    rdx,rax
   34e0d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34e11:	48 01 c2             	add    rdx,rax
   34e14:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34e18:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   34e1c:	90                   	nop
   34e1d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34e21:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34e2a:	74 05                	je     34e31 <void std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_realloc_insert<objl::Vertex const&>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex const&)+0x1ad>
   34e2c:	e8 7f f6 fc ff       	call   44b0 <__stack_chk_fail@plt>
   34e31:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34e35:	c9                   	leave  
   34e36:	c3                   	ret    
   34e37:	90                   	nop

0000000000034e38 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh* const&)>:
   34e38:	55                   	push   rbp
   34e39:	48 89 e5             	mov    rbp,rsp
   34e3c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34e40:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34e44:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34e48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   34e4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34e4f:	48 89 10             	mov    QWORD PTR [rax],rdx
   34e52:	90                   	nop
   34e53:	5d                   	pop    rbp
   34e54:	c3                   	ret    
   34e55:	90                   	nop

0000000000034e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>:
   34e56:	55                   	push   rbp
   34e57:	48 89 e5             	mov    rbp,rsp
   34e5a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34e5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34e62:	5d                   	pop    rbp
   34e63:	c3                   	ret    

0000000000034e64 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin() const>:
   34e64:	55                   	push   rbp
   34e65:	48 89 e5             	mov    rbp,rsp
   34e68:	48 83 ec 20          	sub    rsp,0x20
   34e6c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34e70:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34e79:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34e7d:	31 c0                	xor    eax,eax
   34e7f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   34e83:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34e87:	48 89 d6             	mov    rsi,rdx
   34e8a:	48 89 c7             	mov    rdi,rax
   34e8d:	e8 74 1c 00 00       	call   36b06 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh const* const&)>
   34e92:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34e96:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   34e9a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   34ea3:	74 05                	je     34eaa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin() const+0x46>
   34ea5:	e8 06 f6 fc ff       	call   44b0 <__stack_chk_fail@plt>
   34eaa:	c9                   	leave  
   34eab:	c3                   	ret    

0000000000034eac <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end() const>:
   34eac:	55                   	push   rbp
   34ead:	48 89 e5             	mov    rbp,rsp
   34eb0:	48 83 ec 20          	sub    rsp,0x20
   34eb4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34eb8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34ec1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34ec5:	31 c0                	xor    eax,eax
   34ec7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34ecb:	48 8d 50 08          	lea    rdx,[rax+0x8]
   34ecf:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34ed3:	48 89 d6             	mov    rsi,rdx
   34ed6:	48 89 c7             	mov    rdi,rax
   34ed9:	e8 28 1c 00 00       	call   36b06 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh const* const&)>
   34ede:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34ee2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   34ee6:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   34eef:	74 05                	je     34ef6 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end() const+0x4a>
   34ef1:	e8 ba f5 fc ff       	call   44b0 <__stack_chk_fail@plt>
   34ef6:	c9                   	leave  
   34ef7:	c3                   	ret    

0000000000034ef8 <bool __gnu_cxx::operator==<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>:
   34ef8:	55                   	push   rbp
   34ef9:	48 89 e5             	mov    rbp,rsp
   34efc:	53                   	push   rbx
   34efd:	48 83 ec 18          	sub    rsp,0x18
   34f01:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34f05:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34f09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34f0d:	48 89 c7             	mov    rdi,rax
   34f10:	e8 0f 1c 00 00       	call   36b24 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   34f15:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   34f18:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34f1c:	48 89 c7             	mov    rdi,rax
   34f1f:	e8 00 1c 00 00       	call   36b24 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   34f24:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34f27:	48 39 c3             	cmp    rbx,rax
   34f2a:	0f 94 c0             	sete   al
   34f2d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34f31:	c9                   	leave  
   34f32:	c3                   	ret    
   34f33:	90                   	nop

0000000000034f34 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>:
   34f34:	55                   	push   rbp
   34f35:	48 89 e5             	mov    rbp,rsp
   34f38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34f3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34f40:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   34f44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34f48:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   34f4b:	48 89 d0             	mov    rax,rdx
   34f4e:	48 29 c8             	sub    rax,rcx
   34f51:	48 c1 f8 02          	sar    rax,0x2
   34f55:	48 89 c2             	mov    rdx,rax
   34f58:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   34f62:	48 0f af c2          	imul   rax,rdx
   34f66:	5d                   	pop    rbp
   34f67:	c3                   	ret    

0000000000034f68 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::operator[](unsigned long) const>:
   34f68:	55                   	push   rbp
   34f69:	48 89 e5             	mov    rbp,rsp
   34f6c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34f70:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34f74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34f78:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   34f7b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   34f7f:	48 89 d0             	mov    rax,rdx
   34f82:	48 01 c0             	add    rax,rax
   34f85:	48 01 d0             	add    rax,rdx
   34f88:	48 c1 e0 02          	shl    rax,0x2
   34f8c:	48 01 c8             	add    rax,rcx
   34f8f:	5d                   	pop    rbp
   34f90:	c3                   	ret    
   34f91:	90                   	nop

0000000000034f92 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>:
   34f92:	55                   	push   rbp
   34f93:	48 89 e5             	mov    rbp,rsp
   34f96:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34f9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34f9e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   34fa2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34fa6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   34fa9:	48 89 d0             	mov    rax,rdx
   34fac:	48 29 c8             	sub    rax,rcx
   34faf:	48 c1 f8 03          	sar    rax,0x3
   34fb3:	5d                   	pop    rbp
   34fb4:	c3                   	ret    
   34fb5:	90                   	nop

0000000000034fb6 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::operator[](unsigned long) const>:
   34fb6:	55                   	push   rbp
   34fb7:	48 89 e5             	mov    rbp,rsp
   34fba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34fbe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34fc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34fc6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   34fc9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34fcd:	48 c1 e0 03          	shl    rax,0x3
   34fd1:	48 01 d0             	add    rax,rdx
   34fd4:	5d                   	pop    rbp
   34fd5:	c3                   	ret    

0000000000034fd6 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_select_on_copy(std::allocator<objl::Vertex> const&)>:
   34fd6:	55                   	push   rbp
   34fd7:	48 89 e5             	mov    rbp,rsp
   34fda:	48 83 ec 20          	sub    rsp,0x20
   34fde:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34fe2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34fe6:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34fef:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34ff3:	31 c0                	xor    eax,eax
   34ff5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34ff9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34ffd:	48 89 d6             	mov    rsi,rdx
   35000:	48 89 c7             	mov    rdi,rax
   35003:	e8 2a 1b 00 00       	call   36b32 <std::allocator_traits<std::allocator<objl::Vertex> >::select_on_container_copy_construction(std::allocator<objl::Vertex> const&)>
   35008:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3500c:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35015:	74 05                	je     3501c <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_select_on_copy(std::allocator<objl::Vertex> const&)+0x46>
   35017:	e8 94 f4 fc ff       	call   44b0 <__stack_chk_fail@plt>
   3501c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35020:	c9                   	leave  
   35021:	c3                   	ret    

0000000000035022 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(unsigned long, std::allocator<objl::Vertex> const&)>:
   35022:	55                   	push   rbp
   35023:	48 89 e5             	mov    rbp,rsp
   35026:	53                   	push   rbx
   35027:	48 83 ec 28          	sub    rsp,0x28
   3502b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3502f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35033:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   35037:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3503b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3503f:	48 89 d6             	mov    rsi,rdx
   35042:	48 89 c7             	mov    rdi,rax
   35045:	e8 12 1b 00 00       	call   36b5c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::allocator<objl::Vertex> const&)>
   3504a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3504e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35052:	48 89 d6             	mov    rsi,rdx
   35055:	48 89 c7             	mov    rdi,rax
   35058:	e8 31 1b 00 00       	call   36b8e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_create_storage(unsigned long)>
   3505d:	eb 1a                	jmp    35079 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(unsigned long, std::allocator<objl::Vertex> const&)+0x57>
   3505f:	48 89 c3             	mov    rbx,rax
   35062:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35066:	48 89 c7             	mov    rdi,rax
   35069:	e8 b0 c1 ff ff       	call   3121e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::~_Vector_impl()>
   3506e:	48 89 d8             	mov    rax,rbx
   35071:	48 89 c7             	mov    rdi,rax
   35074:	e8 b7 f6 fc ff       	call   4730 <_Unwind_Resume@plt>
   35079:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3507d:	c9                   	leave  
   3507e:	c3                   	ret    

000000000003507f <objl::Vertex* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   3507f:	55                   	push   rbp
   35080:	48 89 e5             	mov    rbp,rsp
   35083:	48 83 ec 20          	sub    rsp,0x20
   35087:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3508b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3508f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35093:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   35097:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3509b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3509f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   350a3:	48 89 ce             	mov    rsi,rcx
   350a6:	48 89 c7             	mov    rdi,rax
   350a9:	e8 36 1b 00 00       	call   36be4 <objl::Vertex* std::uninitialized_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   350ae:	c9                   	leave  
   350af:	c3                   	ret    

00000000000350b0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>:
   350b0:	55                   	push   rbp
   350b1:	48 89 e5             	mov    rbp,rsp
   350b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   350b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   350bc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   350c0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   350c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   350c7:	48 89 10             	mov    QWORD PTR [rax],rdx
   350ca:	90                   	nop
   350cb:	5d                   	pop    rbp
   350cc:	c3                   	ret    
   350cd:	90                   	nop

00000000000350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>:
   350ce:	55                   	push   rbp
   350cf:	48 89 e5             	mov    rbp,rsp
   350d2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   350d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   350da:	5d                   	pop    rbp
   350db:	c3                   	ret    

00000000000350dc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::cbegin() const>:
   350dc:	55                   	push   rbp
   350dd:	48 89 e5             	mov    rbp,rsp
   350e0:	48 83 ec 20          	sub    rsp,0x20
   350e4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   350e8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   350f1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   350f5:	31 c0                	xor    eax,eax
   350f7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   350fb:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   350ff:	48 89 d6             	mov    rsi,rdx
   35102:	48 89 c7             	mov    rdi,rax
   35105:	e8 3e 05 00 00       	call   35648 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>
   3510a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3510e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   35112:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   3511b:	74 05                	je     35122 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::cbegin() const+0x46>
   3511d:	e8 8e f3 fc ff       	call   44b0 <__stack_chk_fail@plt>
   35122:	c9                   	leave  
   35123:	c3                   	ret    

0000000000035124 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   35124:	55                   	push   rbp
   35125:	48 89 e5             	mov    rbp,rsp
   35128:	53                   	push   rbx
   35129:	48 83 ec 18          	sub    rsp,0x18
   3512d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35131:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35135:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35139:	48 89 c7             	mov    rdi,rax
   3513c:	e8 d9 0b 00 00       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   35141:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   35144:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35148:	48 89 c7             	mov    rdi,rax
   3514b:	e8 ca 0b 00 00       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   35150:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   35153:	48 89 d8             	mov    rax,rbx
   35156:	48 29 d0             	sub    rax,rdx
   35159:	48 c1 f8 05          	sar    rax,0x5
   3515d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   35161:	c9                   	leave  
   35162:	c3                   	ret    
   35163:	90                   	nop

0000000000035164 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   35164:	55                   	push   rbp
   35165:	48 89 e5             	mov    rbp,rsp
   35168:	53                   	push   rbx
   35169:	48 83 ec 38          	sub    rsp,0x38
   3516d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   35171:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   35175:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3517e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   35182:	31 c0                	xor    eax,eax
   35184:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   35188:	48 89 c7             	mov    rdi,rax
   3518b:	e8 de e8 ff ff       	call   33a6e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   35190:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35194:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   35198:	be 01 00 00 00       	mov    esi,0x1
   3519d:	48 89 c7             	mov    rdi,rax
   351a0:	e8 3b e4 ff ff       	call   335e0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   351a5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   351a9:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   351ad:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   351b1:	48 89 d6             	mov    rsi,rdx
   351b4:	48 89 c7             	mov    rdi,rax
   351b7:	e8 59 1a 00 00       	call   36c15 <bool __gnu_cxx::operator!=<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   351bc:	84 c0                	test   al,al
   351be:	74 35                	je     351f5 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0x91>
   351c0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   351c4:	48 89 c7             	mov    rdi,rax
   351c7:	e8 a2 e8 ff ff       	call   33a6e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   351cc:	48 89 c3             	mov    rbx,rax
   351cf:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   351d3:	be 01 00 00 00       	mov    esi,0x1
   351d8:	48 89 c7             	mov    rdi,rax
   351db:	e8 00 e4 ff ff       	call   335e0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   351e0:	48 89 c1             	mov    rcx,rax
   351e3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   351e7:	48 89 c2             	mov    rdx,rax
   351ea:	48 89 de             	mov    rsi,rbx
   351ed:	48 89 cf             	mov    rdi,rcx
   351f0:	e8 5b 1a 00 00       	call   36c50 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::move<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   351f5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   351f9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   351fd:	48 8d 50 e0          	lea    rdx,[rax-0x20]
   35201:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   35205:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   35209:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3520d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   35211:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   35215:	48 89 d6             	mov    rsi,rdx
   35218:	48 89 c7             	mov    rdi,rax
   3521b:	e8 c0 18 00 00       	call   36ae0 <void std::allocator_traits<std::allocator<objl::Vertex> >::destroy<objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*)>
   35220:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   35224:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   35228:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   35231:	74 05                	je     35238 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0xd4>
   35233:	e8 78 f2 fc ff       	call   44b0 <__stack_chk_fail@plt>
   35238:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3523c:	c9                   	leave  
   3523d:	c3                   	ret    

000000000003523e <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material const&>(std::allocator<objl::Material>&, objl::Material*, objl::Material const&)>:
   3523e:	55                   	push   rbp
   3523f:	48 89 e5             	mov    rbp,rsp
   35242:	48 83 ec 20          	sub    rsp,0x20
   35246:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3524a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3524e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35252:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35256:	48 89 c7             	mov    rdi,rax
   35259:	e8 3d 1a 00 00       	call   36c9b <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>
   3525e:	48 89 c2             	mov    rdx,rax
   35261:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35265:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35269:	48 89 ce             	mov    rsi,rcx
   3526c:	48 89 c7             	mov    rdi,rax
   3526f:	e8 36 1a 00 00       	call   36caa <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material const&>(objl::Material*, objl::Material const&)>
   35274:	90                   	nop
   35275:	c9                   	leave  
   35276:	c3                   	ret    
   35277:	90                   	nop

0000000000035278 <std::vector<objl::Material, std::allocator<objl::Material> >::end()>:
   35278:	55                   	push   rbp
   35279:	48 89 e5             	mov    rbp,rsp
   3527c:	48 83 ec 20          	sub    rsp,0x20
   35280:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35284:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3528d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35291:	31 c0                	xor    eax,eax
   35293:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35297:	48 8d 50 08          	lea    rdx,[rax+0x8]
   3529b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3529f:	48 89 d6             	mov    rsi,rdx
   352a2:	48 89 c7             	mov    rdi,rax
   352a5:	e8 6e 1a 00 00       	call   36d18 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material* const&)>
   352aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   352ae:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   352b2:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   352bb:	74 05                	je     352c2 <std::vector<objl::Material, std::allocator<objl::Material> >::end()+0x4a>
   352bd:	e8 ee f1 fc ff       	call   44b0 <__stack_chk_fail@plt>
   352c2:	c9                   	leave  
   352c3:	c3                   	ret    

00000000000352c4 <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)>:
   352c4:	55                   	push   rbp
   352c5:	48 89 e5             	mov    rbp,rsp
   352c8:	53                   	push   rbx
   352c9:	48 83 ec 68          	sub    rsp,0x68
   352cd:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   352d1:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   352d5:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   352d9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   352e2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   352e6:	31 c0                	xor    eax,eax
   352e8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   352ec:	48 8d 15 93 7b 00 00 	lea    rdx,[rip+0x7b93]        # 3ce86 <NANO_SEC+0x1bbe>
   352f3:	be 01 00 00 00       	mov    esi,0x1
   352f8:	48 89 c7             	mov    rdi,rax
   352fb:	e8 36 1a 00 00       	call   36d36 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const>
   35300:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   35304:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35308:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3530b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   3530f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35313:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   35317:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   3531b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3531f:	48 89 c7             	mov    rdi,rax
   35322:	e8 fb 1a 00 00       	call   36e22 <std::vector<objl::Material, std::allocator<objl::Material> >::begin()>
   35327:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   3532b:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   3532f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   35333:	48 89 d6             	mov    rsi,rdx
   35336:	48 89 c7             	mov    rdi,rax
   35339:	e8 2c 1b 00 00       	call   36e6a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::difference_type __gnu_cxx::operator-<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>
   3533e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   35342:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35346:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   3534a:	48 89 d6             	mov    rsi,rdx
   3534d:	48 89 c7             	mov    rdi,rax
   35350:	e8 65 1b 00 00       	call   36eba <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)>
   35355:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   35359:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3535d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35361:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   35365:	48 89 c7             	mov    rdi,rax
   35368:	e8 2e 19 00 00       	call   36c9b <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>
   3536d:	48 89 c2             	mov    rdx,rax
   35370:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35374:	48 69 c8 18 01 00 00 	imul   rcx,rax,0x118
   3537b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3537f:	48 01 c1             	add    rcx,rax
   35382:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35386:	48 89 ce             	mov    rsi,rcx
   35389:	48 89 c7             	mov    rdi,rax
   3538c:	e8 ad fe ff ff       	call   3523e <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material const&>(std::allocator<objl::Material>&, objl::Material*, objl::Material const&)>
   35391:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   35399:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3539d:	48 89 c7             	mov    rdi,rax
   353a0:	e8 71 ec ff ff       	call   34016 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   353a5:	48 89 c3             	mov    rbx,rax
   353a8:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   353ac:	48 89 c7             	mov    rdi,rax
   353af:	e8 6c 1b 00 00       	call   36f20 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   353b4:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   353b7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   353bb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   353bf:	48 89 d9             	mov    rcx,rbx
   353c2:	48 89 c7             	mov    rdi,rax
   353c5:	e8 23 1b 00 00       	call   36eed <std::vector<objl::Material, std::allocator<objl::Material> >::_S_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   353ca:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   353ce:	48 81 45 e0 18 01 00 00 	add    QWORD PTR [rbp-0x20],0x118
   353d6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   353da:	48 89 c7             	mov    rdi,rax
   353dd:	e8 34 ec ff ff       	call   34016 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   353e2:	48 89 c3             	mov    rbx,rax
   353e5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   353e9:	48 89 c7             	mov    rdi,rax
   353ec:	e8 2f 1b 00 00       	call   36f20 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   353f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   353f4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   353f8:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   353fc:	48 89 d9             	mov    rcx,rbx
   353ff:	48 89 c7             	mov    rdi,rax
   35402:	e8 e6 1a 00 00       	call   36eed <std::vector<objl::Material, std::allocator<objl::Material> >::_S_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   35407:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   3540b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3540f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   35413:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   35417:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   3541b:	48 89 d1             	mov    rcx,rdx
   3541e:	48 c1 f9 03          	sar    rcx,0x3
   35422:	48 ba 8b af f8 8a af f8 8a af 	movabs rdx,0xaf8af8af8af8af8b
   3542c:	48 0f af d1          	imul   rdx,rcx
   35430:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   35434:	48 89 ce             	mov    rsi,rcx
   35437:	48 89 c7             	mov    rdi,rax
   3543a:	e8 a1 eb ff ff       	call   33fe0 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>
   3543f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35443:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35447:	48 89 10             	mov    QWORD PTR [rax],rdx
   3544a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3544e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35452:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   35456:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   3545a:	48 69 d0 18 01 00 00 	imul   rdx,rax,0x118
   35461:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35465:	48 01 c2             	add    rdx,rax
   35468:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3546c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   35470:	90                   	nop
   35471:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35475:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3547e:	0f 84 8d 00 00 00    	je     35511 <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x24d>
   35484:	e9 83 00 00 00       	jmp    3550c <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x248>
   35489:	48 89 c7             	mov    rdi,rax
   3548c:	e8 af ec fc ff       	call   4140 <__cxa_begin_catch@plt>
   35491:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   35496:	75 23                	jne    354bb <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x1f7>
   35498:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3549c:	48 69 d0 18 01 00 00 	imul   rdx,rax,0x118
   354a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   354a7:	48 01 c2             	add    rdx,rax
   354aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   354ae:	48 89 d6             	mov    rsi,rdx
   354b1:	48 89 c7             	mov    rdi,rax
   354b4:	e8 75 1a 00 00       	call   36f2e <void std::allocator_traits<std::allocator<objl::Material> >::destroy<objl::Material>(std::allocator<objl::Material>&, objl::Material*)>
   354b9:	eb 22                	jmp    354dd <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x219>
   354bb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   354bf:	48 89 c7             	mov    rdi,rax
   354c2:	e8 4f eb ff ff       	call   34016 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   354c7:	48 89 c2             	mov    rdx,rax
   354ca:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   354ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   354d2:	48 89 ce             	mov    rsi,rcx
   354d5:	48 89 c7             	mov    rdi,rax
   354d8:	e8 47 eb ff ff       	call   34024 <void std::_Destroy<objl::Material*, objl::Material>(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   354dd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   354e1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   354e5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   354e9:	48 89 ce             	mov    rsi,rcx
   354ec:	48 89 c7             	mov    rdi,rax
   354ef:	e8 ec ea ff ff       	call   33fe0 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>
   354f4:	e8 27 f1 fc ff       	call   4620 <__cxa_rethrow@plt>
   354f9:	48 89 c3             	mov    rbx,rax
   354fc:	e8 df f1 fc ff       	call   46e0 <__cxa_end_catch@plt>
   35501:	48 89 d8             	mov    rax,rbx
   35504:	48 89 c7             	mov    rdi,rax
   35507:	e8 24 f2 fc ff       	call   4730 <_Unwind_Resume@plt>
   3550c:	e8 9f ef fc ff       	call   44b0 <__stack_chk_fail@plt>
   35511:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   35515:	c9                   	leave  
   35516:	c3                   	ret    
   35517:	90                   	nop

0000000000035518 <std::vector<objl::Material, std::allocator<objl::Material> >::begin() const>:
   35518:	55                   	push   rbp
   35519:	48 89 e5             	mov    rbp,rsp
   3551c:	48 83 ec 20          	sub    rsp,0x20
   35520:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35524:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3552d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35531:	31 c0                	xor    eax,eax
   35533:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35537:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3553b:	48 89 d6             	mov    rsi,rdx
   3553e:	48 89 c7             	mov    rdi,rax
   35541:	e8 0e 1a 00 00       	call   36f54 <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material const* const&)>
   35546:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3554a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3554e:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   35557:	74 05                	je     3555e <std::vector<objl::Material, std::allocator<objl::Material> >::begin() const+0x46>
   35559:	e8 52 ef fc ff       	call   44b0 <__stack_chk_fail@plt>
   3555e:	c9                   	leave  
   3555f:	c3                   	ret    

0000000000035560 <std::vector<objl::Material, std::allocator<objl::Material> >::end() const>:
   35560:	55                   	push   rbp
   35561:	48 89 e5             	mov    rbp,rsp
   35564:	48 83 ec 20          	sub    rsp,0x20
   35568:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3556c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35575:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35579:	31 c0                	xor    eax,eax
   3557b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3557f:	48 8d 50 08          	lea    rdx,[rax+0x8]
   35583:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   35587:	48 89 d6             	mov    rsi,rdx
   3558a:	48 89 c7             	mov    rdi,rax
   3558d:	e8 c2 19 00 00       	call   36f54 <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material const* const&)>
   35592:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35596:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3559a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   355a3:	74 05                	je     355aa <std::vector<objl::Material, std::allocator<objl::Material> >::end() const+0x4a>
   355a5:	e8 06 ef fc ff       	call   44b0 <__stack_chk_fail@plt>
   355aa:	c9                   	leave  
   355ab:	c3                   	ret    

00000000000355ac <bool __gnu_cxx::operator==<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>:
   355ac:	55                   	push   rbp
   355ad:	48 89 e5             	mov    rbp,rsp
   355b0:	53                   	push   rbx
   355b1:	48 83 ec 18          	sub    rsp,0x18
   355b5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   355b9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   355bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   355c1:	48 89 c7             	mov    rdi,rax
   355c4:	e8 a9 19 00 00       	call   36f72 <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   355c9:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   355cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   355d0:	48 89 c7             	mov    rdi,rax
   355d3:	e8 9a 19 00 00       	call   36f72 <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   355d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   355db:	48 39 c3             	cmp    rbx,rax
   355de:	0f 94 c0             	sete   al
   355e1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   355e5:	c9                   	leave  
   355e6:	c3                   	ret    
   355e7:	90                   	nop

00000000000355e8 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator()>:
   355e8:	55                   	push   rbp
   355e9:	48 89 e5             	mov    rbp,rsp
   355ec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   355f0:	90                   	nop
   355f1:	5d                   	pop    rbp
   355f2:	c3                   	ret    

00000000000355f3 <std::allocator_traits<std::allocator<objl::Vertex> >::deallocate(std::allocator<objl::Vertex>&, objl::Vertex*, unsigned long)>:
   355f3:	55                   	push   rbp
   355f4:	48 89 e5             	mov    rbp,rsp
   355f7:	48 83 ec 20          	sub    rsp,0x20
   355fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   355ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35603:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35607:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3560b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3560f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35613:	48 89 ce             	mov    rsi,rcx
   35616:	48 89 c7             	mov    rdi,rax
   35619:	e8 62 19 00 00       	call   36f80 <__gnu_cxx::new_allocator<objl::Vertex>::deallocate(objl::Vertex*, unsigned long)>
   3561e:	90                   	nop
   3561f:	c9                   	leave  
   35620:	c3                   	ret    

0000000000035621 <void std::_Destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>:
   35621:	55                   	push   rbp
   35622:	48 89 e5             	mov    rbp,rsp
   35625:	48 83 ec 10          	sub    rsp,0x10
   35629:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3562d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35631:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35635:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35639:	48 89 d6             	mov    rsi,rdx
   3563c:	48 89 c7             	mov    rdi,rax
   3563f:	e8 6c 19 00 00       	call   36fb0 <void std::_Destroy_aux<true>::__destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>
   35644:	90                   	nop
   35645:	c9                   	leave  
   35646:	c3                   	ret    
   35647:	90                   	nop

0000000000035648 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>:
   35648:	55                   	push   rbp
   35649:	48 89 e5             	mov    rbp,rsp
   3564c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35650:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35654:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35658:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3565b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3565f:	48 89 10             	mov    QWORD PTR [rax],rdx
   35662:	90                   	nop
   35663:	5d                   	pop    rbp
   35664:	c3                   	ret    
   35665:	90                   	nop

0000000000035666 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>:
   35666:	55                   	push   rbp
   35667:	48 89 e5             	mov    rbp,rsp
   3566a:	48 83 ec 10          	sub    rsp,0x10
   3566e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35672:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35676:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   3567b:	74 15                	je     35692 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)+0x2c>
   3567d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35681:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35685:	48 89 d6             	mov    rsi,rdx
   35688:	48 89 c7             	mov    rdi,rax
   3568b:	e8 2f 19 00 00       	call   36fbf <std::allocator_traits<std::allocator<objl::Vertex> >::allocate(std::allocator<objl::Vertex>&, unsigned long)>
   35690:	eb 05                	jmp    35697 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)+0x31>
   35692:	b8 00 00 00 00       	mov    eax,0x0
   35697:	c9                   	leave  
   35698:	c3                   	ret    

0000000000035699 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   35699:	55                   	push   rbp
   3569a:	48 89 e5             	mov    rbp,rsp
   3569d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   356a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   356a5:	5d                   	pop    rbp
   356a6:	c3                   	ret    

00000000000356a7 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   356a7:	55                   	push   rbp
   356a8:	48 89 e5             	mov    rbp,rsp
   356ab:	41 54                	push   r12
   356ad:	53                   	push   rbx
   356ae:	48 83 ec 20          	sub    rsp,0x20
   356b2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   356b6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   356ba:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   356be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   356c2:	48 89 c7             	mov    rdi,rax
   356c5:	e8 3c 19 00 00       	call   37006 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   356ca:	49 89 c4             	mov    r12,rax
   356cd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   356d1:	48 89 c7             	mov    rdi,rax
   356d4:	e8 10 19 00 00       	call   36fe9 <objl::Vertex const* std::__niter_base<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   356d9:	48 89 c3             	mov    rbx,rax
   356dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   356e0:	48 89 c7             	mov    rdi,rax
   356e3:	e8 01 19 00 00       	call   36fe9 <objl::Vertex const* std::__niter_base<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   356e8:	4c 89 e2             	mov    rdx,r12
   356eb:	48 89 de             	mov    rsi,rbx
   356ee:	48 89 c7             	mov    rdi,rax
   356f1:	e8 2d 19 00 00       	call   37023 <objl::Vertex* std::__copy_move_a1<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   356f6:	48 89 c2             	mov    rdx,rax
   356f9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   356fd:	48 89 d6             	mov    rsi,rdx
   35700:	48 89 c7             	mov    rdi,rax
   35703:	e8 48 19 00 00       	call   37050 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   35708:	48 83 c4 20          	add    rsp,0x20
   3570c:	5b                   	pop    rbx
   3570d:	41 5c                	pop    r12
   3570f:	5d                   	pop    rbp
   35710:	c3                   	ret    

0000000000035711 <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   35711:	55                   	push   rbp
   35712:	48 89 e5             	mov    rbp,rsp
   35715:	48 83 ec 10          	sub    rsp,0x10
   35719:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3571d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35721:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35725:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35729:	48 89 d6             	mov    rsi,rdx
   3572c:	48 89 c7             	mov    rdi,rax
   3572f:	e8 5a 19 00 00       	call   3708e <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   35734:	90                   	nop
   35735:	c9                   	leave  
   35736:	c3                   	ret    

0000000000035737 <objl::Vertex* std::__miter_base<objl::Vertex*>(objl::Vertex*)>:
   35737:	55                   	push   rbp
   35738:	48 89 e5             	mov    rbp,rsp
   3573b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3573f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35743:	5d                   	pop    rbp
   35744:	c3                   	ret    

0000000000035745 <objl::Vertex* std::__copy_move_a<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   35745:	55                   	push   rbp
   35746:	48 89 e5             	mov    rbp,rsp
   35749:	41 54                	push   r12
   3574b:	53                   	push   rbx
   3574c:	48 83 ec 20          	sub    rsp,0x20
   35750:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35754:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35758:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3575c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35760:	48 89 c7             	mov    rdi,rax
   35763:	e8 35 19 00 00       	call   3709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   35768:	49 89 c4             	mov    r12,rax
   3576b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3576f:	48 89 c7             	mov    rdi,rax
   35772:	e8 26 19 00 00       	call   3709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   35777:	48 89 c3             	mov    rbx,rax
   3577a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3577e:	48 89 c7             	mov    rdi,rax
   35781:	e8 17 19 00 00       	call   3709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   35786:	4c 89 e2             	mov    rdx,r12
   35789:	48 89 de             	mov    rsi,rbx
   3578c:	48 89 c7             	mov    rdi,rax
   3578f:	e8 17 19 00 00       	call   370ab <objl::Vertex* std::__copy_move_a1<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   35794:	48 89 c2             	mov    rdx,rax
   35797:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   3579b:	48 89 d6             	mov    rsi,rdx
   3579e:	48 89 c7             	mov    rdi,rax
   357a1:	e8 32 19 00 00       	call   370d8 <objl::Vertex* std::__niter_wrap<objl::Vertex*>(objl::Vertex* const&, objl::Vertex*)>
   357a6:	48 83 c4 20          	add    rsp,0x20
   357aa:	5b                   	pop    rbx
   357ab:	41 5c                	pop    r12
   357ad:	5d                   	pop    rbp
   357ae:	c3                   	ret    

00000000000357af <objl::Vertex* std::uninitialized_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   357af:	55                   	push   rbp
   357b0:	48 89 e5             	mov    rbp,rsp
   357b3:	48 83 ec 30          	sub    rsp,0x30
   357b7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   357bb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   357bf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   357c3:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   357c7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   357cb:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   357cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   357d3:	48 89 ce             	mov    rsi,rcx
   357d6:	48 89 c7             	mov    rdi,rax
   357d9:	e8 0c 19 00 00       	call   370ea <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   357de:	c9                   	leave  
   357df:	c3                   	ret    

00000000000357e0 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&)>:
   357e0:	55                   	push   rbp
   357e1:	48 89 e5             	mov    rbp,rsp
   357e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   357e8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   357ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   357f0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   357f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   357f7:	48 89 10             	mov    QWORD PTR [rax],rdx
   357fa:	90                   	nop
   357fb:	5d                   	pop    rbp
   357fc:	c3                   	ret    

00000000000357fd <unsigned int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, std::allocator<unsigned int>&)>:
   357fd:	55                   	push   rbp
   357fe:	48 89 e5             	mov    rbp,rsp
   35801:	48 83 ec 20          	sub    rsp,0x20
   35805:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35809:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3580d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35811:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   35815:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35819:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3581d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35821:	48 89 ce             	mov    rsi,rcx
   35824:	48 89 c7             	mov    rdi,rax
   35827:	e8 14 19 00 00       	call   37140 <unsigned int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   3582c:	c9                   	leave  
   3582d:	c3                   	ret    

000000000003582e <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   3582e:	55                   	push   rbp
   3582f:	48 89 e5             	mov    rbp,rsp
   35832:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35836:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3583a:	5d                   	pop    rbp
   3583b:	c3                   	ret    

000000000003583c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   3583c:	55                   	push   rbp
   3583d:	48 89 e5             	mov    rbp,rsp
   35840:	41 54                	push   r12
   35842:	53                   	push   rbx
   35843:	48 83 ec 20          	sub    rsp,0x20
   35847:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3584b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3584f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   35853:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35857:	48 89 c7             	mov    rdi,rax
   3585a:	e8 2f 19 00 00       	call   3718e <unsigned int* std::__niter_base<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   3585f:	49 89 c4             	mov    r12,rax
   35862:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35866:	48 89 c7             	mov    rdi,rax
   35869:	e8 03 19 00 00       	call   37171 <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   3586e:	48 89 c3             	mov    rbx,rax
   35871:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35875:	48 89 c7             	mov    rdi,rax
   35878:	e8 f4 18 00 00       	call   37171 <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   3587d:	4c 89 e2             	mov    rdx,r12
   35880:	48 89 de             	mov    rsi,rbx
   35883:	48 89 c7             	mov    rdi,rax
   35886:	e8 20 19 00 00       	call   371ab <unsigned int* std::__copy_move_a1<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>
   3588b:	48 89 c2             	mov    rdx,rax
   3588e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35892:	48 89 d6             	mov    rsi,rdx
   35895:	48 89 c7             	mov    rdi,rax
   35898:	e8 3b 19 00 00       	call   371d8 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   3589d:	48 83 c4 20          	add    rsp,0x20
   358a1:	5b                   	pop    rbx
   358a2:	41 5c                	pop    r12
   358a4:	5d                   	pop    rbp
   358a5:	c3                   	ret    

00000000000358a6 <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   358a6:	55                   	push   rbp
   358a7:	48 89 e5             	mov    rbp,rsp
   358aa:	48 83 ec 10          	sub    rsp,0x10
   358ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   358b2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   358b6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   358ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   358be:	48 89 d6             	mov    rsi,rdx
   358c1:	48 89 c7             	mov    rdi,rax
   358c4:	e8 4d 19 00 00       	call   37216 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   358c9:	90                   	nop
   358ca:	c9                   	leave  
   358cb:	c3                   	ret    

00000000000358cc <unsigned int* std::__miter_base<unsigned int*>(unsigned int*)>:
   358cc:	55                   	push   rbp
   358cd:	48 89 e5             	mov    rbp,rsp
   358d0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   358d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   358d8:	5d                   	pop    rbp
   358d9:	c3                   	ret    

00000000000358da <unsigned int* std::__copy_move_a<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   358da:	55                   	push   rbp
   358db:	48 89 e5             	mov    rbp,rsp
   358de:	41 54                	push   r12
   358e0:	53                   	push   rbx
   358e1:	48 83 ec 20          	sub    rsp,0x20
   358e5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   358e9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   358ed:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   358f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   358f5:	48 89 c7             	mov    rdi,rax
   358f8:	e8 b5 61 ff ff       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   358fd:	49 89 c4             	mov    r12,rax
   35900:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35904:	48 89 c7             	mov    rdi,rax
   35907:	e8 a6 61 ff ff       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   3590c:	48 89 c3             	mov    rbx,rax
   3590f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35913:	48 89 c7             	mov    rdi,rax
   35916:	e8 97 61 ff ff       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   3591b:	4c 89 e2             	mov    rdx,r12
   3591e:	48 89 de             	mov    rsi,rbx
   35921:	48 89 c7             	mov    rdi,rax
   35924:	e8 fc 18 00 00       	call   37225 <unsigned int* std::__copy_move_a1<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   35929:	48 89 c2             	mov    rdx,rax
   3592c:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   35930:	48 89 d6             	mov    rsi,rdx
   35933:	48 89 c7             	mov    rdi,rax
   35936:	e8 17 19 00 00       	call   37252 <unsigned int* std::__niter_wrap<unsigned int*>(unsigned int* const&, unsigned int*)>
   3593b:	48 83 c4 20          	add    rsp,0x20
   3593f:	5b                   	pop    rbx
   35940:	41 5c                	pop    r12
   35942:	5d                   	pop    rbp
   35943:	c3                   	ret    

0000000000035944 <unsigned int* std::uninitialized_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   35944:	55                   	push   rbp
   35945:	48 89 e5             	mov    rbp,rsp
   35948:	48 83 ec 30          	sub    rsp,0x30
   3594c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35950:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35954:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   35958:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   3595c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35960:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   35964:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35968:	48 89 ce             	mov    rsi,rcx
   3596b:	48 89 c7             	mov    rdi,rax
   3596e:	e8 f1 18 00 00       	call   37264 <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   35973:	c9                   	leave  
   35974:	c3                   	ret    
   35975:	90                   	nop

0000000000035976 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   35976:	55                   	push   rbp
   35977:	48 89 e5             	mov    rbp,rsp
   3597a:	53                   	push   rbx
   3597b:	48 83 ec 68          	sub    rsp,0x68
   3597f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   35983:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   35987:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   3598b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35994:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   35998:	31 c0                	xor    eax,eax
   3599a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3599e:	48 8d 15 e1 74 00 00 	lea    rdx,[rip+0x74e1]        # 3ce86 <NANO_SEC+0x1bbe>
   359a5:	be 01 00 00 00       	mov    esi,0x1
   359aa:	48 89 c7             	mov    rdi,rax
   359ad:	e8 48 41 ff ff       	call   29afa <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const>
   359b2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   359b6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   359ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
   359bd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   359c1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   359c5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   359c9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   359cd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   359d1:	48 89 c7             	mov    rdi,rax
   359d4:	e8 0d 42 ff ff       	call   29be6 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()>
   359d9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   359dd:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   359e1:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   359e5:	48 89 d6             	mov    rsi,rdx
   359e8:	48 89 c7             	mov    rdi,rax
   359eb:	e8 3e 42 ff ff       	call   29c2e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::difference_type __gnu_cxx::operator-<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)>
   359f0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   359f4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   359f8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   359fc:	48 89 d6             	mov    rsi,rdx
   359ff:	48 89 c7             	mov    rdi,rax
   35a02:	e8 67 42 ff ff       	call   29c6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>
   35a07:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   35a0b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35a0f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35a13:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   35a17:	48 89 c7             	mov    rdi,rax
   35a1a:	e8 c2 65 ff ff       	call   2bfe1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   35a1f:	48 89 c2             	mov    rdx,rax
   35a22:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35a26:	48 c1 e0 05          	shl    rax,0x5
   35a2a:	48 89 c1             	mov    rcx,rax
   35a2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35a31:	48 01 c1             	add    rcx,rax
   35a34:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35a38:	48 89 ce             	mov    rsi,rcx
   35a3b:	48 89 c7             	mov    rdi,rax
   35a3e:	e8 65 65 ff ff       	call   2bfa8 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   35a43:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   35a4b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35a4f:	48 89 c7             	mov    rdi,rax
   35a52:	e8 23 21 ff ff       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   35a57:	48 89 c3             	mov    rbx,rax
   35a5a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   35a5e:	48 89 c7             	mov    rdi,rax
   35a61:	e8 6e 42 ff ff       	call   29cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   35a66:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   35a69:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35a6d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   35a71:	48 89 d9             	mov    rcx,rbx
   35a74:	48 89 c7             	mov    rdi,rax
   35a77:	e8 25 42 ff ff       	call   29ca1 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   35a7c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35a80:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   35a85:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35a89:	48 89 c7             	mov    rdi,rax
   35a8c:	e8 e9 20 ff ff       	call   27b7a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   35a91:	48 89 c3             	mov    rbx,rax
   35a94:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   35a98:	48 89 c7             	mov    rdi,rax
   35a9b:	e8 34 42 ff ff       	call   29cd4 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   35aa0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   35aa3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35aa7:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   35aab:	48 89 d9             	mov    rcx,rbx
   35aae:	48 89 c7             	mov    rdi,rax
   35ab1:	e8 eb 41 ff ff       	call   29ca1 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   35ab6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35aba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35abe:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   35ac2:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   35ac6:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   35aca:	48 c1 fa 05          	sar    rdx,0x5
   35ace:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   35ad2:	48 89 ce             	mov    rsi,rcx
   35ad5:	48 89 c7             	mov    rdi,rax
   35ad8:	e8 67 20 ff ff       	call   27b44 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   35add:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35ae1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35ae5:	48 89 10             	mov    QWORD PTR [rax],rdx
   35ae8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35aec:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35af0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   35af4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   35af8:	48 c1 e0 05          	shl    rax,0x5
   35afc:	48 89 c2             	mov    rdx,rax
   35aff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35b03:	48 01 c2             	add    rdx,rax
   35b06:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35b0a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   35b0e:	90                   	nop
   35b0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35b13:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35b1c:	74 05                	je     35b23 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1ad>
   35b1e:	e8 8d e9 fc ff       	call   44b0 <__stack_chk_fail@plt>
   35b23:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   35b27:	c9                   	leave  
   35b28:	c3                   	ret    
   35b29:	90                   	nop

0000000000035b2a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::back()>:
   35b2a:	55                   	push   rbp
   35b2b:	48 89 e5             	mov    rbp,rsp
   35b2e:	48 83 ec 30          	sub    rsp,0x30
   35b32:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   35b36:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35b3f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35b43:	31 c0                	xor    eax,eax
   35b45:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35b49:	48 89 c7             	mov    rdi,rax
   35b4c:	e8 af 25 ff ff       	call   28100 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>
   35b51:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   35b55:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   35b59:	be 01 00 00 00       	mov    esi,0x1
   35b5e:	48 89 c7             	mov    rdi,rax
   35b61:	e8 2c 17 00 00       	call   37292 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator-(long) const>
   35b66:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   35b6a:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   35b6e:	48 89 c7             	mov    rdi,rax
   35b71:	e8 82 17 00 00       	call   372f8 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator*() const>
   35b76:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   35b7a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   35b83:	74 05                	je     35b8a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::back()+0x60>
   35b85:	e8 26 e9 fc ff       	call   44b0 <__stack_chk_fail@plt>
   35b8a:	c9                   	leave  
   35b8b:	c3                   	ret    

0000000000035b8c <__gnu_cxx::new_allocator<objl::Mesh>::new_allocator()>:
   35b8c:	55                   	push   rbp
   35b8d:	48 89 e5             	mov    rbp,rsp
   35b90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35b94:	90                   	nop
   35b95:	5d                   	pop    rbp
   35b96:	c3                   	ret    

0000000000035b97 <std::allocator_traits<std::allocator<objl::Mesh> >::deallocate(std::allocator<objl::Mesh>&, objl::Mesh*, unsigned long)>:
   35b97:	55                   	push   rbp
   35b98:	48 89 e5             	mov    rbp,rsp
   35b9b:	48 83 ec 20          	sub    rsp,0x20
   35b9f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35ba3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35ba7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35bab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35baf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35bb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35bb7:	48 89 ce             	mov    rsi,rcx
   35bba:	48 89 c7             	mov    rdi,rax
   35bbd:	e8 48 17 00 00       	call   3730a <__gnu_cxx::new_allocator<objl::Mesh>::deallocate(objl::Mesh*, unsigned long)>
   35bc2:	90                   	nop
   35bc3:	c9                   	leave  
   35bc4:	c3                   	ret    

0000000000035bc5 <void std::_Destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>:
   35bc5:	55                   	push   rbp
   35bc6:	48 89 e5             	mov    rbp,rsp
   35bc9:	48 83 ec 10          	sub    rsp,0x10
   35bcd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35bd1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35bd5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35bd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35bdd:	48 89 d6             	mov    rsi,rdx
   35be0:	48 89 c7             	mov    rdi,rax
   35be3:	e8 52 17 00 00       	call   3733a <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>
   35be8:	90                   	nop
   35be9:	c9                   	leave  
   35bea:	c3                   	ret    
   35beb:	90                   	nop

0000000000035bec <__gnu_cxx::new_allocator<objl::Material>::new_allocator()>:
   35bec:	55                   	push   rbp
   35bed:	48 89 e5             	mov    rbp,rsp
   35bf0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35bf4:	90                   	nop
   35bf5:	5d                   	pop    rbp
   35bf6:	c3                   	ret    

0000000000035bf7 <std::allocator_traits<std::allocator<objl::Material> >::deallocate(std::allocator<objl::Material>&, objl::Material*, unsigned long)>:
   35bf7:	55                   	push   rbp
   35bf8:	48 89 e5             	mov    rbp,rsp
   35bfb:	48 83 ec 20          	sub    rsp,0x20
   35bff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35c03:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35c07:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35c0b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35c0f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35c13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35c17:	48 89 ce             	mov    rsi,rcx
   35c1a:	48 89 c7             	mov    rdi,rax
   35c1d:	e8 54 17 00 00       	call   37376 <__gnu_cxx::new_allocator<objl::Material>::deallocate(objl::Material*, unsigned long)>
   35c22:	90                   	nop
   35c23:	c9                   	leave  
   35c24:	c3                   	ret    

0000000000035c25 <void std::_Destroy<objl::Material*>(objl::Material*, objl::Material*)>:
   35c25:	55                   	push   rbp
   35c26:	48 89 e5             	mov    rbp,rsp
   35c29:	48 83 ec 10          	sub    rsp,0x10
   35c2d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35c31:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35c35:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35c39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35c3d:	48 89 d6             	mov    rsi,rdx
   35c40:	48 89 c7             	mov    rdi,rax
   35c43:	e8 5e 17 00 00       	call   373a6 <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)>
   35c48:	90                   	nop
   35c49:	c9                   	leave  
   35c4a:	c3                   	ret    
   35c4b:	90                   	nop

0000000000035c4c <__gnu_cxx::new_allocator<objl::Vector3>::new_allocator()>:
   35c4c:	55                   	push   rbp
   35c4d:	48 89 e5             	mov    rbp,rsp
   35c50:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35c54:	90                   	nop
   35c55:	5d                   	pop    rbp
   35c56:	c3                   	ret    

0000000000035c57 <std::allocator_traits<std::allocator<objl::Vector3> >::deallocate(std::allocator<objl::Vector3>&, objl::Vector3*, unsigned long)>:
   35c57:	55                   	push   rbp
   35c58:	48 89 e5             	mov    rbp,rsp
   35c5b:	48 83 ec 20          	sub    rsp,0x20
   35c5f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35c63:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35c67:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35c6b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35c6f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35c73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35c77:	48 89 ce             	mov    rsi,rcx
   35c7a:	48 89 c7             	mov    rdi,rax
   35c7d:	e8 60 17 00 00       	call   373e2 <__gnu_cxx::new_allocator<objl::Vector3>::deallocate(objl::Vector3*, unsigned long)>
   35c82:	90                   	nop
   35c83:	c9                   	leave  
   35c84:	c3                   	ret    

0000000000035c85 <void std::_Destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>:
   35c85:	55                   	push   rbp
   35c86:	48 89 e5             	mov    rbp,rsp
   35c89:	48 83 ec 10          	sub    rsp,0x10
   35c8d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35c91:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35c95:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35c99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35c9d:	48 89 d6             	mov    rsi,rdx
   35ca0:	48 89 c7             	mov    rdi,rax
   35ca3:	e8 73 17 00 00       	call   3741b <void std::_Destroy_aux<true>::__destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>
   35ca8:	90                   	nop
   35ca9:	c9                   	leave  
   35caa:	c3                   	ret    
   35cab:	90                   	nop

0000000000035cac <__gnu_cxx::new_allocator<objl::Vector2>::new_allocator()>:
   35cac:	55                   	push   rbp
   35cad:	48 89 e5             	mov    rbp,rsp
   35cb0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35cb4:	90                   	nop
   35cb5:	5d                   	pop    rbp
   35cb6:	c3                   	ret    

0000000000035cb7 <std::allocator_traits<std::allocator<objl::Vector2> >::deallocate(std::allocator<objl::Vector2>&, objl::Vector2*, unsigned long)>:
   35cb7:	55                   	push   rbp
   35cb8:	48 89 e5             	mov    rbp,rsp
   35cbb:	48 83 ec 20          	sub    rsp,0x20
   35cbf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35cc3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35cc7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35ccb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35ccf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35cd3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35cd7:	48 89 ce             	mov    rsi,rcx
   35cda:	48 89 c7             	mov    rdi,rax
   35cdd:	e8 48 17 00 00       	call   3742a <__gnu_cxx::new_allocator<objl::Vector2>::deallocate(objl::Vector2*, unsigned long)>
   35ce2:	90                   	nop
   35ce3:	c9                   	leave  
   35ce4:	c3                   	ret    

0000000000035ce5 <void std::_Destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>:
   35ce5:	55                   	push   rbp
   35ce6:	48 89 e5             	mov    rbp,rsp
   35ce9:	48 83 ec 10          	sub    rsp,0x10
   35ced:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35cf1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35cf5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35cf9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35cfd:	48 89 d6             	mov    rsi,rdx
   35d00:	48 89 c7             	mov    rdi,rax
   35d03:	e8 53 17 00 00       	call   3745b <void std::_Destroy_aux<true>::__destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>
   35d08:	90                   	nop
   35d09:	c9                   	leave  
   35d0a:	c3                   	ret    
   35d0b:	90                   	nop

0000000000035d0c <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>:
   35d0c:	55                   	push   rbp
   35d0d:	48 89 e5             	mov    rbp,rsp
   35d10:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d18:	5d                   	pop    rbp
   35d19:	c3                   	ret    

0000000000035d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>:
   35d1a:	55                   	push   rbp
   35d1b:	48 89 e5             	mov    rbp,rsp
   35d1e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d26:	5d                   	pop    rbp
   35d27:	c3                   	ret    

0000000000035d28 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::get_allocator() const>:
   35d28:	55                   	push   rbp
   35d29:	48 89 e5             	mov    rbp,rsp
   35d2c:	48 83 ec 10          	sub    rsp,0x10
   35d30:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d34:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35d38:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35d3c:	48 89 c7             	mov    rdi,rax
   35d3f:	e8 60 db ff ff       	call   338a4 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   35d44:	48 89 c2             	mov    rdx,rax
   35d47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d4b:	48 89 d6             	mov    rsi,rdx
   35d4e:	48 89 c7             	mov    rdi,rax
   35d51:	e8 14 17 00 00       	call   3746a <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   35d56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d5a:	c9                   	leave  
   35d5b:	c3                   	ret    

0000000000035d5c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::allocator<objl::Vertex> const&)>:
   35d5c:	55                   	push   rbp
   35d5d:	48 89 e5             	mov    rbp,rsp
   35d60:	48 83 ec 10          	sub    rsp,0x10
   35d64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d68:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35d6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d70:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35d74:	48 89 d6             	mov    rsi,rdx
   35d77:	48 89 c7             	mov    rdi,rax
   35d7a:	e8 11 17 00 00       	call   37490 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::allocator<objl::Vertex> const&)>
   35d7f:	90                   	nop
   35d80:	c9                   	leave  
   35d81:	c3                   	ret    

0000000000035d82 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)>:
   35d82:	55                   	push   rbp
   35d83:	48 89 e5             	mov    rbp,rsp
   35d86:	48 83 ec 30          	sub    rsp,0x30
   35d8a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   35d8e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   35d92:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35d9b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35d9f:	31 c0                	xor    eax,eax
   35da1:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35da5:	48 89 c7             	mov    rdi,rax
   35da8:	e8 4f da ff ff       	call   337fc <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>
   35dad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35db1:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35db5:	48 89 d6             	mov    rsi,rdx
   35db8:	48 89 c7             	mov    rdi,rax
   35dbb:	e8 f6 16 00 00       	call   374b6 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>
   35dc0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   35dc4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35dc8:	48 89 d6             	mov    rsi,rdx
   35dcb:	48 89 c7             	mov    rdi,rax
   35dce:	e8 e3 16 00 00       	call   374b6 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>
   35dd3:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   35dd7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35ddb:	48 89 d6             	mov    rsi,rdx
   35dde:	48 89 c7             	mov    rdi,rax
   35de1:	e8 d0 16 00 00       	call   374b6 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>
   35de6:	90                   	nop
   35de7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35deb:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35df4:	74 05                	je     35dfb <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)+0x79>
   35df6:	e8 b5 e6 fc ff       	call   44b0 <__stack_chk_fail@plt>
   35dfb:	c9                   	leave  
   35dfc:	c3                   	ret    

0000000000035dfd <void std::__alloc_on_move<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex>&)>:
   35dfd:	55                   	push   rbp
   35dfe:	48 89 e5             	mov    rbp,rsp
   35e01:	48 83 ec 10          	sub    rsp,0x10
   35e05:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e09:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35e0d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35e11:	48 89 c7             	mov    rdi,rax
   35e14:	e8 da 16 00 00       	call   374f3 <std::remove_reference<std::allocator<objl::Vertex>&>::type&& std::move<std::allocator<objl::Vertex>&>(std::allocator<objl::Vertex>&)>
   35e19:	90                   	nop
   35e1a:	c9                   	leave  
   35e1b:	c3                   	ret    

0000000000035e1c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::get_allocator() const>:
   35e1c:	55                   	push   rbp
   35e1d:	48 89 e5             	mov    rbp,rsp
   35e20:	48 83 ec 10          	sub    rsp,0x10
   35e24:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e28:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35e2c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35e30:	48 89 c7             	mov    rdi,rax
   35e33:	e8 fc 55 ff ff       	call   2b434 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   35e38:	48 89 c2             	mov    rdx,rax
   35e3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e3f:	48 89 d6             	mov    rsi,rdx
   35e42:	48 89 c7             	mov    rdi,rax
   35e45:	e8 b8 16 00 00       	call   37502 <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   35e4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e4e:	c9                   	leave  
   35e4f:	c3                   	ret    

0000000000035e50 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::allocator<unsigned int> const&)>:
   35e50:	55                   	push   rbp
   35e51:	48 89 e5             	mov    rbp,rsp
   35e54:	48 83 ec 10          	sub    rsp,0x10
   35e58:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e5c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35e60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e64:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35e68:	48 89 d6             	mov    rsi,rdx
   35e6b:	48 89 c7             	mov    rdi,rax
   35e6e:	e8 b5 16 00 00       	call   37528 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::allocator<unsigned int> const&)>
   35e73:	90                   	nop
   35e74:	c9                   	leave  
   35e75:	c3                   	ret    

0000000000035e76 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)>:
   35e76:	55                   	push   rbp
   35e77:	48 89 e5             	mov    rbp,rsp
   35e7a:	48 83 ec 30          	sub    rsp,0x30
   35e7e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   35e82:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   35e86:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35e8f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35e93:	31 c0                	xor    eax,eax
   35e95:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35e99:	48 89 c7             	mov    rdi,rax
   35e9c:	e8 fb 28 ff ff       	call   2879c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>
   35ea1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35ea5:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35ea9:	48 89 d6             	mov    rsi,rdx
   35eac:	48 89 c7             	mov    rdi,rax
   35eaf:	e8 9a 16 00 00       	call   3754e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>
   35eb4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   35eb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35ebc:	48 89 d6             	mov    rsi,rdx
   35ebf:	48 89 c7             	mov    rdi,rax
   35ec2:	e8 87 16 00 00       	call   3754e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>
   35ec7:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   35ecb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35ecf:	48 89 d6             	mov    rsi,rdx
   35ed2:	48 89 c7             	mov    rdi,rax
   35ed5:	e8 74 16 00 00       	call   3754e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>
   35eda:	90                   	nop
   35edb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35edf:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35ee8:	74 05                	je     35eef <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)+0x79>
   35eea:	e8 c1 e5 fc ff       	call   44b0 <__stack_chk_fail@plt>
   35eef:	c9                   	leave  
   35ef0:	c3                   	ret    

0000000000035ef1 <void std::__alloc_on_move<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int>&)>:
   35ef1:	55                   	push   rbp
   35ef2:	48 89 e5             	mov    rbp,rsp
   35ef5:	48 83 ec 10          	sub    rsp,0x10
   35ef9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35efd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35f01:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35f05:	48 89 c7             	mov    rdi,rax
   35f08:	e8 7e 16 00 00       	call   3758b <std::remove_reference<std::allocator<unsigned int>&>::type&& std::move<std::allocator<unsigned int>&>(std::allocator<unsigned int>&)>
   35f0d:	90                   	nop
   35f0e:	c9                   	leave  
   35f0f:	c3                   	ret    

0000000000035f10 <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>:
   35f10:	55                   	push   rbp
   35f11:	48 89 e5             	mov    rbp,rsp
   35f14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35f18:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35f1c:	5d                   	pop    rbp
   35f1d:	c3                   	ret    

0000000000035f1e <objl::Material::Material(objl::Material const&)>:
   35f1e:	55                   	push   rbp
   35f1f:	48 89 e5             	mov    rbp,rsp
   35f22:	53                   	push   rbx
   35f23:	48 83 ec 18          	sub    rsp,0x18
   35f27:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35f2b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35f2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35f33:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35f37:	48 89 d6             	mov    rsi,rdx
   35f3a:	48 89 c7             	mov    rdi,rax
   35f3d:	e8 2e e2 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   35f42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35f46:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35f4a:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   35f4e:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   35f52:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   35f55:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   35f58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35f5c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35f60:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   35f64:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   35f68:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   35f6b:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   35f6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35f72:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35f76:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   35f7a:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   35f7e:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   35f81:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   35f84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35f88:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   35f8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35f91:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   35f96:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35f9a:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   35f9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35fa3:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   35fa8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35fac:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   35fb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35fb5:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   35fba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35fbe:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   35fc1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35fc5:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   35fc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35fcc:	48 83 c0 58          	add    rax,0x58
   35fd0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35fd4:	48 83 c2 58          	add    rdx,0x58
   35fd8:	48 89 d6             	mov    rsi,rdx
   35fdb:	48 89 c7             	mov    rdi,rax
   35fde:	e8 8d e1 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   35fe3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35fe7:	48 83 c0 78          	add    rax,0x78
   35feb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35fef:	48 83 c2 78          	add    rdx,0x78
   35ff3:	48 89 d6             	mov    rsi,rdx
   35ff6:	48 89 c7             	mov    rdi,rax
   35ff9:	e8 72 e1 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   35ffe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36002:	48 05 98 00 00 00    	add    rax,0x98
   36008:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3600c:	48 81 c2 98 00 00 00 	add    rdx,0x98
   36013:	48 89 d6             	mov    rsi,rdx
   36016:	48 89 c7             	mov    rdi,rax
   36019:	e8 52 e1 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3601e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36022:	48 05 b8 00 00 00    	add    rax,0xb8
   36028:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3602c:	48 81 c2 b8 00 00 00 	add    rdx,0xb8
   36033:	48 89 d6             	mov    rsi,rdx
   36036:	48 89 c7             	mov    rdi,rax
   36039:	e8 32 e1 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3603e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36042:	48 05 d8 00 00 00    	add    rax,0xd8
   36048:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3604c:	48 81 c2 d8 00 00 00 	add    rdx,0xd8
   36053:	48 89 d6             	mov    rsi,rdx
   36056:	48 89 c7             	mov    rdi,rax
   36059:	e8 12 e1 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3605e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36062:	48 05 f8 00 00 00    	add    rax,0xf8
   36068:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3606c:	48 81 c2 f8 00 00 00 	add    rdx,0xf8
   36073:	48 89 d6             	mov    rsi,rdx
   36076:	48 89 c7             	mov    rdi,rax
   36079:	e8 f2 e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3607e:	e9 89 00 00 00       	jmp    3610c <objl::Material::Material(objl::Material const&)+0x1ee>
   36083:	48 89 c3             	mov    rbx,rax
   36086:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3608a:	48 05 d8 00 00 00    	add    rax,0xd8
   36090:	48 89 c7             	mov    rdi,rax
   36093:	e8 c8 e1 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   36098:	eb 03                	jmp    3609d <objl::Material::Material(objl::Material const&)+0x17f>
   3609a:	48 89 c3             	mov    rbx,rax
   3609d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360a1:	48 05 b8 00 00 00    	add    rax,0xb8
   360a7:	48 89 c7             	mov    rdi,rax
   360aa:	e8 b1 e1 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   360af:	eb 03                	jmp    360b4 <objl::Material::Material(objl::Material const&)+0x196>
   360b1:	48 89 c3             	mov    rbx,rax
   360b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360b8:	48 05 98 00 00 00    	add    rax,0x98
   360be:	48 89 c7             	mov    rdi,rax
   360c1:	e8 9a e1 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   360c6:	eb 03                	jmp    360cb <objl::Material::Material(objl::Material const&)+0x1ad>
   360c8:	48 89 c3             	mov    rbx,rax
   360cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360cf:	48 83 c0 78          	add    rax,0x78
   360d3:	48 89 c7             	mov    rdi,rax
   360d6:	e8 85 e1 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   360db:	eb 03                	jmp    360e0 <objl::Material::Material(objl::Material const&)+0x1c2>
   360dd:	48 89 c3             	mov    rbx,rax
   360e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360e4:	48 83 c0 58          	add    rax,0x58
   360e8:	48 89 c7             	mov    rdi,rax
   360eb:	e8 70 e1 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   360f0:	eb 03                	jmp    360f5 <objl::Material::Material(objl::Material const&)+0x1d7>
   360f2:	48 89 c3             	mov    rbx,rax
   360f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360f9:	48 89 c7             	mov    rdi,rax
   360fc:	e8 5f e1 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   36101:	48 89 d8             	mov    rax,rbx
   36104:	48 89 c7             	mov    rdi,rax
   36107:	e8 24 e6 fc ff       	call   4730 <_Unwind_Resume@plt>
   3610c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36110:	c9                   	leave  
   36111:	c3                   	ret    

0000000000036112 <objl::Mesh::Mesh(objl::Mesh const&)>:
   36112:	55                   	push   rbp
   36113:	48 89 e5             	mov    rbp,rsp
   36116:	53                   	push   rbx
   36117:	48 83 ec 18          	sub    rsp,0x18
   3611b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3611f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36123:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36127:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3612b:	48 89 d6             	mov    rsi,rdx
   3612e:	48 89 c7             	mov    rdi,rax
   36131:	e8 3a e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36136:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3613a:	48 83 c0 20          	add    rax,0x20
   3613e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36142:	48 83 c2 20          	add    rdx,0x20
   36146:	48 89 d6             	mov    rsi,rdx
   36149:	48 89 c7             	mov    rdi,rax
   3614c:	e8 13 d3 ff ff       	call   33464 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   36151:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36155:	48 83 c0 38          	add    rax,0x38
   36159:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3615d:	48 83 c2 38          	add    rdx,0x38
   36161:	48 89 d6             	mov    rsi,rdx
   36164:	48 89 c7             	mov    rdi,rax
   36167:	e8 2e 14 00 00       	call   3759a <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)>
   3616c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36170:	48 83 c0 50          	add    rax,0x50
   36174:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36178:	48 83 c2 50          	add    rdx,0x50
   3617c:	48 89 d6             	mov    rsi,rdx
   3617f:	48 89 c7             	mov    rdi,rax
   36182:	e8 97 fd ff ff       	call   35f1e <objl::Material::Material(objl::Material const&)>
   36187:	eb 44                	jmp    361cd <objl::Mesh::Mesh(objl::Mesh const&)+0xbb>
   36189:	48 89 c3             	mov    rbx,rax
   3618c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36190:	48 83 c0 38          	add    rax,0x38
   36194:	48 89 c7             	mov    rdi,rax
   36197:	e8 20 08 ff ff       	call   269bc <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   3619c:	eb 03                	jmp    361a1 <objl::Mesh::Mesh(objl::Mesh const&)+0x8f>
   3619e:	48 89 c3             	mov    rbx,rax
   361a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   361a5:	48 83 c0 20          	add    rax,0x20
   361a9:	48 89 c7             	mov    rdi,rax
   361ac:	e8 0f c2 ff ff       	call   323c0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   361b1:	eb 03                	jmp    361b6 <objl::Mesh::Mesh(objl::Mesh const&)+0xa4>
   361b3:	48 89 c3             	mov    rbx,rax
   361b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   361ba:	48 89 c7             	mov    rdi,rax
   361bd:	e8 9e e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   361c2:	48 89 d8             	mov    rax,rbx
   361c5:	48 89 c7             	mov    rdi,rax
   361c8:	e8 63 e5 fc ff       	call   4730 <_Unwind_Resume@plt>
   361cd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   361d1:	c9                   	leave  
   361d2:	c3                   	ret    
   361d3:	90                   	nop

00000000000361d4 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh const&>(objl::Mesh*, objl::Mesh const&)>:
   361d4:	55                   	push   rbp
   361d5:	48 89 e5             	mov    rbp,rsp
   361d8:	41 55                	push   r13
   361da:	41 54                	push   r12
   361dc:	53                   	push   rbx
   361dd:	48 83 ec 28          	sub    rsp,0x28
   361e1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   361e5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   361e9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   361ed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   361f1:	48 89 c7             	mov    rdi,rax
   361f4:	e8 17 fd ff ff       	call   35f10 <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>
   361f9:	49 89 c5             	mov    r13,rax
   361fc:	48 8b 5d d0          	mov    rbx,QWORD PTR [rbp-0x30]
   36200:	48 89 de             	mov    rsi,rbx
   36203:	bf 68 01 00 00       	mov    edi,0x168
   36208:	e8 8a e9 fe ff       	call   24b97 <operator new(unsigned long, void*)>
   3620d:	49 89 c4             	mov    r12,rax
   36210:	4c 89 ee             	mov    rsi,r13
   36213:	4c 89 e7             	mov    rdi,r12
   36216:	e8 f7 fe ff ff       	call   36112 <objl::Mesh::Mesh(objl::Mesh const&)>
   3621b:	eb 19                	jmp    36236 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh const&>(objl::Mesh*, objl::Mesh const&)+0x62>
   3621d:	49 89 c5             	mov    r13,rax
   36220:	48 89 de             	mov    rsi,rbx
   36223:	4c 89 e7             	mov    rdi,r12
   36226:	e8 7e e9 fe ff       	call   24ba9 <operator delete(void*, void*)>
   3622b:	4c 89 e8             	mov    rax,r13
   3622e:	48 89 c7             	mov    rdi,rax
   36231:	e8 fa e4 fc ff       	call   4730 <_Unwind_Resume@plt>
   36236:	48 83 c4 28          	add    rsp,0x28
   3623a:	5b                   	pop    rbx
   3623b:	41 5c                	pop    r12
   3623d:	41 5d                	pop    r13
   3623f:	5d                   	pop    rbp
   36240:	c3                   	ret    
   36241:	90                   	nop

0000000000036242 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const>:
   36242:	55                   	push   rbp
   36243:	48 89 e5             	mov    rbp,rsp
   36246:	53                   	push   rbx
   36247:	48 83 ec 48          	sub    rsp,0x48
   3624b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   3624f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36253:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36257:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36260:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   36264:	31 c0                	xor    eax,eax
   36266:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3626a:	48 89 c7             	mov    rdi,rax
   3626d:	e8 3c 14 00 00       	call   376ae <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>
   36272:	48 89 c3             	mov    rbx,rax
   36275:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36279:	48 89 c7             	mov    rdi,rax
   3627c:	e8 81 fe fe ff       	call   26102 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   36281:	48 29 c3             	sub    rbx,rax
   36284:	48 89 da             	mov    rdx,rbx
   36287:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3628b:	48 39 c2             	cmp    rdx,rax
   3628e:	0f 92 c0             	setb   al
   36291:	84 c0                	test   al,al
   36293:	74 0c                	je     362a1 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0x5f>
   36295:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   36299:	48 89 c7             	mov    rdi,rax
   3629c:	e8 2f df fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   362a1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   362a5:	48 89 c7             	mov    rdi,rax
   362a8:	e8 55 fe fe ff       	call   26102 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   362ad:	48 89 c3             	mov    rbx,rax
   362b0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   362b4:	48 89 c7             	mov    rdi,rax
   362b7:	e8 46 fe fe ff       	call   26102 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   362bc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   362c0:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   362c4:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   362c8:	48 89 d6             	mov    rsi,rdx
   362cb:	48 89 c7             	mov    rdi,rax
   362ce:	e8 7f f2 fe ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   362d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   362d6:	48 01 d8             	add    rax,rbx
   362d9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   362dd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   362e1:	48 89 c7             	mov    rdi,rax
   362e4:	e8 19 fe fe ff       	call   26102 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   362e9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   362ed:	72 12                	jb     36301 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xbf>
   362ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   362f3:	48 89 c7             	mov    rdi,rax
   362f6:	e8 b3 13 00 00       	call   376ae <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>
   362fb:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   362ff:	76 0e                	jbe    3630f <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xcd>
   36301:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36305:	48 89 c7             	mov    rdi,rax
   36308:	e8 a1 13 00 00       	call   376ae <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>
   3630d:	eb 04                	jmp    36313 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xd1>
   3630f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36313:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   36317:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   36320:	74 05                	je     36327 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xe5>
   36322:	e8 89 e1 fc ff       	call   44b0 <__stack_chk_fail@plt>
   36327:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3632b:	c9                   	leave  
   3632c:	c3                   	ret    

000000000003632d <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::difference_type __gnu_cxx::operator-<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>:
   3632d:	55                   	push   rbp
   3632e:	48 89 e5             	mov    rbp,rsp
   36331:	53                   	push   rbx
   36332:	48 83 ec 18          	sub    rsp,0x18
   36336:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3633a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3633e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36342:	48 89 c7             	mov    rdi,rax
   36345:	e8 0c eb ff ff       	call   34e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   3634a:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   3634d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36351:	48 89 c7             	mov    rdi,rax
   36354:	e8 fd ea ff ff       	call   34e56 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   36359:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3635c:	48 89 d8             	mov    rax,rbx
   3635f:	48 29 d0             	sub    rax,rdx
   36362:	48 c1 f8 03          	sar    rax,0x3
   36366:	48 89 c2             	mov    rdx,rax
   36369:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   36373:	48 0f af c2          	imul   rax,rdx
   36377:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3637b:	c9                   	leave  
   3637c:	c3                   	ret    
   3637d:	90                   	nop

000000000003637e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)>:
   3637e:	55                   	push   rbp
   3637f:	48 89 e5             	mov    rbp,rsp
   36382:	48 83 ec 10          	sub    rsp,0x10
   36386:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3638a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3638e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   36393:	74 15                	je     363aa <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)+0x2c>
   36395:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36399:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3639d:	48 89 d6             	mov    rsi,rdx
   363a0:	48 89 c7             	mov    rdi,rax
   363a3:	e8 28 13 00 00       	call   376d0 <std::allocator_traits<std::allocator<objl::Mesh> >::allocate(std::allocator<objl::Mesh>&, unsigned long)>
   363a8:	eb 05                	jmp    363af <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)+0x31>
   363aa:	b8 00 00 00 00       	mov    eax,0x0
   363af:	c9                   	leave  
   363b0:	c3                   	ret    

00000000000363b1 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   363b1:	55                   	push   rbp
   363b2:	48 89 e5             	mov    rbp,rsp
   363b5:	48 83 ec 20          	sub    rsp,0x20
   363b9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   363bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   363c1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   363c5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   363c9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   363cd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   363d1:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   363d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   363d9:	48 89 c7             	mov    rdi,rax
   363dc:	e8 19 13 00 00       	call   376fa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_do_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&, std::integral_constant<bool, true>)>
   363e1:	c9                   	leave  
   363e2:	c3                   	ret    

00000000000363e3 <void std::allocator_traits<std::allocator<objl::Mesh> >::destroy<objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*)>:
   363e3:	55                   	push   rbp
   363e4:	48 89 e5             	mov    rbp,rsp
   363e7:	48 83 ec 10          	sub    rsp,0x10
   363eb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   363ef:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   363f3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   363f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   363fb:	48 89 d6             	mov    rsi,rdx
   363fe:	48 89 c7             	mov    rdi,rax
   36401:	e8 26 13 00 00       	call   3772c <void __gnu_cxx::new_allocator<objl::Mesh>::destroy<objl::Mesh>(objl::Mesh*)>
   36406:	90                   	nop
   36407:	c9                   	leave  
   36408:	c3                   	ret    

0000000000036409 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>:
   36409:	55                   	push   rbp
   3640a:	48 89 e5             	mov    rbp,rsp
   3640d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36411:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36415:	5d                   	pop    rbp
   36416:	c3                   	ret    
   36417:	90                   	nop

0000000000036418 <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3 const&>(objl::Vector3*, objl::Vector3 const&)>:
   36418:	55                   	push   rbp
   36419:	48 89 e5             	mov    rbp,rsp
   3641c:	53                   	push   rbx
   3641d:	48 83 ec 28          	sub    rsp,0x28
   36421:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36425:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36429:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3642d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   36431:	48 89 c7             	mov    rdi,rax
   36434:	e8 d0 ff ff ff       	call   36409 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>
   36439:	48 89 c3             	mov    rbx,rax
   3643c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36440:	48 89 c6             	mov    rsi,rax
   36443:	bf 0c 00 00 00       	mov    edi,0xc
   36448:	e8 4a e7 fe ff       	call   24b97 <operator new(unsigned long, void*)>
   3644d:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   36450:	48 89 10             	mov    QWORD PTR [rax],rdx
   36453:	8b 53 08             	mov    edx,DWORD PTR [rbx+0x8]
   36456:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   36459:	90                   	nop
   3645a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3645e:	c9                   	leave  
   3645f:	c3                   	ret    

0000000000036460 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::__normal_iterator(objl::Vector3* const&)>:
   36460:	55                   	push   rbp
   36461:	48 89 e5             	mov    rbp,rsp
   36464:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36468:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3646c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36470:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36473:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36477:	48 89 10             	mov    QWORD PTR [rax],rdx
   3647a:	90                   	nop
   3647b:	5d                   	pop    rbp
   3647c:	c3                   	ret    
   3647d:	90                   	nop

000000000003647e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const>:
   3647e:	55                   	push   rbp
   3647f:	48 89 e5             	mov    rbp,rsp
   36482:	53                   	push   rbx
   36483:	48 83 ec 48          	sub    rsp,0x48
   36487:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   3648b:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   3648f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36493:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3649c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   364a0:	31 c0                	xor    eax,eax
   364a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   364a6:	48 89 c7             	mov    rdi,rax
   364a9:	e8 9e 12 00 00       	call   3774c <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>
   364ae:	48 89 c3             	mov    rbx,rax
   364b1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   364b5:	48 89 c7             	mov    rdi,rax
   364b8:	e8 77 ea ff ff       	call   34f34 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   364bd:	48 29 c3             	sub    rbx,rax
   364c0:	48 89 da             	mov    rdx,rbx
   364c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   364c7:	48 39 c2             	cmp    rdx,rax
   364ca:	0f 92 c0             	setb   al
   364cd:	84 c0                	test   al,al
   364cf:	74 0c                	je     364dd <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0x5f>
   364d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   364d5:	48 89 c7             	mov    rdi,rax
   364d8:	e8 f3 dc fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   364dd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   364e1:	48 89 c7             	mov    rdi,rax
   364e4:	e8 4b ea ff ff       	call   34f34 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   364e9:	48 89 c3             	mov    rbx,rax
   364ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   364f0:	48 89 c7             	mov    rdi,rax
   364f3:	e8 3c ea ff ff       	call   34f34 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   364f8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   364fc:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   36500:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   36504:	48 89 d6             	mov    rsi,rdx
   36507:	48 89 c7             	mov    rdi,rax
   3650a:	e8 43 f0 fe ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   3650f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36512:	48 01 d8             	add    rax,rbx
   36515:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   36519:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3651d:	48 89 c7             	mov    rdi,rax
   36520:	e8 0f ea ff ff       	call   34f34 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   36525:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36529:	72 12                	jb     3653d <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xbf>
   3652b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3652f:	48 89 c7             	mov    rdi,rax
   36532:	e8 15 12 00 00       	call   3774c <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>
   36537:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   3653b:	76 0e                	jbe    3654b <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xcd>
   3653d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36541:	48 89 c7             	mov    rdi,rax
   36544:	e8 03 12 00 00       	call   3774c <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>
   36549:	eb 04                	jmp    3654f <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xd1>
   3654b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3654f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   36553:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   3655c:	74 05                	je     36563 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xe5>
   3655e:	e8 4d df fc ff       	call   44b0 <__stack_chk_fail@plt>
   36563:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36567:	c9                   	leave  
   36568:	c3                   	ret    
   36569:	90                   	nop

000000000003656a <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::begin()>:
   3656a:	55                   	push   rbp
   3656b:	48 89 e5             	mov    rbp,rsp
   3656e:	48 83 ec 20          	sub    rsp,0x20
   36572:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36576:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3657f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   36583:	31 c0                	xor    eax,eax
   36585:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36589:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3658d:	48 89 d6             	mov    rsi,rdx
   36590:	48 89 c7             	mov    rdi,rax
   36593:	e8 c8 fe ff ff       	call   36460 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::__normal_iterator(objl::Vector3* const&)>
   36598:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3659c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   365a0:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   365a9:	74 05                	je     365b0 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::begin()+0x46>
   365ab:	e8 00 df fc ff       	call   44b0 <__stack_chk_fail@plt>
   365b0:	c9                   	leave  
   365b1:	c3                   	ret    

00000000000365b2 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::difference_type __gnu_cxx::operator-<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&, __gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&)>:
   365b2:	55                   	push   rbp
   365b3:	48 89 e5             	mov    rbp,rsp
   365b6:	53                   	push   rbx
   365b7:	48 83 ec 18          	sub    rsp,0x18
   365bb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   365bf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   365c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   365c7:	48 89 c7             	mov    rdi,rax
   365ca:	e8 99 00 00 00       	call   36668 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   365cf:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   365d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   365d6:	48 89 c7             	mov    rdi,rax
   365d9:	e8 8a 00 00 00       	call   36668 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   365de:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   365e1:	48 89 d8             	mov    rax,rbx
   365e4:	48 29 d0             	sub    rax,rdx
   365e7:	48 c1 f8 02          	sar    rax,0x2
   365eb:	48 89 c2             	mov    rdx,rax
   365ee:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   365f8:	48 0f af c2          	imul   rax,rdx
   365fc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36600:	c9                   	leave  
   36601:	c3                   	ret    

0000000000036602 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)>:
   36602:	55                   	push   rbp
   36603:	48 89 e5             	mov    rbp,rsp
   36606:	48 83 ec 10          	sub    rsp,0x10
   3660a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3660e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36612:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   36617:	74 15                	je     3662e <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)+0x2c>
   36619:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3661d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36621:	48 89 d6             	mov    rsi,rdx
   36624:	48 89 c7             	mov    rdi,rax
   36627:	e8 42 11 00 00       	call   3776e <std::allocator_traits<std::allocator<objl::Vector3> >::allocate(std::allocator<objl::Vector3>&, unsigned long)>
   3662c:	eb 05                	jmp    36633 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)+0x31>
   3662e:	b8 00 00 00 00       	mov    eax,0x0
   36633:	c9                   	leave  
   36634:	c3                   	ret    

0000000000036635 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   36635:	55                   	push   rbp
   36636:	48 89 e5             	mov    rbp,rsp
   36639:	48 83 ec 20          	sub    rsp,0x20
   3663d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36641:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36645:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   36649:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   3664d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   36651:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36655:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   36659:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3665d:	48 89 c7             	mov    rdi,rax
   36660:	e8 33 11 00 00       	call   37798 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_do_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&, std::integral_constant<bool, true>)>
   36665:	c9                   	leave  
   36666:	c3                   	ret    
   36667:	90                   	nop

0000000000036668 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>:
   36668:	55                   	push   rbp
   36669:	48 89 e5             	mov    rbp,rsp
   3666c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36670:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36674:	5d                   	pop    rbp
   36675:	c3                   	ret    

0000000000036676 <void std::allocator_traits<std::allocator<objl::Vector3> >::destroy<objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*)>:
   36676:	55                   	push   rbp
   36677:	48 89 e5             	mov    rbp,rsp
   3667a:	48 83 ec 10          	sub    rsp,0x10
   3667e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36682:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36686:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3668a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3668e:	48 89 d6             	mov    rsi,rdx
   36691:	48 89 c7             	mov    rdi,rax
   36694:	e8 31 11 00 00       	call   377ca <void __gnu_cxx::new_allocator<objl::Vector3>::destroy<objl::Vector3>(objl::Vector3*)>
   36699:	90                   	nop
   3669a:	c9                   	leave  
   3669b:	c3                   	ret    

000000000003669c <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>:
   3669c:	55                   	push   rbp
   3669d:	48 89 e5             	mov    rbp,rsp
   366a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   366a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   366a8:	5d                   	pop    rbp
   366a9:	c3                   	ret    

00000000000366aa <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2 const&>(objl::Vector2*, objl::Vector2 const&)>:
   366aa:	55                   	push   rbp
   366ab:	48 89 e5             	mov    rbp,rsp
   366ae:	53                   	push   rbx
   366af:	48 83 ec 28          	sub    rsp,0x28
   366b3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   366b7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   366bb:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   366bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   366c3:	48 89 c7             	mov    rdi,rax
   366c6:	e8 d1 ff ff ff       	call   3669c <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>
   366cb:	48 89 c3             	mov    rbx,rax
   366ce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   366d2:	48 89 c6             	mov    rsi,rax
   366d5:	bf 08 00 00 00       	mov    edi,0x8
   366da:	e8 b8 e4 fe ff       	call   24b97 <operator new(unsigned long, void*)>
   366df:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   366e2:	48 89 10             	mov    QWORD PTR [rax],rdx
   366e5:	90                   	nop
   366e6:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   366ea:	c9                   	leave  
   366eb:	c3                   	ret    

00000000000366ec <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::__normal_iterator(objl::Vector2* const&)>:
   366ec:	55                   	push   rbp
   366ed:	48 89 e5             	mov    rbp,rsp
   366f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   366f4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   366f8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   366fc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   366ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36703:	48 89 10             	mov    QWORD PTR [rax],rdx
   36706:	90                   	nop
   36707:	5d                   	pop    rbp
   36708:	c3                   	ret    
   36709:	90                   	nop

000000000003670a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const>:
   3670a:	55                   	push   rbp
   3670b:	48 89 e5             	mov    rbp,rsp
   3670e:	53                   	push   rbx
   3670f:	48 83 ec 48          	sub    rsp,0x48
   36713:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36717:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   3671b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   3671f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36728:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3672c:	31 c0                	xor    eax,eax
   3672e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36732:	48 89 c7             	mov    rdi,rax
   36735:	e8 a0 10 00 00       	call   377da <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>
   3673a:	48 89 c3             	mov    rbx,rax
   3673d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36741:	48 89 c7             	mov    rdi,rax
   36744:	e8 49 e8 ff ff       	call   34f92 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   36749:	48 29 c3             	sub    rbx,rax
   3674c:	48 89 da             	mov    rdx,rbx
   3674f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   36753:	48 39 c2             	cmp    rdx,rax
   36756:	0f 92 c0             	setb   al
   36759:	84 c0                	test   al,al
   3675b:	74 0c                	je     36769 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0x5f>
   3675d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   36761:	48 89 c7             	mov    rdi,rax
   36764:	e8 67 da fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   36769:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3676d:	48 89 c7             	mov    rdi,rax
   36770:	e8 1d e8 ff ff       	call   34f92 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   36775:	48 89 c3             	mov    rbx,rax
   36778:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3677c:	48 89 c7             	mov    rdi,rax
   3677f:	e8 0e e8 ff ff       	call   34f92 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   36784:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36788:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   3678c:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   36790:	48 89 d6             	mov    rsi,rdx
   36793:	48 89 c7             	mov    rdi,rax
   36796:	e8 b7 ed fe ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   3679b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3679e:	48 01 d8             	add    rax,rbx
   367a1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   367a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   367a9:	48 89 c7             	mov    rdi,rax
   367ac:	e8 e1 e7 ff ff       	call   34f92 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   367b1:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   367b5:	72 12                	jb     367c9 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xbf>
   367b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   367bb:	48 89 c7             	mov    rdi,rax
   367be:	e8 17 10 00 00       	call   377da <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>
   367c3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   367c7:	76 0e                	jbe    367d7 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xcd>
   367c9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   367cd:	48 89 c7             	mov    rdi,rax
   367d0:	e8 05 10 00 00       	call   377da <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>
   367d5:	eb 04                	jmp    367db <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xd1>
   367d7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   367db:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   367df:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   367e8:	74 05                	je     367ef <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xe5>
   367ea:	e8 c1 dc fc ff       	call   44b0 <__stack_chk_fail@plt>
   367ef:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   367f3:	c9                   	leave  
   367f4:	c3                   	ret    
   367f5:	90                   	nop

00000000000367f6 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::begin()>:
   367f6:	55                   	push   rbp
   367f7:	48 89 e5             	mov    rbp,rsp
   367fa:	48 83 ec 20          	sub    rsp,0x20
   367fe:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36802:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3680b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3680f:	31 c0                	xor    eax,eax
   36811:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36815:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   36819:	48 89 d6             	mov    rsi,rdx
   3681c:	48 89 c7             	mov    rdi,rax
   3681f:	e8 c8 fe ff ff       	call   366ec <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::__normal_iterator(objl::Vector2* const&)>
   36824:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36828:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3682c:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   36835:	74 05                	je     3683c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::begin()+0x46>
   36837:	e8 74 dc fc ff       	call   44b0 <__stack_chk_fail@plt>
   3683c:	c9                   	leave  
   3683d:	c3                   	ret    

000000000003683e <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::difference_type __gnu_cxx::operator-<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&, __gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&)>:
   3683e:	55                   	push   rbp
   3683f:	48 89 e5             	mov    rbp,rsp
   36842:	53                   	push   rbx
   36843:	48 83 ec 18          	sub    rsp,0x18
   36847:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3684b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3684f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36853:	48 89 c7             	mov    rdi,rax
   36856:	e8 89 00 00 00       	call   368e4 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   3685b:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   3685e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36862:	48 89 c7             	mov    rdi,rax
   36865:	e8 7a 00 00 00       	call   368e4 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   3686a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3686d:	48 89 d8             	mov    rax,rbx
   36870:	48 29 d0             	sub    rax,rdx
   36873:	48 c1 f8 03          	sar    rax,0x3
   36877:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3687b:	c9                   	leave  
   3687c:	c3                   	ret    
   3687d:	90                   	nop

000000000003687e <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)>:
   3687e:	55                   	push   rbp
   3687f:	48 89 e5             	mov    rbp,rsp
   36882:	48 83 ec 10          	sub    rsp,0x10
   36886:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3688a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3688e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   36893:	74 15                	je     368aa <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)+0x2c>
   36895:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36899:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3689d:	48 89 d6             	mov    rsi,rdx
   368a0:	48 89 c7             	mov    rdi,rax
   368a3:	e8 54 0f 00 00       	call   377fc <std::allocator_traits<std::allocator<objl::Vector2> >::allocate(std::allocator<objl::Vector2>&, unsigned long)>
   368a8:	eb 05                	jmp    368af <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)+0x31>
   368aa:	b8 00 00 00 00       	mov    eax,0x0
   368af:	c9                   	leave  
   368b0:	c3                   	ret    

00000000000368b1 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   368b1:	55                   	push   rbp
   368b2:	48 89 e5             	mov    rbp,rsp
   368b5:	48 83 ec 20          	sub    rsp,0x20
   368b9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   368bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   368c1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   368c5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   368c9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   368cd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   368d1:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   368d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   368d9:	48 89 c7             	mov    rdi,rax
   368dc:	e8 45 0f 00 00       	call   37826 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_do_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&, std::integral_constant<bool, true>)>
   368e1:	c9                   	leave  
   368e2:	c3                   	ret    
   368e3:	90                   	nop

00000000000368e4 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>:
   368e4:	55                   	push   rbp
   368e5:	48 89 e5             	mov    rbp,rsp
   368e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   368ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   368f0:	5d                   	pop    rbp
   368f1:	c3                   	ret    

00000000000368f2 <void std::allocator_traits<std::allocator<objl::Vector2> >::destroy<objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*)>:
   368f2:	55                   	push   rbp
   368f3:	48 89 e5             	mov    rbp,rsp
   368f6:	48 83 ec 10          	sub    rsp,0x10
   368fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   368fe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36902:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36906:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3690a:	48 89 d6             	mov    rsi,rdx
   3690d:	48 89 c7             	mov    rdi,rax
   36910:	e8 43 0f 00 00       	call   37858 <void __gnu_cxx::new_allocator<objl::Vector2>::destroy<objl::Vector2>(objl::Vector2*)>
   36915:	90                   	nop
   36916:	c9                   	leave  
   36917:	c3                   	ret    

0000000000036918 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>:
   36918:	55                   	push   rbp
   36919:	48 89 e5             	mov    rbp,rsp
   3691c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36920:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36924:	5d                   	pop    rbp
   36925:	c3                   	ret    

0000000000036926 <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>:
   36926:	55                   	push   rbp
   36927:	48 89 e5             	mov    rbp,rsp
   3692a:	53                   	push   rbx
   3692b:	48 83 ec 28          	sub    rsp,0x28
   3692f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36933:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36937:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3693b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3693f:	48 89 c7             	mov    rdi,rax
   36942:	e8 d1 ff ff ff       	call   36918 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   36947:	48 89 c3             	mov    rbx,rax
   3694a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3694e:	48 89 c6             	mov    rsi,rax
   36951:	bf 20 00 00 00       	mov    edi,0x20
   36956:	e8 3c e2 fe ff       	call   24b97 <operator new(unsigned long, void*)>
   3695b:	48 89 c1             	mov    rcx,rax
   3695e:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   36961:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   36965:	48 89 01             	mov    QWORD PTR [rcx],rax
   36968:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   3696c:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   36970:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   36974:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   36978:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   3697c:	90                   	nop
   3697d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36981:	c9                   	leave  
   36982:	c3                   	ret    
   36983:	90                   	nop

0000000000036984 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const>:
   36984:	55                   	push   rbp
   36985:	48 89 e5             	mov    rbp,rsp
   36988:	53                   	push   rbx
   36989:	48 83 ec 48          	sub    rsp,0x48
   3698d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36991:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36995:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36999:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   369a2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   369a6:	31 c0                	xor    eax,eax
   369a8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   369ac:	48 89 c7             	mov    rdi,rax
   369af:	e8 b4 0e 00 00       	call   37868 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>
   369b4:	48 89 c3             	mov    rbx,rax
   369b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   369bb:	48 89 c7             	mov    rdi,rax
   369be:	e8 97 f7 fe ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   369c3:	48 29 c3             	sub    rbx,rax
   369c6:	48 89 da             	mov    rdx,rbx
   369c9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   369cd:	48 39 c2             	cmp    rdx,rax
   369d0:	0f 92 c0             	setb   al
   369d3:	84 c0                	test   al,al
   369d5:	74 0c                	je     369e3 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0x5f>
   369d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   369db:	48 89 c7             	mov    rdi,rax
   369de:	e8 ed d7 fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   369e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   369e7:	48 89 c7             	mov    rdi,rax
   369ea:	e8 6b f7 fe ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   369ef:	48 89 c3             	mov    rbx,rax
   369f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   369f6:	48 89 c7             	mov    rdi,rax
   369f9:	e8 5c f7 fe ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   369fe:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36a02:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   36a06:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   36a0a:	48 89 d6             	mov    rsi,rdx
   36a0d:	48 89 c7             	mov    rdi,rax
   36a10:	e8 3d eb fe ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   36a15:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36a18:	48 01 d8             	add    rax,rbx
   36a1b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   36a1f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36a23:	48 89 c7             	mov    rdi,rax
   36a26:	e8 2f f7 fe ff       	call   2615a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   36a2b:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36a2f:	72 12                	jb     36a43 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xbf>
   36a31:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36a35:	48 89 c7             	mov    rdi,rax
   36a38:	e8 2b 0e 00 00       	call   37868 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>
   36a3d:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36a41:	76 0e                	jbe    36a51 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xcd>
   36a43:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36a47:	48 89 c7             	mov    rdi,rax
   36a4a:	e8 19 0e 00 00       	call   37868 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>
   36a4f:	eb 04                	jmp    36a55 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xd1>
   36a51:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36a55:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   36a59:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   36a62:	74 05                	je     36a69 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xe5>
   36a64:	e8 47 da fc ff       	call   44b0 <__stack_chk_fail@plt>
   36a69:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36a6d:	c9                   	leave  
   36a6e:	c3                   	ret    

0000000000036a6f <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   36a6f:	55                   	push   rbp
   36a70:	48 89 e5             	mov    rbp,rsp
   36a73:	53                   	push   rbx
   36a74:	48 83 ec 18          	sub    rsp,0x18
   36a78:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36a7c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36a80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36a84:	48 89 c7             	mov    rdi,rax
   36a87:	e8 42 e6 ff ff       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36a8c:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36a8f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36a93:	48 89 c7             	mov    rdi,rax
   36a96:	e8 33 e6 ff ff       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36a9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36a9e:	48 89 d8             	mov    rax,rbx
   36aa1:	48 29 d0             	sub    rax,rdx
   36aa4:	48 c1 f8 05          	sar    rax,0x5
   36aa8:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36aac:	c9                   	leave  
   36aad:	c3                   	ret    

0000000000036aae <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   36aae:	55                   	push   rbp
   36aaf:	48 89 e5             	mov    rbp,rsp
   36ab2:	48 83 ec 20          	sub    rsp,0x20
   36ab6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36aba:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36abe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   36ac2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   36ac6:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   36aca:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36ace:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   36ad2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36ad6:	48 89 c7             	mov    rdi,rax
   36ad9:	e8 ac 0d 00 00       	call   3788a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_do_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&, std::integral_constant<bool, true>)>
   36ade:	c9                   	leave  
   36adf:	c3                   	ret    

0000000000036ae0 <void std::allocator_traits<std::allocator<objl::Vertex> >::destroy<objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*)>:
   36ae0:	55                   	push   rbp
   36ae1:	48 89 e5             	mov    rbp,rsp
   36ae4:	48 83 ec 10          	sub    rsp,0x10
   36ae8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36aec:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36af0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36af4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36af8:	48 89 d6             	mov    rsi,rdx
   36afb:	48 89 c7             	mov    rdi,rax
   36afe:	e8 b9 0d 00 00       	call   378bc <void __gnu_cxx::new_allocator<objl::Vertex>::destroy<objl::Vertex>(objl::Vertex*)>
   36b03:	90                   	nop
   36b04:	c9                   	leave  
   36b05:	c3                   	ret    

0000000000036b06 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh const* const&)>:
   36b06:	55                   	push   rbp
   36b07:	48 89 e5             	mov    rbp,rsp
   36b0a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36b0e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36b12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36b16:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36b19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36b1d:	48 89 10             	mov    QWORD PTR [rax],rdx
   36b20:	90                   	nop
   36b21:	5d                   	pop    rbp
   36b22:	c3                   	ret    
   36b23:	90                   	nop

0000000000036b24 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>:
   36b24:	55                   	push   rbp
   36b25:	48 89 e5             	mov    rbp,rsp
   36b28:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36b2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36b30:	5d                   	pop    rbp
   36b31:	c3                   	ret    

0000000000036b32 <std::allocator_traits<std::allocator<objl::Vertex> >::select_on_container_copy_construction(std::allocator<objl::Vertex> const&)>:
   36b32:	55                   	push   rbp
   36b33:	48 89 e5             	mov    rbp,rsp
   36b36:	48 83 ec 10          	sub    rsp,0x10
   36b3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36b3e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36b42:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36b46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36b4a:	48 89 d6             	mov    rsi,rdx
   36b4d:	48 89 c7             	mov    rdi,rax
   36b50:	e8 15 09 00 00       	call   3746a <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   36b55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36b59:	c9                   	leave  
   36b5a:	c3                   	ret    
   36b5b:	90                   	nop

0000000000036b5c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::allocator<objl::Vertex> const&)>:
   36b5c:	55                   	push   rbp
   36b5d:	48 89 e5             	mov    rbp,rsp
   36b60:	48 83 ec 10          	sub    rsp,0x10
   36b64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36b68:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36b6c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36b70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36b74:	48 89 d6             	mov    rsi,rdx
   36b77:	48 89 c7             	mov    rdi,rax
   36b7a:	e8 eb 08 00 00       	call   3746a <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   36b7f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36b83:	48 89 c7             	mov    rdi,rax
   36b86:	e8 71 cc ff ff       	call   337fc <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>
   36b8b:	90                   	nop
   36b8c:	c9                   	leave  
   36b8d:	c3                   	ret    

0000000000036b8e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_create_storage(unsigned long)>:
   36b8e:	55                   	push   rbp
   36b8f:	48 89 e5             	mov    rbp,rsp
   36b92:	48 83 ec 10          	sub    rsp,0x10
   36b96:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36b9a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36b9e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36ba2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36ba6:	48 89 d6             	mov    rsi,rdx
   36ba9:	48 89 c7             	mov    rdi,rax
   36bac:	e8 b5 ea ff ff       	call   35666 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>
   36bb1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   36bb5:	48 89 02             	mov    QWORD PTR [rdx],rax
   36bb8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36bbc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36bbf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36bc3:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   36bc7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36bcb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36bce:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36bd2:	48 c1 e0 05          	shl    rax,0x5
   36bd6:	48 01 c2             	add    rdx,rax
   36bd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36bdd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   36be1:	90                   	nop
   36be2:	c9                   	leave  
   36be3:	c3                   	ret    

0000000000036be4 <objl::Vertex* std::uninitialized_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>:
   36be4:	55                   	push   rbp
   36be5:	48 89 e5             	mov    rbp,rsp
   36be8:	48 83 ec 30          	sub    rsp,0x30
   36bec:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36bf0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36bf4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   36bf8:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   36bfc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   36c00:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   36c04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36c08:	48 89 ce             	mov    rsi,rcx
   36c0b:	48 89 c7             	mov    rdi,rax
   36c0e:	e8 b8 0c 00 00       	call   378cb <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   36c13:	c9                   	leave  
   36c14:	c3                   	ret    

0000000000036c15 <bool __gnu_cxx::operator!=<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   36c15:	55                   	push   rbp
   36c16:	48 89 e5             	mov    rbp,rsp
   36c19:	53                   	push   rbx
   36c1a:	48 83 ec 18          	sub    rsp,0x18
   36c1e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36c22:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36c26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36c2a:	48 89 c7             	mov    rdi,rax
   36c2d:	e8 9c e4 ff ff       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36c32:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36c35:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36c39:	48 89 c7             	mov    rdi,rax
   36c3c:	e8 8d e4 ff ff       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36c41:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36c44:	48 39 c3             	cmp    rbx,rax
   36c47:	0f 95 c0             	setne  al
   36c4a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36c4e:	c9                   	leave  
   36c4f:	c3                   	ret    

0000000000036c50 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::move<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   36c50:	55                   	push   rbp
   36c51:	48 89 e5             	mov    rbp,rsp
   36c54:	53                   	push   rbx
   36c55:	48 83 ec 28          	sub    rsp,0x28
   36c59:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36c5d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36c61:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   36c65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36c69:	48 89 c7             	mov    rdi,rax
   36c6c:	e8 d1 0c 00 00       	call   37942 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   36c71:	48 89 c3             	mov    rbx,rax
   36c74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36c78:	48 89 c7             	mov    rdi,rax
   36c7b:	e8 c2 0c 00 00       	call   37942 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   36c80:	48 89 c1             	mov    rcx,rax
   36c83:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   36c87:	48 89 c2             	mov    rdx,rax
   36c8a:	48 89 de             	mov    rsi,rbx
   36c8d:	48 89 cf             	mov    rdi,rcx
   36c90:	e8 bb 0c 00 00       	call   37950 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<true, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   36c95:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36c99:	c9                   	leave  
   36c9a:	c3                   	ret    

0000000000036c9b <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>:
   36c9b:	55                   	push   rbp
   36c9c:	48 89 e5             	mov    rbp,rsp
   36c9f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36ca3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36ca7:	5d                   	pop    rbp
   36ca8:	c3                   	ret    
   36ca9:	90                   	nop

0000000000036caa <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material const&>(objl::Material*, objl::Material const&)>:
   36caa:	55                   	push   rbp
   36cab:	48 89 e5             	mov    rbp,rsp
   36cae:	41 55                	push   r13
   36cb0:	41 54                	push   r12
   36cb2:	53                   	push   rbx
   36cb3:	48 83 ec 28          	sub    rsp,0x28
   36cb7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   36cbb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   36cbf:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   36cc3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36cc7:	48 89 c7             	mov    rdi,rax
   36cca:	e8 cc ff ff ff       	call   36c9b <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>
   36ccf:	49 89 c5             	mov    r13,rax
   36cd2:	48 8b 5d d0          	mov    rbx,QWORD PTR [rbp-0x30]
   36cd6:	48 89 de             	mov    rsi,rbx
   36cd9:	bf 18 01 00 00       	mov    edi,0x118
   36cde:	e8 b4 de fe ff       	call   24b97 <operator new(unsigned long, void*)>
   36ce3:	49 89 c4             	mov    r12,rax
   36ce6:	4c 89 ee             	mov    rsi,r13
   36ce9:	4c 89 e7             	mov    rdi,r12
   36cec:	e8 2d f2 ff ff       	call   35f1e <objl::Material::Material(objl::Material const&)>
   36cf1:	eb 19                	jmp    36d0c <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material const&>(objl::Material*, objl::Material const&)+0x62>
   36cf3:	49 89 c5             	mov    r13,rax
   36cf6:	48 89 de             	mov    rsi,rbx
   36cf9:	4c 89 e7             	mov    rdi,r12
   36cfc:	e8 a8 de fe ff       	call   24ba9 <operator delete(void*, void*)>
   36d01:	4c 89 e8             	mov    rax,r13
   36d04:	48 89 c7             	mov    rdi,rax
   36d07:	e8 24 da fc ff       	call   4730 <_Unwind_Resume@plt>
   36d0c:	48 83 c4 28          	add    rsp,0x28
   36d10:	5b                   	pop    rbx
   36d11:	41 5c                	pop    r12
   36d13:	41 5d                	pop    r13
   36d15:	5d                   	pop    rbp
   36d16:	c3                   	ret    
   36d17:	90                   	nop

0000000000036d18 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material* const&)>:
   36d18:	55                   	push   rbp
   36d19:	48 89 e5             	mov    rbp,rsp
   36d1c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36d20:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36d24:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36d28:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36d2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36d2f:	48 89 10             	mov    QWORD PTR [rax],rdx
   36d32:	90                   	nop
   36d33:	5d                   	pop    rbp
   36d34:	c3                   	ret    
   36d35:	90                   	nop

0000000000036d36 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const>:
   36d36:	55                   	push   rbp
   36d37:	48 89 e5             	mov    rbp,rsp
   36d3a:	53                   	push   rbx
   36d3b:	48 83 ec 48          	sub    rsp,0x48
   36d3f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36d43:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36d47:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36d4b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36d54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   36d58:	31 c0                	xor    eax,eax
   36d5a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36d5e:	48 89 c7             	mov    rdi,rax
   36d61:	e8 54 0c 00 00       	call   379ba <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>
   36d66:	48 89 c3             	mov    rbx,rax
   36d69:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36d6d:	48 89 c7             	mov    rdi,rax
   36d70:	e8 7d c5 ff ff       	call   332f2 <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36d75:	48 29 c3             	sub    rbx,rax
   36d78:	48 89 da             	mov    rdx,rbx
   36d7b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   36d7f:	48 39 c2             	cmp    rdx,rax
   36d82:	0f 92 c0             	setb   al
   36d85:	84 c0                	test   al,al
   36d87:	74 0c                	je     36d95 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0x5f>
   36d89:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   36d8d:	48 89 c7             	mov    rdi,rax
   36d90:	e8 3b d4 fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   36d95:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36d99:	48 89 c7             	mov    rdi,rax
   36d9c:	e8 51 c5 ff ff       	call   332f2 <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36da1:	48 89 c3             	mov    rbx,rax
   36da4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36da8:	48 89 c7             	mov    rdi,rax
   36dab:	e8 42 c5 ff ff       	call   332f2 <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36db0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36db4:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   36db8:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   36dbc:	48 89 d6             	mov    rsi,rdx
   36dbf:	48 89 c7             	mov    rdi,rax
   36dc2:	e8 8b e7 fe ff       	call   25552 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   36dc7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36dca:	48 01 d8             	add    rax,rbx
   36dcd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   36dd1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36dd5:	48 89 c7             	mov    rdi,rax
   36dd8:	e8 15 c5 ff ff       	call   332f2 <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36ddd:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36de1:	72 12                	jb     36df5 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xbf>
   36de3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36de7:	48 89 c7             	mov    rdi,rax
   36dea:	e8 cb 0b 00 00       	call   379ba <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>
   36def:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36df3:	76 0e                	jbe    36e03 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xcd>
   36df5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36df9:	48 89 c7             	mov    rdi,rax
   36dfc:	e8 b9 0b 00 00       	call   379ba <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>
   36e01:	eb 04                	jmp    36e07 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xd1>
   36e03:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36e07:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   36e0b:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   36e14:	74 05                	je     36e1b <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xe5>
   36e16:	e8 95 d6 fc ff       	call   44b0 <__stack_chk_fail@plt>
   36e1b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36e1f:	c9                   	leave  
   36e20:	c3                   	ret    
   36e21:	90                   	nop

0000000000036e22 <std::vector<objl::Material, std::allocator<objl::Material> >::begin()>:
   36e22:	55                   	push   rbp
   36e23:	48 89 e5             	mov    rbp,rsp
   36e26:	48 83 ec 20          	sub    rsp,0x20
   36e2a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36e2e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36e37:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   36e3b:	31 c0                	xor    eax,eax
   36e3d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36e41:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   36e45:	48 89 d6             	mov    rsi,rdx
   36e48:	48 89 c7             	mov    rdi,rax
   36e4b:	e8 c8 fe ff ff       	call   36d18 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material* const&)>
   36e50:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36e54:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   36e58:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   36e61:	74 05                	je     36e68 <std::vector<objl::Material, std::allocator<objl::Material> >::begin()+0x46>
   36e63:	e8 48 d6 fc ff       	call   44b0 <__stack_chk_fail@plt>
   36e68:	c9                   	leave  
   36e69:	c3                   	ret    

0000000000036e6a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::difference_type __gnu_cxx::operator-<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>:
   36e6a:	55                   	push   rbp
   36e6b:	48 89 e5             	mov    rbp,rsp
   36e6e:	53                   	push   rbx
   36e6f:	48 83 ec 18          	sub    rsp,0x18
   36e73:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36e77:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36e7b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36e7f:	48 89 c7             	mov    rdi,rax
   36e82:	e8 99 00 00 00       	call   36f20 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   36e87:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36e8a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36e8e:	48 89 c7             	mov    rdi,rax
   36e91:	e8 8a 00 00 00       	call   36f20 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   36e96:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36e99:	48 89 d8             	mov    rax,rbx
   36e9c:	48 29 d0             	sub    rax,rdx
   36e9f:	48 c1 f8 03          	sar    rax,0x3
   36ea3:	48 89 c2             	mov    rdx,rax
   36ea6:	48 b8 8b af f8 8a af f8 8a af 	movabs rax,0xaf8af8af8af8af8b
   36eb0:	48 0f af c2          	imul   rax,rdx
   36eb4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36eb8:	c9                   	leave  
   36eb9:	c3                   	ret    

0000000000036eba <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)>:
   36eba:	55                   	push   rbp
   36ebb:	48 89 e5             	mov    rbp,rsp
   36ebe:	48 83 ec 10          	sub    rsp,0x10
   36ec2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36ec6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36eca:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   36ecf:	74 15                	je     36ee6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)+0x2c>
   36ed1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36ed5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36ed9:	48 89 d6             	mov    rsi,rdx
   36edc:	48 89 c7             	mov    rdi,rax
   36edf:	e8 f8 0a 00 00       	call   379dc <std::allocator_traits<std::allocator<objl::Material> >::allocate(std::allocator<objl::Material>&, unsigned long)>
   36ee4:	eb 05                	jmp    36eeb <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)+0x31>
   36ee6:	b8 00 00 00 00       	mov    eax,0x0
   36eeb:	c9                   	leave  
   36eec:	c3                   	ret    

0000000000036eed <std::vector<objl::Material, std::allocator<objl::Material> >::_S_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   36eed:	55                   	push   rbp
   36eee:	48 89 e5             	mov    rbp,rsp
   36ef1:	48 83 ec 20          	sub    rsp,0x20
   36ef5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36ef9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36efd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   36f01:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   36f05:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   36f09:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36f0d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   36f11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36f15:	48 89 c7             	mov    rdi,rax
   36f18:	e8 e9 0a 00 00       	call   37a06 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_do_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&, std::integral_constant<bool, true>)>
   36f1d:	c9                   	leave  
   36f1e:	c3                   	ret    
   36f1f:	90                   	nop

0000000000036f20 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>:
   36f20:	55                   	push   rbp
   36f21:	48 89 e5             	mov    rbp,rsp
   36f24:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36f28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36f2c:	5d                   	pop    rbp
   36f2d:	c3                   	ret    

0000000000036f2e <void std::allocator_traits<std::allocator<objl::Material> >::destroy<objl::Material>(std::allocator<objl::Material>&, objl::Material*)>:
   36f2e:	55                   	push   rbp
   36f2f:	48 89 e5             	mov    rbp,rsp
   36f32:	48 83 ec 10          	sub    rsp,0x10
   36f36:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36f3a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36f3e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36f42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36f46:	48 89 d6             	mov    rsi,rdx
   36f49:	48 89 c7             	mov    rdi,rax
   36f4c:	e8 e7 0a 00 00       	call   37a38 <void __gnu_cxx::new_allocator<objl::Material>::destroy<objl::Material>(objl::Material*)>
   36f51:	90                   	nop
   36f52:	c9                   	leave  
   36f53:	c3                   	ret    

0000000000036f54 <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material const* const&)>:
   36f54:	55                   	push   rbp
   36f55:	48 89 e5             	mov    rbp,rsp
   36f58:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36f5c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36f60:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36f64:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36f67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36f6b:	48 89 10             	mov    QWORD PTR [rax],rdx
   36f6e:	90                   	nop
   36f6f:	5d                   	pop    rbp
   36f70:	c3                   	ret    
   36f71:	90                   	nop

0000000000036f72 <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>:
   36f72:	55                   	push   rbp
   36f73:	48 89 e5             	mov    rbp,rsp
   36f76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36f7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36f7e:	5d                   	pop    rbp
   36f7f:	c3                   	ret    

0000000000036f80 <__gnu_cxx::new_allocator<objl::Vertex>::deallocate(objl::Vertex*, unsigned long)>:
   36f80:	55                   	push   rbp
   36f81:	48 89 e5             	mov    rbp,rsp
   36f84:	48 83 ec 20          	sub    rsp,0x20
   36f88:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36f8c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36f90:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   36f94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36f98:	48 c1 e0 05          	shl    rax,0x5
   36f9c:	48 89 c2             	mov    rdx,rax
   36f9f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36fa3:	48 89 d6             	mov    rsi,rdx
   36fa6:	48 89 c7             	mov    rdi,rax
   36fa9:	e8 62 d4 fc ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   36fae:	c9                   	leave  
   36faf:	c3                   	ret    

0000000000036fb0 <void std::_Destroy_aux<true>::__destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>:
   36fb0:	55                   	push   rbp
   36fb1:	48 89 e5             	mov    rbp,rsp
   36fb4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36fb8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36fbc:	90                   	nop
   36fbd:	5d                   	pop    rbp
   36fbe:	c3                   	ret    

0000000000036fbf <std::allocator_traits<std::allocator<objl::Vertex> >::allocate(std::allocator<objl::Vertex>&, unsigned long)>:
   36fbf:	55                   	push   rbp
   36fc0:	48 89 e5             	mov    rbp,rsp
   36fc3:	48 83 ec 10          	sub    rsp,0x10
   36fc7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36fcb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36fcf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   36fd3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36fd7:	ba 00 00 00 00       	mov    edx,0x0
   36fdc:	48 89 ce             	mov    rsi,rcx
   36fdf:	48 89 c7             	mov    rdi,rax
   36fe2:	e8 71 0a 00 00       	call   37a58 <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)>
   36fe7:	c9                   	leave  
   36fe8:	c3                   	ret    

0000000000036fe9 <objl::Vertex const* std::__niter_base<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   36fe9:	55                   	push   rbp
   36fea:	48 89 e5             	mov    rbp,rsp
   36fed:	48 83 ec 10          	sub    rsp,0x10
   36ff1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36ff5:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   36ff9:	48 89 c7             	mov    rdi,rax
   36ffc:	e8 19 ed ff ff       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   37001:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37004:	c9                   	leave  
   37005:	c3                   	ret    

0000000000037006 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37006:	55                   	push   rbp
   37007:	48 89 e5             	mov    rbp,rsp
   3700a:	48 83 ec 10          	sub    rsp,0x10
   3700e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37012:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37016:	48 89 c7             	mov    rdi,rax
   37019:	e8 b0 e0 ff ff       	call   350ce <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3701e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37021:	c9                   	leave  
   37022:	c3                   	ret    

0000000000037023 <objl::Vertex* std::__copy_move_a1<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   37023:	55                   	push   rbp
   37024:	48 89 e5             	mov    rbp,rsp
   37027:	48 83 ec 20          	sub    rsp,0x20
   3702b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3702f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37033:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37037:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3703b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3703f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37043:	48 89 ce             	mov    rsi,rcx
   37046:	48 89 c7             	mov    rdi,rax
   37049:	e8 4d 0a 00 00       	call   37a9b <objl::Vertex* std::__copy_move_a2<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   3704e:	c9                   	leave  
   3704f:	c3                   	ret    

0000000000037050 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>:
   37050:	55                   	push   rbp
   37051:	48 89 e5             	mov    rbp,rsp
   37054:	48 83 ec 10          	sub    rsp,0x10
   37058:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3705c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37060:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37064:	48 89 c7             	mov    rdi,rax
   37067:	e8 9a ff ff ff       	call   37006 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   3706c:	48 89 c2             	mov    rdx,rax
   3706f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37073:	48 29 d0             	sub    rax,rdx
   37076:	48 c1 f8 05          	sar    rax,0x5
   3707a:	48 89 c2             	mov    rdx,rax
   3707d:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37081:	48 89 d6             	mov    rsi,rdx
   37084:	48 89 c7             	mov    rdi,rax
   37087:	e8 54 c5 ff ff       	call   335e0 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   3708c:	c9                   	leave  
   3708d:	c3                   	ret    

000000000003708e <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   3708e:	55                   	push   rbp
   3708f:	48 89 e5             	mov    rbp,rsp
   37092:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37096:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3709a:	90                   	nop
   3709b:	5d                   	pop    rbp
   3709c:	c3                   	ret    

000000000003709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>:
   3709d:	55                   	push   rbp
   3709e:	48 89 e5             	mov    rbp,rsp
   370a1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   370a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   370a9:	5d                   	pop    rbp
   370aa:	c3                   	ret    

00000000000370ab <objl::Vertex* std::__copy_move_a1<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   370ab:	55                   	push   rbp
   370ac:	48 89 e5             	mov    rbp,rsp
   370af:	48 83 ec 20          	sub    rsp,0x20
   370b3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   370b7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   370bb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   370bf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   370c3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   370c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   370cb:	48 89 ce             	mov    rsi,rcx
   370ce:	48 89 c7             	mov    rdi,rax
   370d1:	e8 f2 09 00 00       	call   37ac8 <objl::Vertex* std::__copy_move_a2<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   370d6:	c9                   	leave  
   370d7:	c3                   	ret    

00000000000370d8 <objl::Vertex* std::__niter_wrap<objl::Vertex*>(objl::Vertex* const&, objl::Vertex*)>:
   370d8:	55                   	push   rbp
   370d9:	48 89 e5             	mov    rbp,rsp
   370dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   370e0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   370e4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   370e8:	5d                   	pop    rbp
   370e9:	c3                   	ret    

00000000000370ea <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   370ea:	55                   	push   rbp
   370eb:	48 89 e5             	mov    rbp,rsp
   370ee:	48 83 ec 30          	sub    rsp,0x30
   370f2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   370f6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   370fa:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   370fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37102:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37106:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3710a:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
   3710e:	74 2a                	je     3713a <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)+0x50>
   37110:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37114:	48 89 c7             	mov    rdi,rax
   37117:	e8 d9 09 00 00       	call   37af5 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   3711c:	48 89 c2             	mov    rdx,rax
   3711f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37123:	48 89 c6             	mov    rsi,rax
   37126:	48 89 d7             	mov    rdi,rdx
   37129:	e8 d5 09 00 00       	call   37b03 <void std::_Construct<objl::Vertex, objl::Vertex&>(objl::Vertex*, objl::Vertex&)>
   3712e:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   37133:	48 83 45 f8 20       	add    QWORD PTR [rbp-0x8],0x20
   37138:	eb cc                	jmp    37106 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)+0x1c>
   3713a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3713e:	c9                   	leave  
   3713f:	c3                   	ret    

0000000000037140 <unsigned int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   37140:	55                   	push   rbp
   37141:	48 89 e5             	mov    rbp,rsp
   37144:	48 83 ec 30          	sub    rsp,0x30
   37148:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3714c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37150:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37154:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   37158:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3715c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37160:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37164:	48 89 ce             	mov    rsi,rcx
   37167:	48 89 c7             	mov    rdi,rax
   3716a:	e8 ed 09 00 00       	call   37b5c <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   3716f:	c9                   	leave  
   37170:	c3                   	ret    

0000000000037171 <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   37171:	55                   	push   rbp
   37172:	48 89 e5             	mov    rbp,rsp
   37175:	48 83 ec 10          	sub    rsp,0x10
   37179:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3717d:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37181:	48 89 c7             	mov    rdi,rax
   37184:	e8 83 eb ff ff       	call   35d0c <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   37189:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3718c:	c9                   	leave  
   3718d:	c3                   	ret    

000000000003718e <unsigned int* std::__niter_base<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   3718e:	55                   	push   rbp
   3718f:	48 89 e5             	mov    rbp,rsp
   37192:	48 83 ec 10          	sub    rsp,0x10
   37196:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3719a:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   3719e:	48 89 c7             	mov    rdi,rax
   371a1:	e8 ac 28 ff ff       	call   29a52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   371a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   371a9:	c9                   	leave  
   371aa:	c3                   	ret    

00000000000371ab <unsigned int* std::__copy_move_a1<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>:
   371ab:	55                   	push   rbp
   371ac:	48 89 e5             	mov    rbp,rsp
   371af:	48 83 ec 20          	sub    rsp,0x20
   371b3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   371b7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   371bb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   371bf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   371c3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   371c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   371cb:	48 89 ce             	mov    rsi,rcx
   371ce:	48 89 c7             	mov    rdi,rax
   371d1:	e8 b3 09 00 00       	call   37b89 <unsigned int* std::__copy_move_a2<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>
   371d6:	c9                   	leave  
   371d7:	c3                   	ret    

00000000000371d8 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   371d8:	55                   	push   rbp
   371d9:	48 89 e5             	mov    rbp,rsp
   371dc:	48 83 ec 10          	sub    rsp,0x10
   371e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   371e4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   371e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   371ec:	48 89 c7             	mov    rdi,rax
   371ef:	e8 9a ff ff ff       	call   3718e <unsigned int* std::__niter_base<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   371f4:	48 89 c2             	mov    rdx,rax
   371f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   371fb:	48 29 d0             	sub    rax,rdx
   371fe:	48 c1 f8 02          	sar    rax,0x2
   37202:	48 89 c2             	mov    rdx,rax
   37205:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37209:	48 89 d6             	mov    rsi,rdx
   3720c:	48 89 c7             	mov    rdi,rax
   3720f:	e8 a2 09 00 00       	call   37bb6 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator+(long) const>
   37214:	c9                   	leave  
   37215:	c3                   	ret    

0000000000037216 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   37216:	55                   	push   rbp
   37217:	48 89 e5             	mov    rbp,rsp
   3721a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3721e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37222:	90                   	nop
   37223:	5d                   	pop    rbp
   37224:	c3                   	ret    

0000000000037225 <unsigned int* std::__copy_move_a1<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   37225:	55                   	push   rbp
   37226:	48 89 e5             	mov    rbp,rsp
   37229:	48 83 ec 20          	sub    rsp,0x20
   3722d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37231:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37235:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37239:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3723d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37241:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37245:	48 89 ce             	mov    rsi,rcx
   37248:	48 89 c7             	mov    rdi,rax
   3724b:	e8 c8 09 00 00       	call   37c18 <unsigned int* std::__copy_move_a2<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   37250:	c9                   	leave  
   37251:	c3                   	ret    

0000000000037252 <unsigned int* std::__niter_wrap<unsigned int*>(unsigned int* const&, unsigned int*)>:
   37252:	55                   	push   rbp
   37253:	48 89 e5             	mov    rbp,rsp
   37256:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3725a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3725e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37262:	5d                   	pop    rbp
   37263:	c3                   	ret    

0000000000037264 <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   37264:	55                   	push   rbp
   37265:	48 89 e5             	mov    rbp,rsp
   37268:	48 83 ec 20          	sub    rsp,0x20
   3726c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37270:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37274:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37278:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3727c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37280:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37284:	48 89 ce             	mov    rsi,rcx
   37287:	48 89 c7             	mov    rdi,rax
   3728a:	e8 b6 ca ff ff       	call   33d45 <unsigned int* std::copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   3728f:	c9                   	leave  
   37290:	c3                   	ret    
   37291:	90                   	nop

0000000000037292 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator-(long) const>:
   37292:	55                   	push   rbp
   37293:	48 89 e5             	mov    rbp,rsp
   37296:	48 83 ec 30          	sub    rsp,0x30
   3729a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   3729e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   372a2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   372ab:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   372af:	31 c0                	xor    eax,eax
   372b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   372b5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   372b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   372bc:	48 c1 e0 05          	shl    rax,0x5
   372c0:	48 f7 d8             	neg    rax
   372c3:	48 01 d0             	add    rax,rdx
   372c6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   372ca:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   372ce:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   372d2:	48 89 d6             	mov    rsi,rdx
   372d5:	48 89 c7             	mov    rdi,rax
   372d8:	e8 ff 27 ff ff       	call   29adc <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>
   372dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   372e1:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   372e5:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   372ee:	74 05                	je     372f5 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator-(long) const+0x63>
   372f0:	e8 bb d1 fc ff       	call   44b0 <__stack_chk_fail@plt>
   372f5:	c9                   	leave  
   372f6:	c3                   	ret    
   372f7:	90                   	nop

00000000000372f8 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator*() const>:
   372f8:	55                   	push   rbp
   372f9:	48 89 e5             	mov    rbp,rsp
   372fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37300:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37304:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37307:	5d                   	pop    rbp
   37308:	c3                   	ret    
   37309:	90                   	nop

000000000003730a <__gnu_cxx::new_allocator<objl::Mesh>::deallocate(objl::Mesh*, unsigned long)>:
   3730a:	55                   	push   rbp
   3730b:	48 89 e5             	mov    rbp,rsp
   3730e:	48 83 ec 20          	sub    rsp,0x20
   37312:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37316:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3731a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3731e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37322:	48 69 d0 68 01 00 00 	imul   rdx,rax,0x168
   37329:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3732d:	48 89 d6             	mov    rsi,rdx
   37330:	48 89 c7             	mov    rdi,rax
   37333:	e8 d8 d0 fc ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   37338:	c9                   	leave  
   37339:	c3                   	ret    

000000000003733a <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>:
   3733a:	55                   	push   rbp
   3733b:	48 89 e5             	mov    rbp,rsp
   3733e:	48 83 ec 10          	sub    rsp,0x10
   37342:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37346:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3734a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3734e:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
   37352:	74 1e                	je     37372 <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)+0x38>
   37354:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37358:	48 89 c7             	mov    rdi,rax
   3735b:	e8 e5 08 00 00       	call   37c45 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   37360:	48 89 c7             	mov    rdi,rax
   37363:	e8 eb 08 00 00       	call   37c53 <void std::_Destroy<objl::Mesh>(objl::Mesh*)>
   37368:	48 81 45 f8 68 01 00 00 	add    QWORD PTR [rbp-0x8],0x168
   37370:	eb d8                	jmp    3734a <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)+0x10>
   37372:	90                   	nop
   37373:	c9                   	leave  
   37374:	c3                   	ret    
   37375:	90                   	nop

0000000000037376 <__gnu_cxx::new_allocator<objl::Material>::deallocate(objl::Material*, unsigned long)>:
   37376:	55                   	push   rbp
   37377:	48 89 e5             	mov    rbp,rsp
   3737a:	48 83 ec 20          	sub    rsp,0x20
   3737e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37382:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37386:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3738a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3738e:	48 69 d0 18 01 00 00 	imul   rdx,rax,0x118
   37395:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37399:	48 89 d6             	mov    rsi,rdx
   3739c:	48 89 c7             	mov    rdi,rax
   3739f:	e8 6c d0 fc ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   373a4:	c9                   	leave  
   373a5:	c3                   	ret    

00000000000373a6 <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)>:
   373a6:	55                   	push   rbp
   373a7:	48 89 e5             	mov    rbp,rsp
   373aa:	48 83 ec 10          	sub    rsp,0x10
   373ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   373b2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   373b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   373ba:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
   373be:	74 1e                	je     373de <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)+0x38>
   373c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   373c4:	48 89 c7             	mov    rdi,rax
   373c7:	e8 a2 08 00 00       	call   37c6e <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   373cc:	48 89 c7             	mov    rdi,rax
   373cf:	e8 a8 08 00 00       	call   37c7c <void std::_Destroy<objl::Material>(objl::Material*)>
   373d4:	48 81 45 f8 18 01 00 00 	add    QWORD PTR [rbp-0x8],0x118
   373dc:	eb d8                	jmp    373b6 <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)+0x10>
   373de:	90                   	nop
   373df:	c9                   	leave  
   373e0:	c3                   	ret    
   373e1:	90                   	nop

00000000000373e2 <__gnu_cxx::new_allocator<objl::Vector3>::deallocate(objl::Vector3*, unsigned long)>:
   373e2:	55                   	push   rbp
   373e3:	48 89 e5             	mov    rbp,rsp
   373e6:	48 83 ec 20          	sub    rsp,0x20
   373ea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   373ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   373f2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   373f6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   373fa:	48 89 d0             	mov    rax,rdx
   373fd:	48 01 c0             	add    rax,rax
   37400:	48 01 d0             	add    rax,rdx
   37403:	48 c1 e0 02          	shl    rax,0x2
   37407:	48 89 c2             	mov    rdx,rax
   3740a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3740e:	48 89 d6             	mov    rsi,rdx
   37411:	48 89 c7             	mov    rdi,rax
   37414:	e8 f7 cf fc ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   37419:	c9                   	leave  
   3741a:	c3                   	ret    

000000000003741b <void std::_Destroy_aux<true>::__destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>:
   3741b:	55                   	push   rbp
   3741c:	48 89 e5             	mov    rbp,rsp
   3741f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37423:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37427:	90                   	nop
   37428:	5d                   	pop    rbp
   37429:	c3                   	ret    

000000000003742a <__gnu_cxx::new_allocator<objl::Vector2>::deallocate(objl::Vector2*, unsigned long)>:
   3742a:	55                   	push   rbp
   3742b:	48 89 e5             	mov    rbp,rsp
   3742e:	48 83 ec 20          	sub    rsp,0x20
   37432:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37436:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3743a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3743e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37442:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   3744a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3744e:	48 89 d6             	mov    rsi,rdx
   37451:	48 89 c7             	mov    rdi,rax
   37454:	e8 b7 cf fc ff       	call   4410 <operator delete(void*, unsigned long)@plt>
   37459:	c9                   	leave  
   3745a:	c3                   	ret    

000000000003745b <void std::_Destroy_aux<true>::__destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>:
   3745b:	55                   	push   rbp
   3745c:	48 89 e5             	mov    rbp,rsp
   3745f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37463:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37467:	90                   	nop
   37468:	5d                   	pop    rbp
   37469:	c3                   	ret    

000000000003746a <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>:
   3746a:	55                   	push   rbp
   3746b:	48 89 e5             	mov    rbp,rsp
   3746e:	48 83 ec 10          	sub    rsp,0x10
   37472:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37476:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3747a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3747e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37482:	48 89 d6             	mov    rsi,rdx
   37485:	48 89 c7             	mov    rdi,rax
   37488:	e8 0b 08 00 00       	call   37c98 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator(__gnu_cxx::new_allocator<objl::Vertex> const&)>
   3748d:	90                   	nop
   3748e:	c9                   	leave  
   3748f:	c3                   	ret    

0000000000037490 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::allocator<objl::Vertex> const&)>:
   37490:	55                   	push   rbp
   37491:	48 89 e5             	mov    rbp,rsp
   37494:	48 83 ec 10          	sub    rsp,0x10
   37498:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3749c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   374a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374a4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   374a8:	48 89 d6             	mov    rsi,rdx
   374ab:	48 89 c7             	mov    rdi,rax
   374ae:	e8 a9 f6 ff ff       	call   36b5c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::allocator<objl::Vertex> const&)>
   374b3:	90                   	nop
   374b4:	c9                   	leave  
   374b5:	c3                   	ret    

00000000000374b6 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>:
   374b6:	55                   	push   rbp
   374b7:	48 89 e5             	mov    rbp,rsp
   374ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   374be:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   374c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   374c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   374c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374cd:	48 89 10             	mov    QWORD PTR [rax],rdx
   374d0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   374d4:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   374d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374dc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   374e0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   374e4:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   374e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374ec:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   374f0:	90                   	nop
   374f1:	5d                   	pop    rbp
   374f2:	c3                   	ret    

00000000000374f3 <std::remove_reference<std::allocator<objl::Vertex>&>::type&& std::move<std::allocator<objl::Vertex>&>(std::allocator<objl::Vertex>&)>:
   374f3:	55                   	push   rbp
   374f4:	48 89 e5             	mov    rbp,rsp
   374f7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   374fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374ff:	5d                   	pop    rbp
   37500:	c3                   	ret    
   37501:	90                   	nop

0000000000037502 <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>:
   37502:	55                   	push   rbp
   37503:	48 89 e5             	mov    rbp,rsp
   37506:	48 83 ec 10          	sub    rsp,0x10
   3750a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3750e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37512:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37516:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3751a:	48 89 d6             	mov    rsi,rdx
   3751d:	48 89 c7             	mov    rdi,rax
   37520:	e8 83 07 00 00       	call   37ca8 <__gnu_cxx::new_allocator<unsigned int>::new_allocator(__gnu_cxx::new_allocator<unsigned int> const&)>
   37525:	90                   	nop
   37526:	c9                   	leave  
   37527:	c3                   	ret    

0000000000037528 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::allocator<unsigned int> const&)>:
   37528:	55                   	push   rbp
   37529:	48 89 e5             	mov    rbp,rsp
   3752c:	48 83 ec 10          	sub    rsp,0x10
   37530:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37534:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37538:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3753c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37540:	48 89 d6             	mov    rsi,rdx
   37543:	48 89 c7             	mov    rdi,rax
   37546:	e8 6d 07 00 00       	call   37cb8 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::allocator<unsigned int> const&)>
   3754b:	90                   	nop
   3754c:	c9                   	leave  
   3754d:	c3                   	ret    

000000000003754e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>:
   3754e:	55                   	push   rbp
   3754f:	48 89 e5             	mov    rbp,rsp
   37552:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37556:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3755a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3755e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   37561:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37565:	48 89 10             	mov    QWORD PTR [rax],rdx
   37568:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3756c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   37570:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37574:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   37578:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3757c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   37580:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37584:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   37588:	90                   	nop
   37589:	5d                   	pop    rbp
   3758a:	c3                   	ret    

000000000003758b <std::remove_reference<std::allocator<unsigned int>&>::type&& std::move<std::allocator<unsigned int>&>(std::allocator<unsigned int>&)>:
   3758b:	55                   	push   rbp
   3758c:	48 89 e5             	mov    rbp,rsp
   3758f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37593:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37597:	5d                   	pop    rbp
   37598:	c3                   	ret    
   37599:	90                   	nop

000000000003759a <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)>:
   3759a:	55                   	push   rbp
   3759b:	48 89 e5             	mov    rbp,rsp
   3759e:	41 55                	push   r13
   375a0:	41 54                	push   r12
   375a2:	53                   	push   rbx
   375a3:	48 83 ec 28          	sub    rsp,0x28
   375a7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   375ab:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   375af:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   375b8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   375bc:	31 c0                	xor    eax,eax
   375be:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   375c2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   375c6:	48 89 c7             	mov    rdi,rax
   375c9:	e8 66 3e ff ff       	call   2b434 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   375ce:	48 89 c2             	mov    rdx,rax
   375d1:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   375d5:	48 89 d6             	mov    rsi,rdx
   375d8:	48 89 c7             	mov    rdi,rax
   375db:	e8 0a 07 00 00       	call   37cea <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_select_on_copy(std::allocator<unsigned int> const&)>
   375e0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   375e4:	48 89 c7             	mov    rdi,rax
   375e7:	e8 b6 eb fe ff       	call   261a2 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   375ec:	48 89 c1             	mov    rcx,rax
   375ef:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   375f3:	48 89 c2             	mov    rdx,rax
   375f6:	48 89 ce             	mov    rsi,rcx
   375f9:	48 89 df             	mov    rdi,rbx
   375fc:	e8 35 07 00 00       	call   37d36 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(unsigned long, std::allocator<unsigned int> const&)>
   37601:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   37605:	48 89 c7             	mov    rdi,rax
   37608:	e8 45 f3 fe ff       	call   26952 <std::allocator<unsigned int>::~allocator()>
   3760d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   37611:	48 89 c7             	mov    rdi,rax
   37614:	e8 f3 11 ff ff       	call   2880c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   37619:	49 89 c5             	mov    r13,rax
   3761c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   37620:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   37623:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   37627:	48 89 c7             	mov    rdi,rax
   3762a:	e8 bf c5 ff ff       	call   33bee <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   3762f:	49 89 c4             	mov    r12,rax
   37632:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   37636:	48 89 c7             	mov    rdi,rax
   37639:	e8 68 c5 ff ff       	call   33ba6 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   3763e:	4c 89 e9             	mov    rcx,r13
   37641:	48 89 da             	mov    rdx,rbx
   37644:	4c 89 e6             	mov    rsi,r12
   37647:	48 89 c7             	mov    rdi,rax
   3764a:	e8 ae e1 ff ff       	call   357fd <unsigned int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, std::allocator<unsigned int>&)>
   3764f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   37653:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
   37657:	90                   	nop
   37658:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3765c:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   37665:	74 3b                	je     376a2 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x108>
   37667:	eb 34                	jmp    3769d <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x103>
   37669:	48 89 c3             	mov    rbx,rax
   3766c:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   37670:	48 89 c7             	mov    rdi,rax
   37673:	e8 da f2 fe ff       	call   26952 <std::allocator<unsigned int>::~allocator()>
   37678:	48 89 d8             	mov    rax,rbx
   3767b:	48 89 c7             	mov    rdi,rax
   3767e:	e8 ad d0 fc ff       	call   4730 <_Unwind_Resume@plt>
   37683:	48 89 c3             	mov    rbx,rax
   37686:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3768a:	48 89 c7             	mov    rdi,rax
   3768d:	e8 dc f2 fe ff       	call   2696e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()>
   37692:	48 89 d8             	mov    rax,rbx
   37695:	48 89 c7             	mov    rdi,rax
   37698:	e8 93 d0 fc ff       	call   4730 <_Unwind_Resume@plt>
   3769d:	e8 0e ce fc ff       	call   44b0 <__stack_chk_fail@plt>
   376a2:	48 83 c4 28          	add    rsp,0x28
   376a6:	5b                   	pop    rbx
   376a7:	41 5c                	pop    r12
   376a9:	41 5d                	pop    r13
   376ab:	5d                   	pop    rbp
   376ac:	c3                   	ret    
   376ad:	90                   	nop

00000000000376ae <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>:
   376ae:	55                   	push   rbp
   376af:	48 89 e5             	mov    rbp,rsp
   376b2:	48 83 ec 10          	sub    rsp,0x10
   376b6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   376ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   376be:	48 89 c7             	mov    rdi,rax
   376c1:	e8 32 07 00 00       	call   37df8 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator() const>
   376c6:	48 89 c7             	mov    rdi,rax
   376c9:	e8 c5 06 00 00       	call   37d93 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_max_size(std::allocator<objl::Mesh> const&)>
   376ce:	c9                   	leave  
   376cf:	c3                   	ret    

00000000000376d0 <std::allocator_traits<std::allocator<objl::Mesh> >::allocate(std::allocator<objl::Mesh>&, unsigned long)>:
   376d0:	55                   	push   rbp
   376d1:	48 89 e5             	mov    rbp,rsp
   376d4:	48 83 ec 10          	sub    rsp,0x10
   376d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   376dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   376e0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   376e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   376e8:	ba 00 00 00 00       	mov    edx,0x0
   376ed:	48 89 ce             	mov    rsi,rcx
   376f0:	48 89 c7             	mov    rdi,rax
   376f3:	e8 0e 07 00 00       	call   37e06 <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)>
   376f8:	c9                   	leave  
   376f9:	c3                   	ret    

00000000000376fa <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_do_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&, std::integral_constant<bool, true>)>:
   376fa:	55                   	push   rbp
   376fb:	48 89 e5             	mov    rbp,rsp
   376fe:	48 83 ec 20          	sub    rsp,0x20
   37702:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37706:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3770a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3770e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   37712:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37716:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3771a:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   3771e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37722:	48 89 c7             	mov    rdi,rax
   37725:	e8 22 07 00 00       	call   37e4c <objl::Mesh* std::__relocate_a<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   3772a:	c9                   	leave  
   3772b:	c3                   	ret    

000000000003772c <void __gnu_cxx::new_allocator<objl::Mesh>::destroy<objl::Mesh>(objl::Mesh*)>:
   3772c:	55                   	push   rbp
   3772d:	48 89 e5             	mov    rbp,rsp
   37730:	48 83 ec 10          	sub    rsp,0x10
   37734:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37738:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3773c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37740:	48 89 c7             	mov    rdi,rax
   37743:	e8 62 a2 ff ff       	call   319aa <objl::Mesh::~Mesh()>
   37748:	90                   	nop
   37749:	c9                   	leave  
   3774a:	c3                   	ret    
   3774b:	90                   	nop

000000000003774c <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>:
   3774c:	55                   	push   rbp
   3774d:	48 89 e5             	mov    rbp,rsp
   37750:	48 83 ec 10          	sub    rsp,0x10
   37754:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37758:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3775c:	48 89 c7             	mov    rdi,rax
   3775f:	e8 b0 07 00 00       	call   37f14 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator() const>
   37764:	48 89 c7             	mov    rdi,rax
   37767:	e8 43 07 00 00       	call   37eaf <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_max_size(std::allocator<objl::Vector3> const&)>
   3776c:	c9                   	leave  
   3776d:	c3                   	ret    

000000000003776e <std::allocator_traits<std::allocator<objl::Vector3> >::allocate(std::allocator<objl::Vector3>&, unsigned long)>:
   3776e:	55                   	push   rbp
   3776f:	48 89 e5             	mov    rbp,rsp
   37772:	48 83 ec 10          	sub    rsp,0x10
   37776:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3777a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3777e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37782:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37786:	ba 00 00 00 00       	mov    edx,0x0
   3778b:	48 89 ce             	mov    rsi,rcx
   3778e:	48 89 c7             	mov    rdi,rax
   37791:	e8 8c 07 00 00       	call   37f22 <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)>
   37796:	c9                   	leave  
   37797:	c3                   	ret    

0000000000037798 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_do_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&, std::integral_constant<bool, true>)>:
   37798:	55                   	push   rbp
   37799:	48 89 e5             	mov    rbp,rsp
   3779c:	48 83 ec 20          	sub    rsp,0x20
   377a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   377a4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   377a8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   377ac:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   377b0:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   377b4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   377b8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   377bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   377c0:	48 89 c7             	mov    rdi,rax
   377c3:	e8 a6 07 00 00       	call   37f6e <objl::Vector3* std::__relocate_a<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   377c8:	c9                   	leave  
   377c9:	c3                   	ret    

00000000000377ca <void __gnu_cxx::new_allocator<objl::Vector3>::destroy<objl::Vector3>(objl::Vector3*)>:
   377ca:	55                   	push   rbp
   377cb:	48 89 e5             	mov    rbp,rsp
   377ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   377d2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   377d6:	90                   	nop
   377d7:	5d                   	pop    rbp
   377d8:	c3                   	ret    
   377d9:	90                   	nop

00000000000377da <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>:
   377da:	55                   	push   rbp
   377db:	48 89 e5             	mov    rbp,rsp
   377de:	48 83 ec 10          	sub    rsp,0x10
   377e2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   377e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   377ea:	48 89 c7             	mov    rdi,rax
   377ed:	e8 44 08 00 00       	call   38036 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator() const>
   377f2:	48 89 c7             	mov    rdi,rax
   377f5:	e8 d7 07 00 00       	call   37fd1 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_max_size(std::allocator<objl::Vector2> const&)>
   377fa:	c9                   	leave  
   377fb:	c3                   	ret    

00000000000377fc <std::allocator_traits<std::allocator<objl::Vector2> >::allocate(std::allocator<objl::Vector2>&, unsigned long)>:
   377fc:	55                   	push   rbp
   377fd:	48 89 e5             	mov    rbp,rsp
   37800:	48 83 ec 10          	sub    rsp,0x10
   37804:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37808:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3780c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37810:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37814:	ba 00 00 00 00       	mov    edx,0x0
   37819:	48 89 ce             	mov    rsi,rcx
   3781c:	48 89 c7             	mov    rdi,rax
   3781f:	e8 20 08 00 00       	call   38044 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)>
   37824:	c9                   	leave  
   37825:	c3                   	ret    

0000000000037826 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_do_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&, std::integral_constant<bool, true>)>:
   37826:	55                   	push   rbp
   37827:	48 89 e5             	mov    rbp,rsp
   3782a:	48 83 ec 20          	sub    rsp,0x20
   3782e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37832:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37836:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3783a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   3783e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37842:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37846:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   3784a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3784e:	48 89 c7             	mov    rdi,rax
   37851:	e8 31 08 00 00       	call   38087 <objl::Vector2* std::__relocate_a<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   37856:	c9                   	leave  
   37857:	c3                   	ret    

0000000000037858 <void __gnu_cxx::new_allocator<objl::Vector2>::destroy<objl::Vector2>(objl::Vector2*)>:
   37858:	55                   	push   rbp
   37859:	48 89 e5             	mov    rbp,rsp
   3785c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37860:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37864:	90                   	nop
   37865:	5d                   	pop    rbp
   37866:	c3                   	ret    
   37867:	90                   	nop

0000000000037868 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>:
   37868:	55                   	push   rbp
   37869:	48 89 e5             	mov    rbp,rsp
   3786c:	48 83 ec 10          	sub    rsp,0x10
   37870:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37874:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37878:	48 89 c7             	mov    rdi,rax
   3787b:	e8 24 c0 ff ff       	call   338a4 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   37880:	48 89 c7             	mov    rdi,rax
   37883:	e8 62 08 00 00       	call   380ea <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_max_size(std::allocator<objl::Vertex> const&)>
   37888:	c9                   	leave  
   37889:	c3                   	ret    

000000000003788a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_do_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&, std::integral_constant<bool, true>)>:
   3788a:	55                   	push   rbp
   3788b:	48 89 e5             	mov    rbp,rsp
   3788e:	48 83 ec 20          	sub    rsp,0x20
   37892:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37896:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3789a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3789e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   378a2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   378a6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   378aa:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   378ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   378b2:	48 89 c7             	mov    rdi,rax
   378b5:	e8 95 08 00 00       	call   3814f <objl::Vertex* std::__relocate_a<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   378ba:	c9                   	leave  
   378bb:	c3                   	ret    

00000000000378bc <void __gnu_cxx::new_allocator<objl::Vertex>::destroy<objl::Vertex>(objl::Vertex*)>:
   378bc:	55                   	push   rbp
   378bd:	48 89 e5             	mov    rbp,rsp
   378c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   378c4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   378c8:	90                   	nop
   378c9:	5d                   	pop    rbp
   378ca:	c3                   	ret    

00000000000378cb <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>:
   378cb:	55                   	push   rbp
   378cc:	48 89 e5             	mov    rbp,rsp
   378cf:	53                   	push   rbx
   378d0:	48 83 ec 38          	sub    rsp,0x38
   378d4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   378d8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   378dc:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   378e0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   378e4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   378e8:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   378ec:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   378f0:	48 89 d6             	mov    rsi,rdx
   378f3:	48 89 c7             	mov    rdi,rax
   378f6:	e8 b7 08 00 00       	call   381b2 <bool __gnu_cxx::operator!=<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   378fb:	84 c0                	test   al,al
   378fd:	74 39                	je     37938 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)+0x6d>
   378ff:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   37903:	48 89 c7             	mov    rdi,rax
   37906:	e8 03 09 00 00       	call   3820e <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator*() const>
   3790b:	48 89 c3             	mov    rbx,rax
   3790e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37912:	48 89 c7             	mov    rdi,rax
   37915:	e8 db 01 00 00       	call   37af5 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   3791a:	48 89 de             	mov    rsi,rbx
   3791d:	48 89 c7             	mov    rdi,rax
   37920:	e8 fa 08 00 00       	call   3821f <void std::_Construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>
   37925:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   37929:	48 89 c7             	mov    rdi,rax
   3792c:	e8 bd 08 00 00       	call   381ee <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator++()>
   37931:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   37936:	eb b0                	jmp    378e8 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)+0x1d>
   37938:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3793c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   37940:	c9                   	leave  
   37941:	c3                   	ret    

0000000000037942 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37942:	55                   	push   rbp
   37943:	48 89 e5             	mov    rbp,rsp
   37946:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3794a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3794e:	5d                   	pop    rbp
   3794f:	c3                   	ret    

0000000000037950 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<true, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37950:	55                   	push   rbp
   37951:	48 89 e5             	mov    rbp,rsp
   37954:	41 54                	push   r12
   37956:	53                   	push   rbx
   37957:	48 83 ec 20          	sub    rsp,0x20
   3795b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3795f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37963:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37967:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3796b:	48 89 c7             	mov    rdi,rax
   3796e:	e8 93 f6 ff ff       	call   37006 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37973:	49 89 c4             	mov    r12,rax
   37976:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3797a:	48 89 c7             	mov    rdi,rax
   3797d:	e8 84 f6 ff ff       	call   37006 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37982:	48 89 c3             	mov    rbx,rax
   37985:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37989:	48 89 c7             	mov    rdi,rax
   3798c:	e8 75 f6 ff ff       	call   37006 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37991:	4c 89 e2             	mov    rdx,r12
   37994:	48 89 de             	mov    rsi,rbx
   37997:	48 89 c7             	mov    rdi,rax
   3799a:	e8 d9 08 00 00       	call   38278 <objl::Vertex* std::__copy_move_a1<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   3799f:	48 89 c2             	mov    rdx,rax
   379a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   379a6:	48 89 d6             	mov    rsi,rdx
   379a9:	48 89 c7             	mov    rdi,rax
   379ac:	e8 9f f6 ff ff       	call   37050 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   379b1:	48 83 c4 20          	add    rsp,0x20
   379b5:	5b                   	pop    rbx
   379b6:	41 5c                	pop    r12
   379b8:	5d                   	pop    rbp
   379b9:	c3                   	ret    

00000000000379ba <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>:
   379ba:	55                   	push   rbp
   379bb:	48 89 e5             	mov    rbp,rsp
   379be:	48 83 ec 10          	sub    rsp,0x10
   379c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   379c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   379ca:	48 89 c7             	mov    rdi,rax
   379cd:	e8 38 09 00 00       	call   3830a <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator() const>
   379d2:	48 89 c7             	mov    rdi,rax
   379d5:	e8 cb 08 00 00       	call   382a5 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_max_size(std::allocator<objl::Material> const&)>
   379da:	c9                   	leave  
   379db:	c3                   	ret    

00000000000379dc <std::allocator_traits<std::allocator<objl::Material> >::allocate(std::allocator<objl::Material>&, unsigned long)>:
   379dc:	55                   	push   rbp
   379dd:	48 89 e5             	mov    rbp,rsp
   379e0:	48 83 ec 10          	sub    rsp,0x10
   379e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   379e8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   379ec:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   379f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   379f4:	ba 00 00 00 00       	mov    edx,0x0
   379f9:	48 89 ce             	mov    rsi,rcx
   379fc:	48 89 c7             	mov    rdi,rax
   379ff:	e8 14 09 00 00       	call   38318 <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)>
   37a04:	c9                   	leave  
   37a05:	c3                   	ret    

0000000000037a06 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_do_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&, std::integral_constant<bool, true>)>:
   37a06:	55                   	push   rbp
   37a07:	48 89 e5             	mov    rbp,rsp
   37a0a:	48 83 ec 20          	sub    rsp,0x20
   37a0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37a12:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37a16:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37a1a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   37a1e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37a22:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37a26:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   37a2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37a2e:	48 89 c7             	mov    rdi,rax
   37a31:	e8 28 09 00 00       	call   3835e <objl::Material* std::__relocate_a<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   37a36:	c9                   	leave  
   37a37:	c3                   	ret    

0000000000037a38 <void __gnu_cxx::new_allocator<objl::Material>::destroy<objl::Material>(objl::Material*)>:
   37a38:	55                   	push   rbp
   37a39:	48 89 e5             	mov    rbp,rsp
   37a3c:	48 83 ec 10          	sub    rsp,0x10
   37a40:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37a44:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37a48:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37a4c:	48 89 c7             	mov    rdi,rax
   37a4f:	e8 1e 98 ff ff       	call   31272 <objl::Material::~Material()>
   37a54:	90                   	nop
   37a55:	c9                   	leave  
   37a56:	c3                   	ret    
   37a57:	90                   	nop

0000000000037a58 <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)>:
   37a58:	55                   	push   rbp
   37a59:	48 89 e5             	mov    rbp,rsp
   37a5c:	48 83 ec 20          	sub    rsp,0x20
   37a60:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37a64:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37a68:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37a6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37a70:	48 89 c7             	mov    rdi,rax
   37a73:	e8 4a 09 00 00       	call   383c2 <__gnu_cxx::new_allocator<objl::Vertex>::_M_max_size() const>
   37a78:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37a7c:	0f 97 c0             	seta   al
   37a7f:	84 c0                	test   al,al
   37a81:	74 05                	je     37a88 <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)+0x30>
   37a83:	e8 88 c6 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   37a88:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37a8c:	48 c1 e0 05          	shl    rax,0x5
   37a90:	48 89 c7             	mov    rdi,rax
   37a93:	e8 68 c9 fc ff       	call   4400 <operator new(unsigned long)@plt>
   37a98:	90                   	nop
   37a99:	c9                   	leave  
   37a9a:	c3                   	ret    

0000000000037a9b <objl::Vertex* std::__copy_move_a2<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   37a9b:	55                   	push   rbp
   37a9c:	48 89 e5             	mov    rbp,rsp
   37a9f:	48 83 ec 20          	sub    rsp,0x20
   37aa3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37aa7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37aab:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37aaf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37ab3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37ab7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37abb:	48 89 ce             	mov    rsi,rcx
   37abe:	48 89 c7             	mov    rdi,rax
   37ac1:	e8 10 09 00 00       	call   383d6 <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   37ac6:	c9                   	leave  
   37ac7:	c3                   	ret    

0000000000037ac8 <objl::Vertex* std::__copy_move_a2<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   37ac8:	55                   	push   rbp
   37ac9:	48 89 e5             	mov    rbp,rsp
   37acc:	48 83 ec 20          	sub    rsp,0x20
   37ad0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37ad4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37ad8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37adc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37ae0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37ae4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37ae8:	48 89 ce             	mov    rsi,rcx
   37aeb:	48 89 c7             	mov    rdi,rax
   37aee:	e8 e3 08 00 00       	call   383d6 <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   37af3:	c9                   	leave  
   37af4:	c3                   	ret    

0000000000037af5 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>:
   37af5:	55                   	push   rbp
   37af6:	48 89 e5             	mov    rbp,rsp
   37af9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37afd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37b01:	5d                   	pop    rbp
   37b02:	c3                   	ret    

0000000000037b03 <void std::_Construct<objl::Vertex, objl::Vertex&>(objl::Vertex*, objl::Vertex&)>:
   37b03:	55                   	push   rbp
   37b04:	48 89 e5             	mov    rbp,rsp
   37b07:	53                   	push   rbx
   37b08:	48 83 ec 18          	sub    rsp,0x18
   37b0c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37b10:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37b14:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   37b18:	48 89 c7             	mov    rdi,rax
   37b1b:	e8 13 09 00 00       	call   38433 <objl::Vertex& std::forward<objl::Vertex&>(std::remove_reference<objl::Vertex&>::type&)>
   37b20:	48 89 c3             	mov    rbx,rax
   37b23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37b27:	48 89 c6             	mov    rsi,rax
   37b2a:	bf 20 00 00 00       	mov    edi,0x20
   37b2f:	e8 63 d0 fe ff       	call   24b97 <operator new(unsigned long, void*)>
   37b34:	48 89 c1             	mov    rcx,rax
   37b37:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   37b3a:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   37b3e:	48 89 01             	mov    QWORD PTR [rcx],rax
   37b41:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   37b45:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   37b49:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   37b4d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   37b51:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   37b55:	90                   	nop
   37b56:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   37b5a:	c9                   	leave  
   37b5b:	c3                   	ret    

0000000000037b5c <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   37b5c:	55                   	push   rbp
   37b5d:	48 89 e5             	mov    rbp,rsp
   37b60:	48 83 ec 20          	sub    rsp,0x20
   37b64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37b68:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37b6c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37b70:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37b74:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37b78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37b7c:	48 89 ce             	mov    rsi,rcx
   37b7f:	48 89 c7             	mov    rdi,rax
   37b82:	e8 ba 08 00 00       	call   38441 <unsigned int* std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   37b87:	c9                   	leave  
   37b88:	c3                   	ret    

0000000000037b89 <unsigned int* std::__copy_move_a2<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>:
   37b89:	55                   	push   rbp
   37b8a:	48 89 e5             	mov    rbp,rsp
   37b8d:	48 83 ec 20          	sub    rsp,0x20
   37b91:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37b95:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37b99:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37b9d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37ba1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37ba5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37ba9:	48 89 ce             	mov    rsi,rcx
   37bac:	48 89 c7             	mov    rdi,rax
   37baf:	e8 d8 08 00 00       	call   3848c <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)>
   37bb4:	c9                   	leave  
   37bb5:	c3                   	ret    

0000000000037bb6 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator+(long) const>:
   37bb6:	55                   	push   rbp
   37bb7:	48 89 e5             	mov    rbp,rsp
   37bba:	48 83 ec 30          	sub    rsp,0x30
   37bbe:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   37bc2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   37bc6:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37bcf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37bd3:	31 c0                	xor    eax,eax
   37bd5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37bd9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   37bdc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   37be0:	48 c1 e0 02          	shl    rax,0x2
   37be4:	48 01 d0             	add    rax,rdx
   37be7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   37beb:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   37bef:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   37bf3:	48 89 d6             	mov    rsi,rdx
   37bf6:	48 89 c7             	mov    rdi,rax
   37bf9:	e8 5c 1c ff ff       	call   2985a <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   37bfe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37c02:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   37c06:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   37c0f:	74 05                	je     37c16 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator+(long) const+0x60>
   37c11:	e8 9a c8 fc ff       	call   44b0 <__stack_chk_fail@plt>
   37c16:	c9                   	leave  
   37c17:	c3                   	ret    

0000000000037c18 <unsigned int* std::__copy_move_a2<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   37c18:	55                   	push   rbp
   37c19:	48 89 e5             	mov    rbp,rsp
   37c1c:	48 83 ec 20          	sub    rsp,0x20
   37c20:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c24:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37c28:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37c2c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37c30:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37c34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c38:	48 89 ce             	mov    rsi,rcx
   37c3b:	48 89 c7             	mov    rdi,rax
   37c3e:	e8 49 08 00 00       	call   3848c <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)>
   37c43:	c9                   	leave  
   37c44:	c3                   	ret    

0000000000037c45 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>:
   37c45:	55                   	push   rbp
   37c46:	48 89 e5             	mov    rbp,rsp
   37c49:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c4d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c51:	5d                   	pop    rbp
   37c52:	c3                   	ret    

0000000000037c53 <void std::_Destroy<objl::Mesh>(objl::Mesh*)>:
   37c53:	55                   	push   rbp
   37c54:	48 89 e5             	mov    rbp,rsp
   37c57:	48 83 ec 10          	sub    rsp,0x10
   37c5b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c63:	48 89 c7             	mov    rdi,rax
   37c66:	e8 3f 9d ff ff       	call   319aa <objl::Mesh::~Mesh()>
   37c6b:	90                   	nop
   37c6c:	c9                   	leave  
   37c6d:	c3                   	ret    

0000000000037c6e <objl::Material* std::__addressof<objl::Material>(objl::Material&)>:
   37c6e:	55                   	push   rbp
   37c6f:	48 89 e5             	mov    rbp,rsp
   37c72:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c76:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c7a:	5d                   	pop    rbp
   37c7b:	c3                   	ret    

0000000000037c7c <void std::_Destroy<objl::Material>(objl::Material*)>:
   37c7c:	55                   	push   rbp
   37c7d:	48 89 e5             	mov    rbp,rsp
   37c80:	48 83 ec 10          	sub    rsp,0x10
   37c84:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c8c:	48 89 c7             	mov    rdi,rax
   37c8f:	e8 de 95 ff ff       	call   31272 <objl::Material::~Material()>
   37c94:	90                   	nop
   37c95:	c9                   	leave  
   37c96:	c3                   	ret    
   37c97:	90                   	nop

0000000000037c98 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator(__gnu_cxx::new_allocator<objl::Vertex> const&)>:
   37c98:	55                   	push   rbp
   37c99:	48 89 e5             	mov    rbp,rsp
   37c9c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37ca0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37ca4:	90                   	nop
   37ca5:	5d                   	pop    rbp
   37ca6:	c3                   	ret    
   37ca7:	90                   	nop

0000000000037ca8 <__gnu_cxx::new_allocator<unsigned int>::new_allocator(__gnu_cxx::new_allocator<unsigned int> const&)>:
   37ca8:	55                   	push   rbp
   37ca9:	48 89 e5             	mov    rbp,rsp
   37cac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37cb0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37cb4:	90                   	nop
   37cb5:	5d                   	pop    rbp
   37cb6:	c3                   	ret    
   37cb7:	90                   	nop

0000000000037cb8 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::allocator<unsigned int> const&)>:
   37cb8:	55                   	push   rbp
   37cb9:	48 89 e5             	mov    rbp,rsp
   37cbc:	48 83 ec 10          	sub    rsp,0x10
   37cc0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37cc4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37cc8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37ccc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37cd0:	48 89 d6             	mov    rsi,rdx
   37cd3:	48 89 c7             	mov    rdi,rax
   37cd6:	e8 27 f8 ff ff       	call   37502 <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   37cdb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37cdf:	48 89 c7             	mov    rdi,rax
   37ce2:	e8 b5 0a ff ff       	call   2879c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>
   37ce7:	90                   	nop
   37ce8:	c9                   	leave  
   37ce9:	c3                   	ret    

0000000000037cea <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_select_on_copy(std::allocator<unsigned int> const&)>:
   37cea:	55                   	push   rbp
   37ceb:	48 89 e5             	mov    rbp,rsp
   37cee:	48 83 ec 20          	sub    rsp,0x20
   37cf2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37cf6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37cfa:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37d03:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37d07:	31 c0                	xor    eax,eax
   37d09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37d0d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   37d11:	48 89 d6             	mov    rsi,rdx
   37d14:	48 89 c7             	mov    rdi,rax
   37d17:	e8 cf 07 00 00       	call   384eb <std::allocator_traits<std::allocator<unsigned int> >::select_on_container_copy_construction(std::allocator<unsigned int> const&)>
   37d1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37d20:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   37d29:	74 05                	je     37d30 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_select_on_copy(std::allocator<unsigned int> const&)+0x46>
   37d2b:	e8 80 c7 fc ff       	call   44b0 <__stack_chk_fail@plt>
   37d30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37d34:	c9                   	leave  
   37d35:	c3                   	ret    

0000000000037d36 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(unsigned long, std::allocator<unsigned int> const&)>:
   37d36:	55                   	push   rbp
   37d37:	48 89 e5             	mov    rbp,rsp
   37d3a:	53                   	push   rbx
   37d3b:	48 83 ec 28          	sub    rsp,0x28
   37d3f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37d43:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37d47:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37d4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37d4f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   37d53:	48 89 d6             	mov    rsi,rdx
   37d56:	48 89 c7             	mov    rdi,rax
   37d59:	e8 5a ff ff ff       	call   37cb8 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::allocator<unsigned int> const&)>
   37d5e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   37d62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37d66:	48 89 d6             	mov    rsi,rdx
   37d69:	48 89 c7             	mov    rdi,rax
   37d6c:	e8 a3 07 00 00       	call   38514 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_create_storage(unsigned long)>
   37d71:	eb 1a                	jmp    37d8d <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(unsigned long, std::allocator<unsigned int> const&)+0x57>
   37d73:	48 89 c3             	mov    rbx,rax
   37d76:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37d7a:	48 89 c7             	mov    rdi,rax
   37d7d:	e8 c2 d3 fe ff       	call   25144 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()>
   37d82:	48 89 d8             	mov    rax,rbx
   37d85:	48 89 c7             	mov    rdi,rax
   37d88:	e8 a3 c9 fc ff       	call   4730 <_Unwind_Resume@plt>
   37d8d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   37d91:	c9                   	leave  
   37d92:	c3                   	ret    

0000000000037d93 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_max_size(std::allocator<objl::Mesh> const&)>:
   37d93:	55                   	push   rbp
   37d94:	48 89 e5             	mov    rbp,rsp
   37d97:	48 83 ec 30          	sub    rsp,0x30
   37d9b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   37d9f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37da8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37dac:	31 c0                	xor    eax,eax
   37dae:	48 b8 5b b0 05 5b b0 05 5b 00 	movabs rax,0x5b05b05b05b05b
   37db8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   37dbc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37dc0:	48 89 c7             	mov    rdi,rax
   37dc3:	e8 a2 07 00 00       	call   3856a <std::allocator_traits<std::allocator<objl::Mesh> >::max_size(std::allocator<objl::Mesh> const&)>
   37dc8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   37dcc:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   37dd0:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   37dd4:	48 89 d6             	mov    rsi,rdx
   37dd7:	48 89 c7             	mov    rdi,rax
   37dda:	e8 16 d0 fe ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   37ddf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37de2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   37de6:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   37def:	74 05                	je     37df6 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_max_size(std::allocator<objl::Mesh> const&)+0x63>
   37df1:	e8 ba c6 fc ff       	call   44b0 <__stack_chk_fail@plt>
   37df6:	c9                   	leave  
   37df7:	c3                   	ret    

0000000000037df8 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator() const>:
   37df8:	55                   	push   rbp
   37df9:	48 89 e5             	mov    rbp,rsp
   37dfc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37e00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37e04:	5d                   	pop    rbp
   37e05:	c3                   	ret    

0000000000037e06 <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)>:
   37e06:	55                   	push   rbp
   37e07:	48 89 e5             	mov    rbp,rsp
   37e0a:	48 83 ec 20          	sub    rsp,0x20
   37e0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37e12:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37e16:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37e1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37e1e:	48 89 c7             	mov    rdi,rax
   37e21:	e8 5e 07 00 00       	call   38584 <__gnu_cxx::new_allocator<objl::Mesh>::_M_max_size() const>
   37e26:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37e2a:	0f 97 c0             	seta   al
   37e2d:	84 c0                	test   al,al
   37e2f:	74 05                	je     37e36 <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)+0x30>
   37e31:	e8 da c2 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   37e36:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37e3a:	48 69 c0 68 01 00 00 	imul   rax,rax,0x168
   37e41:	48 89 c7             	mov    rdi,rax
   37e44:	e8 b7 c5 fc ff       	call   4400 <operator new(unsigned long)@plt>
   37e49:	90                   	nop
   37e4a:	c9                   	leave  
   37e4b:	c3                   	ret    

0000000000037e4c <objl::Mesh* std::__relocate_a<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   37e4c:	55                   	push   rbp
   37e4d:	48 89 e5             	mov    rbp,rsp
   37e50:	41 54                	push   r12
   37e52:	53                   	push   rbx
   37e53:	48 83 ec 20          	sub    rsp,0x20
   37e57:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37e5b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37e5f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37e63:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   37e67:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37e6b:	48 89 c7             	mov    rdi,rax
   37e6e:	e8 25 07 00 00       	call   38598 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>
   37e73:	49 89 c4             	mov    r12,rax
   37e76:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   37e7a:	48 89 c7             	mov    rdi,rax
   37e7d:	e8 16 07 00 00       	call   38598 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>
   37e82:	48 89 c3             	mov    rbx,rax
   37e85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37e89:	48 89 c7             	mov    rdi,rax
   37e8c:	e8 07 07 00 00       	call   38598 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>
   37e91:	48 89 c7             	mov    rdi,rax
   37e94:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   37e98:	48 89 c1             	mov    rcx,rax
   37e9b:	4c 89 e2             	mov    rdx,r12
   37e9e:	48 89 de             	mov    rsi,rbx
   37ea1:	e8 00 07 00 00       	call   385a6 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   37ea6:	48 83 c4 20          	add    rsp,0x20
   37eaa:	5b                   	pop    rbx
   37eab:	41 5c                	pop    r12
   37ead:	5d                   	pop    rbp
   37eae:	c3                   	ret    

0000000000037eaf <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_max_size(std::allocator<objl::Vector3> const&)>:
   37eaf:	55                   	push   rbp
   37eb0:	48 89 e5             	mov    rbp,rsp
   37eb3:	48 83 ec 30          	sub    rsp,0x30
   37eb7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   37ebb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37ec4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37ec8:	31 c0                	xor    eax,eax
   37eca:	48 b8 aa aa aa aa aa aa aa 0a 	movabs rax,0xaaaaaaaaaaaaaaa
   37ed4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   37ed8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37edc:	48 89 c7             	mov    rdi,rax
   37edf:	e8 39 07 00 00       	call   3861d <std::allocator_traits<std::allocator<objl::Vector3> >::max_size(std::allocator<objl::Vector3> const&)>
   37ee4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   37ee8:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   37eec:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   37ef0:	48 89 d6             	mov    rsi,rdx
   37ef3:	48 89 c7             	mov    rdi,rax
   37ef6:	e8 fa ce fe ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   37efb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37efe:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   37f02:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   37f0b:	74 05                	je     37f12 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_max_size(std::allocator<objl::Vector3> const&)+0x63>
   37f0d:	e8 9e c5 fc ff       	call   44b0 <__stack_chk_fail@plt>
   37f12:	c9                   	leave  
   37f13:	c3                   	ret    

0000000000037f14 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator() const>:
   37f14:	55                   	push   rbp
   37f15:	48 89 e5             	mov    rbp,rsp
   37f18:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37f1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37f20:	5d                   	pop    rbp
   37f21:	c3                   	ret    

0000000000037f22 <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)>:
   37f22:	55                   	push   rbp
   37f23:	48 89 e5             	mov    rbp,rsp
   37f26:	48 83 ec 20          	sub    rsp,0x20
   37f2a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37f2e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37f32:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37f36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37f3a:	48 89 c7             	mov    rdi,rax
   37f3d:	e8 f6 06 00 00       	call   38638 <__gnu_cxx::new_allocator<objl::Vector3>::_M_max_size() const>
   37f42:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37f46:	0f 97 c0             	seta   al
   37f49:	84 c0                	test   al,al
   37f4b:	74 05                	je     37f52 <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)+0x30>
   37f4d:	e8 be c1 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   37f52:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37f56:	48 89 d0             	mov    rax,rdx
   37f59:	48 01 c0             	add    rax,rax
   37f5c:	48 01 d0             	add    rax,rdx
   37f5f:	48 c1 e0 02          	shl    rax,0x2
   37f63:	48 89 c7             	mov    rdi,rax
   37f66:	e8 95 c4 fc ff       	call   4400 <operator new(unsigned long)@plt>
   37f6b:	90                   	nop
   37f6c:	c9                   	leave  
   37f6d:	c3                   	ret    

0000000000037f6e <objl::Vector3* std::__relocate_a<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   37f6e:	55                   	push   rbp
   37f6f:	48 89 e5             	mov    rbp,rsp
   37f72:	41 54                	push   r12
   37f74:	53                   	push   rbx
   37f75:	48 83 ec 20          	sub    rsp,0x20
   37f79:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37f7d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37f81:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37f85:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   37f89:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37f8d:	48 89 c7             	mov    rdi,rax
   37f90:	e8 b7 06 00 00       	call   3864c <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>
   37f95:	49 89 c4             	mov    r12,rax
   37f98:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   37f9c:	48 89 c7             	mov    rdi,rax
   37f9f:	e8 a8 06 00 00       	call   3864c <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>
   37fa4:	48 89 c3             	mov    rbx,rax
   37fa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37fab:	48 89 c7             	mov    rdi,rax
   37fae:	e8 99 06 00 00       	call   3864c <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>
   37fb3:	48 89 c7             	mov    rdi,rax
   37fb6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   37fba:	48 89 c1             	mov    rcx,rax
   37fbd:	4c 89 e2             	mov    rdx,r12
   37fc0:	48 89 de             	mov    rsi,rbx
   37fc3:	e8 92 06 00 00       	call   3865a <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   37fc8:	48 83 c4 20          	add    rsp,0x20
   37fcc:	5b                   	pop    rbx
   37fcd:	41 5c                	pop    r12
   37fcf:	5d                   	pop    rbp
   37fd0:	c3                   	ret    

0000000000037fd1 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_max_size(std::allocator<objl::Vector2> const&)>:
   37fd1:	55                   	push   rbp
   37fd2:	48 89 e5             	mov    rbp,rsp
   37fd5:	48 83 ec 30          	sub    rsp,0x30
   37fd9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   37fdd:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37fe6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37fea:	31 c0                	xor    eax,eax
   37fec:	48 b8 ff ff ff ff ff ff ff 0f 	movabs rax,0xfffffffffffffff
   37ff6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   37ffa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37ffe:	48 89 c7             	mov    rdi,rax
   38001:	e8 c5 06 00 00       	call   386cb <std::allocator_traits<std::allocator<objl::Vector2> >::max_size(std::allocator<objl::Vector2> const&)>
   38006:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   3800a:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   3800e:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   38012:	48 89 d6             	mov    rsi,rdx
   38015:	48 89 c7             	mov    rdi,rax
   38018:	e8 d8 cd fe ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   3801d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   38020:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38024:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   3802d:	74 05                	je     38034 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_max_size(std::allocator<objl::Vector2> const&)+0x63>
   3802f:	e8 7c c4 fc ff       	call   44b0 <__stack_chk_fail@plt>
   38034:	c9                   	leave  
   38035:	c3                   	ret    

0000000000038036 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator() const>:
   38036:	55                   	push   rbp
   38037:	48 89 e5             	mov    rbp,rsp
   3803a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3803e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38042:	5d                   	pop    rbp
   38043:	c3                   	ret    

0000000000038044 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)>:
   38044:	55                   	push   rbp
   38045:	48 89 e5             	mov    rbp,rsp
   38048:	48 83 ec 20          	sub    rsp,0x20
   3804c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38050:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38054:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38058:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3805c:	48 89 c7             	mov    rdi,rax
   3805f:	e8 82 06 00 00       	call   386e6 <__gnu_cxx::new_allocator<objl::Vector2>::_M_max_size() const>
   38064:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   38068:	0f 97 c0             	seta   al
   3806b:	84 c0                	test   al,al
   3806d:	74 05                	je     38074 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)+0x30>
   3806f:	e8 9c c0 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   38074:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38078:	48 c1 e0 03          	shl    rax,0x3
   3807c:	48 89 c7             	mov    rdi,rax
   3807f:	e8 7c c3 fc ff       	call   4400 <operator new(unsigned long)@plt>
   38084:	90                   	nop
   38085:	c9                   	leave  
   38086:	c3                   	ret    

0000000000038087 <objl::Vector2* std::__relocate_a<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   38087:	55                   	push   rbp
   38088:	48 89 e5             	mov    rbp,rsp
   3808b:	41 54                	push   r12
   3808d:	53                   	push   rbx
   3808e:	48 83 ec 20          	sub    rsp,0x20
   38092:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38096:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3809a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3809e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   380a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   380a6:	48 89 c7             	mov    rdi,rax
   380a9:	e8 4c 06 00 00       	call   386fa <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>
   380ae:	49 89 c4             	mov    r12,rax
   380b1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   380b5:	48 89 c7             	mov    rdi,rax
   380b8:	e8 3d 06 00 00       	call   386fa <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>
   380bd:	48 89 c3             	mov    rbx,rax
   380c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   380c4:	48 89 c7             	mov    rdi,rax
   380c7:	e8 2e 06 00 00       	call   386fa <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>
   380cc:	48 89 c7             	mov    rdi,rax
   380cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   380d3:	48 89 c1             	mov    rcx,rax
   380d6:	4c 89 e2             	mov    rdx,r12
   380d9:	48 89 de             	mov    rsi,rbx
   380dc:	e8 27 06 00 00       	call   38708 <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   380e1:	48 83 c4 20          	add    rsp,0x20
   380e5:	5b                   	pop    rbx
   380e6:	41 5c                	pop    r12
   380e8:	5d                   	pop    rbp
   380e9:	c3                   	ret    

00000000000380ea <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_max_size(std::allocator<objl::Vertex> const&)>:
   380ea:	55                   	push   rbp
   380eb:	48 89 e5             	mov    rbp,rsp
   380ee:	48 83 ec 30          	sub    rsp,0x30
   380f2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   380f6:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   380ff:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   38103:	31 c0                	xor    eax,eax
   38105:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   3810f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   38113:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38117:	48 89 c7             	mov    rdi,rax
   3811a:	e8 5a 06 00 00       	call   38779 <std::allocator_traits<std::allocator<objl::Vertex> >::max_size(std::allocator<objl::Vertex> const&)>
   3811f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   38123:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   38127:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   3812b:	48 89 d6             	mov    rsi,rdx
   3812e:	48 89 c7             	mov    rdi,rax
   38131:	e8 bf cc fe ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   38136:	48 8b 00             	mov    rax,QWORD PTR [rax]
   38139:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3813d:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   38146:	74 05                	je     3814d <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_max_size(std::allocator<objl::Vertex> const&)+0x63>
   38148:	e8 63 c3 fc ff       	call   44b0 <__stack_chk_fail@plt>
   3814d:	c9                   	leave  
   3814e:	c3                   	ret    

000000000003814f <objl::Vertex* std::__relocate_a<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   3814f:	55                   	push   rbp
   38150:	48 89 e5             	mov    rbp,rsp
   38153:	41 54                	push   r12
   38155:	53                   	push   rbx
   38156:	48 83 ec 20          	sub    rsp,0x20
   3815a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3815e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38162:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38166:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   3816a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3816e:	48 89 c7             	mov    rdi,rax
   38171:	e8 27 ef ff ff       	call   3709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   38176:	49 89 c4             	mov    r12,rax
   38179:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3817d:	48 89 c7             	mov    rdi,rax
   38180:	e8 18 ef ff ff       	call   3709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   38185:	48 89 c3             	mov    rbx,rax
   38188:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3818c:	48 89 c7             	mov    rdi,rax
   3818f:	e8 09 ef ff ff       	call   3709d <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   38194:	48 89 c7             	mov    rdi,rax
   38197:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3819b:	48 89 c1             	mov    rcx,rax
   3819e:	4c 89 e2             	mov    rdx,r12
   381a1:	48 89 de             	mov    rsi,rbx
   381a4:	e8 ea 05 00 00       	call   38793 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   381a9:	48 83 c4 20          	add    rsp,0x20
   381ad:	5b                   	pop    rbx
   381ae:	41 5c                	pop    r12
   381b0:	5d                   	pop    rbp
   381b1:	c3                   	ret    

00000000000381b2 <bool __gnu_cxx::operator!=<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   381b2:	55                   	push   rbp
   381b3:	48 89 e5             	mov    rbp,rsp
   381b6:	53                   	push   rbx
   381b7:	48 83 ec 18          	sub    rsp,0x18
   381bb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   381bf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   381c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   381c7:	48 89 c7             	mov    rdi,rax
   381ca:	e8 4b db ff ff       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   381cf:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   381d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   381d6:	48 89 c7             	mov    rdi,rax
   381d9:	e8 3c db ff ff       	call   35d1a <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   381de:	48 8b 00             	mov    rax,QWORD PTR [rax]
   381e1:	48 39 c3             	cmp    rbx,rax
   381e4:	0f 95 c0             	setne  al
   381e7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   381eb:	c9                   	leave  
   381ec:	c3                   	ret    
   381ed:	90                   	nop

00000000000381ee <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator++()>:
   381ee:	55                   	push   rbp
   381ef:	48 89 e5             	mov    rbp,rsp
   381f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   381f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   381fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   381fd:	48 8d 50 20          	lea    rdx,[rax+0x20]
   38201:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38205:	48 89 10             	mov    QWORD PTR [rax],rdx
   38208:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3820c:	5d                   	pop    rbp
   3820d:	c3                   	ret    

000000000003820e <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator*() const>:
   3820e:	55                   	push   rbp
   3820f:	48 89 e5             	mov    rbp,rsp
   38212:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38216:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3821a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3821d:	5d                   	pop    rbp
   3821e:	c3                   	ret    

000000000003821f <void std::_Construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>:
   3821f:	55                   	push   rbp
   38220:	48 89 e5             	mov    rbp,rsp
   38223:	53                   	push   rbx
   38224:	48 83 ec 18          	sub    rsp,0x18
   38228:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3822c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38230:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38234:	48 89 c7             	mov    rdi,rax
   38237:	e8 dc e6 ff ff       	call   36918 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   3823c:	48 89 c3             	mov    rbx,rax
   3823f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38243:	48 89 c6             	mov    rsi,rax
   38246:	bf 20 00 00 00       	mov    edi,0x20
   3824b:	e8 47 c9 fe ff       	call   24b97 <operator new(unsigned long, void*)>
   38250:	48 89 c1             	mov    rcx,rax
   38253:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   38256:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   3825a:	48 89 01             	mov    QWORD PTR [rcx],rax
   3825d:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   38261:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   38265:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   38269:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   3826d:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   38271:	90                   	nop
   38272:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38276:	c9                   	leave  
   38277:	c3                   	ret    

0000000000038278 <objl::Vertex* std::__copy_move_a1<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   38278:	55                   	push   rbp
   38279:	48 89 e5             	mov    rbp,rsp
   3827c:	48 83 ec 20          	sub    rsp,0x20
   38280:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38284:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38288:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3828c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   38290:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38294:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38298:	48 89 ce             	mov    rsi,rcx
   3829b:	48 89 c7             	mov    rdi,rax
   3829e:	e8 61 05 00 00       	call   38804 <objl::Vertex* std::__copy_move_a2<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   382a3:	c9                   	leave  
   382a4:	c3                   	ret    

00000000000382a5 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_max_size(std::allocator<objl::Material> const&)>:
   382a5:	55                   	push   rbp
   382a6:	48 89 e5             	mov    rbp,rsp
   382a9:	48 83 ec 30          	sub    rsp,0x30
   382ad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   382b1:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   382ba:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   382be:	31 c0                	xor    eax,eax
   382c0:	48 b8 75 50 07 75 50 07 75 00 	movabs rax,0x75075075075075
   382ca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   382ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   382d2:	48 89 c7             	mov    rdi,rax
   382d5:	e8 57 05 00 00       	call   38831 <std::allocator_traits<std::allocator<objl::Material> >::max_size(std::allocator<objl::Material> const&)>
   382da:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   382de:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   382e2:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   382e6:	48 89 d6             	mov    rsi,rdx
   382e9:	48 89 c7             	mov    rdi,rax
   382ec:	e8 04 cb fe ff       	call   24df5 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   382f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   382f4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   382f8:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   38301:	74 05                	je     38308 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_max_size(std::allocator<objl::Material> const&)+0x63>
   38303:	e8 a8 c1 fc ff       	call   44b0 <__stack_chk_fail@plt>
   38308:	c9                   	leave  
   38309:	c3                   	ret    

000000000003830a <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator() const>:
   3830a:	55                   	push   rbp
   3830b:	48 89 e5             	mov    rbp,rsp
   3830e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38312:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38316:	5d                   	pop    rbp
   38317:	c3                   	ret    

0000000000038318 <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)>:
   38318:	55                   	push   rbp
   38319:	48 89 e5             	mov    rbp,rsp
   3831c:	48 83 ec 20          	sub    rsp,0x20
   38320:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38324:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38328:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3832c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38330:	48 89 c7             	mov    rdi,rax
   38333:	e8 14 05 00 00       	call   3884c <__gnu_cxx::new_allocator<objl::Material>::_M_max_size() const>
   38338:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   3833c:	0f 97 c0             	seta   al
   3833f:	84 c0                	test   al,al
   38341:	74 05                	je     38348 <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)+0x30>
   38343:	e8 c8 bd fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   38348:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3834c:	48 69 c0 18 01 00 00 	imul   rax,rax,0x118
   38353:	48 89 c7             	mov    rdi,rax
   38356:	e8 a5 c0 fc ff       	call   4400 <operator new(unsigned long)@plt>
   3835b:	90                   	nop
   3835c:	c9                   	leave  
   3835d:	c3                   	ret    

000000000003835e <objl::Material* std::__relocate_a<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   3835e:	55                   	push   rbp
   3835f:	48 89 e5             	mov    rbp,rsp
   38362:	41 54                	push   r12
   38364:	53                   	push   rbx
   38365:	48 83 ec 20          	sub    rsp,0x20
   38369:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3836d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38371:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38375:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   38379:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3837d:	48 89 c7             	mov    rdi,rax
   38380:	e8 db 04 00 00       	call   38860 <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>
   38385:	49 89 c4             	mov    r12,rax
   38388:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3838c:	48 89 c7             	mov    rdi,rax
   3838f:	e8 cc 04 00 00       	call   38860 <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>
   38394:	48 89 c3             	mov    rbx,rax
   38397:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3839b:	48 89 c7             	mov    rdi,rax
   3839e:	e8 bd 04 00 00       	call   38860 <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>
   383a3:	48 89 c7             	mov    rdi,rax
   383a6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   383aa:	48 89 c1             	mov    rcx,rax
   383ad:	4c 89 e2             	mov    rdx,r12
   383b0:	48 89 de             	mov    rsi,rbx
   383b3:	e8 b6 04 00 00       	call   3886e <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   383b8:	48 83 c4 20          	add    rsp,0x20
   383bc:	5b                   	pop    rbx
   383bd:	41 5c                	pop    r12
   383bf:	5d                   	pop    rbp
   383c0:	c3                   	ret    
   383c1:	90                   	nop

00000000000383c2 <__gnu_cxx::new_allocator<objl::Vertex>::_M_max_size() const>:
   383c2:	55                   	push   rbp
   383c3:	48 89 e5             	mov    rbp,rsp
   383c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   383ca:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   383d4:	5d                   	pop    rbp
   383d5:	c3                   	ret    

00000000000383d6 <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   383d6:	55                   	push   rbp
   383d7:	48 89 e5             	mov    rbp,rsp
   383da:	48 83 ec 30          	sub    rsp,0x30
   383de:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   383e2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   383e6:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   383ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   383ee:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   383f2:	48 c1 f8 05          	sar    rax,0x5
   383f6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   383fa:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   383ff:	74 1e                	je     3841f <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)+0x49>
   38401:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38405:	48 c1 e0 05          	shl    rax,0x5
   38409:	48 89 c2             	mov    rdx,rax
   3840c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   38410:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38414:	48 89 ce             	mov    rsi,rcx
   38417:	48 89 c7             	mov    rdi,rax
   3841a:	e8 b1 c2 fc ff       	call   46d0 <memmove@plt>
   3841f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38423:	48 c1 e0 05          	shl    rax,0x5
   38427:	48 89 c2             	mov    rdx,rax
   3842a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3842e:	48 01 d0             	add    rax,rdx
   38431:	c9                   	leave  
   38432:	c3                   	ret    

0000000000038433 <objl::Vertex& std::forward<objl::Vertex&>(std::remove_reference<objl::Vertex&>::type&)>:
   38433:	55                   	push   rbp
   38434:	48 89 e5             	mov    rbp,rsp
   38437:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3843b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3843f:	5d                   	pop    rbp
   38440:	c3                   	ret    

0000000000038441 <unsigned int* std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   38441:	55                   	push   rbp
   38442:	48 89 e5             	mov    rbp,rsp
   38445:	53                   	push   rbx
   38446:	48 83 ec 28          	sub    rsp,0x28
   3844a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3844e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38452:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38456:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3845a:	48 89 c7             	mov    rdi,rax
   3845d:	e8 cc d3 ff ff       	call   3582e <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38462:	48 89 c3             	mov    rbx,rax
   38465:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38469:	48 89 c7             	mov    rdi,rax
   3846c:	e8 bd d3 ff ff       	call   3582e <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38471:	48 89 c1             	mov    rcx,rax
   38474:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38478:	48 89 c2             	mov    rdx,rax
   3847b:	48 89 de             	mov    rsi,rbx
   3847e:	48 89 cf             	mov    rdi,rcx
   38481:	e8 5f 04 00 00       	call   388e5 <unsigned int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   38486:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3848a:	c9                   	leave  
   3848b:	c3                   	ret    

000000000003848c <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)>:
   3848c:	55                   	push   rbp
   3848d:	48 89 e5             	mov    rbp,rsp
   38490:	48 83 ec 30          	sub    rsp,0x30
   38494:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38498:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3849c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   384a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   384a4:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   384a8:	48 c1 f8 02          	sar    rax,0x2
   384ac:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   384b0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   384b5:	74 1f                	je     384d6 <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)+0x4a>
   384b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   384bb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   384c3:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   384c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   384cb:	48 89 ce             	mov    rsi,rcx
   384ce:	48 89 c7             	mov    rdi,rax
   384d1:	e8 fa c1 fc ff       	call   46d0 <memmove@plt>
   384d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   384da:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   384e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   384e6:	48 01 d0             	add    rax,rdx
   384e9:	c9                   	leave  
   384ea:	c3                   	ret    

00000000000384eb <std::allocator_traits<std::allocator<unsigned int> >::select_on_container_copy_construction(std::allocator<unsigned int> const&)>:
   384eb:	55                   	push   rbp
   384ec:	48 89 e5             	mov    rbp,rsp
   384ef:	48 83 ec 10          	sub    rsp,0x10
   384f3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   384f7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   384fb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   384ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38503:	48 89 d6             	mov    rsi,rdx
   38506:	48 89 c7             	mov    rdi,rax
   38509:	e8 f4 ef ff ff       	call   37502 <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   3850e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38512:	c9                   	leave  
   38513:	c3                   	ret    

0000000000038514 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_create_storage(unsigned long)>:
   38514:	55                   	push   rbp
   38515:	48 89 e5             	mov    rbp,rsp
   38518:	48 83 ec 10          	sub    rsp,0x10
   3851c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38520:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38524:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38528:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3852c:	48 89 d6             	mov    rsi,rdx
   3852f:	48 89 c7             	mov    rdi,rax
   38532:	e8 b5 14 ff ff       	call   299ec <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   38537:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3853b:	48 89 02             	mov    QWORD PTR [rdx],rax
   3853e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38542:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   38545:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38549:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3854d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38551:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   38554:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38558:	48 c1 e0 02          	shl    rax,0x2
   3855c:	48 01 c2             	add    rdx,rax
   3855f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38563:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   38567:	90                   	nop
   38568:	c9                   	leave  
   38569:	c3                   	ret    

000000000003856a <std::allocator_traits<std::allocator<objl::Mesh> >::max_size(std::allocator<objl::Mesh> const&)>:
   3856a:	55                   	push   rbp
   3856b:	48 89 e5             	mov    rbp,rsp
   3856e:	48 83 ec 10          	sub    rsp,0x10
   38572:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38576:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3857a:	48 89 c7             	mov    rdi,rax
   3857d:	e8 ce 03 00 00       	call   38950 <__gnu_cxx::new_allocator<objl::Mesh>::max_size() const>
   38582:	c9                   	leave  
   38583:	c3                   	ret    

0000000000038584 <__gnu_cxx::new_allocator<objl::Mesh>::_M_max_size() const>:
   38584:	55                   	push   rbp
   38585:	48 89 e5             	mov    rbp,rsp
   38588:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3858c:	48 b8 5b b0 05 5b b0 05 5b 00 	movabs rax,0x5b05b05b05b05b
   38596:	5d                   	pop    rbp
   38597:	c3                   	ret    

0000000000038598 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>:
   38598:	55                   	push   rbp
   38599:	48 89 e5             	mov    rbp,rsp
   3859c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   385a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   385a4:	5d                   	pop    rbp
   385a5:	c3                   	ret    

00000000000385a6 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   385a6:	55                   	push   rbp
   385a7:	48 89 e5             	mov    rbp,rsp
   385aa:	53                   	push   rbx
   385ab:	48 83 ec 38          	sub    rsp,0x38
   385af:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   385b3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   385b7:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   385bb:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   385bf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   385c3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   385c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   385cb:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   385cf:	74 42                	je     38613 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)+0x6d>
   385d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   385d5:	48 89 c7             	mov    rdi,rax
   385d8:	e8 68 f6 ff ff       	call   37c45 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   385dd:	48 89 c3             	mov    rbx,rax
   385e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   385e4:	48 89 c7             	mov    rdi,rax
   385e7:	e8 59 f6 ff ff       	call   37c45 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   385ec:	48 89 c1             	mov    rcx,rax
   385ef:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   385f3:	48 89 c2             	mov    rdx,rax
   385f6:	48 89 de             	mov    rsi,rbx
   385f9:	48 89 cf             	mov    rdi,rcx
   385fc:	e8 69 03 00 00       	call   3896a <void std::__relocate_object_a<objl::Mesh, objl::Mesh, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   38601:	48 81 45 d8 68 01 00 00 	add    QWORD PTR [rbp-0x28],0x168
   38609:	48 81 45 e8 68 01 00 00 	add    QWORD PTR [rbp-0x18],0x168
   38611:	eb b4                	jmp    385c7 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)+0x21>
   38613:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38617:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3861b:	c9                   	leave  
   3861c:	c3                   	ret    

000000000003861d <std::allocator_traits<std::allocator<objl::Vector3> >::max_size(std::allocator<objl::Vector3> const&)>:
   3861d:	55                   	push   rbp
   3861e:	48 89 e5             	mov    rbp,rsp
   38621:	48 83 ec 10          	sub    rsp,0x10
   38625:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38629:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3862d:	48 89 c7             	mov    rdi,rax
   38630:	e8 8d 03 00 00       	call   389c2 <__gnu_cxx::new_allocator<objl::Vector3>::max_size() const>
   38635:	c9                   	leave  
   38636:	c3                   	ret    
   38637:	90                   	nop

0000000000038638 <__gnu_cxx::new_allocator<objl::Vector3>::_M_max_size() const>:
   38638:	55                   	push   rbp
   38639:	48 89 e5             	mov    rbp,rsp
   3863c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38640:	48 b8 aa aa aa aa aa aa aa 0a 	movabs rax,0xaaaaaaaaaaaaaaa
   3864a:	5d                   	pop    rbp
   3864b:	c3                   	ret    

000000000003864c <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>:
   3864c:	55                   	push   rbp
   3864d:	48 89 e5             	mov    rbp,rsp
   38650:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38654:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38658:	5d                   	pop    rbp
   38659:	c3                   	ret    

000000000003865a <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   3865a:	55                   	push   rbp
   3865b:	48 89 e5             	mov    rbp,rsp
   3865e:	53                   	push   rbx
   3865f:	48 83 ec 38          	sub    rsp,0x38
   38663:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   38667:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   3866b:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   3866f:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   38673:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   38677:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3867b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3867f:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   38683:	74 3c                	je     386c1 <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)+0x67>
   38685:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38689:	48 89 c7             	mov    rdi,rax
   3868c:	e8 4b 03 00 00       	call   389dc <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>
   38691:	48 89 c3             	mov    rbx,rax
   38694:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38698:	48 89 c7             	mov    rdi,rax
   3869b:	e8 3c 03 00 00       	call   389dc <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>
   386a0:	48 89 c1             	mov    rcx,rax
   386a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   386a7:	48 89 c2             	mov    rdx,rax
   386aa:	48 89 de             	mov    rsi,rbx
   386ad:	48 89 cf             	mov    rdi,rcx
   386b0:	e8 35 03 00 00       	call   389ea <void std::__relocate_object_a<objl::Vector3, objl::Vector3, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   386b5:	48 83 45 d8 0c       	add    QWORD PTR [rbp-0x28],0xc
   386ba:	48 83 45 e8 0c       	add    QWORD PTR [rbp-0x18],0xc
   386bf:	eb ba                	jmp    3867b <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)+0x21>
   386c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   386c5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   386c9:	c9                   	leave  
   386ca:	c3                   	ret    

00000000000386cb <std::allocator_traits<std::allocator<objl::Vector2> >::max_size(std::allocator<objl::Vector2> const&)>:
   386cb:	55                   	push   rbp
   386cc:	48 89 e5             	mov    rbp,rsp
   386cf:	48 83 ec 10          	sub    rsp,0x10
   386d3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   386d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   386db:	48 89 c7             	mov    rdi,rax
   386de:	e8 5f 03 00 00       	call   38a42 <__gnu_cxx::new_allocator<objl::Vector2>::max_size() const>
   386e3:	c9                   	leave  
   386e4:	c3                   	ret    
   386e5:	90                   	nop

00000000000386e6 <__gnu_cxx::new_allocator<objl::Vector2>::_M_max_size() const>:
   386e6:	55                   	push   rbp
   386e7:	48 89 e5             	mov    rbp,rsp
   386ea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   386ee:	48 b8 ff ff ff ff ff ff ff 0f 	movabs rax,0xfffffffffffffff
   386f8:	5d                   	pop    rbp
   386f9:	c3                   	ret    

00000000000386fa <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>:
   386fa:	55                   	push   rbp
   386fb:	48 89 e5             	mov    rbp,rsp
   386fe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38702:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38706:	5d                   	pop    rbp
   38707:	c3                   	ret    

0000000000038708 <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   38708:	55                   	push   rbp
   38709:	48 89 e5             	mov    rbp,rsp
   3870c:	53                   	push   rbx
   3870d:	48 83 ec 38          	sub    rsp,0x38
   38711:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   38715:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   38719:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   3871d:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   38721:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   38725:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   38729:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3872d:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   38731:	74 3c                	je     3876f <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)+0x67>
   38733:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38737:	48 89 c7             	mov    rdi,rax
   3873a:	e8 1d 03 00 00       	call   38a5c <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>
   3873f:	48 89 c3             	mov    rbx,rax
   38742:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38746:	48 89 c7             	mov    rdi,rax
   38749:	e8 0e 03 00 00       	call   38a5c <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>
   3874e:	48 89 c1             	mov    rcx,rax
   38751:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   38755:	48 89 c2             	mov    rdx,rax
   38758:	48 89 de             	mov    rsi,rbx
   3875b:	48 89 cf             	mov    rdi,rcx
   3875e:	e8 07 03 00 00       	call   38a6a <void std::__relocate_object_a<objl::Vector2, objl::Vector2, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   38763:	48 83 45 d8 08       	add    QWORD PTR [rbp-0x28],0x8
   38768:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
   3876d:	eb ba                	jmp    38729 <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)+0x21>
   3876f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38773:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38777:	c9                   	leave  
   38778:	c3                   	ret    

0000000000038779 <std::allocator_traits<std::allocator<objl::Vertex> >::max_size(std::allocator<objl::Vertex> const&)>:
   38779:	55                   	push   rbp
   3877a:	48 89 e5             	mov    rbp,rsp
   3877d:	48 83 ec 10          	sub    rsp,0x10
   38781:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38785:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38789:	48 89 c7             	mov    rdi,rax
   3878c:	e8 31 03 00 00       	call   38ac2 <__gnu_cxx::new_allocator<objl::Vertex>::max_size() const>
   38791:	c9                   	leave  
   38792:	c3                   	ret    

0000000000038793 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   38793:	55                   	push   rbp
   38794:	48 89 e5             	mov    rbp,rsp
   38797:	53                   	push   rbx
   38798:	48 83 ec 38          	sub    rsp,0x38
   3879c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   387a0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   387a4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   387a8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   387ac:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   387b0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   387b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   387b8:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   387bc:	74 3c                	je     387fa <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)+0x67>
   387be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   387c2:	48 89 c7             	mov    rdi,rax
   387c5:	e8 2b f3 ff ff       	call   37af5 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   387ca:	48 89 c3             	mov    rbx,rax
   387cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   387d1:	48 89 c7             	mov    rdi,rax
   387d4:	e8 1c f3 ff ff       	call   37af5 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   387d9:	48 89 c1             	mov    rcx,rax
   387dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   387e0:	48 89 c2             	mov    rdx,rax
   387e3:	48 89 de             	mov    rsi,rbx
   387e6:	48 89 cf             	mov    rdi,rcx
   387e9:	e8 ee 02 00 00       	call   38adc <void std::__relocate_object_a<objl::Vertex, objl::Vertex, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   387ee:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
   387f3:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   387f8:	eb ba                	jmp    387b4 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)+0x21>
   387fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   387fe:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38802:	c9                   	leave  
   38803:	c3                   	ret    

0000000000038804 <objl::Vertex* std::__copy_move_a2<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   38804:	55                   	push   rbp
   38805:	48 89 e5             	mov    rbp,rsp
   38808:	48 83 ec 20          	sub    rsp,0x20
   3880c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38810:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38814:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38818:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3881c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38820:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38824:	48 89 ce             	mov    rsi,rcx
   38827:	48 89 c7             	mov    rdi,rax
   3882a:	e8 04 03 00 00       	call   38b33 <objl::Vertex* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   3882f:	c9                   	leave  
   38830:	c3                   	ret    

0000000000038831 <std::allocator_traits<std::allocator<objl::Material> >::max_size(std::allocator<objl::Material> const&)>:
   38831:	55                   	push   rbp
   38832:	48 89 e5             	mov    rbp,rsp
   38835:	48 83 ec 10          	sub    rsp,0x10
   38839:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3883d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38841:	48 89 c7             	mov    rdi,rax
   38844:	e8 47 03 00 00       	call   38b90 <__gnu_cxx::new_allocator<objl::Material>::max_size() const>
   38849:	c9                   	leave  
   3884a:	c3                   	ret    
   3884b:	90                   	nop

000000000003884c <__gnu_cxx::new_allocator<objl::Material>::_M_max_size() const>:
   3884c:	55                   	push   rbp
   3884d:	48 89 e5             	mov    rbp,rsp
   38850:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38854:	48 b8 75 50 07 75 50 07 75 00 	movabs rax,0x75075075075075
   3885e:	5d                   	pop    rbp
   3885f:	c3                   	ret    

0000000000038860 <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>:
   38860:	55                   	push   rbp
   38861:	48 89 e5             	mov    rbp,rsp
   38864:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38868:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3886c:	5d                   	pop    rbp
   3886d:	c3                   	ret    

000000000003886e <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   3886e:	55                   	push   rbp
   3886f:	48 89 e5             	mov    rbp,rsp
   38872:	53                   	push   rbx
   38873:	48 83 ec 38          	sub    rsp,0x38
   38877:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   3887b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   3887f:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   38883:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   38887:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3888b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3888f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38893:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   38897:	74 42                	je     388db <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)+0x6d>
   38899:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3889d:	48 89 c7             	mov    rdi,rax
   388a0:	e8 c9 f3 ff ff       	call   37c6e <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   388a5:	48 89 c3             	mov    rbx,rax
   388a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   388ac:	48 89 c7             	mov    rdi,rax
   388af:	e8 ba f3 ff ff       	call   37c6e <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   388b4:	48 89 c1             	mov    rcx,rax
   388b7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   388bb:	48 89 c2             	mov    rdx,rax
   388be:	48 89 de             	mov    rsi,rbx
   388c1:	48 89 cf             	mov    rdi,rcx
   388c4:	e8 e1 02 00 00       	call   38baa <void std::__relocate_object_a<objl::Material, objl::Material, std::allocator<objl::Material> >(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   388c9:	48 81 45 d8 18 01 00 00 	add    QWORD PTR [rbp-0x28],0x118
   388d1:	48 81 45 e8 18 01 00 00 	add    QWORD PTR [rbp-0x18],0x118
   388d9:	eb b4                	jmp    3888f <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)+0x21>
   388db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   388df:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   388e3:	c9                   	leave  
   388e4:	c3                   	ret    

00000000000388e5 <unsigned int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   388e5:	55                   	push   rbp
   388e6:	48 89 e5             	mov    rbp,rsp
   388e9:	41 54                	push   r12
   388eb:	53                   	push   rbx
   388ec:	48 83 ec 20          	sub    rsp,0x20
   388f0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   388f4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   388f8:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   388fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38900:	48 89 c7             	mov    rdi,rax
   38903:	e8 aa 31 ff ff       	call   2bab2 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   38908:	49 89 c4             	mov    r12,rax
   3890b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3890f:	48 89 c7             	mov    rdi,rax
   38912:	e8 5a e8 ff ff       	call   37171 <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38917:	48 89 c3             	mov    rbx,rax
   3891a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3891e:	48 89 c7             	mov    rdi,rax
   38921:	e8 4b e8 ff ff       	call   37171 <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38926:	4c 89 e2             	mov    rdx,r12
   38929:	48 89 de             	mov    rsi,rbx
   3892c:	48 89 c7             	mov    rdi,rax
   3892f:	e8 77 e8 ff ff       	call   371ab <unsigned int* std::__copy_move_a1<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>
   38934:	48 89 c2             	mov    rdx,rax
   38937:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   3893b:	48 89 d6             	mov    rsi,rdx
   3893e:	48 89 c7             	mov    rdi,rax
   38941:	e8 0c e9 ff ff       	call   37252 <unsigned int* std::__niter_wrap<unsigned int*>(unsigned int* const&, unsigned int*)>
   38946:	48 83 c4 20          	add    rsp,0x20
   3894a:	5b                   	pop    rbx
   3894b:	41 5c                	pop    r12
   3894d:	5d                   	pop    rbp
   3894e:	c3                   	ret    
   3894f:	90                   	nop

0000000000038950 <__gnu_cxx::new_allocator<objl::Mesh>::max_size() const>:
   38950:	55                   	push   rbp
   38951:	48 89 e5             	mov    rbp,rsp
   38954:	48 83 ec 10          	sub    rsp,0x10
   38958:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3895c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38960:	48 89 c7             	mov    rdi,rax
   38963:	e8 1c fc ff ff       	call   38584 <__gnu_cxx::new_allocator<objl::Mesh>::_M_max_size() const>
   38968:	c9                   	leave  
   38969:	c3                   	ret    

000000000003896a <void std::__relocate_object_a<objl::Mesh, objl::Mesh, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   3896a:	55                   	push   rbp
   3896b:	48 89 e5             	mov    rbp,rsp
   3896e:	48 83 ec 20          	sub    rsp,0x20
   38972:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38976:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3897a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3897e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38982:	48 89 c7             	mov    rdi,rax
   38985:	e8 77 02 00 00       	call   38c01 <std::remove_reference<objl::Mesh&>::type&& std::move<objl::Mesh&>(objl::Mesh&)>
   3898a:	48 89 c2             	mov    rdx,rax
   3898d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38991:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38995:	48 89 ce             	mov    rsi,rcx
   38998:	48 89 c7             	mov    rdi,rax
   3899b:	e8 6f 02 00 00       	call   38c0f <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh&&)>
   389a0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   389a4:	48 89 c7             	mov    rdi,rax
   389a7:	e8 99 f2 ff ff       	call   37c45 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   389ac:	48 89 c2             	mov    rdx,rax
   389af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   389b3:	48 89 d6             	mov    rsi,rdx
   389b6:	48 89 c7             	mov    rdi,rax
   389b9:	e8 25 da ff ff       	call   363e3 <void std::allocator_traits<std::allocator<objl::Mesh> >::destroy<objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*)>
   389be:	90                   	nop
   389bf:	c9                   	leave  
   389c0:	c3                   	ret    
   389c1:	90                   	nop

00000000000389c2 <__gnu_cxx::new_allocator<objl::Vector3>::max_size() const>:
   389c2:	55                   	push   rbp
   389c3:	48 89 e5             	mov    rbp,rsp
   389c6:	48 83 ec 10          	sub    rsp,0x10
   389ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   389ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   389d2:	48 89 c7             	mov    rdi,rax
   389d5:	e8 5e fc ff ff       	call   38638 <__gnu_cxx::new_allocator<objl::Vector3>::_M_max_size() const>
   389da:	c9                   	leave  
   389db:	c3                   	ret    

00000000000389dc <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>:
   389dc:	55                   	push   rbp
   389dd:	48 89 e5             	mov    rbp,rsp
   389e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   389e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   389e8:	5d                   	pop    rbp
   389e9:	c3                   	ret    

00000000000389ea <void std::__relocate_object_a<objl::Vector3, objl::Vector3, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   389ea:	55                   	push   rbp
   389eb:	48 89 e5             	mov    rbp,rsp
   389ee:	48 83 ec 20          	sub    rsp,0x20
   389f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   389f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   389fa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   389fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38a02:	48 89 c7             	mov    rdi,rax
   38a05:	e8 3e 02 00 00       	call   38c48 <std::remove_reference<objl::Vector3&>::type&& std::move<objl::Vector3&>(objl::Vector3&)>
   38a0a:	48 89 c2             	mov    rdx,rax
   38a0d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38a11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38a15:	48 89 ce             	mov    rsi,rcx
   38a18:	48 89 c7             	mov    rdi,rax
   38a1b:	e8 36 02 00 00       	call   38c56 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3&&)>
   38a20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38a24:	48 89 c7             	mov    rdi,rax
   38a27:	e8 b0 ff ff ff       	call   389dc <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>
   38a2c:	48 89 c2             	mov    rdx,rax
   38a2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38a33:	48 89 d6             	mov    rsi,rdx
   38a36:	48 89 c7             	mov    rdi,rax
   38a39:	e8 38 dc ff ff       	call   36676 <void std::allocator_traits<std::allocator<objl::Vector3> >::destroy<objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*)>
   38a3e:	90                   	nop
   38a3f:	c9                   	leave  
   38a40:	c3                   	ret    
   38a41:	90                   	nop

0000000000038a42 <__gnu_cxx::new_allocator<objl::Vector2>::max_size() const>:
   38a42:	55                   	push   rbp
   38a43:	48 89 e5             	mov    rbp,rsp
   38a46:	48 83 ec 10          	sub    rsp,0x10
   38a4a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38a4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38a52:	48 89 c7             	mov    rdi,rax
   38a55:	e8 8c fc ff ff       	call   386e6 <__gnu_cxx::new_allocator<objl::Vector2>::_M_max_size() const>
   38a5a:	c9                   	leave  
   38a5b:	c3                   	ret    

0000000000038a5c <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>:
   38a5c:	55                   	push   rbp
   38a5d:	48 89 e5             	mov    rbp,rsp
   38a60:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38a64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38a68:	5d                   	pop    rbp
   38a69:	c3                   	ret    

0000000000038a6a <void std::__relocate_object_a<objl::Vector2, objl::Vector2, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   38a6a:	55                   	push   rbp
   38a6b:	48 89 e5             	mov    rbp,rsp
   38a6e:	48 83 ec 20          	sub    rsp,0x20
   38a72:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38a76:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38a7a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38a7e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38a82:	48 89 c7             	mov    rdi,rax
   38a85:	e8 05 02 00 00       	call   38c8f <std::remove_reference<objl::Vector2&>::type&& std::move<objl::Vector2&>(objl::Vector2&)>
   38a8a:	48 89 c2             	mov    rdx,rax
   38a8d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38a91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38a95:	48 89 ce             	mov    rsi,rcx
   38a98:	48 89 c7             	mov    rdi,rax
   38a9b:	e8 fd 01 00 00       	call   38c9d <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2&&)>
   38aa0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38aa4:	48 89 c7             	mov    rdi,rax
   38aa7:	e8 b0 ff ff ff       	call   38a5c <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>
   38aac:	48 89 c2             	mov    rdx,rax
   38aaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38ab3:	48 89 d6             	mov    rsi,rdx
   38ab6:	48 89 c7             	mov    rdi,rax
   38ab9:	e8 34 de ff ff       	call   368f2 <void std::allocator_traits<std::allocator<objl::Vector2> >::destroy<objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*)>
   38abe:	90                   	nop
   38abf:	c9                   	leave  
   38ac0:	c3                   	ret    
   38ac1:	90                   	nop

0000000000038ac2 <__gnu_cxx::new_allocator<objl::Vertex>::max_size() const>:
   38ac2:	55                   	push   rbp
   38ac3:	48 89 e5             	mov    rbp,rsp
   38ac6:	48 83 ec 10          	sub    rsp,0x10
   38aca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38ace:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ad2:	48 89 c7             	mov    rdi,rax
   38ad5:	e8 e8 f8 ff ff       	call   383c2 <__gnu_cxx::new_allocator<objl::Vertex>::_M_max_size() const>
   38ada:	c9                   	leave  
   38adb:	c3                   	ret    

0000000000038adc <void std::__relocate_object_a<objl::Vertex, objl::Vertex, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   38adc:	55                   	push   rbp
   38add:	48 89 e5             	mov    rbp,rsp
   38ae0:	48 83 ec 20          	sub    rsp,0x20
   38ae4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38ae8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38aec:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38af0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38af4:	48 89 c7             	mov    rdi,rax
   38af7:	e8 da 01 00 00       	call   38cd6 <std::remove_reference<objl::Vertex&>::type&& std::move<objl::Vertex&>(objl::Vertex&)>
   38afc:	48 89 c2             	mov    rdx,rax
   38aff:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38b03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38b07:	48 89 ce             	mov    rsi,rcx
   38b0a:	48 89 c7             	mov    rdi,rax
   38b0d:	e8 d2 01 00 00       	call   38ce4 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex&&)>
   38b12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38b16:	48 89 c7             	mov    rdi,rax
   38b19:	e8 d7 ef ff ff       	call   37af5 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   38b1e:	48 89 c2             	mov    rdx,rax
   38b21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38b25:	48 89 d6             	mov    rsi,rdx
   38b28:	48 89 c7             	mov    rdi,rax
   38b2b:	e8 b0 df ff ff       	call   36ae0 <void std::allocator_traits<std::allocator<objl::Vertex> >::destroy<objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*)>
   38b30:	90                   	nop
   38b31:	c9                   	leave  
   38b32:	c3                   	ret    

0000000000038b33 <objl::Vertex* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   38b33:	55                   	push   rbp
   38b34:	48 89 e5             	mov    rbp,rsp
   38b37:	48 83 ec 30          	sub    rsp,0x30
   38b3b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38b3f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38b43:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38b47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38b4b:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   38b4f:	48 c1 f8 05          	sar    rax,0x5
   38b53:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   38b57:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   38b5c:	74 1e                	je     38b7c <objl::Vertex* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)+0x49>
   38b5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38b62:	48 c1 e0 05          	shl    rax,0x5
   38b66:	48 89 c2             	mov    rdx,rax
   38b69:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   38b6d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38b71:	48 89 ce             	mov    rsi,rcx
   38b74:	48 89 c7             	mov    rdi,rax
   38b77:	e8 54 bb fc ff       	call   46d0 <memmove@plt>
   38b7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38b80:	48 c1 e0 05          	shl    rax,0x5
   38b84:	48 89 c2             	mov    rdx,rax
   38b87:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38b8b:	48 01 d0             	add    rax,rdx
   38b8e:	c9                   	leave  
   38b8f:	c3                   	ret    

0000000000038b90 <__gnu_cxx::new_allocator<objl::Material>::max_size() const>:
   38b90:	55                   	push   rbp
   38b91:	48 89 e5             	mov    rbp,rsp
   38b94:	48 83 ec 10          	sub    rsp,0x10
   38b98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38b9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ba0:	48 89 c7             	mov    rdi,rax
   38ba3:	e8 a4 fc ff ff       	call   3884c <__gnu_cxx::new_allocator<objl::Material>::_M_max_size() const>
   38ba8:	c9                   	leave  
   38ba9:	c3                   	ret    

0000000000038baa <void std::__relocate_object_a<objl::Material, objl::Material, std::allocator<objl::Material> >(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   38baa:	55                   	push   rbp
   38bab:	48 89 e5             	mov    rbp,rsp
   38bae:	48 83 ec 20          	sub    rsp,0x20
   38bb2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38bb6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38bba:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38bbe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38bc2:	48 89 c7             	mov    rdi,rax
   38bc5:	e8 53 01 00 00       	call   38d1d <std::remove_reference<objl::Material&>::type&& std::move<objl::Material&>(objl::Material&)>
   38bca:	48 89 c2             	mov    rdx,rax
   38bcd:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38bd1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38bd5:	48 89 ce             	mov    rsi,rcx
   38bd8:	48 89 c7             	mov    rdi,rax
   38bdb:	e8 4b 01 00 00       	call   38d2b <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material>(std::allocator<objl::Material>&, objl::Material*, objl::Material&&)>
   38be0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38be4:	48 89 c7             	mov    rdi,rax
   38be7:	e8 82 f0 ff ff       	call   37c6e <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   38bec:	48 89 c2             	mov    rdx,rax
   38bef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38bf3:	48 89 d6             	mov    rsi,rdx
   38bf6:	48 89 c7             	mov    rdi,rax
   38bf9:	e8 30 e3 ff ff       	call   36f2e <void std::allocator_traits<std::allocator<objl::Material> >::destroy<objl::Material>(std::allocator<objl::Material>&, objl::Material*)>
   38bfe:	90                   	nop
   38bff:	c9                   	leave  
   38c00:	c3                   	ret    

0000000000038c01 <std::remove_reference<objl::Mesh&>::type&& std::move<objl::Mesh&>(objl::Mesh&)>:
   38c01:	55                   	push   rbp
   38c02:	48 89 e5             	mov    rbp,rsp
   38c05:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c0d:	5d                   	pop    rbp
   38c0e:	c3                   	ret    

0000000000038c0f <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh&&)>:
   38c0f:	55                   	push   rbp
   38c10:	48 89 e5             	mov    rbp,rsp
   38c13:	48 83 ec 20          	sub    rsp,0x20
   38c17:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c1b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38c1f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38c23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38c27:	48 89 c7             	mov    rdi,rax
   38c2a:	e8 35 01 00 00       	call   38d64 <objl::Mesh&& std::forward<objl::Mesh>(std::remove_reference<objl::Mesh>::type&)>
   38c2f:	48 89 c2             	mov    rdx,rax
   38c32:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38c36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c3a:	48 89 ce             	mov    rsi,rcx
   38c3d:	48 89 c7             	mov    rdi,rax
   38c40:	e8 9f 03 00 00       	call   38fe4 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh>(objl::Mesh*, objl::Mesh&&)>
   38c45:	90                   	nop
   38c46:	c9                   	leave  
   38c47:	c3                   	ret    

0000000000038c48 <std::remove_reference<objl::Vector3&>::type&& std::move<objl::Vector3&>(objl::Vector3&)>:
   38c48:	55                   	push   rbp
   38c49:	48 89 e5             	mov    rbp,rsp
   38c4c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c54:	5d                   	pop    rbp
   38c55:	c3                   	ret    

0000000000038c56 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3&&)>:
   38c56:	55                   	push   rbp
   38c57:	48 89 e5             	mov    rbp,rsp
   38c5a:	48 83 ec 20          	sub    rsp,0x20
   38c5e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c62:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38c66:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38c6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38c6e:	48 89 c7             	mov    rdi,rax
   38c71:	e8 b5 03 00 00       	call   3902b <objl::Vector3&& std::forward<objl::Vector3>(std::remove_reference<objl::Vector3>::type&)>
   38c76:	48 89 c2             	mov    rdx,rax
   38c79:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38c7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c81:	48 89 ce             	mov    rsi,rcx
   38c84:	48 89 c7             	mov    rdi,rax
   38c87:	e8 ae 03 00 00       	call   3903a <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3>(objl::Vector3*, objl::Vector3&&)>
   38c8c:	90                   	nop
   38c8d:	c9                   	leave  
   38c8e:	c3                   	ret    

0000000000038c8f <std::remove_reference<objl::Vector2&>::type&& std::move<objl::Vector2&>(objl::Vector2&)>:
   38c8f:	55                   	push   rbp
   38c90:	48 89 e5             	mov    rbp,rsp
   38c93:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c9b:	5d                   	pop    rbp
   38c9c:	c3                   	ret    

0000000000038c9d <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2&&)>:
   38c9d:	55                   	push   rbp
   38c9e:	48 89 e5             	mov    rbp,rsp
   38ca1:	48 83 ec 20          	sub    rsp,0x20
   38ca5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38ca9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38cad:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38cb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38cb5:	48 89 c7             	mov    rdi,rax
   38cb8:	e8 c5 03 00 00       	call   39082 <objl::Vector2&& std::forward<objl::Vector2>(std::remove_reference<objl::Vector2>::type&)>
   38cbd:	48 89 c2             	mov    rdx,rax
   38cc0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38cc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38cc8:	48 89 ce             	mov    rsi,rcx
   38ccb:	48 89 c7             	mov    rdi,rax
   38cce:	e8 bd 03 00 00       	call   39090 <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2>(objl::Vector2*, objl::Vector2&&)>
   38cd3:	90                   	nop
   38cd4:	c9                   	leave  
   38cd5:	c3                   	ret    

0000000000038cd6 <std::remove_reference<objl::Vertex&>::type&& std::move<objl::Vertex&>(objl::Vertex&)>:
   38cd6:	55                   	push   rbp
   38cd7:	48 89 e5             	mov    rbp,rsp
   38cda:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38cde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ce2:	5d                   	pop    rbp
   38ce3:	c3                   	ret    

0000000000038ce4 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex&&)>:
   38ce4:	55                   	push   rbp
   38ce5:	48 89 e5             	mov    rbp,rsp
   38ce8:	48 83 ec 20          	sub    rsp,0x20
   38cec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38cf0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38cf4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38cf8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38cfc:	48 89 c7             	mov    rdi,rax
   38cff:	e8 ce 03 00 00       	call   390d2 <objl::Vertex&& std::forward<objl::Vertex>(std::remove_reference<objl::Vertex>::type&)>
   38d04:	48 89 c2             	mov    rdx,rax
   38d07:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38d0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d0f:	48 89 ce             	mov    rsi,rcx
   38d12:	48 89 c7             	mov    rdi,rax
   38d15:	e8 c6 03 00 00       	call   390e0 <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex>(objl::Vertex*, objl::Vertex&&)>
   38d1a:	90                   	nop
   38d1b:	c9                   	leave  
   38d1c:	c3                   	ret    

0000000000038d1d <std::remove_reference<objl::Material&>::type&& std::move<objl::Material&>(objl::Material&)>:
   38d1d:	55                   	push   rbp
   38d1e:	48 89 e5             	mov    rbp,rsp
   38d21:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38d25:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d29:	5d                   	pop    rbp
   38d2a:	c3                   	ret    

0000000000038d2b <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material>(std::allocator<objl::Material>&, objl::Material*, objl::Material&&)>:
   38d2b:	55                   	push   rbp
   38d2c:	48 89 e5             	mov    rbp,rsp
   38d2f:	48 83 ec 20          	sub    rsp,0x20
   38d33:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38d37:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38d3b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38d3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38d43:	48 89 c7             	mov    rdi,rax
   38d46:	e8 f2 03 00 00       	call   3913d <objl::Material&& std::forward<objl::Material>(std::remove_reference<objl::Material>::type&)>
   38d4b:	48 89 c2             	mov    rdx,rax
   38d4e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38d52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d56:	48 89 ce             	mov    rsi,rcx
   38d59:	48 89 c7             	mov    rdi,rax
   38d5c:	e8 eb 03 00 00       	call   3914c <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material>(objl::Material*, objl::Material&&)>
   38d61:	90                   	nop
   38d62:	c9                   	leave  
   38d63:	c3                   	ret    

0000000000038d64 <objl::Mesh&& std::forward<objl::Mesh>(std::remove_reference<objl::Mesh>::type&)>:
   38d64:	55                   	push   rbp
   38d65:	48 89 e5             	mov    rbp,rsp
   38d68:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38d6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d70:	5d                   	pop    rbp
   38d71:	c3                   	ret    

0000000000038d72 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >&&)>:
   38d72:	55                   	push   rbp
   38d73:	48 89 e5             	mov    rbp,rsp
   38d76:	48 83 ec 10          	sub    rsp,0x10
   38d7a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38d7e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38d82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d86:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38d8a:	48 89 d6             	mov    rsi,rdx
   38d8d:	48 89 c7             	mov    rdi,rax
   38d90:	e8 ff 03 00 00       	call   39194 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&&)>
   38d95:	90                   	nop
   38d96:	c9                   	leave  
   38d97:	c3                   	ret    

0000000000038d98 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>:
   38d98:	55                   	push   rbp
   38d99:	48 89 e5             	mov    rbp,rsp
   38d9c:	48 83 ec 10          	sub    rsp,0x10
   38da0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38da4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38da8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38dac:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38db0:	48 89 d6             	mov    rsi,rdx
   38db3:	48 89 c7             	mov    rdi,rax
   38db6:	e8 b7 ff ff ff       	call   38d72 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >&&)>
   38dbb:	90                   	nop
   38dbc:	c9                   	leave  
   38dbd:	c3                   	ret    

0000000000038dbe <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::_Vector_base<unsigned int, std::allocator<unsigned int> >&&)>:
   38dbe:	55                   	push   rbp
   38dbf:	48 89 e5             	mov    rbp,rsp
   38dc2:	48 83 ec 10          	sub    rsp,0x10
   38dc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38dca:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38dce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38dd2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38dd6:	48 89 d6             	mov    rsi,rdx
   38dd9:	48 89 c7             	mov    rdi,rax
   38ddc:	e8 05 04 00 00       	call   391e6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&&)>
   38de1:	90                   	nop
   38de2:	c9                   	leave  
   38de3:	c3                   	ret    

0000000000038de4 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> >&&)>:
   38de4:	55                   	push   rbp
   38de5:	48 89 e5             	mov    rbp,rsp
   38de8:	48 83 ec 10          	sub    rsp,0x10
   38dec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38df0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38df4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38df8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38dfc:	48 89 d6             	mov    rsi,rdx
   38dff:	48 89 c7             	mov    rdi,rax
   38e02:	e8 b7 ff ff ff       	call   38dbe <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::_Vector_base<unsigned int, std::allocator<unsigned int> >&&)>
   38e07:	90                   	nop
   38e08:	c9                   	leave  
   38e09:	c3                   	ret    

0000000000038e0a <objl::Material::Material(objl::Material&&)>:
   38e0a:	55                   	push   rbp
   38e0b:	48 89 e5             	mov    rbp,rsp
   38e0e:	48 83 ec 10          	sub    rsp,0x10
   38e12:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38e16:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38e1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e1e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38e22:	48 89 d6             	mov    rsi,rdx
   38e25:	48 89 c7             	mov    rdi,rax
   38e28:	e8 13 b4 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38e2d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e31:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38e35:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   38e39:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   38e3d:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   38e40:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   38e43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e47:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38e4b:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   38e4f:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   38e53:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   38e56:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   38e59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e5d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38e61:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   38e65:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   38e69:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   38e6c:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   38e6f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38e73:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   38e78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e7c:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   38e81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38e85:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   38e8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e8e:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   38e93:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38e97:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   38e9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ea0:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   38ea5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38ea9:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   38eac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38eb0:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   38eb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38eb7:	48 83 c0 58          	add    rax,0x58
   38ebb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38ebf:	48 83 c2 58          	add    rdx,0x58
   38ec3:	48 89 d6             	mov    rsi,rdx
   38ec6:	48 89 c7             	mov    rdi,rax
   38ec9:	e8 72 b3 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38ece:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ed2:	48 83 c0 78          	add    rax,0x78
   38ed6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38eda:	48 83 c2 78          	add    rdx,0x78
   38ede:	48 89 d6             	mov    rsi,rdx
   38ee1:	48 89 c7             	mov    rdi,rax
   38ee4:	e8 57 b3 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38ee9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38eed:	48 05 98 00 00 00    	add    rax,0x98
   38ef3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38ef7:	48 81 c2 98 00 00 00 	add    rdx,0x98
   38efe:	48 89 d6             	mov    rsi,rdx
   38f01:	48 89 c7             	mov    rdi,rax
   38f04:	e8 37 b3 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38f09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f0d:	48 05 b8 00 00 00    	add    rax,0xb8
   38f13:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f17:	48 81 c2 b8 00 00 00 	add    rdx,0xb8
   38f1e:	48 89 d6             	mov    rsi,rdx
   38f21:	48 89 c7             	mov    rdi,rax
   38f24:	e8 17 b3 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38f29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f2d:	48 05 d8 00 00 00    	add    rax,0xd8
   38f33:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f37:	48 81 c2 d8 00 00 00 	add    rdx,0xd8
   38f3e:	48 89 d6             	mov    rsi,rdx
   38f41:	48 89 c7             	mov    rdi,rax
   38f44:	e8 f7 b2 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38f49:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f4d:	48 05 f8 00 00 00    	add    rax,0xf8
   38f53:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f57:	48 81 c2 f8 00 00 00 	add    rdx,0xf8
   38f5e:	48 89 d6             	mov    rsi,rdx
   38f61:	48 89 c7             	mov    rdi,rax
   38f64:	e8 d7 b2 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38f69:	90                   	nop
   38f6a:	c9                   	leave  
   38f6b:	c3                   	ret    

0000000000038f6c <objl::Mesh::Mesh(objl::Mesh&&)>:
   38f6c:	55                   	push   rbp
   38f6d:	48 89 e5             	mov    rbp,rsp
   38f70:	48 83 ec 10          	sub    rsp,0x10
   38f74:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38f78:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38f7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f80:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f84:	48 89 d6             	mov    rsi,rdx
   38f87:	48 89 c7             	mov    rdi,rax
   38f8a:	e8 b1 b2 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38f8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f93:	48 83 c0 20          	add    rax,0x20
   38f97:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f9b:	48 83 c2 20          	add    rdx,0x20
   38f9f:	48 89 d6             	mov    rsi,rdx
   38fa2:	48 89 c7             	mov    rdi,rax
   38fa5:	e8 ee fd ff ff       	call   38d98 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>
   38faa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38fae:	48 83 c0 38          	add    rax,0x38
   38fb2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38fb6:	48 83 c2 38          	add    rdx,0x38
   38fba:	48 89 d6             	mov    rsi,rdx
   38fbd:	48 89 c7             	mov    rdi,rax
   38fc0:	e8 1f fe ff ff       	call   38de4 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> >&&)>
   38fc5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38fc9:	48 83 c0 50          	add    rax,0x50
   38fcd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38fd1:	48 83 c2 50          	add    rdx,0x50
   38fd5:	48 89 d6             	mov    rsi,rdx
   38fd8:	48 89 c7             	mov    rdi,rax
   38fdb:	e8 2a fe ff ff       	call   38e0a <objl::Material::Material(objl::Material&&)>
   38fe0:	90                   	nop
   38fe1:	c9                   	leave  
   38fe2:	c3                   	ret    
   38fe3:	90                   	nop

0000000000038fe4 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh>(objl::Mesh*, objl::Mesh&&)>:
   38fe4:	55                   	push   rbp
   38fe5:	48 89 e5             	mov    rbp,rsp
   38fe8:	53                   	push   rbx
   38fe9:	48 83 ec 28          	sub    rsp,0x28
   38fed:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38ff1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38ff5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38ff9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38ffd:	48 89 c7             	mov    rdi,rax
   39000:	e8 5f fd ff ff       	call   38d64 <objl::Mesh&& std::forward<objl::Mesh>(std::remove_reference<objl::Mesh>::type&)>
   39005:	48 89 c3             	mov    rbx,rax
   39008:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3900c:	48 89 c6             	mov    rsi,rax
   3900f:	bf 68 01 00 00       	mov    edi,0x168
   39014:	e8 7e bb fe ff       	call   24b97 <operator new(unsigned long, void*)>
   39019:	48 89 de             	mov    rsi,rbx
   3901c:	48 89 c7             	mov    rdi,rax
   3901f:	e8 48 ff ff ff       	call   38f6c <objl::Mesh::Mesh(objl::Mesh&&)>
   39024:	90                   	nop
   39025:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   39029:	c9                   	leave  
   3902a:	c3                   	ret    

000000000003902b <objl::Vector3&& std::forward<objl::Vector3>(std::remove_reference<objl::Vector3>::type&)>:
   3902b:	55                   	push   rbp
   3902c:	48 89 e5             	mov    rbp,rsp
   3902f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39033:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39037:	5d                   	pop    rbp
   39038:	c3                   	ret    
   39039:	90                   	nop

000000000003903a <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3>(objl::Vector3*, objl::Vector3&&)>:
   3903a:	55                   	push   rbp
   3903b:	48 89 e5             	mov    rbp,rsp
   3903e:	53                   	push   rbx
   3903f:	48 83 ec 28          	sub    rsp,0x28
   39043:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   39047:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3904b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3904f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   39053:	48 89 c7             	mov    rdi,rax
   39056:	e8 d0 ff ff ff       	call   3902b <objl::Vector3&& std::forward<objl::Vector3>(std::remove_reference<objl::Vector3>::type&)>
   3905b:	48 89 c3             	mov    rbx,rax
   3905e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39062:	48 89 c6             	mov    rsi,rax
   39065:	bf 0c 00 00 00       	mov    edi,0xc
   3906a:	e8 28 bb fe ff       	call   24b97 <operator new(unsigned long, void*)>
   3906f:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   39072:	48 89 10             	mov    QWORD PTR [rax],rdx
   39075:	8b 53 08             	mov    edx,DWORD PTR [rbx+0x8]
   39078:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   3907b:	90                   	nop
   3907c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   39080:	c9                   	leave  
   39081:	c3                   	ret    

0000000000039082 <objl::Vector2&& std::forward<objl::Vector2>(std::remove_reference<objl::Vector2>::type&)>:
   39082:	55                   	push   rbp
   39083:	48 89 e5             	mov    rbp,rsp
   39086:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3908a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3908e:	5d                   	pop    rbp
   3908f:	c3                   	ret    

0000000000039090 <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2>(objl::Vector2*, objl::Vector2&&)>:
   39090:	55                   	push   rbp
   39091:	48 89 e5             	mov    rbp,rsp
   39094:	53                   	push   rbx
   39095:	48 83 ec 28          	sub    rsp,0x28
   39099:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3909d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   390a1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   390a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   390a9:	48 89 c7             	mov    rdi,rax
   390ac:	e8 d1 ff ff ff       	call   39082 <objl::Vector2&& std::forward<objl::Vector2>(std::remove_reference<objl::Vector2>::type&)>
   390b1:	48 89 c3             	mov    rbx,rax
   390b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   390b8:	48 89 c6             	mov    rsi,rax
   390bb:	bf 08 00 00 00       	mov    edi,0x8
   390c0:	e8 d2 ba fe ff       	call   24b97 <operator new(unsigned long, void*)>
   390c5:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   390c8:	48 89 10             	mov    QWORD PTR [rax],rdx
   390cb:	90                   	nop
   390cc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   390d0:	c9                   	leave  
   390d1:	c3                   	ret    

00000000000390d2 <objl::Vertex&& std::forward<objl::Vertex>(std::remove_reference<objl::Vertex>::type&)>:
   390d2:	55                   	push   rbp
   390d3:	48 89 e5             	mov    rbp,rsp
   390d6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   390da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   390de:	5d                   	pop    rbp
   390df:	c3                   	ret    

00000000000390e0 <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex>(objl::Vertex*, objl::Vertex&&)>:
   390e0:	55                   	push   rbp
   390e1:	48 89 e5             	mov    rbp,rsp
   390e4:	53                   	push   rbx
   390e5:	48 83 ec 28          	sub    rsp,0x28
   390e9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   390ed:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   390f1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   390f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   390f9:	48 89 c7             	mov    rdi,rax
   390fc:	e8 d1 ff ff ff       	call   390d2 <objl::Vertex&& std::forward<objl::Vertex>(std::remove_reference<objl::Vertex>::type&)>
   39101:	48 89 c3             	mov    rbx,rax
   39104:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39108:	48 89 c6             	mov    rsi,rax
   3910b:	bf 20 00 00 00       	mov    edi,0x20
   39110:	e8 82 ba fe ff       	call   24b97 <operator new(unsigned long, void*)>
   39115:	48 89 c1             	mov    rcx,rax
   39118:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   3911b:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   3911f:	48 89 01             	mov    QWORD PTR [rcx],rax
   39122:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   39126:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   3912a:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   3912e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   39132:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   39136:	90                   	nop
   39137:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3913b:	c9                   	leave  
   3913c:	c3                   	ret    

000000000003913d <objl::Material&& std::forward<objl::Material>(std::remove_reference<objl::Material>::type&)>:
   3913d:	55                   	push   rbp
   3913e:	48 89 e5             	mov    rbp,rsp
   39141:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39145:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39149:	5d                   	pop    rbp
   3914a:	c3                   	ret    
   3914b:	90                   	nop

000000000003914c <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material>(objl::Material*, objl::Material&&)>:
   3914c:	55                   	push   rbp
   3914d:	48 89 e5             	mov    rbp,rsp
   39150:	53                   	push   rbx
   39151:	48 83 ec 28          	sub    rsp,0x28
   39155:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   39159:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3915d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   39161:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   39165:	48 89 c7             	mov    rdi,rax
   39168:	e8 d0 ff ff ff       	call   3913d <objl::Material&& std::forward<objl::Material>(std::remove_reference<objl::Material>::type&)>
   3916d:	48 89 c3             	mov    rbx,rax
   39170:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39174:	48 89 c6             	mov    rsi,rax
   39177:	bf 18 01 00 00       	mov    edi,0x118
   3917c:	e8 16 ba fe ff       	call   24b97 <operator new(unsigned long, void*)>
   39181:	48 89 de             	mov    rsi,rbx
   39184:	48 89 c7             	mov    rdi,rax
   39187:	e8 7e fc ff ff       	call   38e0a <objl::Material::Material(objl::Material&&)>
   3918c:	90                   	nop
   3918d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   39191:	c9                   	leave  
   39192:	c3                   	ret    
   39193:	90                   	nop

0000000000039194 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&&)>:
   39194:	55                   	push   rbp
   39195:	48 89 e5             	mov    rbp,rsp
   39198:	53                   	push   rbx
   39199:	48 83 ec 18          	sub    rsp,0x18
   3919d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   391a1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   391a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   391a9:	48 89 c7             	mov    rdi,rax
   391ac:	e8 86 00 00 00       	call   39237 <std::remove_reference<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>::type&& std::move<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&)>
   391b1:	48 89 c2             	mov    rdx,rax
   391b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   391b8:	48 89 d6             	mov    rsi,rdx
   391bb:	48 89 c7             	mov    rdi,rax
   391be:	e8 a7 e2 ff ff       	call   3746a <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   391c3:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   391c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   391cb:	48 89 c7             	mov    rdi,rax
   391ce:	e8 64 00 00 00       	call   39237 <std::remove_reference<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>::type&& std::move<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&)>
   391d3:	48 89 c6             	mov    rsi,rax
   391d6:	48 89 df             	mov    rdi,rbx
   391d9:	e8 68 00 00 00       	call   39246 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&&)>
   391de:	90                   	nop
   391df:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   391e3:	c9                   	leave  
   391e4:	c3                   	ret    
   391e5:	90                   	nop

00000000000391e6 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&&)>:
   391e6:	55                   	push   rbp
   391e7:	48 89 e5             	mov    rbp,rsp
   391ea:	53                   	push   rbx
   391eb:	48 83 ec 18          	sub    rsp,0x18
   391ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   391f3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   391f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   391fb:	48 89 c7             	mov    rdi,rax
   391fe:	e8 ab 00 00 00       	call   392ae <std::remove_reference<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>::type&& std::move<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&)>
   39203:	48 89 c2             	mov    rdx,rax
   39206:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3920a:	48 89 d6             	mov    rsi,rdx
   3920d:	48 89 c7             	mov    rdi,rax
   39210:	e8 ed e2 ff ff       	call   37502 <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   39215:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   39219:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3921d:	48 89 c7             	mov    rdi,rax
   39220:	e8 89 00 00 00       	call   392ae <std::remove_reference<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>::type&& std::move<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&)>
   39225:	48 89 c6             	mov    rsi,rax
   39228:	48 89 df             	mov    rdi,rbx
   3922b:	e8 8c 00 00 00       	call   392bc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&&)>
   39230:	90                   	nop
   39231:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   39235:	c9                   	leave  
   39236:	c3                   	ret    

0000000000039237 <std::remove_reference<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>::type&& std::move<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&)>:
   39237:	55                   	push   rbp
   39238:	48 89 e5             	mov    rbp,rsp
   3923b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3923f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39243:	5d                   	pop    rbp
   39244:	c3                   	ret    
   39245:	90                   	nop

0000000000039246 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&&)>:
   39246:	55                   	push   rbp
   39247:	48 89 e5             	mov    rbp,rsp
   3924a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3924e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   39252:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39256:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   39259:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3925d:	48 89 10             	mov    QWORD PTR [rax],rdx
   39260:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39264:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   39268:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3926c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   39270:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39274:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   39278:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3927c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   39280:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39284:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   3928c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39290:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   39294:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39298:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3929c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   392a0:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   392a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   392a8:	48 89 10             	mov    QWORD PTR [rax],rdx
   392ab:	90                   	nop
   392ac:	5d                   	pop    rbp
   392ad:	c3                   	ret    

00000000000392ae <std::remove_reference<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>::type&& std::move<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&)>:
   392ae:	55                   	push   rbp
   392af:	48 89 e5             	mov    rbp,rsp
   392b2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   392b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   392ba:	5d                   	pop    rbp
   392bb:	c3                   	ret    

00000000000392bc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&&)>:
   392bc:	55                   	push   rbp
   392bd:	48 89 e5             	mov    rbp,rsp
   392c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   392c4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   392c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   392cc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   392cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   392d3:	48 89 10             	mov    QWORD PTR [rax],rdx
   392d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   392da:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   392de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   392e2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   392e6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   392ea:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   392ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   392f2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   392f6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   392fa:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   39302:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39306:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   3930a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3930e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   39312:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39316:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3931a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3931e:	48 89 10             	mov    QWORD PTR [rax],rdx
   39321:	90                   	nop
   39322:	5d                   	pop    rbp
   39323:	c3                   	ret    
   39324:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
   3932e:	66 90                	xchg   ax,ax

0000000000039330 <__libc_csu_init>:
   39330:	f3 0f 1e fa          	endbr64 
   39334:	41 57                	push   r15
   39336:	4c 8d 3d 1b 1a 01 00 	lea    r15,[rip+0x11a1b]        # 4ad58 <__frame_dummy_init_array_entry>
   3933d:	41 56                	push   r14
   3933f:	49 89 d6             	mov    r14,rdx
   39342:	41 55                	push   r13
   39344:	49 89 f5             	mov    r13,rsi
   39347:	41 54                	push   r12
   39349:	41 89 fc             	mov    r12d,edi
   3934c:	55                   	push   rbp
   3934d:	48 8d 2d 1c 1a 01 00 	lea    rbp,[rip+0x11a1c]        # 4ad70 <__do_global_dtors_aux_fini_array_entry>
   39354:	53                   	push   rbx
   39355:	4c 29 fd             	sub    rbp,r15
   39358:	48 83 ec 08          	sub    rsp,0x8
   3935c:	e8 9f ac fc ff       	call   4000 <_init>
   39361:	48 c1 fd 03          	sar    rbp,0x3
   39365:	74 1f                	je     39386 <__libc_csu_init+0x56>
   39367:	31 db                	xor    ebx,ebx
   39369:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   39370:	4c 89 f2             	mov    rdx,r14
   39373:	4c 89 ee             	mov    rsi,r13
   39376:	44 89 e7             	mov    edi,r12d
   39379:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
   3937d:	48 83 c3 01          	add    rbx,0x1
   39381:	48 39 dd             	cmp    rbp,rbx
   39384:	75 ea                	jne    39370 <__libc_csu_init+0x40>
   39386:	48 83 c4 08          	add    rsp,0x8
   3938a:	5b                   	pop    rbx
   3938b:	5d                   	pop    rbp
   3938c:	41 5c                	pop    r12
   3938e:	41 5d                	pop    r13
   39390:	41 5e                	pop    r14
   39392:	41 5f                	pop    r15
   39394:	c3                   	ret    
   39395:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000393a0 <__libc_csu_fini>:
   393a0:	f3 0f 1e fa          	endbr64 
   393a4:	c3                   	ret    

Disassembly of section .fini:

00000000000393a8 <_fini>:
   393a8:	f3 0f 1e fa          	endbr64 
   393ac:	48 83 ec 08          	sub    rsp,0x8
   393b0:	48 83 c4 08          	add    rsp,0x8
   393b4:	c3                   	ret    
