#include <Types.h>

extern "C" const uint32_t SIZEOF_CONTEXT();
extern "C" const uint32_t SIZEOF_RENDERER();
extern "C" bool ShouldClose(void* r);
extern "C" bool IsKeyPressed(void* r , int key);
extern "C" void StartRenderer(void* r);
extern "C" void StopRenderer(void* r);
extern "C" void CursorVisibility(void* r, bool a);
extern "C" void Show(void* r);
extern "C" void Hide(void* r);
extern "C" void Resize(void* r, uint x , uint y);
extern "C" void Close(void* r);
extern "C" void Open(void* r);
extern "C" void SetCursorPos(void* r , uint x, uint y);
extern "C" void* CreateRenderer(void* mem , RendererArgs* args );
extern "C" void DestroyRenderer(void* r);
extern "C" void* CreateContext(void* mem , void* r);
extern "C" void DestroyContext(void* mem);
extern "C" bool RenderReady(void* renderer);
extern "C" void BeginRender(void* r);
extern "C" void EndRender(void* r);
extern "C" Mesh RegisterMesh(void* r , void* verts , uint32_t vertSize , uint32_t* indecies , uint32_t indSize , bool shadowFlag);
extern "C" void UnRegisterMesh(void* r , Mesh m);
extern "C" void RegisterTexture(void* r , uint64_t address);
extern "C" void UnRegisterTexture(void* r , uint64_t address);
extern "C" CommonShaderParams& GetCommonRenderParam(void* r);
extern "C" void ReleaseCommonRenderParam(void* r);
extern "C" void SetLights(void* r , ClientLight* lights , uint lightCount);
extern "C" void Set2DTextRender(void* r , TextBox* comps, uint32_t p_size);
extern "C" void Set3DTextRender(void* r , Text3D* comps, uint32_t p_size);
extern "C" void SetColoredQuads(void* r , PackedAAQuad* p_AAquads, uint32_t p_size);
extern "C" void SetTexturedQuads(void* r , PackedTintedTexturedAAQuad* p_texturedAAquads, uint32_t p_size);
extern "C" void SetMeshes(void* r , Renderable* arr , uint16_t p_size);
extern "C" void DrawMeshes(void* r);
extern "C" void DrawText(void* r);
extern "C" void DrawQuads(void* r);
extern "C" void Finalize(void* r);
extern "C" void PollEvents(void* r);
extern "C" void InitTexture(Texture* texture);
extern "C" void FreeTexture(Texture* texture);
extern "C" void TextureStorage(Texture* texture , uint32_t type , uint32_t internalFormat , uint32_t mipLevels, uint32_t x,uint32_t y,uint32_t z);
extern "C" void TextureUpload(Texture* texture , uint32_t type , void* data , uint32_t dataFormat , uint32_t dataType , uint32_t mipLevel , uint32_t x,uint32_t y,uint32_t z);
extern "C" void GenerateMipMapChain(Texture* texture);
extern "C" uint64_t GetTextureAddress(Texture* texture);
extern "C" void SetTextureParamaters(Texture* texture , uint32_t pname[] , const int32_t params[] , uint32_t size);
extern "C" void SetTextureDeRefAddress( void* (*func)(void* res) );
extern "C" void SetPBRTextureDeRefAddress( void* (*func)(void* res) );
extern "C" void SetFontDeRefAddress( void* (*func)(void* res) );
extern "C" void SetMeshDeRefAddress( void* (*func)(void* res) );